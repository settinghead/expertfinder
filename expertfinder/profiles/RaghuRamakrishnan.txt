raghu ramakrishnan home page nbsp nbsp nbsp search nbsp nbsp nbsp nbsp computer science home page raghu nbsp nbsp search biography contact nbsp information students teaching research professional activities miscellaneous dept nbsp home page raghu ramakrishnan professor computer sciences research interests database systems data mining exploratory analysis privacy unstructured data management web-scale data integration collaboration yahoo research reach send first-chars-of-last-name yahoo-inc dot raghu ramakrishnan tech iit madras texas austin member database systems group computer sciences department wisconsin-madison co-founder data mining institute founded quiq company developed innovative collaborative customer support knowledge management solutions companies business objects compaq national instruments network appliances sun microsystems served chairman cto quiq acquired kanisa research area database systems focus data retrieval integration analysis mining collaboration researchers industry led coral project developed distributed coral deductive system contributed recursive query language extensions sql standard group developed scalable algorithms clustering decision-tree construction itemset counting investigate mining continuously evolving streaming data work query optimization found commercial database systems work extending sql deal queries sequences influenced design window functions sql great group students contributions proudest list ramakrishnan elected fellow association computing machinery acm received awards including david lucile packard foundation fellowship science engineering nsf presidential young investigator award faculty awards ibm microsoft xerox acm sigmod contributions award selected vilas associate wisconsin written widely-used text database management systems wcb mcgraw-hill edition gehrke list papers chair acm sigmod management data board trustees vldb endowment board directors acm sigkdd knowledge discovery data mining associate editor acm transactions database systems recently served editor-in-chief journal data mining knowledge discovery maintained dbworld mailing list creating nbsp computer sciences home feedback content questions send raghu wisc server technical accessibility issues lab wisc copyright copy board regents wisconsin system 
prof raghu ramakrishnan contact information nbsp nbsp nbsp search nbsp nbsp nbsp nbsp computer science home page raghu contact info nbsp nbsp search biography contact nbsp information students teaching research professional activities miscellaneous dept nbsp home page raghu ramakrishnan professor computer sciences research interests database systems data mining exploratory analysis privacy unstructured data management web-scale data integration collaboration yahoo research reach send first-chars-of-last-name yahoo-inc dot mailing address yahoo research mission college blvd santa clara usa nbsp computer sciences home feedback content questions send raghu wisc server technical accessibility issues lab wisc copyright copy board regents wisconsin system 
prof raghu ramakrishnan research nbsp nbsp nbsp search nbsp nbsp nbsp nbsp computer science home page raghu research nbsp nbsp search biography contact nbsp information students teaching research professional activities miscellaneous dept nbsp home page raghu ramakrishnan professor computer sciences research interests database systems data mining exploratory analysis privacy unstructured data management web-scale data integration collaboration yahoo research reach send first-chars-of-last-name yahoo-inc dot current research projects past projects scroll past current stuff funded research projects data mining goal-oriented privacy preservation newly funded nsf cybertrust project carried david dewitt jude shavlik larry hanrahan chief epidemiologist state wisconsin amy trentham-dietz population health sciences sophisticated data analysis mining techniques tools understanding complex datasets increasing number application domains including bioinformatics health care e-commerce fraud detection network attacks homeland security increasing techniques created heightened awareness potential compromising privacy challenge controlling data access accordance privacy policies enabling analysis emerged central ubiquitous problem meet challenge traditional access-control strategies analysis mining techniques potentially applied published data infer data intended private investigating trade-off privacy security guarantees utility published data specific analysis tasks call goal-oriented privacy preservation edam exploratory data analysis monitoring project collaborative effort computer scientists environmental chemists carleton college uw-madison supported nsf medium itr grant goal develop data mining techniques advancing state art analyzing atmospheric aerosol datasets great understand sources dynamics compositions atmospheric aerosols traditional approach particle measurement collection bulk samples particulates filters adequate studying particle dynamics real-time correlations led development generation real-time instruments provide continuous semi-continuous streams data aerosol properties instruments added significant level complexity atmospheric aerosol data dramatically increased amounts data collected managed analyzed edam project investigating techniques automatically labeling mass spectra kinds aerosol mass spectrometers analyzing exploring rich spatiotemporal information collected multiple geographically distributed instruments specific problems arise context atmospheric aerosols interested addressing fundamental challenges data mining monitoring support multi-step analyses data analysis tasks involve steps analysis steps literature topic addresses algorithms step constructing decision tree identifying clusters investigating ways compositionally optimize provide life-cycle support multi-step analyses terms optimization focus developing cost-based strategies analogous database query optimization broad class compositionally multi-step analyses underlying objective enable large number potential analyses differing carefully selected parameterized choices develop system automatically days condor-style environment evaluate analyses bring interesting instances attention analyst hope minimize human burden iterative process data exploration interested techniques maintaining detailed provenance information data including instrument readings source data results intermediate analysis steps reasoning information data validation exploratory search interesting subsets data exploring stylized generate-and-test paradigm identifying interesting subsets data call subset mining key idea dimensional hierarchies originally exploited multidimensional exploratory interfaces olap offer natural class datasubsets meaningful interpretable candidates exploration subsets quantitative metrics reflect broad range analysis summarization techniques subset loan application dataset summarized number degree racial bias reflected data viewed training set classifier resulting data cube offers powerful data exploration interface area worked recent years currency-aware replication cicada consistency currency-aware data access project conducted jointly phil bernstein paul larson microsoft research increasingly applications cached versions data data stored dbms familiar ebay webpages show slightly out-of-date prices items bid applications knowledge acceptable data current order improve performance making copies dbms forced responsibility maintaining caches leading complex error-prone application code vision extend dbms support cached copies allowing applications made simpler sacrificing efficiency gains copies main idea applications copy piece data table row outdated copy allowed part sql statement dbms exploit information copies improve performance long guarantees application currency requirements met challenges addressed include query optimization evaluation presence cached copies workload-aware cache maintenance concurrency control serializability theory transactions stale data research topic increasingly active intersection text relational data management managing text interest area began work quiq developed system online communities customer support key challenge organizing question answer threads efficiently supporting queries involving combination structured keyword criteria frequently updated corpus raghu ramakrishnan andrew baptist vuk ercegovac matt hanselman navin kabra amit marathe uri shaft mass collaboration case study international database engineering applications symposium ideas coimbra portugal navin kabra raghu ramakrishnan vuk ercegovac quiq engine hybrid irdb system wisconsin-madison technical report trraghu ramakrishnan mass collaboration data mining keynote talk kdd recent work included benchmark text relational database systems vuk ercegovac david dewitt raghu ramakrishnan texture benchmark measuring performance text queries relational dbms vldb conference mention joint work avatar group ibm almaden olap queries imprecise data obtained data mining text douglas burdick prasad deshpande jayram raghu ramakrishnan shivakumar vaithyanathan olap uncertain imprecise data vldb anhai doan uiuc joined forces project addresses extraction management community information management cim driving application stay tuned initial results dbworld exciting spin-offs project past research projects interested data modeling database design data analysis management worked extensively deductive databases data mining olap database query optimization retrieval repositories text images sequence data visual data exploration database integration pointers earlier projects listed seq sequences querying ordered relations seq project propose sorted relations support broad range sequence queries showed sql standard relational query language views relations unordered collections rows extended express queries window function extension ansi iso sql standard proposal closely query optimization ideas developed one-pass stream-access evaluation anticipated window-based optimizations extensive literature processing data-streams decade regrettably stopped short investigating streaming data continuous query processing interesting result probabilistic optimization framework top-k queries representative papers listed praveen seshadri miron livny raghu ramakrishnan sequence query processing acm sigmod conference praveen seshadri miron livny raghu ramakrishnan design implementation sequence database system vldb conference raghu ramakrishnan donko donjerkovic arvind ranganathan kevin beyer muralidhar krishnaprasad srql sorted relational query language international conference scientific statistical database systems ssdbm donko donjerkovic raghu ramakrishnan probabilistic optimization top queries vldb conference demon mining evolving streaming data earliest work mining data streams demon project follow-on seq project developed algorithms finding clusters multidimensional data algorithms constructing decision trees optimized multiple passes algorithms capable operating continuous data streams part robust framework incrementally mining evolving data measuring proposed icde paper won student paper award issues actively researched continue hot research topics uw-madison warf division patented algorithms including birch scalable clustering cited database past decade recent study rahm thor boat scalable decision tree construction survey paper good starting point venkatesh ganti johannes gehrke raghu ramakrishnan mining data streams block evolution sigkdd explorations january representative papers 
prof raghu ramakrishnan students nbsp nbsp nbsp search nbsp nbsp nbsp nbsp computer science home page raghu students nbsp nbsp search biography contact nbsp information students teaching research professional activities miscellaneous dept nbsp home page raghu ramakrishnan professor computer sciences research interests database systems data mining exploratory analysis privacy unstructured data management web-scale data integration collaboration yahoo research reach send first-chars-of-last-name yahoo-inc dot teaching-related activities text authored johannes gehrke database management systems edition software developed educational minibase developed collaboration people building david dewitt minirel system coral text database management systems published wcb mcgraw-hill aimed courses database systems undergraduate graduate levels minibase relational dbms developed conjunction text coral system courses deal logic databases schools courses taught recently database management systems design implementation topics database management systems data models languages nbsp computer sciences home feedback content questions send raghu wisc server technical accessibility issues lab wisc copyright copy board regents wisconsin system 
listed tian zhang raghu ramakrishnan miron livny birch efficient data clustering method large databases acm sigmod conference venkatesh ganti johannes gehrke raghu ramakrishnan demon--data evolution monitoring ieee transactions knowledge discovery data mining full version paper icde won student paper award venkatesh ganti johannes gehrke raghu ramakrishnan wei-yin loh framework measuring data characteristics journal computer system sciences full version paper pods venkatesh ganti johannes gehrke raghu ramakrishnan wei-yin loh boat optimistic decision tree construction acm sigmod conference venkatesh ganti johannes gehrke raghu ramakrishnan cactus--clustering categorical data summaries acm sigkdd conference coral deductive databases coral project deductive databases contributed number central algorithms theoretical results including widely magic sets query transformation refinements incremental fixpoint computation deductive databases commercially successful ibm database system supports recursive queries sql standard includes support recursion results significant impact contexts magic sets idea greatly improved performance nested sql queries important decision-support applications significant component tpc-d benchmark commercial database systems reason ideas incremental fixpoint evaluation found extensive application view materialization supported major database vendors ideas proof-tree based explanation systems finding applicability maintaining provenance data-we built proof-tree based explanation system explain part widely distributed coral system today arguably complete proof-based explanation system queries supporting aggregation negation recursion survey paper good starting point raghu ramakrishnan divesh srivastava sudarshan efficient bottom-up evaluation logic programs state art computer systems software engineering representative papers listed raghu ramakrishnan divesh srivastava sudarshan praveen seshadri coral deductive system vldb journal catriel beeri raghu ramakrishnan power magic journal logic programming raghu ramakrishnan magic templates spellbinding approach logic programs journal logic programming tarun arora raghu ramakrishnan william roth praveen seshadri divesh srivastava explaining program execution deductive systems international conference deductive object-oriented databases sudarshan raghu ramakrishnan aggregation relevance deductive databases vldb conference piq query image content notable achievements project results high-dimensional indexing including widely cited paper kevin beyer jonathan goldstein raghu ramakrishnan uri shaft nearest neighbor meaningful international conference database theory icdt devise interactive visualization large datasets devise tool originally began investigation scalable interactive visualization scalability aspects basic framework remains promising resulting tool flexible fun play project supported work paper proposed iceberg cubes representative papers listed miron livny raghu ramakrishnan kevin beyer guangshun chen donko donjerkovic shilpa lawande jussi myllymaki kent wenger devise integrated querying visual exploration large datasets acm sigmod conference kevin beyer raghu ramakrishnan bottom-up computation sparse iceberg cubes acm sigmod conference cod semantic database integration investigated problem relational schema matching information theoretic techniques showed problems undecidable leading paper award edbt gestalts internet-scale database federation project quiq happened nbsp computer sciences home feedback content questions send raghu wisc server technical accessibility issues lab wisc copyright copy board regents wisconsin system 
prof raghu ramakrishnan students nbsp nbsp nbsp search nbsp nbsp nbsp nbsp computer science home page raghu students nbsp nbsp search biography contact nbsp information students teaching research professional activities miscellaneous dept nbsp home page raghu ramakrishnan professor computer sciences research interests database systems data mining exploratory analysis privacy unstructured data management web-scale data integration collaboration yahoo research reach send first-chars-of-last-name yahoo-inc dot advisees sudarshan august run-time optimizations bottom-up evaluation logic programs employment bell labs murray hill sudarsha research att srivastava august deductive object-oriented languages employment bell labs murray hill divesh research att dar august design evaluation transitive closure algorithms employment bell labs murray hill dar research att seshadri august sequence data management employment computer sciences department cornell praveen cornell albert december database integration employment computer sciences department portland state jalbert pdx zhang december clustering large datasets employment ibm santa teresa lab tian zhang vnet ibm gehrke august scalable decision tree construction employment computer sciences department cornell johannes cornell goldstein december high-dimensional indexing techniques employment microsoft research jongold microsoft ganti june mining large evolving datasets employment microsoft research donjerkovic august evaluating approximate queries employment desana systems shaft december content-based queries image databases employment quiq beyer precomputation techniques interactive data exploration employment ibm almaden research center guo august good-enough database caching employment microsoft students tarun arora bill roth thesis work raghu colin zheng huang research raghu moving google mong lee post-doc numerous students courses research raghu nonetheless fondly fuzzily remembered pointer thinking advice kung nbsp computer sciences home feedback content questions send raghu wisc server technical accessibility issues lab wisc copyright copy board regents wisconsin system 
prof raghu ramakrishnan nbsp nbsp nbsp search nbsp nbsp nbsp nbsp computer science home page raghu nbsp nbsp search biography contact nbsp information students teaching research professional activities miscellaneous dept nbsp home page raghu ramakrishnan professor computer sciences research interests database systems data mining exploratory analysis privacy unstructured data management web-scale data integration collaboration yahoo research reach send first-chars-of-last-name yahoo-inc dot michael ley point dynamically updated list papers listing selected papers project scroll cow book database management systems wcb mcgraw-hill edition gehrke nbsp computer sciences home feedback content questions send raghu wisc server technical accessibility issues lab wisc copyright copy board regents wisconsin system 
prof raghu ramakrishnan professional activities nbsp nbsp nbsp search nbsp nbsp nbsp nbsp computer science home page raghu professional activities nbsp nbsp search biography contact nbsp information students teaching research professional activities miscellaneous dept nbsp home page raghu ramakrishnan professor computer sciences research interests database systems data mining exploratory analysis privacy unstructured data management web-scale data integration collaboration yahoo research reach send first-chars-of-last-name yahoo-inc dot selected professional activities ramakrishnan chair acm sigmod management data board trustees vldb endowment board directors acm sigkdd knowledge discovery data mining associate editor acm transactions database systems recently served editor-in-chief journal data mining knowledge discovery maintained dbworld mailing list creating cto founder quiq company pioneered mass collaboration customer support serves regularly program committees conferences areas database management systems data mining web nbsp computer sciences home feedback content questions send raghu wisc server technical accessibility issues lab wisc copyright copy board regents wisconsin system 
prof raghu ramakrishnan professional activities nbsp nbsp nbsp search nbsp nbsp nbsp nbsp computer science home page raghu professional activities nbsp nbsp search biography contact nbsp information students teaching research professional activities miscellaneous dept nbsp home page raghu ramakrishnan professor computer sciences research interests database systems data mining exploratory analysis privacy unstructured data management web-scale data integration collaboration yahoo research reach send first-chars-of-last-name yahoo-inc dot miscellaneous pointers coverage quiq times article quiq collaborative customer support solution milwaukee journal sentinel article quiq funding interview daily cardinal quiq zdnet article mentions quiq joho article quiq cnet article quiq online communities times link cnet article smart money article internet databases mentions quiq milwaukee journal sentinel article wisconsin high tech companies mentions quiq talk slides powerpoint slides talk asa powerpoint slides talk sigmod poems ketan age spooky nights attic bug madison table-tennis club hotspot madison webmaster vivek ramakrishnan nbsp computer sciences home feedback content questions send raghu wisc server technical accessibility issues lab wisc copyright copy board regents wisconsin system 


quiq engine hybrid system navin kabra raghu ramakrishnan vuk ercegovac veritas department computer sciences wisconsin madison e-mail navin kabra veritas fraghu vukg wisc abstract applications involve rapidly changing textual data require traditional dbms capabilities current systems unsatisfactory paper describe hybrid ir-db system serves basis quiqconnect product collaborative customer support application present query paradigm system architecture performance results introduction internet-based customer support grown ubiquitous recent years costs traditional channels support quiqconnect application enables users post question find satisfactory answer knowledgebase post answers questions related answers automatically combined searchable knowledge units quiqconnect content combination structured unstructured data require query paradigm adequately bridges exact answers relational database systems ranked answers information retrieval systems updates applied immediately order meet application requirements data stored relational dbms query update performance adequate speed quality results developed quiq query engine qqe address problem main contributions arise approach data model query paradigm combine ideas approaches discussed section fast updates queries self-organizing differential index structure avoid in-place updates discussed section integration architecture leverages dbms concurrency recovery performance summarized section discussion related work section hybrid db-ir query paradigm quiqconnect model data object tuple tid set tag-name tag-type tag-value triples refer tags contrast relational model require fixed set tags collection focus selection queries single collection results ranked terms match query contrast xml systems concentrate simpler structural model focus text non-text attributes relevance-ranked retrieval contrast systems tags provide structure semantics describe types constraints supported description apply constraints text non-text fields query quiqconnect decomposed sets constraints match filter quality constraints query result essentially result match filter constraints anded quality constraints adjust relevance results intuitively match constraints approximate constraints user tuple result query satisfies match constraint relevance tuple determined match constraints matches relevance tied algorithm concreteness well-known tf-idf formula filter constraints exact constraints act clause sql query tuples satisfy filter constraints query result hand tuples satisfy filter constraints match match constraints query result preceeding discussion applicable tokens general explain qqe evaluates constraints non-text attributes integers dates typical approach handling types attributes system manage text data system data independent database engine performance limitations constraint engine prune results support range queries aim support express find inexpensive car years hybrid approach text non-text data combined single index basic idea map nontext data pseudo-keywords confused actual keywords text distinct non-text attribute database mapped pseudo keywords mapping scheme differ based datatype attribute mappings collisions system relies post-processing remove false positives result approach compute relevance constraints non-text fields common tf-idf framework relevance calculation quality constraints special case framework system architecture qqe consists dbms holds base data external index server maintains unified index inserts updates made directly dbms index server monitors updates indexes current updated bulkload mode data retreival consists querying index server primary data structure index server inverted index maps token appearing attribute tidlist entry tidlist tid count represents number times token appears attribute tid tuple entries sorted descending tid order youngest tuples entry counts token occurrences basic idea defer applying update operations persistent store index server updates handled steps database written special jobs table part transaction jobs table continually polled index server incorporated in-memory differential index structure referred dynamic index persistent on-disk index referred static index periodically refreshed absorb dynamic index details transparent data retrieval operations retrieval operations additional step checking results dynamic index adjust made static index approach disregard random updates optimize persistent index structures static refreshed offline accessed sequentially query processing time dominated processing constraints identify top results index optimizations dramatically improve performance periodic refreshes combined analysis mining query update traces make system self-tuning storage level extending current state art concentrated choice indexes related data statistics regularly refreshed sideeffect final benefit self-organizing index evolution flexibility format incorporated simply restarting server process version executable read format write format refresh concurrency requires short term latches protecting in-memory data-structures disk structures written recovery jobs table effectively redo log jobs timestamp newer timestamp persistent index fetched reapplied system start-up time performance section summarize results performance study qqe details performance study found summarize results studied performance scales query size scales close linearly increasing document size number documents scales super-linearly number query tokens increased offset significantly optimizations implemented studying updates measure throughput insert-only update-only mixed insert-update bulkload workloads number jobs increase average job size increases studying effect merging static dynamic indices queries vary time interval merging partitions versus workloads consisting queries insert-only update-only mix inserts updates details found finally designed comparative study dbms text extension dbms-te short commercial database issues addressed quiqconnect supports datatypes content stored filesystem referenced names stored relational tables datatypes converted native datatypes supported dbms-te queries qqe translated sql text extensions finally making measurements experiments insure state dbms-te corresponded qqe inserted tuple visible queries query experiments show qqe out-performing dbms-te order magnitude showed dbms-te performed bulkloads converting unoptimized structure optimized structure qqe out-performed dbms-te workloads composed straight inserts straight updates mix inserts updates related work section outlines work related qqe terms query paradigm managing dynamic corpus intended highlight approaches dimensions intended comprehensive types systems dbmss extended handle text systems implemented handle dynamic corpus systems defer updates combination performance application reasons commercial rdbmss extended keyword searches textual attributes sophisticated notion relevance simply apply external text-search engine per-field basis respect handling dynamic corpus rdbmss typically provide facilities administrator control update made visible queries database systems based relational model extended incorporate style queries hyspirit system combines datalog probabilistic scheme additionally moa integrated dbms query paradigm unclear performance compare qqe systems document multiple attributes attributes filter results regular relevance query evaluated qqe quality constraint additionally re-order results based non-text attributes terms managing dynamic corpus dynamic inverted index extensively studied systems defer applying key differences relative qqe propagated disk qqe propagates rewriting entire static index systems in-place propagation additionally qqe applies based fixed time interval systems driven events exceeding memory threshold finally document identifier space qqe shared rdbms requiring true update operation requiring remapping retrieving tuple propagated disk rewrite granularity write tidlist contrast partition publicly search engine framework lucene applies based memory threshold rewrite system differs propagating in-place similarly spider system propagates updates in-place queries pending updates gold mailer system propagates periodically unclear rewrite study considers 
degrees writing in-place versus rewriting finally work utilizing deferred updates systems specific text work discussed differential database file structures data warehouses accomodate structure highly optimized queries work proposes similarly deferred merged main stcuture multi-level merge algorithm conclusion conclusion qqe designed applications require flexibility intuitiveness text search combined structured metadata system architected dynamic environments significantly greater number queries change requests optimized fast query responses acknowledgements people quiq contributed qqe andrew baptist matt hanselman jim kupsch rajesh raman uri shaft barbar clifton douglis garcia-molina johnson kao mehrotra tellefsen walsh gold mailer proc icde brown callan croft fast incremental indexing full-text proc vldb chiueh huang efficient real-time index updates text retrieval systems trsuny stony brook mar cutting jakarta lucene project http jakarta apache lucene vries wilschut integration databases ifip dsconf fuhr olleke hyspirit probabilistic inference engine hypermedia retrieval large databases advances database technology edbt jagadish mumick silberschatz view maintenance issues chronicle data model proc acm pods kabra ramakrishnan ercegovac quiq engine hybrid system truniversity wisconsin madison oct knaus sch auble system architecture transaction concept spider information retrieval system data engineering bulletin severance lohman differential files application maintenance large databases acm tods sept tomasic garcia-molina shoens incremental updates inverted lists text document retrieval proc acm sigmod intl conf 
jfif photoshop bim bim bim bim bim bim lff bim bim bim bim jfif adobe aqa tde vfv gwgw aqaq deu vfv gwgw pqp hip qyv fpn ypm rik lxil bim adobe dtsef uvw hijxyzghijvwxyz ueuv gwf hxhx iyiy jzjz tqtj msz tas fkr qnx qon ezf brum cfkeu rkiq kel hzp tjn zzz zzm noi mex ktte umq ubi hvn ggvw lwll zwm hkx ibh wrki jzy ioiu bcl tvsoq fzeqor sfbt snig hzrv ghqo cov inx jlkw lyp ggx qkt gfcfm xnf lir uzu qes wmja ouu qkygs owo ojv bezx fyb luy mos dbf fxr jut xcb oye mpx xsk hmh dci vqa zqs tkspp jpw yjl ubx gcg inh iop ijw cvo pgso ech jzx kjt cjk yfid cnq pnla rrj gvv keq rdj top zlh wix iet nah zzt osrd imi osoz cqno xta hyo qap vec sjg sux irbote puu rjq ijxaao rzm khe oao bqak r-k gse ano bxq yjr ubu uuu -io aey zqu enzc orn qcpg kri lao kqo lsov ypuc kzpr lvf jyta tkz msp nc-o olg nlum grb evi cro dvs rffc cje pjo tzq vcr ymj m-lm mqn tui kfp pkl oqq bgf bge orp yebq juf pef pvk eje zol h-i vvv lfcwi ybvay nkg axk e-o bcm cjw dyy autv rrrdf phzfyy efb icmi ldx trr yiiu icci xlh urp xsp guucuu ttk mih hhj bxz yrk pscrm mvlj lpr dessd xhq lpr siia qpw yos inn jdtk saqw ehe prdd -dkrs gxl srzb rsc rdr igs c-z pihz zgg bya znn aee phv mlft ujd qay pxx dys xpz cqwsbk lvv sbb jpu gsstjb rgp hccp dqfiddd uai tafv nho bvr yhe rah dsq anp oapw obv amnj cgf gnq jcx fdr mrs fff dul uuv iont cqzwu djp eae sml zvk wqw lckvc bim adobe dtsef uvw hijxyzghijvwxyz ueuv gwf hxhx iyiy jzjz wel gsi cjt fduu qud mcp lvb cwu twgpa neel ieqoqgq gpt bwx ynf bjt spp cfv rzd okm mep qys hqsj wpgkb hvm fkn fwf bqtt jutudp vvs ziz cpr ghg sdr vwv olv oyy ueyj nkjs c-co fru xqw yniv cpq hat sdfa bvjssq pcm a-u koiuz yjq rsy wig hiz myou aco iqb lkm qzs vre jux dmc oiy keq mch gpfl hxn b-i btl gdr ifw eii mby wnw ppfcn ouw cmh fuw zji ynvz dss klj jqj cwr eey xve acl nxj ix-xb xwxw ujc oywix ukk fedt tae aez vcv rsc bww umg bwq jgb dpe vjjr rta ffss vft oou nbk xud uib htm uqz ijf ojeq jgu vnp xfep hbb zls lpj cxjrc xzm axg lir kgi hfjq jhe xfg -pg mag ejp hdb ztf dxfcu dhp whh hhb dla juts pbcz uzb oyba ieis ixdv rin dit vpf baa lya ssa yiz cxd g-ox jxo lgi dih apw ijt nbi tqc igg iggj nzi rjm krx kdbepr vav kty amr ptc tzygk tffu specr imt dgk hcsp ayj dzn uwz tue top wqb riu dnm sag rqa bhd tbh rxx xre uqg sme ths pcs bjq lhkd zhl dit rag ywk njz cbo dzn uwz tue top wqb riu dnm sag rqa bhd tbh rxx xre uqg sme ths pcs tzygk tffu specr imt dgk hcsp ayj kty amr ptc krx kdbepr vav nzi rjm apw ijt nbi tqc igg iggj lya ssa yiz cxd g-ox jxo lgi dih baa hhb dla juts pbcz uzb oyba ieis ixdv rin dit vpf hfjq jhe xfg -pg mag ejp hdb ztf dxfcu dhp whh zbz wgk qoes wif krn rmk jvqk yno hmv cmg rfy ime gsc lyf png ihdr gifxnetscape ntextcomment created webpainter totally hip software totallyhip plte fffff trns bkgd gifg cmppjcmp idatx dbp hxk dzj pfhll ssl cpz istc fba kqc ypw jva wvx msogmsoffice gif fffff netscape fcreated webpainter totally hip software totallyhip uhh geg umf kpto dtn ymb uhh iycby ocd mpw pms nre ago uhh frr pqh pxcb nwzq ukd hqf nkf eod qtd xzk nkt nmm vpd jib tno amko xqm hrru dol szf kif bqk lkbj sxv ucx xxw zoby geg ail wzw ayo l-yizv dyt fep xdp ndus gns ejb dzp fok miw ojc hpd tgn ayd tpd drg lda dob bnad enk woz ndao kux qwpi gow xrcm vys wyo mgh tpk ndao kux qwpi gow xrcm vys wyo lda dob bnad enk woz hpd tgn ayd tpd drg bsn -on gotp kgz zcmq gjq jkv glp vyyp mea byo ctq xdb wzm elw ysrm dfc naf -ew azw o-p ipc igm fsq oem ynw lve sgs vqu gvpd csa cos vjwzq dwa jyl pue mmjl kmwv vrk woj zre rfh tan jrw vcc oel mhc ppn xnha ldb mtjq lwu dpl pknx kll upi eqa cou xdb eys jnb urg mej msz tknd ndy owq xzm tmfbgj hwe mej msz tknd syznr mej msz tknd axe tcw idd pirs vhd dzy wnrt zeq izi jgg zkw zcg jeqf yzh ggi uzk sen jba mqg lsy uja ienh fya ioo sla xol ozy xwh lkexl ryy kcgl uvgq uat wmgy lfi ryp gwr hisbu -yv clv pfu acw rnz hje fnpa gws nmq dbq fjcy eylq lmjhkps mgjo ebdd bkt jtq bty fac ved los gdz bqs zisw ndp nux pse ose wsr pcn lxu netet ktc tli ermm nho sxgnxeaj zms tvn aiu vfsx odc dxq uzb phm fus wdu xvx ots uwf xgf qxc skg nyl mzc ljyj elfei teh poz epc tuu tqz ukz uji irv rsxx ljs dhw otsd tjm wga afz jhf umw qqdg zgm jfif tmso palette xxx cehih ounft ghe sfc uyb zea frf prn ylx ryt pli ppx talk outline approach customer support mass collaboration technical challenges framework infrastructure knowledge capture delivery role data mining confluence mining typical customer support typical service chain mass collaboration goals issues required capabilities roles credibility administration moderators experts editors enthusiasts groups privacy security entitlements departments gold customers workflow qos validation escalation technical challenges search indexing search indexing search indexing question text user attributes system policies ir-style ranked output search constraints 

show matches subject match important show approved answers non-editors give preference category laptop give preference recent solutions weight quality solution vector space model documents queries vectors term space vector distance query rank retrieved documents tf-idf document vector hybrid db-ir system hybrid db-ir system query built atomic constraints boolean operators atomic constraint term constraint-type terms drawn discrete domains types hierarchy scalar constraint-type exact approximate hybrid db-ir system applying atomic constraint set items returns tagged result set result inherits constraint-type result item tf-idf relevance score exact combining tagged item sets boolean operators yields tagged set result type exact inputs exact approximate result intersection input item sets input exact union result item tagged combined relevance hybrid db-ir system semantics boolean expressions constraints associative commutative evaluating exact constraints approximate constraints separately subsystems special case additionally uniform handling relevance contributions categories popularity metrics recency absolute relative relevance modifiers introduced greater flexibility concurrency recovery parallelism concurrency index updated real-time automatic partitioning two-step locking protocol result low overhead relies post-processing address anomalies recovery partitioning key leverages recovery guarantees dbms approach supports efficient refresh global statistics parallelism hash based partitioning notification role data mining data mining tasks lot insight gained analyzing data user problem user trust characteristic metrics high-quality content identify helpful content similar past queries summarize content answer question leveraging data mining leveraging data mining three-step approach off-line analysis gather insight periodic refresh indexes insight index improve search extended query framework unique twists conclusions confluences mmm click edit master text styles level level fourth level level click edit master title style wisconsin-madison click edit master subtitle style click edit master title style click edit master text styles level level fourth level level extracting actionable intelligence large datasets answers questions context application support center customer 
srql sorted relational query language raghu ramakrishnan donko donjerkovic arvind ranganathan kevin beyer muralidhar krishnaprasad department computer sciences wisconsin-madison abstract relation unordered collection records underlying order sequence stock prices users pose queries reflect order find weekly moving average sql support posing queries paper show rich class queries reflecting sort order naturally expressed efficiently executed simple extensions sql introduction ordered data sequences found wide range commercial statistical scientific applications applications require dbms support store manipulate query sequences efficiently support missing rdbmss relational model sets tuples data structure sql widely query language relational systems incapable answering common queries posed commercial scientific applications moving aggregates approach explored commercial systems support sequences adt users store sequence field tuple manipulate system-defined methods moving averages earlier work argued adt approach inadequate supporting bulk data types sequences users rich class queries approach limits ease queries formulated degree query ieee published proceedings ssdbm july capri italy personal material permitted permission reprint republish material advertising promotional purposes creating collective works resale redistribution servers lists reuse copyrighted component work works obtained ieee contact manager copyrights permissions ieee service center hoes lane box piscataway usa telephone intl optimization achieved proposed concept enhanced adt eadt handle bulk data types demonstrated benefits approach paper approach extending relational dbmss support sequence data based treating sequences sorted relations features query language exploit sort order extensions sql combination unordered logically ordered relations queried naturally permit efficient evaluation minimal extensions traditional relational optimizer evaluation engine comparison adt approach richer class queries naturally expressed efficiently evaluated comparison eadt approach queries involving mixture relations sequences easier express full machinery eadts implemented eadt approach offers generality support data types rich query capabilities added easily present extension sql illustrate ideas called sorted relational query language srql pronounced circle emphasize simple extensions sort order effectively exploited language optimization evaluation levels implemented srql part data transformation engine devise system supports powerful visualization features paper discuss aspects devise srql main contributions paper approach modelling sequences sorted relations adts commonly object-relational dbmss ordbmss eadts leads easier querying combination relations sequences enables integrated optimization evaluation algebra sequences extends relational algebra address sort order extension sql query sorted relations srql extend earlier results sequin significantly define srql semantics terms algebra implementation demonstrating efficient scalable query evaluation feasible srql rest paper organized section provide motivation work queries illustrate deficiencies sql querying sequences describe extension relational algebra sequence algebra section introduce srql language extension sql section performance results initial srql implementation presented section talk related work respect ordbmss tsql risql section section concludes paper motivation sequence data encountered wide variety scientific commercial applications experimental traces process evolution satellite observations time stock market prices salary histories great interest maintaining history user queries log made database analyzing trace data identify interesting patterns usage trends ability analyze large sequences increasingly important dbms vendors beginning add capabilities work reported presents attractive alternative main existing approaches based adts eadts simple queries illustrate usefulness sequence query support find leading weekly moving average dow jones industrial average table djia date close find trailing weekly moving average average past week date stock table stocks date symbol close order resulting sequences stock date result thought relation fields symbol date average sorted composite key symbol date day find ten cheapest stocks day find ten expensive stocks compute percent change stock find stocks top find dates stocks leading weekly average greater times trailing weekly average stocks table week find stock customer joe invested addition stocks table table trans customer symbol date shares records change shares customer symbol date queries illustrate rich class queries sequences wider variety aggregate operations included kinds date arithmetic calendar support added understanding leap years difference sequence week-days sequence integers focus focus sequentiality leads query patterns express optimize queries relational setting queries expressed sqlsome expressed sql extensions current products red brick risql queries involves nested sequences involves combining sorted unsorted tables supported appendix give srql versions queries approach relevant temporal database query languages additional work required address temporal issues calendars time intervals extensions relational algebra manipulate sorted relations extend relational algebra group-by nulls sql operators sequence shift shiftall windowaggregate extension rest defined relational algebra group-by nulls define semantics srql queries terms sequence algebra section algebra represents logical operators implementation free define efficient physical operators join consistency sql relation multiset tuples set tuples sql operator distinct remove duplicates support operators distinguish groups tuples relation partitioned necessarily fully sorted grouping attributes sequences sorted relations begin defining notion sequences essentially sorted relations simple sequence relation logically necessarily physically sorted key concatenation attributes call sequencing attributes composite sequence relation grouped set attributes called grouping attributes sequenced concatenation sequencing attributes partition defined identical group values grouping attributes tuple relation called group likewise sequencing attributes called sequence remainder paper term sequence refer simple composite sequence precise sequence relation set grouping attributes list sequencing attributes grouping sequencing attributes allowed empty sets induce ordering tuples tuple talk ordinal number tuple sequence group tuple group integers ordinal group assigned tuple group ordinal numbering dense convenience treat ordinal number tuple special integer attribute ordinal reader note attribute stored sequence algebra algebra operates sequences unsorted relations special case empty sets grouping sequencing attributes begin basic relational operators defined multisets algebra underlying sql extend work sequences select project cross-product union set-difference extend define output grouped sequenced simply defining grouping set sequencing lists empty result operators observe ordinal attribute input relations propagated result important point note select operator selection conditions ordinal attribute input contrast relational algebra treat join primitive operator refer ordinal attributes input tables join condition version cross-product propagate special attributes include left-outer join join guarantees tuples left input output left tuple match tuple matched null values tuple join operators srql extended relational operators defined empty grouping sets sequencing lists rest section present operators directly address sort order essential operator sequence creates sequence additional operators abbreviate ordinal attribute ord convenient introduce shift operators align tuples sequence based sequence order operator applying aggregate functions sequences additional operators defined terms core srql algebra consists extended relational operators operator creating sequence fundamental extension relational algebra consists sequence operator sequences input table changing 
grouping sequencing attributes effect appropriately changing ordinal tuple table grouping attributes sequencing attributes partitions based set partitions sorted based grouping null values grouping attribute considered equal sql sequencing attribute null tuple discarded describe tuple partition ordinal emphasize conceptual ordinal attribute selection operations preserved relational operators tuples sequence appears assigned ordinal tuples sequence assigned ordinal ordinal assigned partition called lasta distinct sequencing attributes assigned unique ordinal lasta ordinal range assigned tuple table result ord shifting sequence shiftall operator basic sequence operation align tuples sequence tuples relative fixed offset sequence pair tuple tuple sequence tuple sequence shiftall operator takes sequence relative ordinal joins tuple tuples group ordinal ordinal tuple ordinal found group shifting ordinal greater paired null values words grouping attributes sequencing attributes copy stands left outer join extend fixed relative ordinals fixed ordinal denote tuple expression outer join replaced results tuple paired tuples fixed ordinal position define syntax srql include constructs general interested matching tuple tuples ordinals extend set fixed relative ordinals copies sequence defined predicate form taking ord null null null null null null null null null null null null null null null null null null null null shift operator match tuple sequence offset sequence tuple case shift operator avoid cross-product effect caused duplicate sequence values tuple similar removes duplicate sequence values joining sequence grouping attributes sequencing attributes copies sequence distincta define predicate form extend fixed relative ordinals ord null null null null null null null null null note properties shiftall shift sequence grouping attributes sequencing attributes shift multiple offsets expressed composition multiple shift operators shift offsets join outer join shifted sequences shiftall multiple offsets composition multiple shiftall operators shiftall offsets join outer join shifted sequences shift shiftall interchanged shift simply adds attributes sequence shiftall adds attributes sequence duplicate tuples sequence distincta distincta aggregate operations applying aggregate function sequence aggregate result ordinal sequence ordinal section sequence called window created aggregate function applied window computing trailing weekly moving average daily stock prices window current day previous days ordinal sequence window collapse groups aggregating aggregate result simply appended tuple aggregating manner window aggregate function applied sequence windowaggregate operator window defined tuple sequence selection predicatea refer ordinal attribute current tuple select subset group result windowaggregate operator grouping set sequencing list input tuple input tuple input tuple output tuple aggregate operator min max sum count avg attribute grouping attributes running maxa note windowaggregate operator defined operators discuss value-based version windowaggregate allowed sequencing attributes max result notice sql query select max group equal distincta similar distinct operator defined chatziantoniou ross operator introduced define aggregation windows motivating problems defined natural treatment srql section srql restricts ensure efficient evaluation investigating ways efficiently incorporate additional functionality srql language srql language enhances sql support queries reflect sort order operators defined previous section define syntax semantics srql implementation srql allowed execute query manner long semantics preserved shift operators srql tables ordered clause match tuples sequence tuples relative fixed offset sequence shift function takes sequence tuple variable offset access sequencing attributes offset similarly shiftall function access attributes sequencing attributes select shiftall shift group sequence returns tuple matched values immediately tuple single occurs immediately tuple found null duplicate values occur immediately tuple evaluate queries shift shiftall offsets shift calls sequence gathered set offsets shiftall calls gathered set definition sequence replaced calls definition query equivalent expression srql special values shift shiftall fixed ordinals shiftall lastx values fourth ordinal types offsets allowed firsta lasta integer constant joining sequences illustrate power shifting query volcano eruption recent earthquake greater richter scale earthquake volcano earthquake time time magnitude select volcano earthquake sequence time time time shift time time shift time null magnitude result similar query earthquake greater richter scale nonconcurrent volcano eruption select volcano sequence time earthquake time time shift time time shift time null magnitude result expect type sequence join common created predicate operators express succinctly succeeds means join tuple tuple tuples duplicate sequence values minimum greater sequenced similarly precedes join tuple tuple maximum succeeds precedes equal predicates queries select time volcano earthquake sequence time time precedes time magnitude select time volcano sequence time earthquake time succeeds time magnitude aggregation moving aggregation operators calculating aggregate function average repeatedly subsections sequence called windows -day moving average expenses week produce list values starting average expenses mon tue average expenses tue wed aggregate calculated window window slides sequence moving aggregates categorized position-based value-based position based operators ignore actual distance sequencing values positional window includes records previous sequence values sequence current sequence valuebased moving aggregates account actual position calculating window window include records sequencing attribute falls range current valuea current normal aggregate functions max min sum count avg window aggregate function window aggregation clause offsets clause follow rules shift operator ends window fixed based windows values clause moving aggregation clause normal aggregation entire sequence default window defined tuples group illustrates difference classes moving aggregate operators num vol positional moving average query select num avg vol sequence num equivalent algebra expression results num avg vol similarly based moving average query select num avg vol values sequence num equivalent algebra expression results num avg vol record position input sequence position based moving average ahead step sequence record position calculate average based moving average ahead position domain sequencing attribute calculate average values positions records non-existent positions considered aggregation note defined aggregation sequence produce number tuples original sequence words sequence aggregates add attributes sequence entire original tuple select clause aggregates composite sequences group sequence combined create composite sequence thought set sequences relation sales product batch volume suppose find -batch moving average volumes sold product expressed srql select product batch avg volume sales group product sequence batch equivalent algebra expression results product batch volume avg volume bolts bolts bolts nails nails nails tacks tacks tacks tacks bolts successive batch tacks lost ground picture nails clear variants aggregation variant aggregate operations cumulative functions calculate running sums averages entire sequence cumulative functions cumulative keyword ahead aggregation function cumulative group function accumulates partition cumulative aggregates introduce number interesting syntactic short-cuts cumulative abbreviation traditional non-moving aggregates equivalent define rank cumulative count define percentile rank count define quartile percentile note 
duplicates sequence sorted relation duplicates handled position sequence treated set records operations hold presence duplicates window defined moving aggregates essentially window set values position count count number duplicates position sequence introduce clause clause extend clause deal sequences clause specifies selection condition applied record window aggregation position based aggregates selection condition clause selection condition clause records eliminated window neighboring records change window cover original set records selection applied window clause required illustrates difference sequence sales day volume profits suppose find -day moving average profits made sales volume greater significant rest omitted aggregation select day avg profits sales sequence day volume equivalent algebra expression day volume profits avg profits mon tue wed fri mon tue suppose replace clause query similar clause select day avg profits sales volume sequence day window aggregation result shown corresponds query days volume greater find -day moving average profits made day volume profits avg profits tue fri tue clause sql predicates clause evaluated aggregation complete applied table computed grouping sequencing aggregation steps unlike sql tuples group sequence clause replace clause similar clause select day avg profits sales sequence day volume window aggregation query tuples included moving average tuples volume removed aggregation corresponds query find -day moving average profits made report volume note sql aggregate functions moving clause clause day volume profits avg profits tue fri tue summary evaluation general srql query block select expr list table sequence list predicate group expr list sequence expr list predicate predicate order expr list order evaluation shift shiftall moved clause expressions clause evaluated including sequencing shifting sequence clause proceed sql continue cross-product tables clause clause evaluated group sequence clauses define sequence tuple aggregate window formed group sequence values clauses window aggregated clause evaluated performance srql section present results implementation srql ongoing effort guiding principle design srql language implementable minimal extensions standard relational dbms query optimization query evaluation levels results present illustrative srql capabilities performance evaluation provide comparison implementation systems risql aim illustrate proposed language extensions srql efficiently implemented cases cost query dominated cost scanning sorting relation optimizer catalog information information execution plan determine relation sorted index sequencing attribute relation sorted moving aggregates computed incrementally small cache tuples query window size select age avg salary employee sequence age initially tuples covering distinct values sequencing field scanned added cache essentially queue average tuples cache calculated output sequencing attribute window slid tuples read cache tuples cache thrown demonstrate moving aggregates efficiently computed caching technique timed execution number queries queries posed relation sales relevant fields batch integer price integer date date integer fields referenced queries queries scan select sales projection select price sales selection select sales price sort select sales order price aggregate select avg price sales multiple aggregate select avg price sum cost sales grouping select batch sum price sales group batch moving aggregate select batch sum price sales sequence batch multiple moving aggregates select batch sum price avg cost sales sequence batch composite sequence select batch date avg price sales group batch sequence date duplicate count select batch count cost sales sequence batch selection select batch sum price sales price sequence batch queries run tables sizes tuples tuples tuples allocated memory tuples in-memory sorting phase external sort selectivity predicate fields relation sales uniformly distributed duplicate values attribute results experiments shown table values seconds query scan projection selection sort aggregate multiple aggregate grouping moving aggregate mult moving aggregate composite sequence duplicate count selection results key observations made smaller output size projection makes cost scan reason grouping takes time sort cost moving aggregates cost sorting scanning overhead writing entire relation table stored sorted order sorting phase omitted case experiments calculating multiple moving aggregates query significant effect performance evaluated pass sequence composite sequences evaluated slightly higher cost grouping relation grouped moving aggregate group computed single pass relation implementation exhibits scalable performance large range data set sizes expect pushing selections strategy sequence queries numbers intended comprehensive performance evaluation srql demonstrate srql implemented efficient scalable manner show query cost comparable costs scanning sorting broad class sequence queries expect case expect behavior remaining srql operators presented results queries involving joins follow pattern detailed experimental results refer related work seq presented related work object-relational o-r systems handle sequences adt sequences stored objects database methods provided performing operations sequences approach attractive providing extensibility treatment sequences fashion optimal invocation method sequence adt typically executed independently methods queries requiring interaction methods optimized point experimentally demonstrated seq system seq extended adt approach o-r systems treating sequence type enhanced adt eadt query optimizer evaluator allowed seq optimizer interactions methods properties associativity commutativity sequence operators finding optimal plan srql based seq system query language sequin unlike seq deals arbitrary eadts srql considers relations sequences motivation design srql identify simple language extensions sql support queries mixtures sequences relations implemented minimal extensions conventional rdbmss red brick system risql red brick intelligent sql approach similar extending sql handle sequence data based limited information srql richer language approach optimization comprehensive hand risql large number statistical functions business applications presently lacking srql risql focus extending sql handle easily queries arising business databases srql make assumption domain application tsql extension sql handle temporal databases work sequences applicable temporal sequences directly addressed issues temporality conclusion presented approach handling sequence queries sorted relation sequence extending sql features exploit sort order shown express large class sequence queries naturally srql published description risql knowledge language based white paper red brick home pages discussions donovan schneider red brick demonstrated evaluate queries efficiently simple extensions standard relational query optimizer evaluation engine performance numbers presented paper based implementation srql devise system developed uw-madison chatziantoniou ross querying multiple features groups relational databases proceedings vldb conference mumbai india gruber sql instance sybex alameda illustra information technolgies broadway suite oakland illustra user guide june ioannidis ramakrishnan containment conjunctive queries relations sets tods sept livny ramakrishnan beyer chen donjerkovic lawande myllymaki wenger devise integrated querying visual exploration large datasets proceedings acm sigmod conference management data negri pelagatti sbattella formal semantics sql queries tods sept red brick systems decision-makers business data risql august white paper http redbrick rbs-g whitepapers risql html seshadri livny ramakrishnan sequence 
query processing proceedings acm sigmod conference management data pages seshadri livny ramakrishnan design implementation sequence database system proceedings vldb conference mumbai india snodgrass tsql language specification acm sigmod record march motivation queries expressed srql find leading weekly moving average dow jones industrial average table djia date close select date avg close djia sequence date find trailing weekly moving average average past week date stock table stocks date symbol close order resulting sequences stock date result thought relation fields symbol date average sorted composite key symbol date select symbol date avg close stocks group symbol sequence date order symbol date day find ten cheapest stocks select symbol date rank stocks group date sequence close rank day find ten expensive stocks select symbol date rank stocks group date sequence close rank compute percent change stock find stocks top create view change select symbol shiftall change shiftall change pct change select stocks year date group symbol sequence date ordinal select symbol percentile pct change sequence pct change pct find dates stocks leading weekly average greater times trailing weekly average stocks table select symbol date stocks group symbol sequence date avg close avg close week find stock customer joe invested addition stocks table table trans customer symbol date shares records change shares customer symbol date create view shares select customer symbol date cumulative sum shares shares trans group customer symbol sequence date create view invested select customer symbol date shares close shares sequence date stocks date precedes date select week date symbol invested customer joe group week date sequence null max 
texture benchmark measuring performance text queries relational dbms vuk ercegovac david dewitt raghu ramakrishnan wisconsin madison usa vuk dewitt raghu wisc abstract introduce benchmark called texture text relations measure relative strengths weaknesses combining text processing relational workload rdbms well-known trec benchmarks focus quality focus efficiency texture micro-benchmark query workloads considers central text support issues previous benchmarks queries relevance ranking compute answers richer mix text relational processing reflecting trend seamless integration developing benchmark address problem generating large text collections reflected performance characteristics seed collection essential controlled study specific data characteristics effects performance addition presenting benchmark performance numbers commercial dbmss present validate synthetic generator populating text fields introduction applications emerge require queries text relations supporting text data type texttype focal point relational database systems on-line store item catalog description discussion forum user search permission copy fee part material granted provided copies made distributed direct commercial advantage vldb copyright notice title date notice copying permission large data base endowment copy republish requires fee special permission endowment proceedings vldb conference trondheim norway relational attributes price product category brand texttypes description forum content combining classes attribute types user request information inexpensive systems graphic design viewed positively users items result sorted price ranked texttype query descriptions topic integrating texttype rdbms hasbeen widelystudied mostcommercial rdbms integrated texttypes application developer assess system stores text relational dbms perform paper propose benchmark called texture compares performance query workloads running relational database systems texture differs text benchmarks fundamental ways definition performance focuses system response time typical relational benchmarks benchmarks focus exclusively text trec focus quality results measure system performance quality important assume users sufficiently satisfied quality results complementary benchmarks evaluate quality assess performance previous text database benchmarks notably havealsoused responsetime astheir primarymetric contrast benchmarks texture includes broader class queries workloads combine text expressions relational predicates sorting score relevance computed text expression texture measures performance end-toend text processing task includes parsing evaluating queries possibly specialized based subsystems integrating results relational data contrast benchmarks set query asp mimic text processing tasks relations texture micro-benchmarkmodeled wisconsin benchmark relations query workloadsaredesignedto providea detailed analysisof systems differ respect performance systems compared respect response time obtained combining queries text relational attributes purpose selectivity types queries combined varied finally system performance compared data set scaled size texture framework consists database workload evaluation specification database consists relations texttype relational attributes queries constructed query templates database queries multiple systems compared evaluator response time database datagen module module real data produce synthetic data paper focus case datagen composed textgen relgen populate text relational attribute values due focus performance key step developing texture design validation synthetic data generator textgen textgen unique capable accurately scaling input seed text collection preserving important data characteristics benefits synthetic generator data availability user data scaling experiments experimental control larger publicly data sets collection large documents multiple languages skew results anonymity textgen parameterized statistical model parameters estimated seed corpus result parties evaluate texture benchmark behalf user access user text data querygen module creates number queries query templates structure query determined template values text expressions relational predicates drawn database goalis evaluate queries combine texttype expressions relational predicates establish baseline investigating data type independently baseline query templates referred text queriesandrelational queries queriesthat combine classes referred mixed queries composed combining text relational predicates relational operators considered mixed queries include selections projections joins querygen selects values plug queries selectivity chosen user finally texture specifies systems loaded query workload evaluated modes evaluation distinguished fetching results fetching result fetching top-k results mode significant practice arises web applications systems great degree flexibility optimization modes included completeness shed light systems work summary contributions paper propose in-depth benchmark mixed relational text query workloads utilizing text generator present evaluation commercial database systems benchmark develop validate synthetic text generator comparing actual query response times synthetically scaled dataset vis-avis real dataset paper organization describe texture data queries methodologyin sections texture compare commercial systems section describe greater detail generate document collections validate generation procedure section finally review related work present conclusions texture data texture database consists relations schema composed text relational attributes varying number tuples relations named tuples tuples variably sized relations test system performance data set scaled schema texture relation based schema wisconsin benchmark consists number relational attributes text attributes shown table relational attributes controlling selectivity query text attributes areused rankedretrieval projection attribute txt-short short stringssuch summary suitable projecting displaying query result set attribute txt-long searching ranking tuples information retrieval-style query meant projected search results retrieved tuple basis similar current web applications search typically returns set results succinctly user interested attribute values comment num-id primary key clustered num-u random unclustered index numnum- numtxt-short varchar textgen txt-long clob table schema relation tuples details result retrieve tuple including txt-long attribute storage txt-short in-lined rest tuple txt-long clob data generators texture relations populated datagen module composed relgen populating relational attributes textgen populating texttype attributes relgen implemented dbgen efficiently populates relation sampling distributions relational attribute textgen populate txt-short txt-long attributes txt-short randomly generated string length contrast txtlong searched populated documents sufficiently large collection documents populating larger relations purpose textgen model document collections parameterized real document collection model order generaten documents txt-long tuples texture relation refer synthetic collection documents synthetic construction section validate section similar performance measured evaluating query workloads synthetic real collection textgen generate texture database referred ap-db textgen model parameterized press newswire data volume trec data set collection documents text attributes largest attribute body parameterizing textgen model collection body documents consumes storage average words document relgen textgen populate relation tuples distributions relational attributes textgen model populate scaled-up relations relation tuples relation tuples roughly gigabytes storage process repeated texture database referred vlc -db difference ap-db large collection vlc data set parameterize textgen model vlc collection documents obtained crawl gov internet domain requires storage order compare system performance varying values txt-long attributes result vlc -db consists relations number tuples ap-db randomly selected documents vlc order parameterize textgen model texture queries query workload texture based wisconsin benchmark objective investigate effect selectivity join conditions text query complexity query evaluation plan resulting performance broad query templates text-only queries single-relation mixed queries multiple-relation mixed queries text-only workloads text-only query 
workload included query templates baseline query templates goals determine selectivity type text query affect performance purpose text-only query workloads parameters number words word selectivity type query expression connectives phrase practice text expressions varied list suggests systems support types query expansion proximity search richer phrases addition text expression tuple variable systems support syntax focus fundamental text expressions driven principle choosing simplest workloads exhibit greatest difference systems system performance converges simpler workloads texture choice queries expand results section text expressions differentiate systems studied text expressions consist single multi-word queries multi-word queries phrases form fuzzy boolean query rank documents queries give non-zero score document query word included queries require query words included types queries similar documents non-zero score contained query words contribute score word selectivity parameter determines documents match query word workload constructed grouping words selectivity ranges randomly sampling range ranges high medium low defined ranges obtained words ordered descending frequency high range words cumulative frequency word occurrences range words cumulative frequency accounts constitutes medium range remaining words fall low range word distributions typically skewed words high range words low range phrase workloads require multiple words contiguously document phrase parts single anchor word follow words anchor word selected selectivity range documents retrieved random sample selected order find follow words workload depends word distribution text workloads created independently relation queries text-only workload follow query template shown figure assumed score assigns score document respect query txt-query text expression table lists concrete text-only queries evaluation select score txt-short num-id txt-long txt-query score order score desc figure text-only query template ranking tuples txt-query mixed workload mixed workload consists queries combine text-only selection conditions relational predicates relational attributes objective mixed relational text query workloads compare query plans systems relational attribute chosen system unclustered index scan text attribute varies selectivity previous section note queries single relation optimizer decisions similar two-relation join relation involves relational attributes relation text attribute choice queries text selectivity plays role query optimization systems evaluated varying complexity text query errors estimates lead poorer query plans simplicity assume text queries relational predicates combined logical connective figure shows template texture mixed queries single relation select score txt-short num-id txt-long txt-query score relationalpredicate order score desc figure mixed text relational query template medmix lowmix multmix queries pick selectivity relational attributes index scan selectivity picked comparing multiple systems systems selectivity thresholds deciding index result selectivity index selected system result scan system differences query plans interest difference due solely selectivity threshold interest studying relational query optimizers focus text expression isolate effect requiring system index make decision systems threshold differently sized relations predicates adjusted texture relation texture includes mixed queries multiple relations basic classes mixed workloads join relations queries class figure apply text expression relational predicate natural query searching catalog items price description objective class queries test selectivity text query plays role query optimization select score txt-short num-id txt-long txt-query score relationalpredicate joinpredicate order score desc figure mixed text relational query template lowjoin medjoin queries queries class figure apply text expressionto relations ofsucha query searching catalog items description content discussion forums kinds join workloads texture relation foreign key constraint relation objective class queries highlight worst-case scenario systems reduce text related work highly selective join predicate benchmark methodology texture micro-benchmark varies fine-grained experimental settings order compare select score txt-short num-id txt-long txt-query score txt-long txt-query score joinpredicate order score desc figure mixed text relational query template low join queries type description lowtxt text low frequency words medtxt text medium frequency words andtxt text words combined medium frequency ortxt text words combined low frequency phrtxt text phrase words lowmix mix low frequency word medium rel selectivity numequality medmix mix medium frequency word low rel selectivity num-u range multmix mix andtxt ortxt rel selectivity lowjoin mix low frequency word high join selectivity medjoin mix medium frequency word low join selectivity low join mix low frequency word high rel selectivity join relations table examples text-only mixed queries systems specific aspects relevant queries involving texttype attributes experiment defined choice settings experiment parameters relation query template evaluation mode database query template sections query template queries generated query workload multiple queries order smooth variance number results inherent typically skewed word distributions evaluation mode refers query retrieves results result specifies top-k hint order fetch top-k results response measured database system total elapsed response time executing queries experiment database system loaded dataset indexes generated separate disk data indexes relational attributes statistics analyzed optimizer finally running query verify systems produce results selected experiments run times database system evaluated ensuring warm numbers result run experiment discarded reported result database system experiment average response time runs reported results actual values confidence relation medtxt lowtxt andtxt medmix lowmix table average number results relation query workload ap-db evaluation experiments handled client process running server machine interface jdbc version java operating system microsoft windows server hardware consists dual processor amd machine memory ide hitachi deskstar rpm hard drives database system access memory benchmark evaluation specification texture data query workloads evaluation methodology wide range experiments conducted commercial relational database systems provide integrated support texttype attributes objective experiments systems perform data set scaled issues relational optimizers face supporting texttype expression motivated web application sorting relational attributes investigate top-k optimizations results reported ap-db texture database results vlc database scaling experiments order investigate systems perform data set scaled queries listed table evaluated relations size scaled factor average number results query organized query workload data set table results text-only workloadsarefirst discussed mixed query results text workload results obtained text-only workloads show performance systems scales linearly relations scaled results lowtxt queries shown figure results andtxt queries shown figure scale linearly terms magnitude response time order magnitude higher legal reasons systems figure average total elapsed time lowtxt queries figure andtxt costs due added complexity results figure systems similarly differentiated phrase queries expected result set counts order magnitude higher ortxt queries shown similarly demonstrate linear scale terms relation size number words text expression results phrase queries shown figure phrase consists words anchor word low selectivity follow word chosen random subset documents anchor experiment number tuples average returned phrase held constant relations systems scale highly selective 
queries ordered similarly experiments conjecture difference performance systems versus system due architectural difference system manages text indexing relations systems utilize specialized text indexing canbe finely tuned text-only workloads mixed query workloads experiments mixed query workloads combine text workload section low range predicate num-u high equality predicate numselectivity relational predicates workloads single relation mixed workloads medmix lowmix multmix presented figure query workload includes join lowjoin objective experiment determine system optimizer information text index constructing evaluation plan case single relation referenced query section queries include joins results lowmix shown identical lowtxt results figure respect scaling magnitude text expression workloads systems process results text expression retrieve records filter match relational predicate medmix workload reverses situation low selectivity relational predicate high selectivity text expression results shown figure reason difference plans systems systems nested loops join combine relational text results system chooses scan results text expression outer access method low selectivity records selected text queries response time low conversely high selectivity text expressions probes text expression yield results system hand exchanges outer relations probing lower selectivity relational predicate obtaining faster response times system takes approach converting join input bitmap intersecting fetching records rid multmix workloaduses two-word text expression determine optimizers sensitive type text expression text expression andtxt queries higher selectivity relational predicate results shown identical andtxt result shown figure systems difference system systems decreases multiple relation workloads section considers join queries lowjoin workload joins relations relation relation relation join condition num-u values unique record matches record additionally low selectivity text expression high selectivity text expression average response time systems seconds system unable complete experiment reasonable amount time orders magnitude slower query evaluation plans uncover difference systems compared system systems select tuples low selectivity text expression relation joined selection high selectivity text expression system selects tuples text expressions join resultfigure scaling trends medmix query workload figure scaling trends medmix workload top-k optimization figure scaling trends lowtxt workload vlc -db ing tuples unnecessary tuples leading poorer performance sort order top-k optimization evaluation focused case sort order based score record respect text expression corresponds web application user relevant results relevance defined exclusively terms text expression alternatively results sorted terms relational attribute time case assumed results presented sort clause systems optimizations top-k queries perform results table show average elapsed time text type queries mixed queries sort order top-k optimization hint independently toggled results shown obtained relation score s-topk rel r-topk system medmix lowmix system medmix lowmix system medmix lowmix table average elapsed time seconds medmix lowmix workloads relation query results sorted score columns relational attribute columns results retrieved columns top-k optimization columns results table show systems performance affected choice sort order similarly added benefit top-k optimization similar sort order system indifferent sort order effect top-k clause differs depending sort score based sort top-k affect performance significantly systems relational sort combination top-k hint results significant degradation performance examine systems fare data set size scaled results medmix workload shown figure primary difference level performance degradation system results vlc data set results obtained vlc -db highlight differences basing txt-long attribute vlc collection collection shown figure response times considerably lower comparable lowtxt queries ap-db shown figure reason due larger vocabulary vlc average fewer results low frequency workload addition system shown perform poorly system case data set results experiments shown similar basic trends observed data set systems generally out-perform system system significant degradation performance top-k query workloads system dominate system vice-versa workloads note loading indexing loading indexing focus texture performance systems found vary widely large variability problematic scaling larger dataset sizes loading tuples requiring storage system required roughly minutes systems required order hours load dataset indexing times vlc data set summarized table bulk-mode indexing option system refer reader compare times times reported full vlc collection significant room improvement regard loading indexing texttype data vlc table index times reported minutes synthetic text generation objective texttype generator textgen populate txt-long attribute text generate text values documents tuples texture relation section focus growing collection documents increasing number documents preserving features collection affect performance document modeled bag words textgen collection cinput consisting documents input outputs scaled collection coutput documents design textgen understood terms features cinput maintained scaleup analytical models usedto maintain features scaling model parameters features pick characterize collection growth complete discussion focus features expect impact performance word distribution word distribution associates unique word collection number times appears collection vocabulary growth vocabulary growth refers observation number unique words grows documents added collection unique words document document length feature characterized severalanalyticalmodels asdiscussedin themodels texture features listed empirical model model maintaining based empirical distribution derived input collection model means approximating probability word selected inclusion collection word appears times chosen approximately xix times total number words cinput heaps law vocabulary growthg modeled empirical law heaps law states number unique words collection function number total words collection average unique total numbers words document modeled respective averages computed directly set documents input collection heaps law requires extra model parameters derived input collection derivation fitting evenly spaced points point number total words versus number unique words collection fit squares fit function matlab textgen constructs synthetic collection phases input collection preprocessed order derive model parameters models core algorithm populates documents words algorithm based drawing random independent samples independent sampling previousstep support query workloads synthetic collection post-processed order maintain word co-occurrence phases discussed detail sections text generator pre-processing pre-processing phase serves purposes model parameters derived discussed input words randomized meaning words input collection assigned words length consisting random letters randomization vocabulary collection words mapped words form collection randomization replaces word word prior randomization replaced randomized word length location collection appears reasons randomization two-fold ensure systems produce number results text expression systems differ words mapped index keys randomizing effectively levels playing field respect amount data returned user empirically randomization produces identical sets resulting tuples systems randomization variance result set size systems high randomization compare system performance needing factor differing result set sizes observed differences systems reason randomization anonymize possibly sensitive sample collection client request texture run external organization case anonymization run locally result handed texture user drawback randomization system effort spent improving ranking quality partially comparing systems 
respect quality irrespective randomization require agreed quality judgments hoc collection documents query workload scope paper fair randomization affects performance results section show case text generator algorithm core textgen algorithm ties features models introduced common framework allowing instantiate specific textgen features models assuming model parameters estimated input collection cinput main loop generator proceeds shown figure textgen input word distribution growth function unique words document total words document target number documents increment growing vocabulary output collection documents growvocabulary create document choose word distr add document addremainingwords words add collection return collection figure pseudo code textgen procedure eachdocument constructed sampling independently times word distribution subsequently addremainingwords fills rest document repeated words order maintain total number words document addremainingwords proceeds constructing distribution sampled words re-samples obtain remaining words vocabulary growth function growvocabulary expand current vocabulary document words drawn invocation words generated total number words sampled documents sampled word counts observed ith document merged normalized subsequent word samples favor words included documents words merged growvocabulary invocation issues remain unresolved documents invocation word generated small algorithm renormalizes frequently slower large resulting growth curve precise empirically found balance trade offs word lengths expected increase logarithmically words introduced vocabulary simplification word generation made growing existing words constant factor systems level indirection actual word representation textindex word length assumed significant effect performance text generator post-processing documents constructed post-process phase fixes anomalies result algorithm important anomaly word cooccurrences recall figure samples independently drawn result word clusters co-occur documents input collection co-occur synthetic collection sampling approach simple efficient drawback performance prediction queries suffer order maintain word clustering real collections postprocessing step called fixclusters fixclusters takes input collection word pairs degree clustered task fixclusters make modifications output collection order maintain clustering degree input pairs clustering degree based similarity word pair found sample synthetic collection similarity defined terms word pairs independence differ cinput coutput joint distribution measure similarity ratio observed joint probability joint probability independence assumption numerator number documents denominator defined terms probability document word algorithm works pair swapping documents exclusively document exclusively target achieved assuming care order preserve document lengths swapping cluster word word closest collection-wide frequency cluster word chocollection document length unique clustering real synthetic zipf heaps synthetic empirical synthetic fixclusters real vlc vlc vlc synthetic empirical heaps table features models model parameters derived vlc data sets versus synthetic collections derived samples evaluate text generation performance sen documents produced postprocessed fixclusters coutput complete textgen terminates text generator evaluation ideally performance document collections produced textgen identical performance real document collections textgen parameterized order test equality experiment real collection mdocuments obtain sample documents parameterizetextgen create synthetic collection documents order show textgen collections reasonable workloads show workloads evaluated commercial systems yield performance similar evaluating type workload real collection texture run experiment opposed texture identifying differences systems section test system performs similarly multiple document collections real collection vlc seed collections words replaced random words discussed section model parameters summarized table texture database created derived synthetic collection sample relation tuples relation tuples query workload consists text-only queries section text queries interested testing validity textgen texture vary collection size collection competing synthetic document collections tested varying model textgen sense varying textgen models validating type search texture order rank textgen models performance measured generated document collections specifically compare performance synthetic document collections synthetic synthetic synthetic real collecfeature synthetic empirical heaps document length unique clustering fixclusters table synthetic parameters ap-db tion synthetic collections differ model textgen synthetic model previous section vary model collections order shed light parts textgen model affect performance synthetic collections generated replacing empirical distribution model based zipf law modeling word distributions zipf law common approach advantages include simplicity implementation drawback shown produce fit word distributions addition synthetic explicitly maintainthe number unique wordsper document synthetic collections generated excluding fixclusters fixclusters workloads hurt performance workloads comparing performance synthetic collections versus real collection present results showing randomization significant affect performance randomized real collection real collection show synthetic out-performs text generators result based texture database ap-db section parameters shown table parameters derived collection differ parameters shown table derived sample effect randomization order test effect randomization collections randomized unique word replaced randomized word compared performance lowtxt medtxt workloads translations randomized words removed queries produced results figure synthetic overestimates performance lowtxt queries system figure synthetic underestimates performance lowtxt queries system inconsistent systems figure synthetic outperforms synthetic andtxt queries system due fixclusters due punctuation stemming order focus effect randomization workloads results held constant difference response time systems found typically low exceed conclude randomized wordsis reasonable purpose measuring performance comparative results results show simplest workloads choice text generator lead incorrectly conclude system out-performs individual systems versus multiple text generators figures show generator leads ranking systems regard performance importantly synthetic predicts performance consistently systems synthetic predicts system expected degrade rapidly baseline results system shown trend system synthetic underestimates real collection performance note applying fixclusters case synthetic effect single term workloads similar results obtained ortxt queries significant difference synthetic generators zipf law model text generator word distribution determines largeextent number results match word corresponds length word posting list text index storea word matching documents difference synthetic model unique words document feature maintaining unique words unique words included document leading document matches word query workload poses challenges due independence assumption implicit core algorithm text generator synthetic synthetic found accurate single similar generator empirical model distribution implemented modeling unique words proved uniformly worse synthetic synthetic word workloads results figure compare generators real collection results show predictions fixclusters synthetic applied system synthetic lower predicted response time synthetic expected workload clusters returns results data preserves clusters real collection fixclusters synthetic experiments based vlc collection similarly encouraging result poorer results obtained synthetic compare real vlc collection synthetic query workloads medtxt lowtxt results medtxt shown figure experiments run system slower generator accurate systems compared system figure results systems evaluating medtxt synthetic seeded vlc data results demonstrate synthetic robust workloads systems comparison text generators synthetic evaluation section scale-up experiments times input collection related work relational database benchmarks measure performance texttype tpc-w specifies single word containment queries sort order relational predicates asp setquery benchmarks relational queries mimic information retrieval processing asp includes information retrieval 
type query objective test system utilizes index intersection plans set query benchmark specifies document retrieval queries count similar types queries found asp contrast texture focuses end-to-end performance make assumption text processing implemented similarly benchmarks focus exclusively information retrieval systems include full-text document retrieval benchmark ftdr large collection vlc track trec conferences numerous research projects differences differ texture relational predicates trec benchmarks focus quality results user task participant submits summary experiment includes indexing query times granularity information coarse make detailed systematic comparative analysis performance numbers obtained texture vlc track trec conference investigates scale impacts performance quality real data set addition vlc compares systems measuring indexing time machine costs interesting directions texture extended ftdr real data includes wider variety query workloads including proximity queries scaling assumption made sufficiently large data set texture contrast trades diversity query workload order generate larger data sets systematic potentially anonymizing manner addition ftdr top-k queries ordering results score significant limitation central role queries practice synthetic text generation past fifty years speech synthesis benchmarking text retrieval research tpc-w includes wgen program populates benchmark text attributes static collection words grammar text generation study effect growing collection inverted index maintenance strategies similar approach empirical word distribution growth curve text generation scale-up limited result growth curve fit addition clustering words handled conclusions presented text database benchmark detailed synthetic text generator scale collection documents additional benefits synthetic generation include understanding dataset ability finely control experiments potentially anonymize data set results shed light support text current relational database systems timely intense focus enhancing support future work includes addressing important issues including updates quickly propagated indexes systems cost impact multi-user workloads http csiro trecweb vlc info html http trec nist gov http tpc baeza-yates ribeiro-neto modern information retrieval acm press addison-wesley faloutsos korn dgx distribution mining massive skewed data kddm pages brown callan croft fast incremental indexing full-text information retrieval vldb pages santiago chille september brown execution performance issues full-text information retrieval technical report um-cs- croft smith turtle looselycoupled integration text retrieval system objectoriented database system acm sigir pages acm press defazio full-text document retrieval benchmark chapter morgan kaufmann edition dewitt wisconsin benchmark past present future chapter morgan kaufmann faloutsos access methods text acm computing surveys csur faloutsos jagadish b-tree indices skewed distributions yuan editor vldb pages morgan kaufmann gray benchmark handbook database transaction processing systems morgan kaufmann gray sundaresan englert baclawski weinberger quickly generating billion-record synthetic databases snodgrass winslett editors acm sigmod pages acm press hawking overview trecvery large collection track voorhees harman editors seventh text retrieval conference heaps information retrieval computational theoretical aspects academic press york lynch stonebraker extended user-defined indexing application textual databases bancilhon dewitt editors vldb pages morgan kaufmann shannon prediction entropy printed english technical report bell systems shoens tomasic garcia-molina synthetic workload performance analysis incremental updates research development information retrieval pages stonebraker stettner lynn kalash guttman document processing relational database system acm trans inf syst tomasic garcia-molina performance inverted indices distributed text document retrieval systems pdis pages turbyfill orji bitton comparative relational database benchmark proc ieee compcon february zipf human behaviour principle effort introduction human ecology hafner 
mining data streams block evolution venkatesh ganti microsoft research vganti microsoft johannes gehrke cornell johannes cornell raghu ramakrishnan uw-madison raghu wisc abstract introduction data mining block evolution resulting problems window-independent bss window-dependent bss preliminaries generic demon algorithm window-independent bss age salary age salary window-dependent bss time space requirements options optimizations change detection focus age salary salary age age salary counts shown gcr gcr additional comments related work model maintenance data streams change detection conclusions 
demon mining monitoring evolving data venkatesh ganti johannes gehrke raghu ramakrishnan abstract data mining algorithms focus research recently practice input data data mining process resides large data warehouse data up-to-date periodic occasional addition deletion blocks data data mining algorithms assumed input data static designed arbitrary insertions deletions data records paper dynamic environment evolves systematic addition deletion blocks data introduce dimension called data span dimension user-defined selections temporal subset database taking degree freedom account describe efficient model maintenance algorithms frequent itemsets clusters describe generic algorithm takes traditional incremental model maintenance algorithm transforms algorithm restrictions data span dimension develop algorithm automatically discovering specific class interesting block selection sequences detailed experimental study examine validity performance ideas synthetic real datasets index terms data mining dynamic databases evolving data trends introduction rganizations realized large amounts data accumulate daily business operations yield business intelligence strategic insights based observed patterns activity increasing focus data mining defined application data analysis discovery algorithms large databases goal discovering predictive models algorithms proposed computing models efficient model construction deal data types quantify differences datasets data mining algorithms assumed input data static account data evolves time recently problem mining evolving data received attention incremental model maintenance algorithms data mining models developed algorithms designed incrementally maintain data mining model arbitrary insertions deletions records database real-life data evolve arbitrary data warehouse large collection data multiple sources consolidated common repository enable complex data analysis data warehouse updated batches records regular time intervals day midnight data data warehouse evolves addition deletion batches records time refer data addition deletion blocks records systematic block evolution ablock set records added simultaneously database main difference arbitrary systematic evolution individual record updated time blocks records added blocks systematically evolving database logically ordered arbitrary evolution order tuples database paper assume dynamic environment systematically evolving data introduce problem mining systematically evolving data main contributions work present demonic view world exploring problem space mining systematically evolving data section introduce dimension called data span dimension takes temporal aspect data evolution account analyst mine relevant subsets data describe model maintenance algorithms respect selection constraints data span dimension popular classes data mining models frequent itemsets clustering section algorithms exploit systematic block evolution improve state-of-the-art incremental algorithms introduce generic algorithm takes traditional incremental model maintenance algorithm derives incremental algorithm restrictions data span dimension section ieee transactions knowledge data engineering vol january february ganti ramakrishnan computer sciences department wisconsin dayton madison e-mail vganti raghu wisc gehrke department computer sciences cornell upson hall ithaca e-mail johannes cornell manuscript received march revised aug accepted aug information obtaining reprints article send e-mail tkde computer ieeecs log number data evolution monitoring ieee generic algorithm instantiated incremental algorithms section address problem automatically discovering interesting selection constraints class constraints identify sets blocks similar data characteristics propose algorithm discovering constraints section extensive experimental study evaluate algorithms synthetic real datasets compare previous work section demon section introduce problem mining systematically evolving data describe model systematic data evolution section section enumerate problem space mining systematically evolving data introducing data span dimension temporal restrictions data mined refine type restrictions introducing notion block selection sequence section systematic data evolution describe model evolving data term tuple generically stand basic unit information data customer transaction database record n-dimensional point context disambiguates type information unit referred block set tuples assume database consists conceptually infinite sequence blocks block identifier assume loss generality identifiers natural numbers increase order arrival mentioned denote identifier latest block call sequence blocks database current database snapshot note assume block evolution regular period blocks span time units blocks data added database saturday sunday block friday framework naturally handle type irregular block evolution lack constraints time spanned block incorporate hierarchies time dimension merge blocks fall parent data span dimension mining systematically evolving data applications interested mining data accumulated applications interested mining recently collected portion data application analyzes large database documents suppose model extracted database data mining process set document clusters consisting set documents related common concept document cluster model associate unclassified documents existing concepts occasionally block documents added database necessitating update document clusters typical applications domain interested clustering entire collection documents application database hypothetical demons toy store updated daily suppose set frequent itemsets discovered database analyst devise marketing strategies toys model obtained data interest analyst reasons popularity toys short-lived part data represent current customer patterns information obtained part stale buy competitive edge mining patterns entire database dilute patterns visible recent window data latest days analyzed marketing analyst interested precisely patterns capitalize latest customer trends capture requirements introduce dimension called data span dimension offers options unrestricted window option relevant data consists data collected recent window mrw option number recently collected blocks data selected input data mining activity call parameter window size application dependent data analyst formally current database snapshot unrestricted window denoted consists blocks snapshot recent window denoted ofsizew consists blocks consists blocks remainder paper assume loss generality techniques easily extended special case block selection sequence section introduce additional selection constraint called block selection predicate applied conjunction options data span dimension achieve fine-grained block selection hypothetical applications interest marketing analyst defined demons database motivate finer-level block selection analyst model data collected mondays analyze sales immediately weekend required blocks selected unrestricted window predicate marks blocks added database mondays analyst interested modeling data collected mondays past days weeks case predicate marks blocks collected mondays recent window size selects required blocks analyst model data collected day week today past days required blocks selected recent window size predicate starting beginning window marks blocks added seventh day ganti demon mining monitoring evolving data note block selection predicate independent starting position window applications application defined relative beginning window moves window define block selection sequence bss formalize intuition selection predicate informally bss bit sequence position block block selected mining block left definition current database snapshot recent window size window-independent block selection sequence sequencehb iof bits windowrelative bss sequence bits block recent window note sharp distinction unrestricted window most-recent window windowrelative block selection sequence exist fixed block selection sequence unrestricted window option express requirement dynamically maintaining models data collected alternate days past days automatic block selection sequence discovery model maintenance respect 
block selection sequence assumes data analyst selection constraints applied cases analyst aware contraints data analyst sequence blocks unknown interesting block selection sequences address issue automatically detecting interesting selection constraints section incremental model maintenance algorithms section discuss incremental model maintenance algorithms options data span dimension section describe model maintenance algorithms frequent itemsets clustering unrestricted window option section describe generic model maintenance algorithm called gemm recent window option instantiation gemm requires model maintenance algorithm unrestricted window option instantiated algorithm identical performance characteristics time arrival block availability updated model mainmemory requirements algorithm instantiating gemm cost small amount additional disk space offline processing gemm instantiated class data mining models incremental model maintenance algorithm discuss section gemm full advantage specialized application-dependent incremental model maintenance algorithms deliver performance describing algorithms formally introduce problems frequent itemset computation clustering describe algorithms maintaining decision tree models discuss decision tree models detail set frequent itemsets set literals called items atransaction itemset subsets transaction unique positive integer called transaction identifier transaction itemset set transactions support itemset fraction total number transactions def jft tgj jdj constant called minimum support itemset frequent set frequent itemsets consists itemsets frequent formally negative border minimum support threshold set infrequent itemsets proper subsets frequent formally tid-list itemset list transaction identifiers sorted increasing order transactions itemset size disk space occupied write clear context clustering clustering problem widely studied definitions cluster proposed suit target applications general goal clustering find interesting groups called clusters dataset points group similar points groups notion similarity tuples captured distance function quality clustering measured distance-based criterion function weighted total average distance pairs points clusters goal clustering algorithm determine good determined criterion function partition dataset clusters cluster model consists clusters identified data clustering problem considered domains definitions exist influence algorithms constraining specific approach adopt semiformal definition statistics literature clustering problem required number clusters dataset points distance-based measurement function criterion function partition dataset groups criterion function optimized unrestricted window section describe incremental model maintenance algorithms frequent itemsets clusters unrestricted window option respect user-specified bss ieee transactions knowledge data engineering vol january february prior work developed algorithm incremental decision tree construction address problem generic model maintainer set frequent itemsets block added set frequent itemsets updated current set frequent itemsets carries snapshot section discuss algorithms called ecut ecut dynamically maintaining set frequent itemsets algorithms improve previous algorithm borders independently developed feldman thomas improvements exploit systematic data evolution briefly review borders algorithm discussing algorithms borders algorithm consists phases detection phase recognizes set frequent itemsets changed update phase counts set itemsets required dynamic maintenance detection phase relies maintenance negative border set frequent itemsets block added supports set frequent itemsets negative border itemsets updated reflect addition detecting frequent itemset longer frequent straightforward detection frequent itemsets based observation itemset frequent subsets negative border itemset support greater itemsets frequent due addition update phase invoked frequent itemsets flagged detection phase itemsets longer frequent deleted itemsets frequent added deleting itemsets longer frequent straightforward itemset frequent candidate itemsets generated joining prefix join pruning itemsets subsets frequent supports remaining candidate itemsets counted subset set candidates frequent candidate itemsets found set frequent itemsets added current set frequent itemsets resulting set candidates pruning step added negative border resulting typically number candidate itemsets small borders algorithm counts supports candidate itemsets organizing prefix tree paper prefix tree data structure refer counting procedure pt-scan prefix tree-scan ecut improve support-counting algorithm update phase exploit systematic data evolution fact typically small number candidate itemsets counted intuition support-counting algorithm ecut similar index retrieves relevant portion dataset count support itemset relevant information consists set tid-lists items ecut tid-lists items itemset count support cardinality result intersection tid-lists equals tid-lists definition consist transaction identifiers sorted increasing order intersection performed easily procedure merge phase sort-merge join support itemset jfx jdj size tid-list item iis typically orders magnitude smaller size amount data fetched ecut count support itemset equal sum supports items typically order magnitude smaller space occupied number itemsets counted large ecut significantly faster previous support-counting algorithms scan entire dataset organization tid-lists full advantage tid-lists items selectively read relevant portion tid-lists derived set blocks selected bss observations tid-list item respect tobe partitioned parts block additivity property support itemset sum supports blocks property nature block selection sequence selects block completely count support itemset partially block implication properties tid-lists block constructed added database counting supports itemsets identifiers transactions increase order arrival materialization tid-lists items straightforward block scanned identifier transaction appended item tid-lists items materialized simultaneously maintaining buffer tid-list flushed disk full space requirements space required maintain tid-lists items ini sum supports items equals space occupied database stored set transactions information obtained transactional ganti demon mining monitoring evolving data efficient counting tid-lists pudi independently developed algorithm maintaining frequent itemsets itemset longer frequent deleted added supersets deleted hash tree proposed purpose format obtained set tid-lists tid-list representation alternative traditional transactional representation database longer require database traditional transactional format ecut describe ecut improves ecut additional disk space intuition ecut support itemset counted joining tid-lists itemsetsfx long sizes greater greater sizes faster count support support size tid-list typically decreases increase fewer tid-lists sufficient count support materialize tid-lists itemsets size greater addition tid-lists single items support counted faster tid-lists individual items discuss trade-offs involved solution block materializing tid-lists individual items suppose additional amount disk space materialize tid-lists itemsets size greater choose set itemsets tid-lists materialized tid-list benefit cost count support itemset adds benefit cost space occupies count support itemset set tid-lists itemsets correspond individual items goal maximize total benefit upper bound cost problem np-hard view materialization problem encountered data warehousing and-or graphs approximate greedy algorithm selecting set itemsets leads high benefit worst case exponential number materializable itemsets due high complexity approximate solution devise simple heuristic confirmed experiments works practice intuition heuristic based observations significant reduction time required count support itemset results -itemsets -itemsets support itemset indicative benefit itemset higher support subset larger number itemsets supports counted future observations motivate heuristic choice itemsets materialized current window block materialize tid-lists set frequent -itemsets sum supports frequent -itemsets greater choose -itemsets itemset higher support chosen itemset lower support simple heuristic good trade-off reduction time counting support itemsets high complexity complicated algorithms 
database evolves data analyst change minimum support threshold itis trivial update set frequent itemsets borders algorithm augmented ecut ecut update phase performance improved borders algorithm depends number itemsets support counted empirically study trade-off pt-scan ecut ecut section clustering describe extensions birch clustering algorithm derive incremental clustering algorithm called birch briefly review birch describing extensions birch works phases phase dataset summarized subclusters phase merges subclusters required number clusters traditional clustering algorithms overview algorithms intuition preclustering approach algorithms explained analogy suppose tuple describes location marble large number marbles distributed floor algorithms replace dense regions marbles tennis balls tennis ball subcluster cluster marbles number tennis balls controllable parameter space required representing tennis ball smaller required representing collection marbles cluster tennis balls favorite clustering algorithm k-means formally preclustering phase dataset scanned identify small set subclusters represented concisely cluster features cfs set discovered phase fits easily main memory phase analyzes merges subclusters close form user-specified number clusters long tuples cluster assigned subclusters close end result phase tolerance slight errors assignment tuples subclusters makes birch robust input order phase works in-memory set fast phase dominates resource requirements straightforward extension birch exploits facts birch sensitive input order data set subclusters maintainable incrementally current database snapshot give inductive description algorithm base case run birch time assume output phase birch set subclusters maintained in-memory added updatec scanning phase birch suspended resumed updated set subclusters invoke ieee transactions knowledge data engineering vol january february complete description phase birch obtain userspecified number clusters set maintained in-memory block completing induction step time set clusters nonincremental algorithm birch run note response time birch small block scanned phase birch takes negligible amount time birch maintains set summarized cluster representations typically sufficient discover understand sparse dense regions dataset meeting primary goal clustering set points dataset partitioned based cluster membership scan dataset associate point label corresponds cluster point belongs scan characteristic clustering algorithms summarized cluster representations recent window describe gemm generic model maintenance algorithm recent window option class models incremental model maintenance algorithm unrestricted window option gemm instantiated derive model maintenance algorithm respect window-independent window-relative block selection sequences recent window option window-independent window-relative block selection sequences central idea gemm starting block window size evolves steps block added database required model window incrementally evolved steps window fig evolves steps starting model built steps implication point maintain models future windows windows current instant overlap current window suppose current window future windows overlap incrementally evolve models future windows future window maintain model respect bss prefix overlaps choice bss prefix explained future windows overlapping current window maintain models addition required model current window block added database shifting window themodel suffix updated appropriately usinga derive required model window current database snapshot fig future windows overlap models maintained addition current model extracted prefixes overlap choice bss extracting model overlap current window future window depends type bss window-independent window-relative describe choice window-independent bss extend window-relative bss window-independent bss database snapshot shown fig window-independent bss shown window current model extracted blocks added window shifts model extracted blocks observe model obtained updating model extracted prefix overlaps observation relevant set blocks model extracted selected projecting bits original bssh padding projection bit leftmost place derive call operation deriving bss projecting relevant part windowindependent bss projection operation formalize projection operation loss generality set represent current window size window-independent bss projection operation takes input windowindependent bss latest block identifier positive integer wto derive sequence length window size selects relevant set blocks current window informally sequence projection padded zeroes leftmost places formally k-projected sequence denoted def introduce notation describing model maintenance mdenote model extracted window respect bss leta denote updated model returned block data added ganti demon mining monitoring evolving data fig recent window extracted represent model extracted dataset gemm maintains collection models updates block added database define collection models describe update operation collection models current window bss maintain collection models defined informally collection consists addition required model model future window overlapping defines bss respect model extracted note required model current window respect bss algorithm gamma-update output begin set foreach end foreach end updating collection models block added database recent window shifts recall model extracted respect bss prefix future window addition block extends prefixes block models updated reflect extension update operation collection models algorithm model model required respect bss window fig window-independent bss ish collection models maintained window block added collection models updated note models simultaneously maintained identical models identical models collection models identical equal actual number models maintained time window-relative bss database snapshot shown fig window-relative bss current model extracted blocks added window shifts model extracted blocks observe model obtained updating model extracted block important observation relevant set blocks extracting model overlap selected bss obtained right-shifting original bss padding leftmost bit call operation rightshift operation right-shift operation takes input window-relative bss current time stamp positive integer derive sequence length selects relevant set blocks informally relevant set blocks correspond set chosen sliding forward blocks padding leftmost bits zeroes truncating sequence slides formally k-right-shifted sequence def procedure maintaining updating collection models window-relative bss analogous algorithm k-right-shift operation substituted k-project operation response time space requirements section denote model window respect window-independent window-relative bss define response time time elapsed addition block availability updated model algorithm observe type bss computation model involves single invocation arguments defined projection right-shift operations response time equal time update model model models required immediately window updates time-critical performed offline system idle models updated subsequent block arrives important implication lack immediacy updates collectionm models stored disk retrieved main memory limitation long single model fits in-memory current data mining algorithms assume model fits main memory general maintain ieee transactions knowledge data engineering vol january february additional models disk space occupied model insignificant compared occupied data block additional disk space required models negligible options optimizations classes models maintainable deletion tuples frequent itemsets model maintained deletions transactions algorithm proceeds addition transactions support itemsets contained deleted transaction decremented maintainability deletions choices model maintenance recent window option gemm instantiated model maintenance algorithm addition blocks directly updates model reflect addition block deletion oldest block current window discuss spacetime trade-offs choices special case bss arbitrary bss bss 
option gemm requires slightly disk space maintain models response time invoking add block option maintain model reflect addition block deletion oldest block approximately assuming deletion tuple takes time addition blocks deleted added size takes long gemm gemm response time characteristics small increase disk space requirements full generality gemm fore classes models maintained deletions tuples cases model maintenance deletion tuples expensive insertion instance set subclusters birch maintained deletions cost incurred incremental dbscan maintain set clusters tuple deleted higher tuple inserted arbitrary bss major drawback maintain models recent window respect arbitrary window-relative bss require deletion addition blocks update model recall window-relative bss chooses subset set blocks window window shifts depending bss number blocks newly added block deleted scans blocks newly added set deleted set block selection sequences reduce naive reconstruction model scratch illustrated current database snapshot window-relative bss current model constructed window shifts set blocks disjoint earlier set pattern detection previous section discussed model maintenance algorithms dynamically varying subset database arbitrary block selection sequence evolutionary nature data opens problems behavior time data characteristics data exhibit cyclic seasonal patterns note problem pattern detection tied notion systematic data evolution arises dynamically changing database view data repository logical sequence blocks assuming model systematic block evolution describe results detecting patterns similar blocks language block selection sequences approach intuitively identify set block selection sequences blocks data bss similar data characteristics motivating brand manager brand frozen pizza time accurate predictions sales upcoming weeks order coordinate production distribution marketing specifically manager historic sales information discover baseline sales trends predict sales upcoming weeks simple patterns number pizzas sold weeks superbowl sunday significantly higher manager knowledge folklore pattern result competitive advantage lack knowledge patterns ignorance common patterns striking competitive disadvantage model maintenance respect block selection sequence addressed problem maintaining models interesting patterns exploratory question discover interesting patterns equivalently block selection sequences similar blocks systematically changing data detect pattern sequence blocks require notion similarity blocks data prior work developed focus framework computing interpretable statistically qualifiable measure difference called deviation datasets deviation quantifies difference interesting characteristics dataset reflected data mining models induce deviation framework instantiated popular data mining models frequent itemsets decision-tree classifiers clusters central idea broad class models terms structural component measure component structural component identifies interesting regions measure component summarizes subset data mapped region datasets models induced datasets framework extends structural components models common structural component reconcile differences deviation computed aggregate measures datasets regions common structural component computation ganti demon mining monitoring evolving data deviation measure fast requires scan dataset details remainder section fixed class data mining models denote deviation datasets class models measure similarity datasets statistical significance deviation informally statistical significance deviation probability datasets drawn underlying hypothetical process generating data formally blocks m-similar significance level practice similarity function binary range function takes blocks similar note notion similarity symmetric transitive similarity function pair blocks approach finding groups similar blocks treat block object discover clusters similar objects clustering algorithms applicable approach drawback clustering algorithms partition set objects overlap clusters individual sequences blocks clusters overlap strong restriction instance patterns blocks collected monday blocks collected day month coexist reason clustering formulation suitable problem identifying patterns similar blocks discuss simple alternate formulation overcomes problem efficient algorithm unlike np-hard clustering problem individual patterns represented block selection sequences overlap explicitly logical order blocks account introduce notion compact sequences compact sequence maximal sequence pairwise similar blocks block blocks sequence similar block sequence belongs sequence call sequences compact leave block eligible included sequence words holes sequences realize set compact sequences include classes interesting sequences set compact sequences analyzed discover specialized types patterns placing additional constraints cyclicity set blocks compact sequence specialized types sequences computed subjecting set sequences post-processing step instance compact sequence easily derive cyclic sequence input sequence sake clarity presentation notation class models selected frequent itemset models decision tree models cluster models instantiate deviation framework instance analyst select class definition difference aggregation functions instantiation deviation function denote statistical significance deviation blocks blocks m-similar significance level call sequence blocks compact pair blocks similar block identifier similar block sequence blocksfd pairs similar sequence compact sequences violates violates describe simple algorithm incrementally computes compact sequences blocks unrestricted window option data span dimension selected basic idea incrementally maintain set compact sequences blocks added database give inductive description algorithm base case added empty database set compact sequences consists single sequence induction step assume compact sequencesg block added time set extend extended sequence compact set completing description algorithm avoid repeated computation deviations pair blocks maintain matrix consisting pairwise deviations current database snapshot block added augment matrix values straighforward show algorithm computes compact sequences performance evaluation section evaluate performance incremental model maintenance algorithms unrestricted window option response time model maintenance recent window option gemm response time model maintenance unrestricted window option experimental results recent window option subsumed results unrestricted window option show results applying definition compact block selection sequences algorithm real dataset web proxy traces running times measured mhz pentium pro main memory running solaris ecut ecut set experiments compared running time ecut ecut running time borders incremental maintenance large itemsets proceeds ieee transactions knowledge data engineering vol january february algorithm extended easily apply recent window option phases detection phase algorithms identical detection phase borders measured performance improvements techniques restricted update phase examine phase contributes model maintenance time data generator developed agrawal generate synthetic data write jiji pats plen denote dataset million transactions average transaction length jijitems multiples patterns multiples average pattern length running times algorithm ecut -frequent itemsets block materialized facilitating performance improvements observed experiments ranges minimum support thresholds dataset parameters considered additional amount space required materialization percent dataset size fig experiment compared update phases ecut ecut update phase borders called pt-scan computed set frequent itemsets percent minimum support dataset pats plen randomly selected set itemsets negative border counted support itemsets varied size fig shows algorithms scale linearly number itemsets size input dataset ecut outperforms pt-scan jsj ecut outperforms pt-scan entire range considered jsj ecut fast pt-scan ecut times fast pt-scan results previous work show jsj typically considered large jsj explore trade-offs algorithms experiment compared total time algorithms broken detection phase update phase computed 
set frequent itemsets minimum support threshold block measured maintenance time required update frequent itemsets block added fixed distribution parameters block pats plen varied distribution parameters block chosen values block generated parameter settings pats plen set pats plen set distribution characteristics set parameters set frequent itemsets distribution parameters varied number transactions block kto percent percent block size results set parameters shown figs results set figs note update phase borders dominates maintenance time cases ecut ecut significantly faster pt-scan sizes block small relative block percent original dataset size algorithms times faster ptscan reducing maintenance cost order magnitude general ecut ecut update phase detection phase dominates total maintenance time borders reverse true birch section compare running times birch nonincremental standard version birch clusters entire database block arrives zhang showed output birch sensitive input order present results order-independence experiments section synthetic data generator agrawal generated clusters distributed dimensions synthetic data generator requires ganti demon mining monitoring evolving data general data generator generate clusters subset set dimensions fig counting times fig percent extra space ecut fig pats npl parameters number points multiples millions number clusters dimensionality dataset generated set parameters denoted present experiment representative dataset chosen wide variety datasets experimented results similar datasets blocks data varied number tuples block added percent uniformly distributed noise points perturb cluster centers fig shows birch significantly outperforms birch pattern detection web proxy traces experiments section test validity notion compact sequence blocks examining results real dataset detection interesting sequences validation restriction compactness unnatural real dataset set web proxy traces collected dec consists million tuples web page requests collected period days sept sept information tuple web page request consists fields timestamp type object requested gif jpg number bytes response requested objects classified types discretized number bytes received consecutive intervals size bytes goal model potential relationships types request number bytes received treated tuple transaction consisting object type bucket number response size chose data mining model set frequent itemsets minimum support level percent timestamp field database segmented dataset blocks varying block size granularities hour intervals fig summarizes patterns discovered database analyst point view reasonable explanations pattern shown patterns shown fig find surprising information instance data traced monday sept significantly data traced working days statistical significance deviation values high percent pattern detection algorithm recognizes unusual block include maintained patterns shown fig patterns shown exclude weekends holiday sept labor day recognizing dissimilarity data collected weekdays weekends sequence obtained block granularity hours illustrates late night weekday blocks similar blocks weekends pmpm sept amam sept thursday friday night ieee transactions knowledge data engineering vol january february fig pats npl fig pats npl fig pats npl fig birch noonpm sept saturday afternoon pmpm sept wednesday night amam sept early friday morning qualitative results real dataset draw conclusions experiments show notion compact sequences discovered simple algorithm meaningful interesting experiments show results techniques panacea post-processing interpretation fig shows time incrementally update set existing compact sequences block numbered blocks -hour periods noon sept midnight sept spikes correspond blocks significantly large proportion earlier blocks computation deviation significantly blocks takes longer computation deviation similar blocks case blocks scanned scanned rarely surprisingly block numbers spikes fall weekends data characteristics data characteristics weekday blocks related work discuss incremental mining algorithms frequent itemsets clustering classification general algorithms discuss designed arbitrary insertions deletions transactions exploit systematic block evolution maintain models recent window option respect arbitrary block selection sequence section discussed borders algorithm incrementally maintaining frequent itemsets fup algorithm derivatives address problem incrementally maintaining frequent itemsets makes iterations iteration scans entire database including block dataset borders algorithm improves fup algorithm reducing number scans database ester extended dbscan develop scalable incremental clustering algorithm prior work developed scalable incremental algorithm maintaining decision tree classifiers utgoff developed incremental version assumes entire dataset fits main memory scalable ramaswamy segment database transactions sequence time units discover association rules follow user-defined pattern segments introduce notion calendar users express interesting patterns calendar sequence possibly overlapping time intervals association rule belong calendar rule minimum support minimum confidence segment time unit calendar set calendars discover association rules belong set calendars work differs ramaswamy important aspects assume database static discover association rules belong calendar maintain association rules database evolves time unit database calendar mined association rules mine single combined model belonging classes models set selected time units counting frequencies itemsets tid-lists proposed zaki observe expensive count tid-lists frequencies itemsets results explain observation sarawagi explored tid-lists count frequencies itemsets tid-lists count frequencies candidate itemsets pass observed hash-tree prefix tree tid-lists results explain poor performance observed number candidate itemsets high pt-scan outperforms tid-lists concurrent work dunkel found tid-lists efficient mining association rules special class datasets higher number items number transactions contrast incremental maintenance association rules general transactional database conclusions future work fig summarizes contributions explored problem space systematic data evolution ganti demon mining monitoring evolving data fig patterns discovered web proxy traces fig time pattern computation important objectives model maintenance pattern detection efficient algorithms objectives future work intend explore impact block granularity types patterns discovered develop techniques automatically determine levels granularity acknowledgments venkatesh ganti supported microsoft research fellowship johannes gehrke work wisconsin madison raghu ramakrishnan research supported grant ibm corporation agrawal gehrke gunopulos raghavan automatic subspace clustering high dimensional data data mining proc acm sigmod conf management data agrawal mannila srikant toivonen inkeri verkamo fast discovery association rules advances knowledge discovery data mining fayyad piatetskyshapiro smyth uthurusamy eds agrawal srikant fast algorithms mining association rules proc int conf large databases sept chaudhuri dayal overview data warehouse olap technology acm sigmod record mar cheung han wong maintenance discovered association rules large databases incremental updating technique proc int conf data eng icde feb cheung lee kao general incremental technique maintaining discovered association rules proc database systems advances applications dasfaa conf apr cheung vincent benjamin maintenance discovered knowledge case multi-level association rules proc int conf knowledge discovery databases aug duda hart pattern classification scene analysis wiley dunkel soparkar data organization efficient mining proc int conf data eng mar ester kriegel sander wimmer incremental clustering mining data warehousing environment proc int conf large databases aug ester kriegel database interface clustering large spatial databases proc 
int conf knowledge discovery databases data mining aug feldman aumann amir mannila efficient algorithms discovering frequent sets incremental databases proc workshop research issues data mining knowledge discovery advances knowledge discovery data mining fayyad piatetsky-shapiro smyth uthurusamy eds aaai mit press ganti gehrke ramakrishnan loh framework measuring data characteristics proc symp principles database systems gehrke ganti ramakrishnan loh boat optimistic decision tree construction proc acm sigmod int conf management data june guha rastogi shim cure efficient clustering algorithm large databases proc acm sigmod conf management data june gupta selection views materialize data warehouse proc int conf database theory jan jain dubes algorithms clustering data prentice hall fukunaga introduction statistical pattern recognition san diego calif academic press mueller fast sequential parallel algorithms association rule mining comparison technical report univ maryland aug pudi haritsa incremental mining association rules technical report dsl indian inst science bangalore ramaswamy mahajan silbershatz discovery interesting patterns association rules proc int conf large databases aug sheikholeslami chatterjee zhang wavecluster multi-resolution clustering approach large spatial databases proc int conf large databases aug sarawagi thomas agrawal integrating mining relational databases alternatives implications proc acm sigmod conf management data june thomas bodagala alsabti ranka efficient algorithm incremental updation association rules large databases proc int conf knowledge discovery databases mogul kroeger maltazhn digital web proxy traces ftp ftp digital pub dec traces proxy webtraces html utgoff incremental proc int conf machine learning willett recent trends hierarchical document clustering critical review information processing management vol zaki parthasarathy ogihara algorithms fast discovery association rules proc int conf knowledge discovery databases data mining zhang ramakrishnan livny birch efficient data clustering method large databases proc acm sigmod conf management data june venkatesh ganti received degree phd student wisconsinmadison research interests areas database systems data mining including online analytical processing approximate query answering analyzing evolving data microsoft research fellow johannes gehrke assistant professor department computer science cornell gehrke research interests database systems data mining leads himalaya data mining project cougar device database system project cornell gehrke recipient ibm faculty partnership award coauthor textbook database management systems published mcgraw hill holds patents area data mining ieee transactions knowledge data engineering vol january february fig problem space enumeration demon raghu ramakrishnan professor computer sciences vilas associate wisconsin-madison founder cto quiq company powers online communities research interests areas database query languages including logicbased languages languages nontraditional data sequences images data mining applications data visualization data integration recipient packard foundation fellowship national science foundation pyi award editorial boards review constraints jiis jlp served program committees conferences database logic programming areas program chair kdd author text database management systems ganti demon mining monitoring evolving data 
elsevierscience usa allrightsreserved doi jcss framework measuring differences data characteristics venkateshganti microsoftresearch redmond washington e-mail vganti microsoft johannesgehrke fellowship departmentof computersciences cornelluniversity ithaca newyork e-mail johannes cornell raghuramakrishnan fromtheibmcorporation departmentof computersciences universityof wisconsin madison madison wisconsin e-mail raghu wisc wei-yinloh departmentof statistics universityof wisconsin madison madison wisconsin e-mail loh stat wisc receivedseptember revisedoctober theunderlyingdata calledthedeviation ference decision tree classifiers clusters captures standard measures deviation misclassification rate chi-squared metric specialcases significant elsevierscience usa introduction predictive modelsbasedonthedata maintainedinthedatabase fpssu computingnovelmodels aggr ais ams mar formore efficient model construction bmut ekx grg ggrl gkr grs pcy son sam zrl grgzz gkr grs ggr thereis noworkaddressingthe ordeviation betweentwomodels asamotivatingexample asalesanalystwho ismonitoringadataset weeklysalesforwalmart maywanttoanalyzethe analyzedsnapshots ingeneral siderably chnw faam tbar erabletimeandeffort asasecondexample differentstores pairsofdatasets samemarketingstrategy inthispaper qualifiable deviation measure datasets quantify differences interesting asreflectedinthemodelit fpssu thecentral componentanda measure component interesting regions mappedtoeachregion focus itcanbecomputed single scan underlying datasets good upper bound framework comparison specific parts models including frequent itemsets decision trees clusters captures misclassification rate andchi-squared statistic special cases deviation measure show chi-squared statistic applied decision trees bootstrapping technique inapplicable wedefineaset operatorsto discoverregionswhere differencesbetweenthe datasetsare interesting sam data interestingly difference sample-based models model based data insome situations itmaysufficetouseasample insection weillustratethrough focus framework insection insection wedescribethe focus framework section describe bootstrap-based procedure qualifydeviations insection ofdataminingmodels setoffrequentitemsets decisiontreeclassifiers andclusters insection tion section instantiate discovery-driven exploratory data analysis sam insection westudytheeffectof insection weevaluatetheperformanceofsomeinstantiationsof focus andconcludeinsection examples illustrating deviation ingeneral thispaper dataminingliterature lits-models dtmodels andcluster-models inthissection classoffrequentitemsets insection weformalizetheseconcepts classes models alongwithapplications forwhichwe foraformaldescription wereferthereadersto ams bfos gantietal fig dt-model dt-models foranewtuple thevalue butesbuilddt-models instance dataset company accumulated information peoplewho reducethemailingexpenses dt-model dependent attribute theotherattributesare called predictor attributes thegoalistobuild called numerical therootofthetreedoes nothaveanyincomingedges zeroormoreoutgoingedges wecall naleaf node node predicate pevaluatesto false asetofpredicatespis exhaustive ifthedisjunctionofall lits-models theanalysisofmarket lits-models transaction wherea transaction forexamplea customer amazon mentionedearlier fig twocomponent whichit forthispurpose thecompany short itemsets catalogpages leti atransactionandanitemset aresubsetsofi letdbe asetoftransactions thesupportsup anitemsetwhosesupportis cluster-models cluster-model unknown groups data suppose mail order case study earlier insuchcases cluster-model maybeused ingeneral thegoalofclusteringis calledclusters suchthat similar objects areinthesamecluster traditionally cluster-model morerecently fig lits-model gantietal clustering algorithms proposed clustering data types gkr grs ggr grg paper isshowninfig dt-models decision tree constructed hypothetical dataset classes andc beasshowninfig nodes ontheleftside withthetop bottom toclassc forinstance belongtotheclassesc andc intheleafnode oneregionforclass andoneregionforclassc thisfractioniscalledthe measure ofthe region withitsmeasure infact dt-model structural componentofthemodel componentofthemodel thepropertythatamodelconsistsofstructuralandmeasurecomponentsiscalledthetwo- componentproperty figure ofthedecisiontreeinfig shownasanorderedpair theorderedpairo pconsistsofthemeasures infig letd andd betwodatasets givenaregionand thedeviationbetweend andd absolutedifference ofthetwomeasures function fig cluster-model overasetofregionsisa combination function sum iftwodatasetsd andd components wecancombinethetwoideas thedeviationbetweend andd setofregionsintheir identical structuralcomponents computing deviations apply make structural componentsidenticalby extending intuitively common refinement gcr ofthetwo structuralcomponents forinstance infig isthegcrofthetwotreest inducedbyd andt inducedbyd ineachregionofthegcrt weshowa onlyforclassc fromthedatasetsd andd instance kandage fortheclassc fromd andd modelsalwaysexists iscalledthe tosummarize andd iscomputedas structural components dt-models extended gcr thedeviationbetweend andd infig overthesetofallc lits-models illustrate deviation computation class frequent itemset models figure ithasthreeinteresting eachitemset equivalently thecorrespondingregion thesupportoftheitemset eachfrequentitemsetx ina lits-model wherethesupportis higher threshold measure support set frequentitemsetsisthe structural component measurecomponent gantietal fig dt-model common refinement forthe lits-models thegcris forexample fig shows thegcroftwo lits-models inducedbyd andl inducedbyd themeasures supports obtained scanning itemset gcr shown deviation datasets deviation absolute difference aggregate function sum deviation betweend andd focused deviations intheaboveexamples entireattributespace itisnecessaryto focus focus framework fig lits-model coverssuchrequirements usingthe aggregatefunction theintersection fig andt overtheregionr age theregionsinthegcrt intersectedwithrarethe thedeviationbetweent andt withrespecttoris complementary approach declaratively set interesting insection weintroduceaset structural operators ranking operator declarative specification additional comments cluster-model induced dataset identifies set non-overlapping regions discussed dt-model set nonoverlappingregions dt-model isexhaustive ifdecision rectangles attribute space instantiation focus theinstantiation offocusfor dt-models willextenddirectlyto cluster-models wedonot beingconsidered thecomputation andd overalltheregionsinthe gcrtobecomputed gantietal andd andthatbetweend andd andd andd westilldonotknow whethertheyhave datacharacteristics adeviationof maynotbe inotherwords significant focus framework instantiate misclassification error metric statistics metrics traditionally considered contextof dt-models focus andstatistics focus inthissection tionsbetweenthe oftwodatasets focuscanbeapplied class data mining models satisfy two-component meetsemilatticeproperties insection wewill lits-models dt-models clustermodels preliminaries apartially orderedset antisymmetric transitivebinaryrelation onp anelementa piscalledalower boundofhifaqhforallh alower boundaofhisthegreatest lower boundofhif foranylowerboundbofh havebqa apartiallyordered set meet-semilattice exists set attributes domain attribute definition attribute space cross product domainsofallattributes isann-tupleoniift eachregionchasacorrespondingpredicatep suchthat trueifft adatasetdisafinitesetof n-tuples domains examples region defined predicate dataset definition theselectivity ofaregionc withrespecttoa def dnp two-component meet-semilattice models andthateachsuchregionis summarizedbyone orseveral measure anumber ifthestructuralcomponentsatisfiessomepropertiesthatallowusto refine twomodelsnaturally whichshowadecision tree asetoffrequentitemsets andasetofclusters asmentioned earlier whichisthe weuse definition componentpropertyifanym set regions weusec modelsinm describethe meet-semilatticeproperty capturesthe structural figure illustratestherelationshipbetweentwodecisiontreest andt thestructureoft finer thatoft becausewecandeducet withrespecttodisknown intuitively similarly amongthetwosetsof frequentitemsetsl andl showninfig finer thanl becausewecan fromthatofl usingabinaryrelation giventwomodelsm andm thegreatest alwaysexists wecallthisthegreatest common refinement gcr ofc andc anddenoteitbyc definition wesaythatasetofregions refinesaregionc ifforanydatasetd wesaythatc thesummationover average min max product aswewillshowlater discussinthispaper insection refines denotedc ifforeveryregionc thereexistsasetof regions whichrefinec wecall arefinementrelation lemma classes models litsmodels dt-models cluster-models thenmsatisfies two-componentproperty gantietal exists refinement relation meetsemilattice measuring deviations andm intuitively thedifferencebetweenthe theother similar toeachother andhighif theyare structural components identical transform measure letc intos istheaggregateof thedifferencesbetweens ands weassumethat thedifference ataregion isgivenbya difference function functiong wediscussthesefunctions whichenhance focus insection fornow itsufficestosay model-independent parameters focus signatures andg andr modelsareidentical definition ganaggregatefunction suchthat forj leto denotetheabsolute number tuples mapped deviation betweenm andm isdefinedas def ingeneral entstructuralcomponents todothis rely manyclassesof datamining models seeobservation theideaisto extend bothmodelstothegcrof intuitively toextend amodelmtoc forc thedatasetd withrespecttod definition letm mbetwomodelsinducedbyd wedefinethedeviationd betweenm andm def thedeviation betweentwomodelsm andm properties forcertainchoicesoffandg identifiedinsections thispropertyof twomodels summarizing arefinementrelation computation requires selectivities regions andd forthethree thisrequiresd andd tobescanned differenceand aggregatefunctions inthissection work wefirstconsiderf letl andl betwo lits-models inducedbyd andd withoutlossofgenerality letusassumethatl andl haveidenticalstructural componentsc considertwoitemsetsx andx supposes ands variesbetweena significant anda moresignificant whereasx variesbetweena non-existent anda noticeable forsomeapplications thevariationinx thevariationsinx andx equallyimportant toallowbothcases ourfirstinstantiationf findstheabsolute scales wenow thesignaturef region respect datasets suffices purposes functions require absolutemeasures weuseabsolutemeasures gantietal definition aredefinedas def def thetwomostcommonly independent instantiations generate instantiationsofd qualification procedure ifwe wecanusestandardstatisticalteststocompute significancesig sets tocomputef letm andm andd letg datasetsgeneratedbyg ifd equivalently ifd wasalsogeneratedbyg drawn computethe probabilityp modelsinducedby datasetsgeneratedby equalsp wherefisa ifp significantly low thentheprobabilitythatd andwecanconcludethatd typically statistical methods significantly low isthe percentage significance ofthedeviationbetweend andd figure forcomputingp fig ntimes tobeprecise tojustifythecomputationalcost thecostandthebenefit domain expert manually inspecting datasets models induce ifnecessary avaluebetween forthenumbernof fornow letusassumethat insection wedescribeone instantiations inthissection dt-models cluster-models whereverpossible ateddeviationfunctions lits-models lits-models erty gantietal deviationfunctionsd whereg sum max refinement relation structural components 
sets letc andc formally ifl thepowerset isthesetofitemsetsind withsupportgreaterthanm ofaset tice gra infact itformsalattice proposition class lits-models set items exhibits two-componentpropertyand meet-semilattice onceagain isthegcrofl andl supports itemset gcr shown sum andd max show gcr modelsrather common refinement deviation reinforces interpretation asalways theorem sum max common refinementofc andc upperboundd ford inanexploratory butrequirefastresponses wenowderiveanupperboundd whichwillprobablyfitin mainmemory unlikethedatasets usingtheupperboundd ofdissafe alsosatisfiesthe triangle inequality embed collection datasets definition betheclassof lits-models andm betwo inducedbyd andd leto def wedefined def theorem models induced sum max thenthe followingpropertieshold satisfiesthe triangleinequality computedwithoutscanningd ord dt-models discuss attractive properties arise due gcrofthetwomodels intuitively iftheypartitionc predicate representation regions formally defining refinement relation rest section dt-modelsinducedbyd andletp aregionc definition wesaythatc iffp intuitively dt-modelsisthefiner partitionofa anding allpossiblepairs forexample fig showsthe andt forthe sakeofclarity inthegcr identical structure exists class label formally gcrc ofc andc cisidentifiedbyp proposition letmbe classof dt-models refinementrelation meet-semilattice onceagain andt forthesakeofclarity onlythe measuresofclassc frombothd andd areshownint sum regions class thananycommonrefinement sum theorem letc common refinement ofc andc letg sum lits-models itis max thatviolatestheabove statement gantietal focused deviations inthissection twodifferentscenarios monitoring theobjectivein datasets similar drill-down roll-up strategies olap databases cod andthead hoc nlhp datasetfitsanewdataset averyusefulpropertyof focus isthatwecan eachregioninthe structuralcomponent ofthemodelmcanbeindependentlyfocusedwithrespecttocbytakingitsintersectionwithc themeasurewith focusedwithrespecttociss definition model induced dataset bearegion calledthe focusing region thenthe focus mwith respecttocisdefinedas def denote sets focussedwithrespecttoc theorem shows theory developed class modelsmcanbeappliedtom aswell theorem classes models litsmodels dt-models cluster-models refinementrelationsuch forms meet-semilattice focusing region meet-semilattice definition ganaggregatefunction models induced deviation betweenm andm definedas def ifc forexample models constructed sum max thesameisnottrueford tors dividedintotwogroups structural rank operators thebasicintuition viewedassetsofregions intersection betweenthemodels andc andreturnas class dt-models sets regions structural union thestructuralunion oftwosetsof regionsc andc isgivenbytheirgcr structural intersection andc andc structural difference informally thestructuraldifferencec ofc andc andc differstructurally formally def predicatep tifiedbyp givenasetofregions interestingness deviationfunction rank givenasetofregionsc twodatasetsd andadeviationfunction rank operator returnsasoutputalist sinced andd select forexample top-region top-n regions bottom-region bottom-n regions common selections denotetheseselectionsbyh top bot andh weexpecttheselect whichorders gantietal exploratory analysis constructedfromd andd showninfig areconsideredsignificant andd iff withrespecttoclassc notethatregion isaleafnodeoft butregion thesub-regionsof int donot andd wehavetofindregions top sum top sum theshoesandclothes andi supposed andd ananalystcomparesthetop- letl andl computedfromd andd expressions return toplists department combinedtopr monitoring change andthequestion canbecastas decision trees misclassification error widely purpose bfos asweshow usingbootstrapping toaddressthisquestion choicesoffandg models decision trees change monitoring specific regions misclassificationerror lett pbea dt-model constructedonadatasetd andletd beanindependentdataset foreachtuplet letc betheclasslabel predictedbytfort thentissaidtobe misclassifiedbyt oftwithrespecttod misclassifiedbyt def andtmisclassifiest wedefinethepredicted datasetd ofd witht spredictionfort def isthedeviationbetweend andd atc theorem dt-model induced dataset sum chi-squaredgoodnessof fit statistic expected observed measures fordetails partition entire attribute space expected observed measures thestatisticx cannowbe shouldnotbe isacommonchoice toensurethis atleast inordertouse thestandardx tables inadecisiontree iwillbezero distributionofx procedure seesection adaptedasdescribedabove canbe instantiatedfromfocus gantietal proposition lettbe decision tree induced byd letd dataset letcbe small constant givenby sum ifv exploratory analysis olap data on-line analytic processing olap interactive exploratory analysis relationaldata asa typicalexample marketing strategies devise strategies analysis interactive severalmethodstoexpedite processing aggregate queries olap context proposed aad zdn sarawagiet sam arguethat itisnecessaryto deviatesignificantly anticipated behavior instance total profit city madison higher anticipated analyst informed sarawagiet sdiscovery-driven theycapturethenotion inthis section show comparison actual anticipated insection webriefly insection weillustrateitsinstantiationfromthefocusframework discovery-driven exploration olap data someexamplesfordimensional attributes product store location examplesfor dependent attributesaresales profit dimensionalattributeson series aggregate withasetsofgrouping andameasure function thefunctionssum average min andmax aggregate function toavoidtheconfusion considerarelationr withdimensional attributescityandproduct type letthesum city profit selectsum profit selectcity sum profit selectcity producttype sum profit fromr fromr fromr groupbycity groupbycity producttype toanaggregatequeryexists sarawagi inristwo type insteadofacity thatbehavesunusually sarawagiet annotatethedownwardpath mostdetailedgrouping indicators ssearch forthe purpose instantiating discovery-driven analysis method focus framework instance madison coffee wherecoffeeisa producttype employed sam givenyandy theactual tionvalueoftis whererisaconstant thedata instantiation discovery-driven exploration method discovering exceptions instantiated focusframework theanswers tice identified gantietal fig aggregatequeries inthissection measure function forms meet-semilattice illustrate observation formalizing relation consistsofasetoftuples oneforeachcity inr thetotalprofit forthatcity thisexample generalizing thesetoftuplesin componentandthecorrespondingsetofper-tuplemeasuresconstitutesthemeasurecomponent considerthequeriesq andq canbe computedfromtheanswertoq thatis isthesumofthemeasures profitsums theanswertoq answertoq measurefunctions average min max isstraight-forward tionissum ingeneral theanswertoaqueryq grouping onthesets groupingon set attributes instance grouping set attributes city ofq itwasalreadyshownin section superset relation induces meet-semilattice theorem lets set dimensional attributes andybe dependent attribute relation measure function sum weanalyze themoneatatime average min max set aggregate queries measurefunctionmonr theanswera toanyqueryq isatwo-componentmodel thesetofanswersa toallqueriesinq formsameet-semilattice asanillustration infig attributes forinstance city city iftheanswera toaqueryq refines thatofanotherqueryq tothevertexrepresentinga finally fromsection weknowthat andthatthey formameet-semilattice where-clausepredicate inthissection insection query informally exceptionvalue letthesetoftuples structural component intheanswertoqbec lets ands bethemeasure componentandthe statistically letrbeaconstant valueofatuple formally sum max thefunctionsfandginstantiateadeviationfunctiond tionaltupleinc ands top replacingthe top operatorwiththe tuples effect sample size gantietal underlyingdataset inthissection thefollowingquestion constructing model random sample drawn dataset bigger sample sizes necessarily yield models weapply representativeness ofarandomsampleininducingthe true model thatis webelieve model datasets representativenessofthesampleininducingthetruemodel letmbethemodelinducedbyd andm themodelinducedbyarandom samplesdrawnfromd wedefinethesample deviation ofstobed thesmallerthesdofs thisdefinitiongivesus usingsd wenowaddresstwoquestions decrease decrease significant artifact randomfluctuation thenthesds sample sizes compared answer question sections andmodels thenthesecondquestion isirrelevant thesignificanceisthe percentageconfidence null hypothesisthat basic intuition procedure sets containssamplesofsizes andthesecond set containssamplesof size measuresfor size smallerthanthatfors tobesmallerthanthosefors empirical study section present empirical study representativeness table lits-models significance decrease froms tos samplefraction significance table dt-models significance decrease froms tos samplefraction significance lits-models data generator downloaded http almaden ibm quest syndata html pats pplen refer thousand items thousandpatterns andaveragepatternlengthp weusedtheapriori algorithm fig sdvssf fig sdvssf fig sdvssf gantietal inthissection weonlypresentthe resultsofd sum theyare discussedinsection variedtwoparameters million million million transactions parameters data generator set figures showthesample deviation versus sample fraction values draw conclusions thesizeofthesample thisistobe estimatethemodel foragivensfvalue itsrelativesize withrespecttothedataset table pats plen wemeasuredthesignificanceusingthewilcoxontestonsetsof sample fromfigs dt-models ais ithasseveralclassificationfunctionstogeneratedatasetswithdifferentcharacteristics weselectedfour functions functions performance study functionnum bfos grg toconstructdecisiontreemodels weusedd sum table sample size increased significance measured wilcoxon test sets sample deviation values sample size figures andf conclusionsfromthis study forbothclassesofmodels tests sample deviations statistically significant sample sizes large ontheotherhand andformany applications oftheoriginal dataset fig sdvssf fig sdvssf fig sdvssf experimental evaluation inthissection wefirstconsider lits-models andthen dtmodels andtheconsequentapplications thesameasinsection set frequent itemsets inthissection wefirst wethenevaluatethe gantietal fig deviationwithd pats plen pats plen compute deviations varietyofdatasets alldatasetsd length items consistsof ktransactions consistofa milliontransactionseach andd consistof ktransactionseach thenumber ineachcase wesettheminimum supportlevelto figure thedeviationvalue sum anditssignificanceinrow reflectthefactthatd hasthesamedistributionasthatofd asexpected differsignificantlyfromd patlen hasalargeinfluenceon datacharacteristics theadditionofd andd tod rows causesignificantdeviationsbecausetheydifferinthepatlenparameterwhereastheadditionof row thelastthreecolumnsinfig showthatd neously isduetothefactthatdandd themodels decision tree classifiers seesection fordt-models inthisexperiment compute deviations sum significance values andavarietyofdatasets figure significance datasetsused 
rows tuplesgeneratedusingf andd fig deviationwithd inrow islowbecauseithasthesame distributionasthatofd high asexpected fromrows blocksofsize infig chosenfrom andd againstthe relation sensitivity deviation functions inthissection westudy smoothorchoppy indicatesthesensitivityofthedeviationfunctiontothevariabilityinthedatasets dt-models figures andf tions max sum andd max tionf fig deviationvs gantietal fig sdvssf fig sdvssf fig sdvssf fordecisiontree modelssohigh andm inducedbyd andd ind andv ind ifthestructural componentsc andc aredifferent itispossiblethatv andv inwhich casef wastorecognize suchdifferences thiscaseoccursoften asillustratedbyfigs becausethe structuralcomponent wheng max isused contrast exceptions thenf isagoodfunctiontouse infigs functionf classification functions plot coincides x-axis butes theexactstructural fig sdvssf fig sdvssf fig sdvssf sample duetorandomfluctuations structural componentsof models induced sample differ slightly whenf differenceisverysmall seefigure isused figures theplotsinvolvingf lits-models figures show plots sample deviation versus sample fraction dataset pats plen max sum andd max sum themeasuresv andv thusthecasedescribedin thepreviousparagraph andv orcaseswherev andv differalot extremelyrare gantietal related work thegeneral fittests hypothesis similar framework generalizes approaches ways popular classes data mining models traditional statistical models bootstrapping-based procedure computing significance chi-squaredornormal outliers withinthe ekx grs zrl aar gmv theycharacterizedoutliersinthedataandproposedalgorithmsfordiscoveringthem noneof thiswork wasaddressedin csd givenapattern oritemset theiralgorithms propose track variation temporally ordered set transactions tics coc dem discussinthispaper howdatacharacteristics varywithsamplesize conclusions inthispaper datasets instantiated framework lits-models dtmodels cluster-models applied focus interesting applications interactive twodatasets procedure qualify statistical significance deviationmeasure frequentitemsets decisiontreeclassifiers andclusters goodnessoffitstatistics sam ourconclusion aad agarwal agrawal deshpande gupta naughton ramakrishnan ands sarawagi proc ofthe ndint mumbai bombay india sept aar arning agrawal andp raghavan large databases proc int conference knowledge discovery databasesanddatamining portland oregon aug aggr agrawal gehrke gunopulos andp raghavan high dimensional data data mining proceedings acm sigmod ais agrawal imielinski anda swami databasemining aperformanceperspective ieeetrans knowledgedataengrg ams agrawal mannila srikant toivonen anda inkeriverkamo fastdiscovery association rules advances knowledge discovery data mining fayyad piatetsky-shapiro smyth andr uthurusamy eds chap aaai mitpress cambridge anderson wiley newyork agrawalandg psaila activedatamining agrawalandr srikant proc ofthe thint santiago chile sept bickel doksum classification statistics basic ideas selected topics prentice hall englewoodcliffs bfos breiman friedman olshen andc stone classificationandregressiontrees wadsworth belmont bmut brin motwani ullman ands tsur tion rules market basket data proc acm sigmod conference managementofdata chnw cheung han andc wong rulesinlargedatabases proc int neworleans feb gantietal coc cochran samplingtechniques wiley newyork cod codd providingolap touser-analysts anit mandate technicalreport coddandassociates csd chakrabarti sarawagi andb dom descriptionlength proceedingsofthe databases aug dem deming wiley newyork dubesanda jain adv comput agostinoandm stephens dekker york ekx ester kriegel andx largespatial databases proc ofthe stint anddatamining montreal canada aug efronandr tibshirani chapmanandhall london faam feldman aumann amir andh mannila frequent sets incremental databases workshop research issues data fpssu fayyad piatetsky-shapiro smyth andr uthurusamy eds advancesin aaai mitpress cambridge ggr ganti gehrke andr ramakrishnan summaries aug ggrl gehrke ganti ramakrishnan andw loh construction proceedings acm sigmod international conference managementofdata june gkr gibson kleinberg andp raghavan anapproach basedondynamicalsystems proceedingsofthe verylargedatabases newyorkcity newyork aug gmv guyon matic andv vapnik fayyad piatetskyshapiro smyth andr uthurusamy eds aaaipress menlopark gra gratzer latticetheory freeman sanfrancisco grg gehrke ramakrishnan andv ganti rainforest proceedingsofthe onverylargedatabases morgankaufmann sanmateo grg ganti ramakrishnan gehrke powell andj french clusteringlargedatasetsinarbitrarymetricspaces proceedingsofthe dataengineering sydney mar grs guha rastogi andk shim cure databases proceedings acm sigmod conference management data june grs guha rastogi andk shim rock attributes sydney mar gaffneyandp smyth trajectoryclustering aug imielinski heikki mannila database perspective knowledge discovery commun acm knorrandr proceedings international conference large databases aug lohandy shih statist sinica lohandn vanichsetakul minantanalysis withdiscussion amer statist assoc mar mehta agrawal andj rissanen sliq proc ofthefifthint edbt avignon france mar ngandj han proc ofthevldbconference santiago chile september nlhp lakshmanan han anda pang optimizations constrained association rules proceedings acm hassanda tiwary eds june pcy park chen andp association rules proc acm-sigmod conference management data sanjose rastogiandk shim public pruning proceedingsofthe bases newyorkcity newyork aug sam shafer agrawal andm mehta sprint mining proc ofthe ndint bombay india sept sam sarawagi agrawal andn megiddo cubes proceedings international conference extending database technology valencia spain shavlikandt dietterich morgankaufmann sanmateo son savasere omiecinski ands navathe proc ofthevldbconference zurich switzerland sept silbershatzanda tuzhilin systems ieeetrans knowledgedataengrg tbar thomas bodagala alsabti ranka efficient algorithm incrementalupdationof associationrulesin largedatabases proceedingsof zdn zhao deshpande andj naughton sigmod zrl zhang ramakrishnan andm livny birch forverylargedatabases proc ofdata montreal canada june gantietal 
gestalts networked databases gestalts networked databases click start table contents gestalts networked databases overview outline gestalt integration parts network parts contd non-tabular sources problems address creating gestalts approach integration approach contd registering source network information system nis semantics nis semantics nis contd related approaches related approaches contd technical challenges authorization searching searching contd caching latency change management monitoring updates transactions qos activity tracking parts contd qos activity tracking contd queries parts contd parts contd architecture summary issues author raghu ramakrishnan 
olap uncertain imprecise data doug burdick prasad deshpande jayram raghu ramakrishnan shivakumar vaithyanathan ibm almaden research center wisconsin madison abstract extend olap data model represent data ambiguity specifically imprecision uncertainty introduce allocation-based approach semantics aggregation queries data identify natural query properties shed light alternative query semantics work representing querying ambiguous data knowledge paper handle imprecision uncertainty olap setting introduction paper extend multidimensional olap data model represent data ambiguity specifically imprecision uncertainty study semantics aggregation queries data work representing querying ambiguous data work context olap knowledge paper identify criteria satisfied approach handling data ambiguity olap setting criteria principled manner arrive semantics queries criterion called consistency accounts relationship similar queries issued related nodes domain hierarchy order meet users intuitive expectations navigate hierarchy criterion called faithfulness captures intuition precise data lead results criterion called correlation-preservation essentially requires statistical properties data affected allocation ambiguous data records criteria specific olap knowledge proposed previously extend usual olap data model fundamental ways relax restriction dimension permission copy fee part material granted provided copies made distributed direct commercial advantage vldb copyright notice title date notice copying permission large data base endowment copy republish requires fee special permission endowment proceedings vldb conference trondheim norway attributes fact assigned leaf-level values underlying domain hierarchy order model imprecision denote repair place texas city implications answer queries query aggregates repair costs austin repair included extension introduce kind measure attribute represents uncertainty intuitively uncertain encodes range values belief likelihood specifically represent uncertain measure probability distribution function pdf values base domain contributions summarized generalization olap model represent data ambiguity knowledge generalization addresses imprecise dimension values uncertain measure values introduction criteria consistency faithfulness correlation-preservation guide choice semantics aggregation queries ambiguous data possible-worlds interpretation data ambiguity leads allocation-based approach defining semantics aggregation queries careful study choices arising treatment data ambiguity consistency faithfulness correlation-preservation criteria algorithms evaluating aggregation queries including average count sum ordinary measures linop uncertain measures complexity analysis experimental evaluation addresses scalability result quality related work extensive literature queries ambiguous data papers considered olap setting closest work considers semantics aggregation queries uncertainty investigate criteria shed light query semantics problem imputing missing measure values linear equations entropy maximization cross-entropy minimization constraint programming techniques describes method estimate error cube aggregates data generalization method uncertain data clear earliest work aggregate queries imprecise data papers data-level hierarchies central olap approach leads exponential-time algorithm sum models uncertainty intervals pdfs algorithms aggregating develops linear programming based semantics computing aggregates probabilistic databases note discusses uncertainty supports aggregate functions uncertain data doesn support imprecision hierarchies key contribution paper methodology identifying intuitive criteria consistency faithfulness correlation-preservation study alternative query semantics approach applied olap setting faithfulness correlation-preservation specific olap respect approach similar spirit summarizability introduced study interplay properties data aggregation operators properties data possess results aggregation functions meaningful number papers imprecision uncertainty non-aggregation queries world semantics represent imprecise data discussed associate probability distribution data data element tuple level generalize relational algebra operators reflect probability seek identify inconsistent data repair databases consistent state contrast focus imprecise consistent data integrity constraints domain constraints sources data ambiguity classified approaches representing processing ambiguity discusses similarities statistical databases olap data model section present generalization standard multidimensional data model incorporating imprecision uncertainty data representation attributes standard olap model kinds dimensions measures extend model support uncertainty measure values imprecision dimension values definition uncertain domains uncertain domain base domain set probability distribution functions pdfs square pdf intuitively degree belief true represented base domain uncertain domains paper section definition imprecise domains imprecise domain base domain subset powerset elements called imprecise values square intuitively imprecise non-empty set values allowing dimension attributes imprecise domains enables imprecise wisconsin location attribute data record sale occurred wisconsin unsure city olap dimension hierarchy location dimension attributes city state state denoting generalizations city suggests natural special case imprecise domains called hierarchical domains define definition hierarchical domains hierarchical domain base domain defined imprecise domain singleton set corresponds element pair elements square intuitively singleton set leaf node domain hierarchy non-singleton set nonleaf node madison milwaukee leaf nodes parent wisconsin turn usa parent refer hierarchical domain terms leaf non-leaf nodes convenience definition fact table schemas instances fact table schema dimension attribute domain dom imprecise measure attribute domain dom numeric uncertain database instance fact table schema collection facts form dom dom dom hierarchical leaf non-leaf node dom square definition regions cells fact table schema dimension attributes vector called cell element base domain region dimension vector defined set cells reg denote region fact square proposition fact table schema dimension attributes hierarchical domains k-dimensional space auto loc repair text brake sierra camry camry civic civic east truck table sample data crm application automobiles axis labeled leaf nodes dom region set cells region contiguous dimensional hyper-rectangle orthogonal axes dimension attribute hierarchical domain intuitive interpretation fact database region k-dimensional space leaf nodes observation precise describes region consisting single cell assigned non-leaf nodes observation imprecise describes larger k-dimensional region cell inside region represents completion imprecise fact formed replacing non-leaf node leaf node subtree rooted process completing imprecise fact manner represents world database section motivating scenario car manufacturer crm application track manage service requests worldwide dealer operations fact table illustrating data shown table fact describes incident columns dimension attributes automobile auto location loc values hierarchical domains structure domains regions facts shown figure precise facts table leaf nodes assigned dimension attributes mapped cells figure facts hand imprecise fact imprecise location dimension assigned non-leaf node east region cells similarly region cells sierra fact numeric measure attribute repair denoting repair cost incident measure uncertainty classify incidents based type problem brake transmission engine noise auxiliary text attribute subjective nature text precludes unambiguous classification service reports problem types model ambiguity defining uncertain measure values represented pdfs set problem types due dynamic nature text analysis engines problem types continuously added impractical assume base domain problem types fixed apriori address assume exist trained classifiers type problem output discrete probability distribution based analyzing content text attribute pdf output reflects uncertainty inherent classifiers output classifier brake topic represented pdf values stored uncertain measure attribute brake pair probabilities shown table note analysis algorithms presented henceforth applicable attributes base domain greater queries olap 
paradigm offers rich array query operators basic query consists selecting node dimensions applying aggregation operator measure attribute selecting location node automobile node civic applying sum repair measure returns total amount spent repairs civic cars texas queries roll-up slice drill-down pivot terms repeated applications basic queries concentrate studying semantics basic queries light data model extensions extension full array olap query operators straightforward omitted lack space definition queries query results query database schema form describes k-dimensional region queried describes measure interest iii aggregation function result obtained applying set facts find-relevant detail square function find-relevant identifies set facts deemed relevant query region definition function important issue addressed paper precise facts query region naturally included important design decision respect imprecise facts options ignore imprecise facts option include contained query region option include imprecise facts region overlaps intersects query region overlaps option motivating contd handle imprecise facts answering queries central issue illustrate sections study options determining facts relevant query rigorously aggregate queries type repair costs east sum aggregate measure attribute repair region denoted east queries depicted figure boxes enclosing query region instance query corresponds figure tio civic sierraf camry trucksedan automobile model category gio ate figure multidimensional view data queries regions overlap precise facts set relevant facts clear queries trickier option result imprecise fact option result answer answer reasonable region result reflects data subtle issue option determine relevant facts standard olap answer aggregate answers case observing overlaps cells choose partially assign cells process refer allocation partial assignment captured weights reflect effect aggregate computed cells overlaps option observe user expected relationship refer consistency maintained addition consistency notion result quality relative quality data input query refer faithfulness answer computed higher quality precisely illustrate role allocation query allocated cells region answered answer undefined regular olap allocation accomplished ways reasonable expect allocation query independent answered allocation consistency faithfulness discussed sections discussion possible-world semantics underlying allocation presented section allocation algorithms discussed section clarity exposition statements theoretical claims included main body paper explanations proofs found aggregating uncertain measures query type brake problems sedans corresponds query aggregation uncertain measure brake answer query aggregation pdfs notion aggregating pdfs closely related problem studied statistics literature opinion pooling informally opinion pooling problem provide consensus opinion set opinions opinions consensus opinion represented pdfs discrete domain pooling operators studied linear operator linop widely linop produces consensus pdf weighted linear combination pdfs summationtext weights non-negative quantities summing form prior knowledge assume weights uniform case average probabilities straightforward compute linop aggregation functions current olap systems olap requirements providing support olap-style queries presence imprecision uncertainty argue answers queries meet reasonable set requirements considered generalizations requirements met queries standard olap systems propose requirements handling imprecision consistency faithfulness apply numeric uncertain measures requirements handling uncertainty proposed requirements argue overlaps option handling imprecision results well-behaved queries context olap consistency intuition consistency requirement user expects natural relationships hold answers aggregation queries connected regions hierarchy definition -consistency predicate argument takes values range fixed aggregation operator collection queries query region partitioned query regions reg reg reg reg negationslash query specifies applied measure attribute denote set answers algorithm satisfies -consistency respect holds database collection queries square notion consistency spirit summarizability introduced specific goals nature underlying data aggregation functions behavior user expects specific forms consistency define consistency predicates aggregation operators considered paper notations definition -consistency definition sum-consistency sum-consistency defined summationtexti square intuitive notion consistency sum count sum distributive function sum query region equal obtained adding results sum query sub-regions partition region statements sum paper applicable count explicitly mentioned interest space definition boundedness-consistency numeric measure consistency predicate defined mini maxi uncertain measure inequalities hold probabilities elements base domain formally probability element mini maxi square boundedness-consistency intuitively kind averaging operator numeric measures aggregation operator uncertain measures average query region bounds average query sub-regions partition region case linop property hold element-wise pdfs important consequence -consistency properties defined option unsuitable handling imprecision shown theorem exists sum aggregate query violates sum-consistency option find relevant imprecise facts find-relevant similar theorems shown aggregation operators omit interest space faithfulness starting database suppose increase imprecision mapping facts database larger regions expect answer query database dprime original answer faithfulness intended capture intuitive property difference small aggregation algorithm dprime input aware original database hope general state precise lower upper bounds difference aim state weaker properties characterize difference monotonic respect amount imprecision definition helpful formalizing faithfulness definition measure-similar databases databases dprime measure-similar dprime obtained arbitrarily modifying dimension attribute values fact rprime dprime denote fact obtained modifying corresponds rprime square query fact region completely contained query region completely disjoint situation reasonable treat facts precise respect imprecision facts ambiguity respect query region form faithfulness formalizes property illustrated figure definition basic faithfulness measure-similar databases dprime identically precise respect query pair facts rprime dprime reg reg rprime completely contained reg completely disjoint reg algorithm satisfies basic faithfulness respect aggregation function query algorithm identical answers pair measure-similar databases dprime identically precise respect square basic faithfulness enables argue option handling imprecision ignoring imprecise records inappropriate intuitively expect theorem sum count average linop violate basic faithfulness option handle imprecision theorems demonstrate unsuitability options handling imprecision remaining option overlaps focus efforts rest paper raises challenge handle relevant facts partially overlap query region tackle problem sections allocation-based approach summarizing worlds led imprecise dataset form faithfulness intended capture intuition basic faithfulness complex setting imprecise facts partially overlap query define ordering compares amount imprecision databases respect query order reason answers amount imprecision grows definition partial order precedesequalq fix query relation dprime holds measure-similar databases dprime pairs facts dprime identical single pair facts rprime dprime reg rprime obtained reg adding cell reg reg define partial order precedesequalq reflexive transitive closure square figure illustrates definition precedesequalq query amount imprecision fact rprime dprime larger fact cells query region reason restriction allowing rprime larger projection inside query region necessarily relevant basic faithfulness query region partial overlap query region partial order figure forms faithfulness definition -faithfulness predicate argument belongs range fixed aggregation operator algorithm satisfies -faithfulness respect query compatible set databases precedesequalq precedesequalq precedesequalq predicate holds true denotes answer computed algorithm square specific forms faithfulness discuss -faithfulness applies aggregation operations considered paper sum sum non-negative measure 
values intuitive notion faithfulness data query region imprecise grows query region sum non-increasing definition sum-faithfulness sum-faithfulness defined precedesequalq square camry sierracivic civic sierraf camry civic sierraf camry civic sierraf camry civic sierraf camry figure worlds average linop difficult define instance -faithfulness average linop average behave facts query region imprecise grow query region sum query region diminishes count decreases numerator denominator decreasing average increase decrease observation applies linop worlds describe possible-worlds interpretation database imprecise facts similar proposed prelude defining query semantics overlaps option find relevant facts imprecise fact maps region cells recall discussion proposition cell represents completion eliminates imprecision repeating process imprecise fact leads database dprime precise facts call dprime world multiple choices eliminating imprecision lead set worlds illustrate worlds figure shows multidimensional view data running figure worlds generated making imprecise facts precise fact made precise ways placing cell similarly made precise ways placing sierra combinations choices lead worlds square interpret worlds collection true databases database obtained likelihoods world true necessarily capture likelihood associate non-negative weight normalized summationtextiwi weights give flexibility model behaviors imprecision normalization probabilistic interpretation worlds extended data model imprecise facts dataset region ith imprecise fact cells number worlds producttextki tackle complexity due exponential number worlds imprecise fact assign probability true cell region assignments imprecise facts collectively implicitly associate probabilities weights world explain definition allocation fact cell reg denote probability completed underlying true world call allocation fact cell require thatsummationtextc reg probabilistic process starting database imprecise facts independently imprecise fact pick cell probability pci modify dimension attributes resulting fact belongs cell set databases arise process constitute worlds weight world dprime equalsproducttextki pci procedure assigning referred allocation policy result applying policy database allocated database schema columns additional columns track cells strictly positive allocations suppose fact unique identifier denoted fact create set fact reg andsummationtextpc square allocation policies detail section size increases linearly number imprecise facts region imprecise fact exponentially large number dimension attributes assigned non-leaf nodes care determining cells positive allocations figure suppose probabilities cells create facts belonging weight weight tagged identifier similarly facts belonging sierra square summarizing worlds allocation weights encode set worlds weights answer query multiset multiset worlds give answer left problem semantics summarizing recall weights give probabilistic interpretation worlds database chosen probability summarize answers defining discrete random variable distribution definition answer variable multiset answers query define answer variable random variable pdf summationtextjs square answer query summarized moments expected variance answer variable answer queries justified theorem theorem basic faithfulness satisfied answers queries computed expected answer variable approach summarizing worlds answering aggregation queries intuitively appealing complicates matters number worlds grows exponentially number imprecise facts allocations compactly encode exponentially large set challenge summarize explicitly allocations iterate worlds proceed design efficient algorithms summarizing aggregation operators extended data model notation description algorithms fix query region set facts potentially contribute answer positive allocation denotes set cells fact strictly positive allocations desired set facts negationslash set candidate facts query candidate fact indicator random variable event completion belongs summationtextc random variable equation equals sum allocations query region slight abuse notation allocation query full partial finally note independence assumption modeling imprecision implies random variables statistically independent answer query extended data model steps step identify set candidate facts compute allocations accomplished filter query region accomplished identifying groups facts share identifier column summing allocations group end step set facts fact allocation measure note step depends query region step step specialized aggregation operator comments order seek identify information compute summarization circumventing enumeration worlds cases merge step order gain savings expected sum computed extra optimization step discussed sum random variable answer sum query summationtextr vryr numerical measure record expression efficiently compute expectation variance sum theorem expectation variance computed sum single pass set candidate facts expectation sum computed extended data model satisfies sum-consistency sum -faithfulness violated extended data model built arbitrary allocation policies define class allocation policies guarantee faithfulness allocation policies discussed section definition monotone allocation policy dprime similar data sets property regions identical pair facts single pair rprime rprime dprime reg rprime reg cell fix allocation policy resp pprimec denote resulting allocations resp dprime computed respect monotonic allocation policy pprimec fact cell negationslash square monotonicity strong reasonable intuitive property allocation policies database imprecision unique world weight amount imprecision increases set worlds increase monotone allocation policies restrict weights larger set worlds defined region larger allocations cells redistributed cells theorem expectation sum satisfies sumfaithfulness allocation policy build extended data model monotone average case random variable answer vryrp computing expectation difficult appearance numerator denominator shown theorem device non-trivial algorithm average theorem number partially completely allocated facts query region exact expected average computed time passes set candidate facts algorithm feasible cost computing exact average high number partially allocated facts high address theorem shows efficiently compute approximation average vryr theorem approximate estimate average computed time single pass set candidate facts relative error estimate negligible lessmuch assumption lessmuch theorem reasonable databases expect fraction facts missing values contribute query small compare solutions average exact approximate estimate terms requirements show theorem expectation average computed extended data model satisfies basic faithfulness violates boundedness-consistency hand theorem approximate estimate average defined satisfies boundedness-consistency basic faithfulness theorems show tradeoff accurate answering queries consistent efficiency aspects small relative error reasonable conditions approximate estimate propose estimate answering queries uncertain measures section proposed linop reasonable aggregation operator uncertain measures address issue summarizing linop worlds approach compute linop facts worlds simultaneously facts world weighted probability world analogous approximate estimate average definition agglinop worlds weights fix query denote set cell mapped belongs reg agglinop defined summationtext summationtext vrwisummationtext summationtext vector represent measure pdf square similar approximate estimate average agglinop computed efficiently satisfies similar kinds requirements theorem agglinop computed single pass set candidate facts satisfies boundednessconsistency basic faithfulness allocation policies previous section designed efficient algorithms aggregation operators extended data model proved consistency faithfulness properties turn task building extended data model imprecise data allocation policies design algorithms obtain imprecise fact cell reg denote dimension attributes fact recall proposition reg equals k-dimensional hyper-rectangle cells subset leaf nodes dom cell reg defined tuple allocating cell amounts replacing i-th attribute space allocation policies large facilitate discussion categorize allocation policies dimension-independent measure-oblivious correlation-preserving 
definition dimension-independent allocation allocation policy dimension independent property holds fact suppose reg exist values summationtextb producttexti square definition interpreted probabilistic terms choosing independently leaf nodeci probability part definition ensures defines legal probability distribution part allocation equals probability summarizing estimate uncertain measures analogous exact estimate average defined considered drawbacks cell chosen process uniform allocation policy fact uniformly allocated cell reg simplest policies show theorem uniform allocation dimensionindependent monotone allocation policy policy simple implement drawback size extended data model depends number cells non-zero probabilities prohibitively large imprecise facts large regions definition measure-oblivious allocation allocation policy measure-oblivious holds database dprime obtained possibly modifying measure attribute values fact arbitrarily keeping dimension attribute values intact allocations produced policy identical facts dprime square strictly speaking uniform allocation measureoblivious policy general policies class require dimensions independent policy count-based allocation data divided groups consisting precise imprecise facts denote number precise facts map cell imprecise fact cell ncsummationtext cprime reg ncprime allocation imprecise facts determined distribution precise facts cells multidimensional space theorem count-based allocation measureoblivious monotone allocation policy potential drawback count-based allocation imprecise facts allocated rich richer effect understand region allocation region distribution precise facts cells region count-based allocation highly conceivable distribution significantly cases desirable retain original distribution exhibited precise facts applying requirement entire multi-dimensional space motivates introduction correlation-preserving class policies definition correlation-preserving allocation corr correlation function applied database consisting precise facts function compute distance results applying corr precise databases allocation policy database consisting precise imprecise facts set worlds denote allocations produced recall definition define weight quantity corr summationtextiwi corr called correlation distance respect allocation policy correlation-preserving database correlation distance respect minimum policies square instantiating corr pdf dimension measure attributes kullback-leibler divergence dkl definition obtain minimizing dkl summationtextiwipi corr difficult optimization problem exponentially large number worlds surrogate objective function denote pdf summationtextiwipi expression dkl summationtextiwipi determined unknown pdf direction statistical learning treat statistical model obtain parameters maximizing likelihood data respect show obtain allocation weights solved parameters advantage method generalizes case uncertain measures proceed derive recall fixed uncertain measure attribute fact denoted vector probability base domain element viewed empirical distributions induced sample defined frequencies events sample uncertain measures simply summaries individual observations fact likelihood function case written simple obvious algebra obtain objective function equivalent likelihood function summationdisplay dkl parenleftbigg summationtext reg reg parenrightbigg measure distribution cell pdf base domain vast literature nonlinear optimization algorithms obtain solution optimization problem goal obtain allocation weights objective function fortunately mechanics expectation maximization algorithm elegant solution dual variables algorithm naturally allocation kullback-leibler divergence defined distributions domain aspx log weights providing convenient link back world semantics figure presents algorithm likelihood function details fairly standard derivation omitted interest space repeat converged e-step facts cells reg base domain element cprime reg cprime m-step cells reg oprime reg prime oprime figure method result e-step obtain convergence algorithm represents posterior distribution values reg alternate pleasing interpretation context view dual variables view meets requirements allocations complication added dependency measure domain fact allocation weights number values inconsistent extended data model easily rectified marginalizing resulting expression summationdisplay summationtext cprime cprime allocation policies numeric measures derived lines algorithm straightforward manner omitted interests space experiments section evaluate main contributions paper extensions olap handling imprecision uncertainty end designed conducted experiments evaluate scalability quality scalability experiments targeted construction querying extended data model quality experiments targeted performance allocation policies varying characteristics data scalability extended data model experiments conducted ghz pentium machine physical memory single ide disk back-end commercial relational database system buffer pool size set materialized views indices built data provide controlled environment evaluation synthetically generated data consisting dimensions experiments numeric measure uncertain measure base domain size conducted dimensions hierarchical domains levels hierarchical domains root tree children root child children resulting leaf nodes branching factors remaining dimension leaf nodes million cells multidimensional space initial data consisted million facts density generated choosing uniform probability leaf node hierarchy dimension imprecision introduced replacing leaf node dimension parent hierarchy imprecise facts dimension made imprecise facts imprecise imprecise dimension imprecise dimensions figure plots running time allocation policies note increase linearly respect number imprecise records running time components processing input data writing facts extended data model component high iterative algorithm requiring multiple scans explains reason longer running time uniform count require single scan larger running time uniform respect count due component input data density low uniform allocates empty cells number allocated facts created uniform significantly larger count imprecision uniform million facts count million facts relative difference uniform count increase input data density decreases imprecise uniformcount imprecise uniformcount allocation algorithm running time query running time performance figure performance results experiment evaluated performance standard olap point queries extended data models created sum calculated sql template select dim-values sum measure weight fact-table dim-tables qualification-list group dim-values understand runtime behavior randomly generated total queries choosing random level node dimension figure shows average query running time sum runtime behavior linop average approximate estimate similar omitted interests space general running time dominated cost scanning extended data model higher uniform count quality allocation policies experiments evaluate data characteristics affect behavior proposed allocation policies facts precise dependencies dimensions perfectly encoded cell counts facts imprecise portion correlation information lost strength encoding loss measured expected number records non-empty cell define notion density pseudo-density intuitively high pseudo-density ensures empty cells created records imprecise characteristic chose examine measure correlation captures effect dimension values measure synthetically generated data consisting dimensions leafs dimension grid single uncertain measure base domain start generating precise data set desired pseudo-density measure correlation total grid cells data records regular density fixed select random percentage records make imprecise record made imprecise extending horizontally cells resulting imprecise dataset extended data models created allocation policies uniform count extended data model compute linop aggregate cell grid cell empty assign uniform distribution uncertain measure domain empty cells assigned case quality metric average absolute difference results compared original precise data set imprecision rro uniform count imprecision rro uniform count imprecision rro uniform count measure correlated dataset low pseudo density dataset high pseudo density dataset figure results quality experiments figure shows results experiment demonstrating effects pseudo-density data generated correlation exists measure dimensions pseudo-density set nonempty cell single record results show 
uniform allocation policy lower relative error compared count reason loss dimension-value correlation information record made imprecise record cell made imprecise empty record cell allocation count allocate portion hand uniform allocate resulting allocation reflects correct answer figure shows results similar experiment dataset pseudo-density correlation measure dimensions pseudo-density higher dimension-value correlation information lost records imprecise count result allocations uniform suffers ignores correlation information allocates empty cells figure shows results data set high correlation measure dimension values data generated records left half grid measure probability high half probability larger pseudo-density set results show significantly outperforms count uniform correlation measure dimensions performing allocation count record left half grid made imprecise overlap cells half count allocate cells half allocate cells left half notices correlation measure cells left half future directions important aspect paper handling uncertain measures probability distribution functions pdfs data table conceptual view model pdf type column brake assumptions model discussed paper adding uncertain measure transmission result column type pdf obvious generalization capture relationships uncertain measures query type brake transmission problems camrys driven texas complicated aggregation query requires additional dependency information uncertain measures captured set constraints provided user learned data generally approach initiated generalizes handle general aspects uncertainty-handling dbms actively investigating generalization abiteboul kanellakis grahne representation querying sets worlds sigmod arenas bertossi chomicki consistent query answers inconsistent databases pods arenas bertossi chomicki raghavan spinrad scalar aggregation inconsistent databases theor comput sci bell guan lee generalized union project operations pooling uncertain imprecise information data knowl eng bertsekas nonlinear programming athena scientific burdick deshpande jayram ramakrishnan vaithyanathan olap uncertain imprecise data extended version cavallo pittarelli theory probabilistic databases vldb chen chiu tseng evaluating aggregate operations imprecise data ieee tkde cheng kalashnikov prabhakar evaluating probabilistic queries imprecise data sigmod cover thomas elements information theory john wiley york dempster laird rubin maximum likelihood incomplete data algorithm journal royal statistical society dey sarkar psql query language probabilistic relational data data knowl eng garcia-molina porter management probabilistic data ieee tkde garg jayram vaithyanathan zhu model based opinion pooling international symposium artificial intelligence mathematics genest zidek combining probability distributions critique annotated bibliography avec discussion statistical science kiviniemi wolski pesonen arminen lazy aggregates real-time olap dawak lakshmanan leone ross subrahmanian probview flexible probabilistic database system acm tods lenz shoshani summarizability olap statistical data bases ssdbm lenz thalheim olap databases aggregation functions ssdbm mcclean scotney shapcott aggregation imprecise uncertain information databases ieee tkde minka expectation-maximization lower bound maximization motro accommodating imprecision database systems issues solutions sigmod record motro sources uncertainty imprecision inconsistency information systems uncertainty management information systems pages pedersen jensen dyreson supporting imprecision multidimensional databases granularities ssdbm ross subrahmanian grant aggregate operators probabilistic databases acm rundensteiner bic evaluating aggregates possibilistic relational databases data knowl eng shoshani olap statistical databases similarities differences pods barbar learning missing values summary constraints sigkdd explorations barbar modeling imputation large incomplete multidimensional datasets dawak zhu vaithyanathan joshi topic learning examples pkdd 


ketan story attic ketan ramakrishnan attic attic creature snow sun melt big break antiques bees spill honey check mother rocking chair 
ketan poem bug ketan ramakrishnan bug rug step thug mug catch bug rug hug mom doesn bugs 
ketan poem spooky nights ketan ramakrishnan moon full midnight scary stories make night happy ending wolves howling bears growling scary fright delight chills teeth chattering 
gestalts slide gestalts networked databases raghu ramakrishnan wisconsin-madison 
overview slide overview gateways protocols odbc standards xml trends large numbers structured sources easily accessible enabling users search query highly distributed collection tables web database problem introduce concept gestalt facilitate integration outline number issues addressed 
outline slide outline gestalt framework integrating internet data sources discussion technical issues 
gestalt integration slide gestalt integration 
parts network slide parts network scenario vendors supplying parts customers one-stop on-line shopping mall approach parts defines gestalt part pid sid description cost units avail supplier defines local parts table fields registers gestalt customers query parts table queries reflect contents local my-parts tables 
parts contd slide parts contd integrated views tables connected network junglee calls virtual databases aspect simply suggest created co-operatively owners data responsibility registering sources gestalt view tables 
non-tabular sources slide non-tabular sources concentrate tabular data sources web sites unstructured semi-structured data increasingly tabular data sources semi-structured sources tabular summaries wrappers exist easily created form good basis querying large collection data objects xml gains popularity xml queries build wrappers easily 
problems address slide problems address create maintain integrated views gestalts large numbers related sources searching relevant gestalts resolving semantic mismatches authorization profiles priorities query processing one-time queries monitoring change notification management transaction concept 
creating gestalts slide creating gestalts traditional approach semantic integration integrator defines integrated views sources break data sources autonomy rapid scalable approach 
approach integration slide approach integration propose integrator simply publishes schema integrated view owners data sources plug sources view gestalt integrated view tables created decentralized approach scales responsibility spread owners 
approach contd slide approach contd note gestalt table require information source parts gestalt combine information catalog describing parts inventory unit availability databases nonetheless expect queries scale hundreds sources large unions large joins intuitively 
registering source slide registering source source capabilities source flat files query processing capability full rdbms custom site limited querying facilities wrapped site xml capability affects cost retrieving answers source source capabilities registering source gestalt 
network information system slide network information system approach leads naturally collections information sources connected network sources independently managed node connected make 
nis slide nis 
semantics nis slide semantics nis nis gestalts graphs gestalts potentially cycles gestalt registered source gestalt registered source presence cycles semantics gestalt table definition fixpoint semantics impractical definition view query evaluation highly distributed 
semantics nis contd slide semantics nis contd approach make registration cycles illegal detect cycles source registered check cycle formed requires cooperation gestalt sites query evaluation time assigned query subqueries generates detect cycles cooperation reqd 
related approaches slide related approaches information manifold infomaster approaches describe source tables terms expressions mediated tables opposite integration sources requires source descriptions require mapping view definition source tables desired integrated view table 
related approaches contd slide related approaches contd gestalt approach relative information manifold approach translation query integrated view table queries source tables straightforward easier design query optimization caching change management emphasis specific view tables mapping desired view table 
technical challenges slide technical challenges 
authorization slide authorization modify gestalt schema register remove sources gestalt table query gestalt table restrict access specific sources queries gestalt table unauthorized source tables policies enforcement mechanisms work autonomous environment 
searching slide searching gestalt networks offer potential keyword search find bmws costing find cheapest bmws find price car recommended power find gestalts offering car info observe queries independently maintained gestalts net combining queries gestalts data gestalts 
searching contd slide searching contd approaches gestalt federations directory gestalt cluster gestalts possibly directories directories gestalt make easier deal semantic mismatches web crawling gestalts on-line independently internet crawlers collect schema-level information agreed-upon ontologies lot 
caching latency slide caching latency source local cache decides high priority sources cache summary copy balancing push-pull push potential information close point pull based workflow model filter pushed information profiles desired queries crucial 
change management slide change management data changed source gestalts source registered affected gestalts post interest profiles sources identify potential interest sources notify gestalts based posted profiles gestalts react change notifications 
monitoring slide monitoring extended form change mgmt continuously track relation gestalt push technology complementary task remote process make previously anticipated monthly reports minimal overhead update recovery techniques 
updates transactions slide updates transactions expect guarantee transaction atomicity updates multiple sites involved updates propagated asynchronously semantic latency inconsistency due updates propagated sites acme prices reflected parts cache form acid semantics salvage alternative semantic foundations deal semantic latency 
qos activity tracking slide qos activity tracking ensure level service data source user definition level service accesses type accesses scheduling ensure desired levels track accesses data gestalt needed implement billing policies regard gestalt outlet product 
parts contd slide parts contd caching qos data cached gestalt site fast response cached source reflected auditing track accessed supplier gestalt outcome access generate sale 
qos activity tracking contd slide qos activity tracking contd provide features sites cooperate time data source registered gestalt relevant source properties auditing requirements source gestalt track hits source desired qos source vendor parts shown qualifying answers pay parts 
queries slide queries wide range query types ranked answers partial answers unions query modalities one-time periodic notification monitoring semantic evaluation issues caching sources distribution source ranking priority profile capabilities transaction semantics 
parts contd slide parts contd ranked queries customer matches find black widgets give cheapest quickly ordering cost desirable top queries approximate answers acceptable find widgets anc close cheapest cost quickly wait long time make cheapest gestalt table union source definitions querying unions 
parts contd slide parts contd prioritization sources customers favoured sources paying customers answered customer black widgets cheapest quickly sources access effect customer qos priority level effort put answering query 
architecture slide architecture change notification agent query evaluation agent cache management agent 
summary issues slide summary issues gestalt definition ontology definition data registration caching change subscription profiles gestalt source synchronization nodes query evaluation optimization formats server capabilities directory gestalts change notification processing cache management 
semantics nis slide semantics nis nis gestalts graphs gestalts potentially cycles gestalt registered source gestalt registered source presence cycles semantics gestalt table definition fixpoint semantics impractical definition view query evaluation highly distributed 
semantics nis contd slide semantics nis contd approach make registration cycles illegal detect cycles source registered check cycle formed requires cooperation gestalt sites query evaluation time assigned query subqueries generates detect cycles cooperation reqd 
related approaches slide related approaches information manifold infomaster approaches describe source tables terms expressions mediated tables opposite integration sources requires source descriptions require mapping view definition source tables desired integrated view table 
related approaches contd slide related approaches contd gestalt approach relative information manifold approach translation query integrated view table queries source tables straightforward easier design query optimization caching change management emphasis specific view tables mapping desired view table 
technical challenges slide technical challenges 
authorization slide authorization modify gestalt schema register remove sources gestalt table query gestalt table restrict access specific sources queries gestalt table unauthorized source tables policies enforcement mechanisms work autonomous environment 
searching slide searching gestalt networks offer potential keyword search find bmws costing find cheapest bmws find price car recommended power find gestalts offering car info observe queries independently maintained gestalts net combining queries gestalts data gestalts 
searching contd slide searching contd approaches gestalt federations directory gestalt cluster gestalts possibly directories directories gestalt make easier deal semantic mismatches web crawling gestalts on-line independently internet crawlers collect schema-level information agreed-upon ontologies lot 
caching latency slide caching latency source local cache decides high priority sources cache summary copy balancing push-pull push potential information close point pull based workflow model filter pushed information profiles desired queries crucial 
change management slide change management data changed source gestalts source registered affected gestalts post interest profiles sources identify potential interest sources notify gestalts based posted profiles gestalts react change notifications 
monitoring slide monitoring extended form change mgmt continuously track relation gestalt push technology complementary task remote process make previously anticipated monthly reports minimal overhead update recovery techniques 
updates transactions slide updates transactions expect guarantee transaction atomicity updates multiple sites involved updates propagated asynchronously semantic latency inconsistency due updates propagated sites acme prices reflected parts cache form acid semantics salvage alternative semantic foundations deal semantic latency 
qos activity tracking slide qos activity tracking ensure level service data source user definition level service accesses type accesses scheduling ensure desired levels track accesses data gestalt needed implement billing policies regard gestalt outlet product 
parts contd slide parts contd caching qos data cached gestalt site fast response cached source reflected auditing track accessed supplier gestalt outcome access generate sale 
qos activity tracking contd slide qos activity tracking contd provide features sites cooperate time data source registered gestalt relevant source properties auditing requirements source gestalt track hits source desired qos source vendor parts shown qualifying answers pay parts 
queries slide queries wide range query types ranked answers partial answers unions query modalities one-time periodic notification monitoring semantic evaluation issues caching sources distribution source ranking priority profile capabilities transaction semantics 
parts contd slide parts contd ranked queries customer matches find black widgets give cheapest quickly ordering cost desirable top queries approximate answers acceptable find widgets anc close cheapest cost quickly wait long time make cheapest gestalt table union source definitions querying unions 
parts contd slide parts contd prioritization sources customers favoured sources paying customers answered customer black widgets cheapest quickly sources access effect customer qos priority level effort put answering query 
architecture slide architecture change notification agent query evaluation agent cache management agent 
summary issues slide summary issues gestalt definition ontology definition data registration caching change subscription profiles gestalt source synchronization nodes query evaluation optimization formats server capabilities directory gestalts change notification processing cache management 
