paul barford computer science department wisconsin madison west dayton street madison wics http wisc research interests measurement analysis design security wide area networked systems network protocols education phd computer science december boston boston dissertation modeling measurement performance world wide web transactions adviser mark crovella electrical engineering illinois urbana-champaign professional experience computer science department univ wisconsin madison january present assistant professor director wisconsin advanced internet laboratory computer science department boston boston research fellow projects included development surge web workload generator wawm wide area web measurement infrastructure degeorge financial cheshire director planning research managed projects focused improving company business operations process systems design development digital equipment corporation maynard senior engineer electrical computer-aided design group consulting experience board directors national lambdarail present technical advisory board member epicrealm richardson technical advisory board member netheartbeat austin infolibria waltham teaching experience computer science department univ wisconsin madison january present assistant professor network research laboratory introduction computer networks advanced computer networks computer science department boston boston fall instructor introduction operating systems mathematics department illinois urbana-champaign teaching assistant calculus iii book journal joel sommers paul barford walter willinger vitro calibration bandwidth estimation tools elsevier microprocessors microsystems journal joel sommers paul barford nick duffield amos ron geometric method active packet loss measurement ieee acm transactions networking vinod yegneswaran paul barford inside botnets series advances information security springer paul barford joel sommers comparing probeand router-based packet loss measurement ieee internet computing sept oct james gast paul barford representing internet succinct forest ieee computer networks march paulbarfordand larrylandweber aninternetinstance laboratory acm sigcomm computer communications review july computer science telecommunications board national research council internet crisis conditions learning september national academy press november isbn paul barford mark crovella critical path analysis tcp transactions ieee acm transactions networking vol june mark crovella martin reiser christoph lindemann editors internet performance modeling performance evaluation march contributing author paul barford mark crovella measuring web performance wide area performance evaluation review vol september paul barford azer bestavros mark crovella adam bradley web client access patterns characteristics caching implications world wide web special issue characterization performance evaluation vol december conference workshop mariyam mirza joel sommers paul barford jerry zhu machine learning approach tcp throughput estimation proceedings acm sigmetrics san diego june jin-yi cai chris alfeld vinod yegneswaran paul barford honeygames game theoretic approach defending network monitors submitted acm symposium theory computing stoc san diego june joel sommers paul barford nick duffield amos ron multi-objective monitoring sla compliance proceedings ieee infocom minisymposium anchorage alaska lei chen raghu ramakrishnan paul barford beechung chen vinod yegneswaran composite subset measures proceedings international conference large databases vldb seoul korea september mark allman paul barford balachander krishnamurthy jia wang tracking role adversaries measuring unwanted traffic proceedings usenix workshop steps reducing unwanted traffic internet sruti san jose july joel sommers paul barford walter willinger proposed framework calibration bandwidth measurement tools proceedings ieee symposium computers communications sardinia italy june selected paper award committee fast track elsevier microprocessors microsystems journal yolanda tsang mehmet yildiz paul barford robert nowak performance round trip time network tomography proceedings ieee conference communications istanbul turkey june vikas garg vinod yegneswaran paul barford improving nids performance hardwarebased connection filtering proceedings ieee conference communications istanbul turkey june beechung chen vinod yegneswaran paul barford raghu ramakrishnan query languagefor network attack data proceedings ieee workshop networks meets databases netdb atlanta april joel sommers vinod yegneswaran paul barford recent advances network intrusion detection system tuning proceedings ieee conference information science systems princeton march invited paper joel sommers paul barford walter willinger splat visualization tool mining internet measurements proceedings passive active measurement conference pam adelaide australia march paul barford robert nowak rebecca willett vinod yegneswaran model sources internet background radiation proceedings passive active measurement conference pam adelaide australia march vinod yegneswaran paul barford vern paxson honeynets internet situational awareness proceedings fourth workshop hot topics networks hotnets college park november shilpi agarwal joel sommers paul barford scalable network path emulation proceedings ieee international symposium modeling analysis simulation computer telecommunication systems mascots atlanta september joel sommers paul barford nick duffield amos ron improving accuracy end-to-end packet loss measurements proceedings acm sigcomm philadelphia august vinod yegneswaran jon giffin paul barford somesh jha architecture generating semanticaware signatures proceedings usenix security symposium baltimore august paul barford somesh jha vinod yegneswaran fusion filtering network intrusion detection proceedings allerton conference communication control computing monticello october invited paper rouming pang vinod yegneswaran paul barford vern paxson larry peterson characteristics internet background radiation proceedings acm internet measurement conference taormina italy october yolanda tsang mehmet yildiz paul barford robert nowak network radar tomography round trip time measurements proceedings acm internet measurement conference taormina italy october joel sommers paul barford self-configuring network traffic generation proceedings acm internet measurement conference taormina italy october vinod yegneswaran joel sommers paul barford framework malicious workload generation proceedings acm internet measurement conference taormina italy october guido appenzeller nick mckeown joel sommers paul barford recent results sizing router buffers proceedings network systems design conference san jose october invited paper vinod yegneswaran paul barford david plonka design internet sinks networkabuse monitoring inproceedings symposium recent advances intrusion detection raid sophia antipolis france september joel sommers hyungsuk kim paul barford harpoon flow-level traffic generator router network tests proceedings acm sigmetrics york june vinod yegneswaran paul barford somesh jha global intrusion detection domino overlay system proceedings network distributed systems security symposium ndss san diego february jim gast paul barford evaluating modeling window synchronization highly multiplexed flows proceedings ieee workshop workload characterization austin october vinod yegneswaran paul barford johannas ullrich internet intrusions global characteristics prevalence proceedings acm sigmetrics san diego june paul barford jeff kline david plonka amos ron signal analysis network traffic anomalies proceedings acm sigcomm internet measurement workshop marseilles france november jim gast paul barford resource deployment based autonomous system clustering proceedings ieee globcom taipei taiwan october paulbarfordand larrylandweber aninternetinstance laboratory proceedings spie itcom boston august invited paper paul barford azer bestavros john byers mark crovella marginal utility network topology measurements proceedings acm sigcomm internet measurement workshop san francisco november paul barford david plonka characteristics network traffic flow anomalies proceedings acm sigcomm internet measurement workshop san francisco november 
paul barford mark crovella critical path analysis tcp transactions proceedings acm sigcomm pages stockholm sweden august selected fast track submission acm ieee transaction networking paul barford mark crovella performance evaluation hyper text transfer protocols proceedings acm sigmetrics pages atlanta paul barford mark crovella generating representative web workloads network server performance evaluation proceedings acm sigmetrics pages madison june mark crovella paul barford network effects prefetching proceedings ieee infocom san francisco april quinn canfield paul barford cary trlica system simulation environment proceedings iccad conference boston technical notes reports paul barford geni measurement instrumentation specification global environment network innovations technical document gdd- september paul barford measurement class network citizen position paper nsf workshop generation secure internet july joel sommers vinod yegneswaran paul barford comprehensive traffic generation online ids evaluation technical report paul barford joel sommers comparison probe-based router-based methods measuring packet loss technical report september vijayan prabhakaran joseph stanley paul barford high throughput data transfers tornado transport protocol technical report november paul barford david donoho georgina flesia vinod yegneswaran characteristics network delays wide area file transfers technical report july paul barford david plonka inferring client experience flow based measurements technical report july paul barford jin-yi cai jim gast cache placement methods based client demand clustering technical report june paul barford global internet measurement infrastructure position paper nsf large scale networking workshop march patents paul barford jonathon giffin somesh jha vinod yegneswaran semantically-aware network intrusion signature generator patent pending vinod yegneswaran paul barford david plonka scalable monitor malicious network traffic patent pending tutorials paul barford vishal misra measurement modeling analysis internet presented ima workshop internet measurement modeling minneapolis january paul barford internet-wide measurement infrastructures presented ipam workshop large scale communications networks los angeles march paul barford web server performance analysis presented acm sigmetrics atlanta april ieee local area networks lowell october talks workshops invited talk department homeland security workshop testbed federation december invited talk wisconsin alumni research foundation inventor lunch december invited talk nsf find information meeting washington december invitedtalk tsukuba japan november invited talk wisconsin ceo summit october invited talk lockdown madison july invited talk cisco systems nerd lunch san jose june invited talk computer science department northwestern evanston invited talk ieee conference information sciences systems princeton march invited talk cisco network management research summit santa clara january invited talk computer science department massachusetts institute technology cambridge october invited talk computer science department boston october boston invited talk computer science department california institute technology september pasadena invited participant nsf cyber trust principal investigator meeting september newport beach invited talk aro-dhs special workshop malware detection arlington august invited participant nsf workshop generation secure internet pittsburgh july invited talk microsoft research self-managing networks summit kirkland june invited participant nsf workshop future optical communications understanding choices santa barbara april invited talk workshop internet signal processing san diego november invited talk infosec research council arlington september invited talk emc corporation hopkinton june invited talk intel research berkeley june invited talk computer science department michigan ann arbor march invited talk laboratorie informatique paris lip paris france february invited participant ima workshop internet modeling analysis minneapolis january invited talk business school security week madison november panelist worm monitoring infrastructures acm workshop rapid malcode worm washington october invited talk center ecommerce annual symposium madison october invited talk internet virtual briefing february invited talk computer science department maryland college park june invited participant workshop network research exploration dimensions scope nreds karlesruhe germany august invited talk army research lab adelphi september invited talk ipam workshop large scale communications networks lake arrowhead september invited talk research labs florham park december invited talk microsoft research labs redmond december invited talk computer science department washington seattle december invited talk intel research labs hillsboro december invited talk meriter hospital physicians group madison october invited talk computer science department illinois urbana october invited talk network modeling simulation workshop hanover july invited talk ipam workshop internet measurement california los angeles march invited talk paradyn condor workshop madison march invited talk sprint labs burlingame november invited talk annual ieee computer communications workshop charlottesville october invited talk labs palo alto october invited talk cisco systems san jose october invited talk multiresolution analysis global internet measurements workshop leiden holland september invited participant internet network research workshop chicago april invited talk idr-ima workshop ideal data representation minneapolis april invited talk sigcomm latin america san jose costa rica april invited participant nsf darpa workshop large-scale networks march invited talk paradyn condor workshop wisconsin madison march invited talk princeton pacm colloquium princeton february invited participant nsf-pi workshop networking irvine november invited talk multiresolution analysis global internet workshop palo alto october invited talk ieee computer communications workshop captiva october invited talk globalinternet measurement modeling analysisworkshop leiden holland september invited talk internet network research workshop chicago june participant work progress session acm sigcomm cambridge september invited participant institute mathematics applications workshop scaling phenomena communication networks minneapolis october invited participant workshop internet performance modeling dagstuhl castle germany september invited panel participant passive analysis priorities caida internet statistics metrics analysis isma passive measurement data analysis workshop san diego january invited talk world wide web consortium workshop web characterization cambridge invited talk world wide web consortium workshop web characterization cambridge grants gifts collaborative honeystream analytics exploitation system chaes department homeland security barford requirements driven resource allocation generation routers cisco systems donation barford geni instrumentation measurement systems gims national science foundation barford cyber threat analytics army research office barford nets-find design manageability generatin internet national science foundation barford infrastructure support cyberforensics army research office barford directed intrusion detection army research office barford datasets network security department homeland security barford career multiresolution approach network anomaly intrusion detection nsf career program barford integrated program content addressable storage research emc corporation barford december evaluating buffer behavior high performance routers cisco systems research program barford acquisition glow distributed computing system wisconsin madison nsf major research infrastructure program barford co-pi nmi integrative testing framework grid middleware grid environments nsf network middleware initiative program barford co-pi collaborative itr modular strategies internetwork monitoring nsf itr-medium program barford co-pi august collaborative research unified experimental environment diverse networks nsf 
network research testbed program barford co-pi data center traffic monitoring control intel corporation barford distributed storage research wisconsin advanced internet lab emc corporation distributed anomaly characterization detection army research office barford wisconsin advanced internet laboratory cisco systems tosa foundation barford wisconsin advanced internet laboratory spirent communications barford wisconsin advanced internet laboratory sun microsystems barford wisconsin advanced internet laboratory intel barford network measurement management fujitsu labs america barford isword instrumented streaming research testbed national science foundation barford co-pi particle physics data grid collaboratory pilot department energy barford co-pi awards honors ieee symposium computers communications paper award june nsf career award january ieee communications society william bennett prize field communications circuits techniques runner xerox parc affairs committee award hewlett-packard research fellowship boston gaann fellowship boston outstanding teaching fellow fall spring fall illinois urbana-champaign professional activities member geni facility architecture working group -present member acm internet measurement conference steeering committee -present program committee acm usenix internet measurement conference program chair program committee acm sigcomm program committee acm sigmetrics program committee acm usenix workshop hot topics networks hotnets program committee acm usenix workshop hot topics botnets hotbots program committee conext conference program committee acm workshop steps reduce unwanted traffic internet sruti program committee acm workshop rapdid malcode worm program committee workshop tackling computer systems problems machine learning techniques sysml organizing committee workshop internet signal processing organizing committee opensig organizing committee program committee ieee icnp program committee ieee workshop internet applications member national science foundation review panels organizingcommittee computerscienceand nationalresearchcouncil study internet crisis conditions organizing committee institute pure applied mathematics workshop large scale communications networks topology routing traffic control program committee ieee international computer performance dependability symposium program committee multiresolution analysis global internet workshop palo alto program committee boston workshop internet measurement instrumentation characterization boston program committee world wide web consortium workshop web characterization boston invited expert world wide web consortium workload characterization group member acm sigcomm sigmetrics ieee referee acm sigcomm ieee infocom acm sigmetrics ieee icnp ieee acm transactions networking ieee acm transactions computer systems acm sigcomm computer communications review ieee network magazine performance evaluation review student supervision current students chris alfeld year phd mathematics department joe chabarek year phd computer science department mariyam mirza year phd computer science department david plonka year phd computer science department joel sommers year phd computer science department kevin springborn year computer science department students vinod yegneswaran phd research scientist cyber security group sri menlo park james gast phd assistant professor computer science wisconsin plattville shilpi agrawal engineer vmware janani thanigachalam engineer oracle badhri varanasi engineer oracle ramanathan palaniappan engineer amazon examining committee member ariel tamshes phd fine-grained dynamic instrumentation commodity operating system kernels computer science dept fourth reader jim basney phd network cpu co-allocation high throughput computing environments computer science dept reader jim gast phd topology aware estimation methods internet traffic characteristics computer science dept reader advisor victor zandy phd application mobility computer science dept reader leonidas galanis phd data-centric internet computer science dept fourth reader vinod yegneswaran phd measurement detection analysis internet intrusions computer science dept reader advisor joel sommers phd abd physical understanding short timescale packet dynamics computer science dept reader prelim committee mihai christodorescu phd abd behavior-based malicious code understanding detection computer science dept reader prelim committee sechang son phd recovering internet symmetry distributed computing computer science dept reader shai rubin phd trustworthy nids computer science dept reader manish bhardwaj phd analytic approach design survivable optical mesh networks ece dept reader departmental service wisconsin institute discovery morgridge institute research committee leveraging public private partnerships computer science department graduate advising committee present computer science department computing systems committee computer science department graduate admissions committee computer science department faculty recruiting committee computer science department distinguished lecture series organizer systems software wisconsin advanced internet laboratory wisconsin advanced internet laboratory wail unique testbed environment conducting network distributed systems research vision wail recreate instances internet end-to-end-through-core laboratory environment sets wail network testbeds real networking hardware routers switches firewalls create network configurations tests wail routers switches wide variety interfaces workstations measurement traffic generation variety support hardware storage capability experiments analysis wail enabled foundational grant cisco systems tosa foundation wail openly greater networking community research http wail wisc trident payload aware traffic generation tool purpose trident generate test traffic assess resiliency performance network systems firewalls nids emulation testbeds wail trident architecture includes ability generate malicious benign test traffic malicious component trident enables threats ddos attacks worms welchia blaster flexibly generated unseen attacks composed benign component trident enables payloads darpa datasets traces collected network composed flexibly tests basic architecture trident makes unsuitable tool black hats wide area fact distributed actual exploit payloads sensitive nature type traffic generation means make tool verifiable projects http wail wisc waildownload baddabing tool highly accurate active measurement end-to-end packet loss properties baddabing generates geometrically distributed packet probe stream measures frequency duration packet loss episodes path measurements produced baddabing order magnitude accurate prior methods simple ping poisson-modulated probes tool enhanced method accuratelymeasuring lossrate key characteristicof interestin sla monitoring toolmust installed sendingand receivinghost http wail wisc waildownload harpoon tool generating tcp udp packet traffic mimics flow level characteristics traffic measured actual router harpoon traffic generalized sense attempt recreate flows specific applications aggregate characteristics tcp udp flows perspectives small large time scales space diversity embodied set statistical distributions tool create packet flows tool client server components generate serve data transfer requests transport protocols reside host systems http wail wisc waildownload netpath tool scalable network path emulation emulating conditions individual links series links network including propagation signaling delays bit errors duplication reordering loss essential test bed environments wail netpath system based click modular router enables packets subjected aforementioned conditions traverse links test bed environment significant strengths netpath tools dummynet nist net ability scale accommodate heavy loads ability scale high speeds delay accuracy wide range operating conditions included netpath vict configuration tool enables netpath easily configured large testbeds http wail wisc waildownload splat visualizations provide natural means organizing mining data identifying characteristics interest large complex data sets splat scatter phase plot animation tool splat broad set capabilities exploratory detailed analysis large 
sets measurements internet behavior structure scatter plots phase plots commonly-used graphical techniques examining correlated behavior variables important feature splat animate scatter phase plots time reveal dynamic characteristics data study http wail wisc waildownload tcpeval tcp evaluation tool generates large variety statistical information tcpdump traces end points wide area connection statistics include transaction latencies packet latencies packet loss characteristics inter-packet spacing characteristics tcpeval generates time line diagrams sequence plots transactions extracts critical path tcp transactions enables latency individual transaction decomposed delays caused server client network generates statistics critical path delays individual transactions summary data transactions trace http wail wisc waildownload surge web workload generator based set statistical characteristics web browsing clients file sizes request sizes document popularity times object sizes temporal locality session lengths surge consists statistical input generator configured users match specific client characteristics request generator run multiple clients simultaneously generate wide variety load levels surge sites world wide including major academic institutions industrial labs telecom companies startups surge workload generator world wide web consortium http-ng test bed http wail wisc waildownload self-similarity long range dependence computer networks home page maintained collaboration sally floyd aciri site links summaries important papers written area self-similarity long range dependence computer networks self-similar long range dependent characteristics computer networks present fundamentally set problems people network analysis design previous assumptions systems built longer valid presence self-similarity http pub barford lrd html personal information managing director degeorge racing team elected usa triathlon federation board directors professional triathlete time triathlon duathlon american time usa national triathlon team member time national duathlon champion 
camouflaging honeynets vinod yegneswaran computer science laboratory sri international ravenswood ave menlo park vinod csl sri chris alfeld computer sciences dept wisconsin dayton madison alfeld wisc paul barford computer sciences dept wisconsin dayton madison wisc jin-yi cai computer sciences dept wisconsin dayton madison jyc wisc abstract past years honeynets proven invaluable understanding characteristics unwanted internet traffic misconfigurations malicious attacks paper address problem defending honeynets systematic mapping malicious parties ensure honeynets remain viable long term approach based ideas counting number probes received honeynet shuffling location live systems comprise honeynet larger address space probe count exceeded threshold describe strategies randomizing location honeynet strategy defined terms degree defense computational state requirements implement prototype middlebox call kaleidoscope gain practical insight feasibility strategies series tests show system capable effectively defending honeynets large networks limited impact normal traffic continues respond face large resource attacks introduction basic components malicious activity internet process scanning address space potentially vulnerable hosts fundamental challenge activity determining select target address methods proposed common approach brute force simply sending scans addresses network segment approach effective offers network security community significant opportunity gathering detailed information attacks deploying measurement systems routed unused addresses network segment measurement systems typically referred honeynet honeynets security analysts adversaries fact series recent studies shown locations monitoring systems gather data well-known reporting services dshield pinpointed active probing methods assume savvy adversaries adopted methods future create blacklists incorporate tool avoid tracked honeynets detrimental impact network security community paper address problem protecting honeynets adversaries seek systematically identify addresses monitored propose approach based shuffling monitored addresses addresses live potentially vulnerable systems adversary unable honeynet location case problem boils important questions shuffle shuffle case make simplifying conservative assumption paper shuffle count probe addresses monitored honeynet discuss realistic probing strategies issue shuffle components method randomizing honeynet location network mechanism facilitate shuffling describe series techniques randomizing honeynet location large address space random shuffling granularity individual addresses optimal terms hiding honeynet practical implementation perspective describe policies shuffling blocks addresses trade frequency shuffling amount state maintained shuffling mechanism deployment strategy based middlebox sits front live hosts honeynet investigate feasibility approach implemented prototype system call kaleidoscope basic functionality kaleidoscope includes counting probes honeynet shuffling addresses proposed methods providing network address translation systems target network live honeynet systems system series laboratorybased experiments traffic load profiles prototype system demonstrates shuffling policies implemented efficiently minimal latency millisecond packet loss traffic loads typical large campus types malicious attacks quantifying level protection afforded system scope work argue effective level protection provided system sufficient determined adversary background related work past years growing number honeynets deployed internet range simple passive monitors sophisticated systems emulate responses standard protocols large deployments high-fidelity virtualized systems research honeynet systems active focused enabling scalable secure measurement greater levels detail utility honeynets respond connections reveal detailed features attacks information invaluable studies characterize attack activity creation signatures defend activity methodology proposed automatically generating representative honeynet configurations knowledge problem defending honeynets systematic mapping addressed prior studies possibility devising methods camouflaging honeypots outlined briefly end related problem limiting utility hitlists live systems treated studies antonatos propose address space randomization method defending live systems worms hitlists objective accelerating hitlist decay similar basic approach terms hitlists live systems suggested mechanisms random address shuffling primarily dhcp differ similar methods changing network configurations order attempt thwart malicious activity proposed differ efforts focusing protecting honeynets demonstrate simple scalable extensible system address space randomization implements shuffling policies method defending honeynets based middlebox typical instances include firewalls network address translation systems informed allman work analyzing performance middleboxes specific work studies network address translation methods systems work kohler describe efficient architecture nat functions forms basis prototype implementation iii system design implementation threat model adversary desires identify set addresses comprise honeynet network segment size set addresses terminate live hosts equality strict requirement assume adversary ability determine address part honeynet sending probes address make conservative assumption study addresses comprise honeynet probed order complete mapping starting point defense threat set addresses periodically shuffled time shuffles shuffling epoch complete map generated adversary quickly incorrect assume shuffling system resides network perimeter capable network address translation probe counting specifications framework argue formulation reasonable gaining insights problem terms feasibility implementation perspective shuffling strategies strategies assume honeynet monitors blocks addresses vary size necessarily contiguous disjoint likewise address blocks assigned live systems vary size necessarily contiguous disjoint key considerations strategy state maintenance providing acceptable level defense mapping attempt make definitive claims respect paper argue system quickly generate randomization generated order microseconds conservative number probes counted honeynet provide effective protection adversaries uniform block shuffling ubs strategy address space divided uniformly sized blocks shuffling epoch triggered algorithm generates random permutation remap blocks randomly shifts segment small offset length block case live network blocks remapped live blocks requires continuous connection state entire address space maintained perfectly random shuffling strategy achieved simply setting block size overhead design choice significant large networks block honeynet guaranteed move epoch non-uniform block shifting nbs strategy shuffling restricted subset total network address space honeynet blocks possibly varying sizes configuration block sizes remain fixed operation shuffling epoch triggered algorithm randomizes starting address honeynet block implementation strategy honeynet blocks overlap advantage point time portion address space affected connection state live systems affected current epoch adjacent epochs maintained honeynet addresses change epochs size honeynet guaranteed remain source shuffling pss strategy similar nbs maintains view network external host sends packets assumes sources act independently shuffling takes place single source reached probing threshold point network shuffled external source concern strategy state required maintain network maps external host potentially enables system shuffle frequently require fewer resources connection entries significantly connections benign hosts hosts target small number internal hosts shuffled feasible design choice networks small number honeynet blocks alternative formulation pss include blocking probes sources reach threshold source group shuffling sgs strategy attempts balance benefits nbs pss maintaining network maps groups sources prototype implementation sources grouped target port numbers intuition sources coordinated distributed controlled single agent attempt identify honeynet addresses consistent probing method small set services scanning threshold met group sources view network shuffled approach resilient distributed network mapping benefits pss kaleidoscope prototype developed prototype shuffling middlebox collection click 
routing elements shown figure click software framework packet processing impressive scaling performance flexible configuration language makes ideal building software routers enhancements click involved development classes network elements address modification element element netrandomizer handles packet input including probe counting invokes shuffling elements obtain address mappings iii rewrites addresses header shuffling elements elements ubs nbs pss sgs maintain state implement shuffling policies programmed click information elements inputs outputs elements maintain mapping tables directly modify network packets design makes easy shuffling components swap shuffling strategies implemented information elements shuffling policies discussed design consideration shuffling strategies involves trade-off amount state maintained frequency shuffling system maintains types state connection pool live connections address mapping tables connection pools implement connection pools hashbelt data structure designed approximates lru eviction policy periodically expires stale connections hashbelt maintains list hash tables supports operations find insert delete rotate find operations connection entries pollde vice eth pollde vice eth arpresponder chec kipheader netrandomizer ubs nbs pss sgs netrandomizer ubs nbs pss sgs settcpchec ksum setipchec ksum rrscheduler rrsc heduler tode vice eth tode vice eth fig kaleidoscope click element configuration automatically moved head hashbelt rotate operations hash table inserted head hashbelt deleting tail expiring entries bottom experiments maintain hashbelts hash tables rotate average chain length exceeds lookups connection tuple mapping information external-ip externalport permuted-ip local-ip local-port permuted-ip simply internal address external host local-port identical port permuted flow combination external-ip external-port local-port forms unique identifier tracked connection address maps address maps track honeynet live network blocks translation internal permuted address per-source shuffling reuse hashbelt data structure periodically expire address maps stale sources strategies simply hash table collection hash tables maintain address maps hash table maintains entry honeynet block case ubs incurs entry address block strategies maintain global state nbs ubs devote fewer resources maintaining address mappings end shuffling frequently devote resources maintaining ongoing connection state shuffling epochs larger connection pools contrast strategies maintain per-source state pss sgs suffer overhead maintaining multiple address-mapping tables shuffle frequently compared strategies require smaller connection pools cost benefit analysis variables affecting performance network shufflers include packet rate number sources number ports scanned fraction scanning sources observed honeynet average probe rate honeynet address arrival rate legitimate connections address average number sources source-groups tracked shuffler time fraction scanning sources scan entire honeynet fraction packets scanned ports summarize cost benefit strategies shown table resiliency ubs low knowledgeable attacker employ block sampling quickly identify honeynet blocks shuffler epoch duration state maintenance overhead resiliency consistency address map connection pool ubs mpm low high nbs mpm high high pss pmf medium medium sgs pmg high medium table cost benefit summary shuffling strategies delay emulation netpath external requestshuffled response mace malicious traffic generation scan requestshuffled response harpoon client pool forwarded requestlocal response kaleidoscope address shuffling harpoon server pool fig experimental setup lab tests kaleidoscope nbs high resiliency high intra-epoch consistency subject frequent shuffling resiliency pss medium vulnerable attacks coordinated sources network appears inconsistent sources finally sgs appears inconsistent source-groups subject frequent shuffling experimental evaluation assess feasibility deployment evaluated kaleidoscope number traffic scenarios laboratory setting key evaluation metrics packet loss delay introduced system design goal sustain traffic rates high mbps typical large campus network figure shows network topology evaluate system key components setup include harpoon synthetic packet traffic generator setup includes harpoon clients harpoon servers configured client server address pools addresses number active client servers default heavy-tailed file size distribution set interconnection times exponentially distributed netpath click based network delay emulator configured netpath produce constant delay direction client server mace python-based malicious traffic generator kaleidoscope address shuffling prototype implemented collection elements click modular router section iii synchronized high-performance dag cards capture packets enter exit kaleidoscope system cards provide high-precision timestamps packets experiment enabled establish detailed performance profile kaleidoscope honeynet configured address blocks addresses larger address space address blocks addresses harpoon connection honeynet blocks considered probe experiment run period minutes shuffling epochs varied test averaged seconds length depending shuffling strategy traffic load randomness harpoon impact shuffling performance evaluated system performance terms packet loss packet delay connection disruptions introduced kaleidoscope configured harpoon generate average traffic loads mbps kaleidoscope caused packets lost connection disruptions figure distribution delays introduced system reported shuffling strategies delays minimal typically acceptable environments response time middleboxes expected delay introduced pss slightly higher ubs nbs sgs policies maintain state examine performance system heavy load conducted additional measurements mbps table summarizes packet loss introduced shuffling middlebox mbps mbps rate traffic introduces noticeable loss rate pss shuffler shufflers continue resilient robustness resource attacks important consideration design kaleidoscope resiliency resource consumption attacks classes attacks knowledgeable adversary employ degrade quality service provided system attacks overwhelm system filling connection pool list live connections tracked system attacks overwhelm source destination address pools monitored system expect significant issue pss sgs strategies figure left shows kaleidoscope resiliency connection pool overload attack terms average delay mace initiate syn-flood attacks increasing severity connection attempts harpoon delay microseconds number packets non-uniform block shifter delay microseconds number packets uniform block shuffler delay microseconds number packets source group shuffler delay microseconds number packets source shuffler fig packet delay distribution kaleidoscope shuffling strategies configured generate traffic target average rate mbps results system handle attacks service disruption lost packets stale connections hashbelt implementation connection pool enables timely eviction malicious connections impact normal traffic average delays shuffling strategies remain minimal expected ubs nbs sgs outperform pss figure shows kaleidoscope resiliency address pool overload attack terms average delay mace initiate scanning attacks increasing severity connection attempts source addresses destination addresses picked randomly harpoon configured generate traffic target average rate mbps results system handle attacks service disruption percent packet loss stale connections average delay shuffling strategies remains minimal expected ubs nbs sgs outperform pss expect impact system attack scenarios worm outbreaks flash crowds similar situ tests future work discussion initial experiments kaleidoscope demonstrate feasibility shuffling middlebox protecting honeynets important considerations involving placement protocol shuffling logic deployment issues network address translation nat address translation logic built shuffler analogous functionality implemented commodity nat devices key difference requirement support inbound connection requests environment local internal network dynamically nat legitimate server addresses statically routed connection requests dynamic 
hosts routed based shuffling epoch built network address shuffler premise addresses client hosts require static routing dynamic host configuration protocol dhcp network protocol commonly automate allocation addresses dynamic participants network time seconds delay microseconds ubspssnbssgs time seconds delay microseconds ubspssnbssgs fig packet delays caused kaleidoscope syn-flood left scanning attacks shuffler mbps mbps ubs nbs sgs pss table summary packet loss caused kaleidoscope shuffling strategies dhcp transient nature clients makes environments hospitable shuffling architecture expect system readily coexist existing dhcp networks plan investigate opportunities active integration dhcp management network address shuffling support adaptive management address pools integration routers alternative middlebox deployment intra-as routing protocols ospf rip basis honeynet protection advantage approach ability utilize highperformance routing architectures environment network address shuffler send periodic link state updates route affected address blocks system remaining traffic bypass shuffler alternately build route shuffling request ospf message type collaborative shuffling extension kaleidoscope collaborative shuffling infrastructure csi internet-wide honeynet defense architecture makes extension straightforward internet routing infrastructure envision csi globally distributed overlay network kaleidoscope nodes providing ondemand address shuffling service service maintain list honeynet non-honeynet live host address blocks address block system maintain current list producer owner consumer networks consumers network blocks change periodically network segment sufficient scans producers remain constant traffic routed overlays producers consumers benefit participants gaining real-time perspective attack activity networks enhanced heterogeneity local network imagine anonymizing producer networks onion routing communication tor csi enable networks efficiently share information building real-time blacklists proberesponse attack sources obvious challenges tackle privacy economic implications intend investigate future work summary conclusion present address camoflauging methodology safeguarding honeynet monitors mapped adversaries designed built prototype middlebox system counts probes network shuffles embedded honeynets probe thresholds reached system developed understand demands requirements methods address space shuffling tested kaleidoscope laboratory environment configured approximate traffic conditions campus network operate large honeynet tested per-packet delays introduced kaleidoscope found worst-case delays order hundreds microseconds acceptable networks tested state required middlebox shuffling strategies found easily accommodated design finally tested resource requirements kaleidoscope attack found implementation approach sufficient continue operation packet loss significant increase delay vii acknowledgements authors phil porras symposium reviewers encouraging valuable feedback improved presentation paper material based work supported army research office cyber-ta research grant nf- nsf grants cnsand ccrany opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf aro agarwal sommers barford scalable network path emulation proceedings ieee mascots allman performance middleboxes proceedings sigcomm internet measurement conference antonatos akritidis markatos anagnostakis defending hitlist worms network address space randomization proceedings acm ccs worm antonatos anagnostakis protecting hitlist worms transparent address obfuscation proceedings cms atighetchi pal webber schantz jones adaptive network-centric mechanisms cyber defense international symposium object-oriented real-time distributed computing bethencourt franklin vernon mapping internet sensors probe response packets proceedings usenix security symposium cai yegneswaran alfeld barford honeygames game-theoretic approach defending network monitors wisconsin technical report casado garfinkel cui paxson savage opportunistic measurement proceedings acm hotnets cooke bailey mao watson jahanian mcpherson understanding distributed blackhole placement proceedings ccs worm dingledine mathewson syverson tor secondgeneration onion router usenix security symposium endace accelerated network security http endace german honeynet project tracking botnets http honeynet papers bots keromytis misra rubenstein sos secure overlay services proceedings acm sigcomm kewley lowry fink dean dynamic approaches thwart adversary intelligence gathering discex khattab melhem mosse znati honeypot backpropagation mitigating spoofing distributed denial-of-service attacks proceedings ssn kohler morris chen modular components network address translation ieee openarch june kohler morris chen jannotti kaashoek click modular router acm transactions computer systems august kreibich crowcroft honeycomb creating intrusion detection signatures honeypots proceedings acm hotnets michalski price stanton chua seah heng pheng final report network security mechanisms utilizing network address translation ldrd project technical report sand sandia national laboratories pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm sigcomm internet measurement conference rajab monrose terzis fast evasive attacks highlighting challenges ahead proceedings raid rfc dynamic host control protocol http faqs rfcs rfc html rfc middleboxes taxonomy issues http faqs rfcs rfc html shinoda ikai itoh vulnerabilities passive internet threat monitors proceedings usenix security symposium sinha bailey jahanian shedding light configuration dark addresses proceedings ndss sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference sommers yegneswaran barford framework malicious workload generation proceedings acm sigcomm internet measurement conference ullrich dshield http dshield vrable chen moore vandekieft snoeren voelker savage scalability fidelity containment potemkin virtual honeyfarm proceedings acm sosp yegneswaran barford plonka design utility internet sinks network abuse monitoring proceedings raid yegneswaran giffin barford jha architecture generating semantics-aware signatures usenix security symposium 
tracking role adversaries measuring unwanted traf mark allman icsi paul barford wisconsin balachander krishnamurthy jia wang labs research abstract measurements related security carried sites internet network ingress points speci points internet wide area internet goals range identifying sources possibly ltering unwanted traf characterizing coming mechanisms deterring attacks measurements systematically adversarial traf aimed measurement system explore role adversaries play present taxonomy potential impact unwanted traf measurement systems goal enhance robustness systems spur development tools alter playing eld increasing cost adversaries introduction attacks internet steadily rising range identity spoo spam phishing ooding links distributed denial service attacks worms virus organized targeted attacks botnets interesting pertinent solutions proposed reduce impact unwanted traf authenticating senders identifying malware ltering throttling rate limiting sharing information research unwanted traf examined attacks traditionally viewpoint impact user end systems network addition numerous measurement projects characterized malware examined breadth impact helped search solutions missing systematic examination speci impact adversarial traf measurement systems created deal malware systems mitigate security threats proposed account active adversary evade attack adversary considered narrowly focused defeating mechanism study sketch framework systematic evaluation considers impact adversary measurements lays groundwork effects propagate types measurement interference anecdotally discussed contexts web performance measurement systems keynote evalid test suite systems globally distributed set platforms monitor customer web sites sending periodic requests selected web pages ensure availability simultaneously measuring latency location monitoring clients surprising web sites game system providing higher quality service requests monitoring clients perceived provisioned site differ actual user experience site interference benign impact competitive businesses systems dealt security related measurements active adversary strong incentive techniques bypass system compromise security infrastructure compromised inferences made taking account active adversaries awed aws perspective false negatives false positives effectiveness paper examine ways measurements inferences skewed result adversarial actions goal offer framework researchers practitioners evaluate impact adversaries measurements variety angles rst illustrate adversarial nature measuring unwanted traf present taxonomy impact traf measurement systems finally conclude future work measuring adversaries paper focus attention measurement security-related tasks unlike standard measurement tasks type measurement explicitly involves adversary network operators measurements enforce policy trafc rewall intrusion prevention system understand behavior remote entity idea informing future detection response mechanisms honeypots hand attackers hard noticed circumvent efforts measured characterized tension fundamental security-related measurement activities section rst survey types measurement systems internet today security-related measurement categorize types unwanted traf systems encounter impact unwanted traf measurement systems schemes developed measure characterize unwanted traf focus broad categories popular measurement systems firewalls widely deployed mechanisms detecting controlling unwanted traf rewall edge enterprise network rewalls range devices activities end spectrum simple access control lists routers approve deny traf based perpacket features addresses transport layer port numbers firewalls dedicated machines network path perow state support complex security policies capping sending rate connection rate machine initiate connections firewalls range logging capabilities detailed nids type security-related measurement system network intrusion detection systems nids snort bro nids deployed strategic points monitor incoming outgoing trafc hosts network nids produce alarms suspicious activities interface rewalls automatically stop ongoing attacks nids signatures algorithms separate benign malicious traf instance well-known string signature http request incoming packet attempting infect local web server worm case nids employ algorithm watch connection attempts time identify remote host scanner shows algorithm common technique nids characterize normal traf deviations baseline so-called anomaly detection honeypots class measurement systems network honeypots systems real hosts mimic real hosts attached routed unused address space traf arrives hosts presumed result mis-con guration malicious actively responding queries honeypots characterize unwanted traf purposes warning operators devices rewalls nids previously unseen attacks providing trends improve operators situational awareness application-level filters systems reside application layer attempt determine arriving traf requested traf wanted prevalent kinds lters incoming web requests routed proxy server arriving scanned viruses spam myriad techniques matching signatures statistical techniques based prevalence terms enterprises web proxies lter requests based content presumed url companies barring employees accessing unsavory web sites adversarial traf range traf types present challenges security-related measurement systems break groups traf attempts attack measurement system resources directly traf attempts evade circumvent measurement systems iii traf intentionally avoids measurement systems prevent characterization direct attacks direct attacks security-related measurement infrastructure forms attacks simply ddos systems resources bandwidth memory table entries ids systems bro maintain large amount state streams traf layers protocol stack simultaneously method attacking system attempt make system track traf streams handle sneak malicious system system noticing generating alarm alternatively ids systems attempt buffer out-of-order packet arrivals construct exact byte stream application attacker attempt buffer measurement system memory traf appropriately monitored form attack slowly ramp background noise legitimate web fetches similar benign traf victim network bring measurement systems closer brink failing attack simply providing proverbial straw breaks entire system type direct attack security-related measurement infrastructure compromise measurement platform instance witty worm compromised hosts running internet security systems iss products security-related measurement system compromised alerts generated actions questionable evasion focus attacks attempt evade measurement systems provide examples sort attack claim comprehensive list simplest evasion techniques splitting payloads multiple small packets fragmentation multiple tcp packets simple measurement system makes judgments arriving packet independently packet arrivals easily fooled splitting string packets instance sending root packet broken packets tactic attempt circumvent rewall pass traf application non-standard port application question rewall instance tcp port ssh traf web traf exploited benign users simply work adversaries hide traf security monitors evasion tactics trickier instance attacker leverage ttl show nids superset packets arrive end host giving nids potentially bogus view happening end system trick reorder retransmit segments confuse nids system instance root transmitted attacker send sequence number sequence numbers sequence number nally sequence number leaves nids inconsistent view attacker send root room tcp speci cation ambiguous actual behavior varies nids fooled thinking benign transmitted malicious visa-versa nids systems anomaly detection susceptible attacks adversary attempts re-de notion normal easier attack radar similar situation exists honeypots commonly statistical methods interpret data spam lters represent single system attackers attempt circumvent basic systems simply match strings dealt changing case text mis-spelling words breaking lines points advanced statistical techniques nding spam gamed adding benign sounding words mis-spelling words html formatting tricks split words actual words put back rendered user including 
spam message graphic text year arms race signs stopping illustrating dif culty task measurement systems attempt characterize adversary avoidance attacks nal type attack avoidance attack idea attacker determine interacting honeypot real end system attacker avoid block addresses honeypot kind blacklisting leave void characterization speci malicious activities void propagate measurement systems ids systems signatures honeypot generate problem addressed making honeypots realistic making honeypots monitor constantly changing set addresses defeat blacklisting modalities measurement pollution unwanted traf adversarial models imply internet measurements affected unwanted traf variety ways adversarial intent insuf cient fully explain scope issue posit complete description unwanted traf effects measurements include consideration target measurement system purpose means sensor component measurement system collect raw data analysis engine transform raw data form presented considered users paper systems explained previous section speci purpose measuring unwanted traf rewalls nids honeypots application-level lters unwanted traf pollute results reported systems ways describe taxonomy ways unwanted traf adversaries change measurements generated rewalls nids honeypots based concepts consistency isolation concepts ned terms set packets arrive measurement system resulting log entries users measurement system consistent set packets results set log entries isolation measurement system set packets results set log entries important emphasize log entries target measurement systems case nids log entries alarms include summary information rule matched set packets detail packets entries rewall logs similar contrast log entries honeypots packet traces include headers headers payloads nitions enumerate taxonomy consistent isolated case measurement system behaving correctly log entries altered unexpected ways unwanted trafc speci cally instances unwanted traf generate log entries set packets impact log entries ideal predictable behavior baseline cases compared consistent non-isolated case measurement system behaves consistent predictable instance unwanted traf log entries caused unwanted trafc speci cally instance unwanted traf results log entry set unwanted traf arrives resulting alarm change illustrates real world instance case sequences packets created mace malicious workload generator submitted system running snort nids version rules public release sequence triggers pair alarms shown table string hsx cgi uri rst alarm string alarm payload request body post sequence consists packets rst http request end hsx cgi string packets consisting payload sequence differs rst additional packet inserted packets consisting equivalent backspace forward slash snort observes sequence rst alarm figure red semantically equivalent similar respects common insertion exploits difference case resulting log entries changed omitted problem similar issue normalization payload semantic level inconsistent isolated case measurement system generates sets alarms set packets arrives system separate measurement epochs difference case sets alarms aix predictable alarms generated sets packets affected behavior case arise kinds randomness introduced environment lead unpredictable behavior dif cult construct concise examples case inconsistency pure sense bounded time offer examples inconsistent isolated behavior illustrate idea rst extension table signatures attacks service affected presence backspace character packet signatures database vulnerable series backspace packets directed nids snort considers traf packetby-packet basis impact unpredictable depend directly packets arrived order suf cient alter resulting log entries inconsistent behavior fact signatures susceptible backspace affected means behavior isolated case relates idea packet interleaving nids connection-oriented bro signatures expressed form state machines multiple packets source required raise alarm case signatures common initial sequences set packets service netbios observed nids order measurement epochs possibility order alarms logged set alarms raised kinds experiments conducted outcomes observed inconsistent non-isolated nal case measurement system behavior terms resulting logs unpredictable epoch case set packets result log entries measurement epoch set packets result log entries measurement epoch case important illustrates randomness unwanted packet streams issue arrival order case caused issue denial service discussed earlier measurement packet sequence payload post hsx cgi http ncontent-length payload payload payload packet sequence payload post hsx cgi http ncontent-length payload payload payload payload snort rule uricontent hsx cgi hsx cgi appears uri raise alarm snort rule uricontent hsx cgi content content distance hsx cgi appears uri content null byte payload raise alarm alarm web-misc http directory traversal classi cation attempted information leak priority tcp ttl tos iplen dgmlen seq xecae ack win tcplen tcp options nop nop xref http whitehats info ids alarm http inspect webroot directory traversal classi cation attempted information leak priority tcp ttl tos iplen dgmlen seq xecae ack win tcplen tcp options nop nop xref http whitehats info ids table snort generates alarm receives packet sequence snort generates alarm receives packet sequence includes back space character fourth packet consistent non-isolated behavior systems susceptible dos attacks including nids rewalls dos attacks unpredictable resource consumption systems leading unpredictable packet loss effects potential alter ultimately logged measurement system conclusions future work made initial examination adversaries impact security related measurements ongoing protocol layers numerous sites internet sought enumerate adversarial traf types provide taxonomy impact traf security related measurements steps study include conducting experiments spectrum unwanted traf measurement systems assess actual impact controlled environment ultimate goal develop generic tools practices augment ability measurement systems robust unwanted traf acknowledgments mark allman work supported part national science foundation grants itr aninsf- stipaul barford work supported part national science foundation grants cnsccr- views conclusions contained authors interpreted necessarily representing cial policies endorsements expressed implied government agencies government crosby wallach denial service algorithmic complexity attacks usenix security symposium evalid website analysis testing suite http soft evalid handley kreibich paxson network intrusion detection evasion traf normalization endto-end protocol semantics proc usenix security symposium august keynote http keynote krishnamurthy mohonk mobile honeypots trace unwanted traf early proc acm sigcomm network troubleshooting workshop paxson bro system detecting network intruders real-time proc usenix security symposium january provos virtual honeypot framework proc usenix security symposium august roesch snort lighweight intrusion detection networks proc usenix systems administration conference november shannon moore spread witty worm ieee security privacy aug sommers yegneswaran barford framework malicious workload generation proc acm internet measurement conference october sommers yegneswaran barford recent advances network intrusion detection systems tuning proc ieee conference information sciences systesm march yegneswaran barford paxson honeynets internet situational awareness proc acm usenix fourth workshop hot topics networks november yegneswaran barford plonka design internet sinks network abuse monitoring proc symposium recent advances intrusion detection september 
botnet mesocosms paul barford mike blodgett wisconsin-madison wisc mblodget wisc abstract in-depth understanding botnet behavior precursor building effective defenses growing threat paper describe initial steps building flexible scalable laboratory testbed experiments bots botnets botnet evaluation environment bee designed enable individual bots networks thousands bots tested secure self-contained framework bee developed toolkit emulab-enabled network testbeds design choice made obviate building user experiment management functions enable access collections computing hosts focus implementation efforts building library bot images run individual systems virtual machines library includes images generated source code bots agobot gtbot spybot sdbot binary code unknown bots number windows variants bee includes set services required botnets including dhcp dyndns irc tools botnet measurement evaluation monitors honeypots demonstrate utility bee describe simple set tests characterizes command control traffic botnet configurations introduction mes cosm medium size representative system matches directly larger system constitution configuration development past years botnets threats faced internet recent reports describing botnet structure behavior appeared technical popular press difficult estimate total number systems participate botnets point time estimates order millions turing award winner vint cerf recently predicted internet hosts botnet drones years magnitude botnet threat widely recognized compounded emergence active botnet economy fueled organized crime developing effective counter-measures threat require significant focus innovation network security community argue comprehensive testbed environment botnet study critical building block quest address botnet threat requirements environment include ability experiment variety bot types unknown running variety standard operating systems ability conduct experiments secure fashion poses threat greater internet ability create flexible realistic botnet topologies configurations ability conduct experiments scale realistic conditions posit testbed satisfies requirements enable range experimental study methods tools characterizing comparing identifying tracking dismantling preventing botnets key benefits environment ability establish ground truth behavior comprehensive instrumentation experimental repeatability ability conduct experiments wide range configurations paper describe design implementation botnet evaluation environment bee long term goal satisfying requirements listed bee set operating system bot images support tool configurations instantiated secure emulab-enabled environments including deter wisconsin advanced internet lab wail emulab widely network emulation testbed technology enables customized operating system application images deployed dedicated pcs systems organized virtually kind topological configuration capabilities satisfy aspects fourth bee requirements listed making emulabenabled testbed natural starting point work recent emergence malicious botnets dynamic nature mechanisms obfuscating behavior central challenges creating effective realistic laboratory environment botnet evaluation literature growing remain open questions botnet structure behavior typical botnet topologies botmaster behavior size lifetimes botnets complicating factors include handling anti-virtualization capabilities providing sufficient support services wide range bot variants non-irc command control systems tussle containment experiments bots home binary uploads community develops deeper understanding issues empirical study argue utility bee botnet study network effects impact multiple bots communicating reacting botmaster commands grow meantime argue bee valuable platform study individual bots bee design includes primary components bot images support services security mechanisms component suggests library versions bot code installed versions windows operating systems goals component automate process generating bot images build library images enable experiments wide range individual bots building images primary focus initial efforts experiment bots built bot code source binary form respect building support infrastructure establishing ground truth behavior bot variant difficult find bot code source form contrast large number bot code binaries binaries suspected bot code easily captured honeynets challenges building experimenting images built bot binaries security containment fact growing number bots include anti-virtualization anti-debugging capability developed initial set bot images source code binaries continue library development effort improve usability enable experiments large numbers bots developed images run virtual machines experience enables approximately -tobot-to-host multiplexing modestly configured pcs capability experimented bot networks refer botnet mesocosms finally bot image library includes documentation created family important features list control commands propagation modes attack information gathering capabilities component bee set support services required botnets function current set services include dhcp dyndns irc develop specific configurations services bee respond appropriately wide variety queries bee ignores destination address queries directed dns service directs dyndns server server turn replies queries address bee irc server current set services sense irc-centric plan enhance component additional capabilities needed support command control mechanisms final component bee set security mechanisms critically important real bot code build bot images experiments threat models considered designing security mechanisms bot code bee-aware attempt self-propagate conduct malicious activity bee users inadvertently disable security mechanisms experiment address threats implemented security mechanisms aimed keeping bee traffic contained experimental configuration mechanisms include firewall bee border blocks outgoing connections udp packets keeping bee management network logically separate experimental network iii unroutable net addresses bee date mechanisms tested wail environment clear deter testbed designed secure self-contained experiments easily accommodate bee ported standard emulab environment discuss implications mechanisms section iii-d important aspect bee packaged goal make experimental development users simple highest level bee research community subject approval testbed operators conservative due dangers experiments bee approval users access bee image library configuration scripts instantiate required services users experiment individual bots build botnets bot images network topologies built emulab-enabled environments case images deployed systems reside testbed firewall topology built mechanisms background traffic generators specific instrumentation deployed service scripts run botnet exercised botnet live internet sending commands bee irc server demonstrate efficacy bee created simple botnet mesocosms wail experimental configurations generate measure characterize compare botnet command control traffic results show predictable traffic pattern irc server highlight randomness differences traffic process expect internet make arguments intrinsic results demonstration insights capabilities toolkit remainder paper organized review studies related botnet measurement analysis section details bee implementation challenges overcome development challenges section iii section report results case study demonstrates bee summarize work describe future directions bee section related work network security research conducted variety ways important modalities empirical study based gathering data live dedicated measurement systems deployed internet mechanisms effectively gather data specifically botnet behavior monitoring dns lookups commonly bots resolve address server typically irc server command control active methods dns hijacking passive methods dns-based blackhole lists prior work method tracking botnet activity monitors deployed unused address space honeynets honeynets active response capability enable details attacks tracked malicious binaries gathered recent studies rajab freiling describe multifaceted approaches evaluating botnets based honeynets gather malicious binaries monitor systems binaries execute command control 
traffic botnets similar work anticipate honeynets continue important source malware evaluated bee unlike work bee focused understanding small medium sized botnets behave individual instances finally potential correlating data multiple sources means detection real time tracking botnets discussed papers including bee eventually testing kind distributed monitoring system real botnets modality network security research detailed examination instances source code instances malware source code found searching web usenet news groups executable code executables gathered honeynets standard tools reverse engineer executables including disassemblers debuggers system monitors microcosm approach commonly network host security vendors signature development malware authors aware approach developing specific deception techniques complicate analysis process similarly tools static analysis source code tools focused problems identifying run time errors security vulnerabilities information provide including symbol tables call graphs parse trees valuable future bot code analysis anticipate diverse repository botnet configurations bee researchers interested developing testing host-based mechanisms botnet detection modality network security research advocate paper study botnets emulation testbeds emulab deter wail testbeds offer possibility study controlled environments strive realistic hundreds papers published based results emulation infrastructures botnet analysis presents challenges opportunities paper challenge conducting large scale experiments approximating size entire internet weaver offer interesting approach addressing describing scale-down techniques objective bee enable realistic experiments small medium sized botnets defined experiments larger bots loom interesting possibility scope study aware prior work attempts build scalable extensible realistic testbed botnet evaluation analysis finally efforts underway identify characterize malware general bot code hybrids aforementioned analysis methods commercial norman sandbox evaluates malicious binaries secure emulation environment produces reports behavioral characteristics including classification malware types bots similar commercial product sunbelt cwsandbox iii botnet evaluation environment section describe implementation details bee including challenges faced development process provide description bee emulab-enabled environment discuss current future limitations bee implementation objective work build bot testbed satisfied requirements listed section key components requirements realism flexibility security usability scalability step satisfying requirements design develop bee toolkit emulab-enabled laboratories building top emulab allowed advantage established functionality includes user experiment disk image management straight-forward network topology generation configuration choice allowed advantage installations large numbers dedicated general purpose computer hosts required enable bee research community large conduct experiments botnet mesocosms local emulab-enabled facility wail pcs infrastructure bee development place emulab wail starting point bee design includes bot disk images set services required bot operation set security mechanisms aim ensure malicious packets bots escape live internet components detail added vmware-based virtualization capability direct method instantiating windows-based bot images emulab-enabled testbeds virtualization enables botnet size increased running multiple images host bot image library core bee library bot disk images authorized users web interface images built real bot code top windows operating system variants deployed emulab test network enabling experiments real bots botnets matter minutes goal developing library provide users large number bot variants developed bot source code binary code learning build bot images building tools automate process primary focus initial efforts source code common bots web news groups underground sources anticipate increasingly difficult find source instances time gathered bot variants initial bee bot image development working source code enabled bootstrap testbed development process providing important insights required network services precluding irc passwords channel keys exposing entire command set bot importantly source code exposes anti-debugging anti-virtualization capabilities bot disabling capabilities essential operation virtualized network configuration current inventory bots agobot code included anti-debugging virtualization checks initialization version agobot checks vmware backdoor exits found bot code variants check values hardware registers memory locations existence processes configuration elements exist guest operating system running process creating guest images begins identifying target operating system initial development efforts focused windows variants specifically windows methodology easily extended unix variants initial install guest number made vmware virtual machine configuration file multiple identical image instances specific related locking logging features vmware inside guest set environment image booted experimental node configure node specific parameters provide unique netbios image additionally node required auto-infect bot binary execute bot binary resident root directory pass information guest variable passing features vmware tools provide detectable feature anti-debugging code developing method adding binaries bypasses standard vmware tools making process running binaries vmware environments efficient finally build time image scratch day due myriad configuration tasks related creating specific windows configuration including service packs patches vmware developing tools streamlining process adding bots images bot source code straight forward task finding configuring compiling bot time consuming aspects process typically anti-debugging anti-virtualization checks commented code easy disabled current implementation requires administrator configure bot place compiled binary vmware virtual disk constitutes refer bot image eventually users create bot images source code binaries adding binary image binary suspected bot complicated process begins placing binary vmware virtual disk resulting bot image tested includes anti-virtualization checks preclude vmware installations depending sophistication anti-virtualization mechanisms image stand-alone limit scale experiments stand-alone windows images supported bee investigating utilize emulab support capability vmware installation provide solution working adding counter detection mechanisms guest images developing automated method users include bots bee important enable expansion bot library gathering binaries honeypots increase utility bee developing automated bot identification capability similar users interested testing bot code submit testbed administrators build standard image network services connects irc abraracourcix port tcp sends data stream bytes irc abraracourcix port connects irc server irc nickname usa irc username ixllgi irc joins channel password asd irc sets usermode user usa i-x fig output norman sandbox analysis bot binary offensive computing final step process building bot images bot source binaries generate documentation image standard template filled extent person creating image template includes information image creation version bot version image virtualized environment bot includes anti-debugging notes configuration irc channel bot user documentation includes notes bot commands recognized bot exploits capabilities bot dos spam relay propagation methods focus deep details provide information sufficient conduct wide range experiments botnets binaries services norman sandbox expose details bots bee shown figure irc server port number channel provided required exercising unknown bot bot images documentation bee library include windows agobot phatbot source windows sdbot source windows gtbot source windows spybot source windows agobot phatbot source windows spybot unknown binary version set developed tested demonstrate ability mix match bot variants source code binaries hope bee community 
contribute image building documentation effort network services bots live internet expect standard set services operate set services test environment built bee bot images set services listed configured tested packaged easy instantiation bee anticipate expanding set time bots require additional services added library irc server present internet relay chat primary means bot command control ircdhybrid provide irc services bee default configuration disables anti-flooding controls users modify configuration irc daemon completely replace required dns server bind run experimental nodes default configuration bee sets root zone updated dyndns frequently bots users dns entries emulab configuration file added server startup entries manually added ns-update tool default wild card returning single address names security purposes bind configured listen experimental interfaces provide details malware naming conventions vary widely attempting consistent projects mitre common malware enumeration recursive services design choice limit range experiments bots alternative configurations vmware server vmware-server provide virtualization testbed chose vmware based support windows images created custom configuration vmware server enables user run multiple instances guest image target host configuration fetched installed target hosts experiment instantiated process loading bot images virtualized systems likewise automated configuration scripts current testbed nodes hardware virtualization support intel ivt amd amd-v possibility adding nodes wail testbed affect future choice virtual machine software dhcp server bots provide addresses virtual machines inside experimental network included isc dhcp server dhcp forwarders topology network varied user configuration dhcp daemon dchp forwarders determined run time boot time dhcp server node extract configuration emulab configuration file simple lan topology dhcp forwarders present chosen manually enabled emulab file dhcp servers configured respond mac address prefixes vmware virtual adapters problems testbed bootstrapping mechanisms services additional capabilities included bee enhance usability packet measurement wail includes systems high performance hardwarebased packet capture capability bee experiments link tracing propagation delay emulation emulab configuration file examples included bee templates included nepenthes honeypot image simple instantiate emulab harpoon image included enables background traffic generators easily included experiments final capability important analysis bots isolation instrumentation monitoring bot images dynamic profiling tools ida pro provide disassembly information bot tools sysinternals provide array information windows behavior utilities file system network process resource usage bee plan include instrumentation tools future versions bee bee security real instances malicious code bee great care prevent outbreak testbed boundary security mechanisms bee designed prevent non-bee aware bots sending packets testbed perimeter prevent users inadvertently allowing malicious traffic escape mechanisms limiting bee access authorized users sufficient periodically reevaluate policies mechanisms security bee implemented ways user authorization management control traffic users setting running experiments test traffic generated bots services experiments flow logically separate networks enforce policy filtering rules hosts run bot images primary rule forward traffic control interface similarly configure network services experiment generate traffic limited testbed disabling recursive dns guard testbed hosts compromised experiments topology testbed control network restricted minimum required communication testbed control systems nodes allowed emulab built support creating secure environments filtering nodes control network isolation testbed infrastructure achieved emulab emulab features security mechanism firewall deployed wail border configured block outgoing connections udp traffic policy prevents types bots bee firewall mechanism complemented separate monitoring system enables mechanisms failed finally experiment-wide network address translation system limit bot packets rfc addresses routable live internet approach connect bot hosts nat systems intercept packets bots translate addresses forwarding hosts testbed process extending netpath delay emulator purpose nat default configuration changed users enable experiments focused examining scanning capabilities bots bee bee realized library bot images set configuration scripts set emulab templates authorized users testbed approval users begin creating emulab network topology scratch bee template network simple single node running bot image large multi-node topology complex interconnections diverse propagation delays realistic background traffic network built users edit configuration file options enable network including specific bot image specific services network instantiated testbed assuming requested nodes users issue command testbed server starts virtual machines users issue commands botnet irc server challenges limitations bee noted section challenges addressed vision conducting realistic tests botnet mesocosms fully realized nascency malicious botnet research limits ability build representative botnet topologies precludes study bots require services configurations unaware included bee security policy preventing outgoing connections limits diversity bots bee library bot variants install simple module compromised host phones home download additional code needed directed botmaster general difficult impossible case encrypted packets determine intent outgoing connection real malware obvious reasons packet damage testbed blocked block outgoing connections similar challenge faced honeypot operators code segments bot variant captured means honeypot home server added bee mentioned anti-debugging anti-virtualization capability bot code binaries presents challenges building bot image library bots experimented date capabilities prudent expect future bots case anti-virtualization plan continually augment bot image building methods include latest counter detection mechanisms expect images run stand host case anti-debugging dynamic analysis tools account capabilities include bee future work scalability virtualization enables individual systems run multiple bot images simultaneously single actual multiplexing factor limited system resources required bot point users careful skew experimental results overloading systems bot images experience regard multiplexing factors reasonable cases trial-and-error present make determination emulab-enabled testbeds pcs federation testbeds conduct experiments networks bots uncommon federating emulab-enabled environments avenue pursuing enable considerable resources grid computing infrastructures bee experiments condor project controls large number systems campus openly research integration nodes temporary resources potentially provide ability scale number bot instances thousands distributed nature resources required security measures needed make integration challenge investigating feasibility idea bee demonstration provide perspective bee capabilities conducted set simple tests characterize command control traffic botnet mesocosms intention highlight process building exercising botnets bee results tests intended representative real instances botnet offline analysis empirical traces informative envision similar environment conduct repeatable tests ground truth established tools detecting bot command control traffic bot scanning propagation range bot types botnet sizes configurations scalability honeynet systems designed capture malware bots experimental setup protocol network topology tests built wail shown figure design goal network range propagation delays sufficient link capacity congestion potentially issue single bottleneck node background traffic introduced fig network topology bee case study botnet groups shown figure consisted pcs group pcs ran vmware server loaded virtual machines test arrived multiplexing factor monitoring resource utilization cpu memory network 
tests images host cpu utilization ameliorating impact virtualization results bot images bee library bee scripts deploy required services including security measures section iii conducted botnet tests details table focus test measure characterize compare basic features bot command control traffic captured irc traffic test tcpdump running node represented point topology test consisted issuing set commands node botnet script running master node command irc server consecutive times spacing command minute interval issuing command resulted tests running approximately minutes loading virtual machines takes minutes tests run minutes initial command end case test harpoon background traffic generators warmed minute master began issuing commands agobot variant tests weak random nickname generator high probability collisions occur mechanism collision detection names collide start bot continually attempt connect eventually timeout irc server address minutes tests started manual process identify connected bots direct choose irc nickname turn enabled unconnected bots join channel results simple statistical summary command control traffic characteristics table focus characterization define busy period test interval begins master sending command ending packet interval busy periods test busy period packet bpps results tests reflect command ack response confirmation packets bots differences results tests primarily due timing traffic randomness tests reflect significant underlying effects including background traffic inherent randomness harbinger difficulty developing statistical methods identifying traffic live internet difference bpps agobot tests versus spybot test primarily caused responses command sets list generates great deal traffic relative inefficiency spybot communications irc packet time series test shown figure figure shows predictable pattern busy non-busy periods due test protocol small amount activity non-busy periods traffic attributed irc ping pong packets server bots takes place tests fact spikes ping-pong packets visible table details test configurations bee case study test image bot topology link master commands background traffic runtime agobot bots bot groups gbps bot secure bot unsecure minutes shown figure cvar set avkill false bot rndnick irc join botnet agobot bots bot groups gbps bot secure bot unsecure harpoon mbps minutes shown figure cvar set avkill false node bot rndnick irc join botnet spybot bots bot groups gbps info list makedir test minutes shown figure startkeylogger stopkeylogger table summary statistics command control traffic test bee case study bpps packets busy periods bpl busy period length test bpps std dev bpps max bpps bpl std dev bpl max bpl fig snapshot irc packet time series test spike begins bot master sends commend figure due synchronization traffic arises tests finally include irc packet time series graph figure test bots systems group delay group total bots key observation busy periods significantly profile versus figure resulting bot node configuration difference caused cpu contention vmware node running bot images leading commands taking longer complete evident live internet oneto-one correspondence bots hosts highlights care required creating bee configurations conclusions future work premise work realistic secure testbed environments important understanding bots fig snapshot irc packet time series bot images node bots total botnets building effective counter-measures threat paper describe botnet evaluation environment developed test evaluate bots emulab-enabled testbeds component bee library bot images meta data built bot code source binaries key challenges effort automating task constructing bot images binaries understanding images virtualized environments component bee support services required bot botnet operation current set services includes dns irc dhcp standard support tools monitors honeypots background traffic generators commonly tests set configuration scripts developed enable services automatically deployed test network component bee security mechanisms employed ensure bee traffic perimeter systems include nat functions aim ensure destination addresses packets rfc compliant unroutable internet firewalled network perimeter separate management network demonstrate process building testing botnets bee created botnet mesocosms wisconsin advanced internet lab network topology consisted pcs connected varying propagation delays irc server exercised botnets issuing series commands irc measured resulting command control traffic simple qualitative quantitative characterization traffic presented hope inspire future creative bee research community goal reducing botnet threat bee development activities on-going initial utility bee primarily study individual bots end important tasks continuing add images bot library challenges task automating image generation process creating detailed documentation images generated binaries developing mechanisms overcoming anti-debugging anti-virtualization capabilities hope research community eventually engage image repository building effort tools mature utility bee clear important objective future work increase utility experiments botnet mesocosms on-going research community botnet characteristics capabilities behaviors reflected enhanced bee services configurations documentation enabling detailed realistic experiments collections bots important note deter testbed designed specifically experiments malicious code recently begun communicating deter developers forward opportunity streamline bee security mechanisms taking advantage built-in capabilities deter finally continue investigate methods expanding scale botnet experiments acknowledgments authors shepherds fabian monrose vern paxson assistance paper joel sommers vinod yegneswaran input feedback material based work supported army research office cyber-ta research grant nf- nsf grant ccrand homeland security advanced research projects agency grant nbchc opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf aro homeland security agency markoff attack zombie computers growing threat experts york times january cook security matters beware enemy financial times february kirk botnets shrinking size harder trace infoworld january gostev malware evolution january march http viruslist kawamoto bots slim tough cnet news november evers dutch police nab suspected bot herders cnet news october weber criminals overwhelm web http news bbc business stm january california man charged botnet attacks reuters november thomson hackers fight create worlds largest botnet http vnunet august verton organized crime invades cyberspace http computerworld august isi deterlab network security testbed based emulab http deterlab net wisconsin wisconsin advanced internet laboratory http wail wisc utah emulab network emulation testbed http emulab net bacher holz kotter wicherski enemy tracking botnets http honeynet papers bots march barford yegneswaran inside botnets ser advances information security malware detection springer vol honeynet project http project honeynet dagon zou lee modeling botnet propagation time zones proceedings network distributed systems security symposium ndss san diego february ramachandran feamster dagon revealing botnet membership dnsbl counter-intelligence proceedings usenix workshop steps reducing unwanted traffic internet sruti san jose july bailey cooke jahanian nazario watson internet motion sensor distributed blackhole monitoring system proceedings network distributed security symposium ndss san diego january yegneswaran barford plonka design internet sinks network abuse monitoring proceedings 
recent advances intrusion detection raid sophia france september pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm internet measurement conference imc taormina italy october nepenthes low interaction honeypot http nepenthes mwcollect vrable chen moore vandekieft snoeren voelker savage scalability fidelity containment potemkin virtual honeyfarm proceedings acm symposium operating systems principles sosp brighton england october rajab zarfoss monrose terzis multifaceted approach understanding botnet phenomenon proceedings acm internet measurement conference rio janerio brazil november freiling holz wicherski botnet tracking exploring root-cause methodology prevent distributed denial-of-service attacks proceedings european symposium research computer security esorics september cooke jahanian mcpherson zombie roundup understanding detecting disrupting botnets proceedings usenix workshop stepts reducing unwanted traffic internet sruti cambridge july krishnamurthy mohonk mobile honeypots trace unwanted traffic early proceedings acm sigcomm network troubleshooting workshop portland september allman blanton paxson shenker fighting coordinated attackers cross-organizational information sharing proceedings workshop hot topics networks hotnets irvine november ida pro disassembler debugger http datarescue softice driver suite http compuware russinovich cogswell sysinternals http sysinternals honeynet scan month http honeynet scans scan coverity coverity prevent http coverity cousot cousot feret mauborgne mine monniaux rival astree static analyzer http astree ens weaver hamadeh kesidis paxson preliminary results scale-down explore worm dynamics proceedings acm workshop rapid malcode worm washington october norman sandbox http sandbox norman sunbelt cwsandbox http sunbelt-software sunbeltcwsandbox cfm ferrie attacks virtual machines proceedings avar conference auckland december offensive computing http offensivecomputing net mitre common malware enumeration http cme mitre kalt internet relay chat client protocol rfc informational april ircd-hybrid http ircd-hybrid sommers barford self-configuring network traffic generation proceedings acm internet measurement conference imc taormina italy october rekhter moskowitz karrenberg groot lear address allocation private internets internet rfc february agarwal sommers barford scalable network path emulation proceedings ieee international symposium modeling analysis simulation computer telecommunication systems mascots san diego september livny condor high throughput computing http wisc condor 
geni instrumentation measurement systems gims specification gdd- geni global environment network innovations december status draft version note reader document work progress continues evolve rapidly aspects geni architecture addressed aspects addressed number unresolved issues identified text due active development editing process portions document logically inconsistent geni instrumentation measurement systems gims specification december document prepared facility architecture working group editor paul barford wisconsin contributing workgroup members jack brassil labs ted faber usc isi jay lepreau utah larry peterson princeton steve schwab sparta john wroclawski usc isi contributors david andersen carnegie mellon tom anderson washington suman banerjee wisconsin david kotz dartmouth steve muir princeton sanjoy paul rutgers robert ricci utah timothy roscoe intel research stephen soltesz princeton work supported part nsf grants cnsand cnsgeni instrumentation measurement systems gims specification december revision history version log date original version posted expanded document overview added discussion design approach trade-offs added resource description framework modest updates sections added previously omitted bibliographical entries geni instrumentation measurement systems gims specification december table contents revision history document overview design overview design approach design trade-offs specialized systems intrinsic capability gims resource description framework resource description instrumentation link sensors node sensors time sensors instrumentation issues synthesis data archive security access control gims design physical deployement gims configuration user access services geni instrumentation measurement systems gims specification december document overview document describes ability gather analyze store data geni infrastructure document represents idealized architectural perspective geni measurement systems objectives supporting geni mission study geni infrastructure artifact aspects measurement treated detail document active measurements traceroute ping-style probes kinds measurements based user-level tools typically run end hosts types network systems generalized capability fall instrumentation environment describe document hooks developed geni measurement component kinds tools utilize aspect measurement treated document data required secure manage operate geni facility anticipated measurement capabilities cover large portion security monitoring management operation tasks focus document measurement capability required support experiments infrastructure document evolves extended accommodate measurement requirements operations aspect measurement treated document application layer logging assumed application layer researchers develop logging capability run slice set components web server log application logging benefit measurement hooks geni systems document remainder document organized section overview measurement infrastructure requirements design includes discussions design approach trade-offs section describes general framework defining geni resources respect basic data types measured data gathered section describes design elements physical instrumentation deployed geni support measurement section describes synthesis component measurement systems design archival analysis data management systems section section security access control measurement systems data section simple design description measurement capabilities accessed geni management core gdd- design overview primary objective design development geni instrumentation measurement systems gims ensure sufficient support broad spectrum empirical network research general requirements gims include ubiquitous deployment measurable impact experiments extensibility ability add instrumentation measurement synthesis capability geni instrumentation measurement systems gims specification december high availability geni systems experiments conducted large capacity ability support diverse set simultaneous activities large number experiments ability measure detailed activity high accuracy precision physical layer application layer includes ability calibrate measurements ability required measurements experiment slice standard measurement types library defining user specific measurements measurements initialized infrastructure experiment activated access control ability data device collection devices long large secure central repository collected data anonymized made users data analysis warehouse tools visualizing interpreting reporting measurement data developed made openly design approach objective geni facility provide large-scale environment research network architectures services applications includes support disruptive research layers traditional protocol stack implication objective vis-vis measurement capability data primitives ethernet packets bgp updates queue occupancy routing table node data primitives conceived measured number approaches developing specification gims capabilities capabilities requirements list approach document resource centric begins general framework describing geni resources includes basic data types resources data types accessed key aspect process comprehensive definition basic data types order accommodate primitives higher levels determined contrast methods accessing data types common extent resources standard extensible authorized gathering data types infrastructure framework refined developing set specifications measuring well-known data primitives included section document challenge gims design resource centric approach geni resources process defined address beginning abstract resources links nodes special case resource time sensors organize gims specification general concepts instrumentation measurement synthesis analysis archiving security access control applied items mechanisms realizing instances resource framework thought hierarchy instrumentation lowest level referring physical taps geni systems links programmable components synthesis referring transformations signals provided taps meaningful data providing layer geni instrumentation measurement systems gims specification december framing flow export high level aggregates routing configuration information analysis archival highest level referring data evaluation storage common repository future components form intrinsic measurement capability infrastructure complemented additional features capabilities accommodate experimental research instrumentation measurement deploying testing measurement systems protocols geni design trade-offs specialized systems intrinsic capability aspects geni infrastructure scope capabilities rollout measurement systems depend variety factors including facility design budget user requirements management requirements security requirements availability hardware software purpose measurement factors important design issue considered measurement capabilities realized facility issue boiled question deploy special-purpose measurement hardware versus enhancing general-purpose programmable hardware developed geni support required measurements argued special-purpose measurement systems endace dag cards offer advantages designed built operate line rate systems high-speed gbps links today sense offer price performance advantage general-purpose systems virtue fact specialized systems external pose risk terms introducing load general-purpose systems experiments special purpose systems deployed today means community knowledge existing analysis tool suite data collect recreating high-speed measurement capability exists today commercial products non-trivial enterprise make sense short medium term finally special purpose measurement systems ability programmed enable fit directly geni enhancing programmable general-purpose geni systems required measurement capability distinct advantage making measurement intrinsic infrastructure approach cleaner solution design deployment management perspective fit geni mission risk determined infeasible support kinds required measurements general-purpose hardware hardware required common types measurements consistently degraded performance general-purpose systems deployed solution kind hybrid approaches advantages special-purpose systems dominate costperformance existing solution short medium term anticipated actual realization evolve methods incorporating measurement capability general-purpose systems developed implemented deployed document reflects design includes special-purpose measurement systems measurement built general-purpose geni components geni instrumentation measurement systems gims specification december gims resource description framework section general framework describing basic data types access methods resources geni definition resource 
gims consistent definition geni documents gdd- gdd- geni components consist collection physical logical resources gims context measured framework consistent notations resource descriptions developed geni documents extend support gims requirements framework extend basic resource descriptions adding access methods include protocol timing sampling methods storage defining resource metrics access methods physical taps sensors counters logical synthesis functions transform data primitives required metrics infrastructure required support measurements determined mentioned depend variety issues gims evolves additional consideration measurements require infrastructure synthesized existing infrastructure open questions gims resource description framework details notation format resource description framework consistent geni documents framework extended metadata experiments stored gims repository resource description specifications notations expressing geni resources evolve process defining physical logical components gims bootstrapped abstract resource types links nodes links physical media copper fiber air connect nodes nodes programmable components slices instantiated experiments conducted assumption combination resources form infrastructure support experiments physical application layer measurements required generality represents bottom approach gims remain relevant resource definitions focus attempt made systematic notation purely descriptive list items beneath links nodes represent metrics measured gims note meant complete lists metrics resource links basic characteristics media single mode optical fiber location nodes iii distance miles geni instrumentation measurement systems gims specification december basic signals type pulse specific transponder type characteristics attenuation aggregates encodings method encoding bits synthesis method signal pattern encoding capacity maximum bit rate characteristics bits transmitted bit error rate framing packets method framing packetizing type ethernet frame ipv packet synthesis method encoding signaling framing packets format header fields characteristics frames packets transmitted throughput goodput access methods authentication credentials required access resource authorization credential access set metrics resource required anonymization authorized access include anonymization set metrics resource iii protocol type access protocol gather metrics parameters samples minutes timestamps transfer results repository location nodes basic characteristics location lat lon machine room label device type rev number widget iii device configuration rev number device dynamics cpu memory utilization basic signals type pulse specific transponder type ethernet frame characteristics attenuation frames transmitted received aggregates geni instrumentation measurement systems gims specification december encodings method encoding bits synthesis method signal pattern encoding capacity maximum bit rate characteristics bits transmitted bit error rate framing packets method framing packetizing type ethernet frame ipv packet synthesis method encoding signaling framing packets format header fields characteristics frames packets transmitted throughput goodput iii table result calculation service application node type bgp table characteristics update frequency access method authentication credentials required access resource authorization credential access set metrics resource required anonymization authorized access include anonymization set metrics resource iii protocol type access protocol gather metrics parameters samples minutes timestamps transfer results repository location examples intentional duplication metrics noted section decision measure duplicates matter carefully requirements users management security weighing design tradeoffs instrumentation strawman resource descriptions lead element realization gims set sensors deployed infrastructure types sensors link sensors node sensors time sensors purpose sensors provide basic signals synthesized variety specific well-formed data measurements experiments running infrastructure design represents instance gims refined geni requirements resource descriptions aspects facility design focus geni instrumentation measurement systems gims specification december link sensors link sensors deployed portion physical links infrastructure enable signals transmitted links extracted level assumptions made signals interpreting signals part synthesis activity signals links light electrical impulses case fiber light signals standard method tapping link install passive y-splitter split makes duplicate light signal primary path secondary path terminate collection system standard optical test access port devices offered net optics taps commonly mirror light signals devices typically kind standard layer framing basic synthesis make applicable fairly broad range measurement activities short term general sense architecture taps ideal gims programmable enabled flexibility framing defined case signals copper electrical links standard methods instrumentation unlike fiber optical links basic port mirroring capability types network nodes approach requires network node copy signals port monitoring port high-speed links resource demands configuration considerable extent alter performance behavior network node method bump road approach refers physically breaking link nodes mirroring device similar test access port devices mentioned case copper electrical links approach short term terms off-the-shelf solutions suffers problems imposing fixed type layer framing basic signals ideally sensors fiber optical copper electrical links taps mirror signals links current commercial taps rack-mount devices installed geni nodes devices provide level measurement synthesis layer framing standard types frames pass basic signals support programmability kinds framing link sensors wireless environments characteristics wireline link sensors basic capabilities respects similar monitor physical environment respect signals transmitted multiple nodes simultaneously means separate sensing devices higher quality antennas deployed order gather complete picture transmission interference patterns environment open questions link sensors geni details requirements capabilities sensors wireless environments dwdm links tapped optical splitters substantial burden collector system geni instrumentation measurement systems gims specification december node sensors node sensors deployed nodes interconnected links geni essence node sensors provide basic utilization state configuration information components subsystems node canonical examples node sensors proc file system linux proc real time pseudo file system configuration information measurements underlying hardware components processes running hardware examples include cpu speed cache size cpu utilization memory utilization packets packets received simple network management protocol snmp management information base mib primitives provided switches routers networking hardware cases data limited provided underlying hardware open questions nodes sensors geni mib set network nodes specifically developed geni utilization state configuration information values end host nodes deployed geni time sensors time sensors deployed geni node locations time sensors provide high fidelity synchronized time source geni nodes variety purposes gims context time sensors basis applying high precision timestamps measurements problem distributed time synchronization studied years network time protocol ntp offers ability generate timestamps synchronized order milliseconds based small number highly accurate time sources cesium clocks risk ntp provide sufficient precision significant set geni experiments case higher fidelity time sources provided gps enable timestamp accuracy order microseconds required gps receivers installed simple hosts rack-mounted geni locations systems provide pulse pps signals data latitude longitude device location risk gps typically requires external antenna difficult deploy locations case software clocks cdma-based gps systems possibility open questions time sensors include mechanisms applying timestamps specific measurements time sensors established methods existing systems geni 
specific systems provide specific support capability minimum timestamp accuracy requirement geni geni instrumentation measurement systems gims specification december instrumentation issues specific data buffering storage requirement types sensors ideally sensors simply provide raw signals buffering short term storage part synthesis component solutions include amount synthesis buffering case synthesis component query sensor well-defined protocol simple common sensor interface planetlab rpkw synthesis element gims set systems collect synthesize signals provided sensors meaningful data collection synthesis systems physically connected sensors geni locations referred section collection synthesis systems physical instantiation single system multiple systems systems require specific context users order interpret arriving signals appropriately context provided creation geni experiment light signals fiber link geni resource component inclusion slice period time ethernet packets case aspect measurement synthesis required layer ethernet framing expected ability frame capture packets important network measurement features infrastructure gims means limited interpreting signals packet examples collection synthesis systems commonly today provide functionality standard running tcpdump utility tdmp systems rely standard network interface cards provide framing endace dag daughter cards installed standard generate packet traces layer signals gathered directly network link dag case systems configured gather full header payload traces subset host buffer volume data streamed larger repository synthesis function complex experiment require flow-export measurements packet streams case layer framing maintaining flow records observed traffic required sampling algorithm saves packets possibility greater levels measurement synthesis complexity collection systems streaming queries statistical anomaly detection case transformation function realized program basic link signals provided user selected library functions developed cases requirements collection synthesis nodes programmable allowing users define extract low level sensors modulo privileges explained section perspective node sensors collection systems require additional capability data gathering protocol required request transfer mib variables geni instrumentation measurement systems gims specification december node sensors data gathering protocol light weight extensible terms kinds things requested include level security tbd obvious existing protocol space snmp documented deficiencies preclude gims possibility simple common sensor interface planetlab data query protocol based http availability resources cpu disk memory collection synthesis systems limit extent activities cases experiments conducted times demand sufficiently low capacity collection synthesis systems meant short term repositories collected data collection systems direct connection archival data repository secure transaction oriented protocol protocol move potentially large amounts data collection systems repository envisioned experiments data collection systems sites work close coordination experiments collaborative intrusion detection methods require real-time updates terms measure measure experiments require simultaneous link node measurements tracing traffic system performs network address translation case packet trace side nat snapshots nat table suffice signaling required collaborative monitoring implemented user level secure real time protocol coordinating distributed measurement synthesis geni finally task applying timestamps measurements responsibility collection synthesis systems timing sensors provide input collectors turn generate apply timing information measures ideally capability hardware accept gps timing signals endace dag cards include pps port open questions collection synthesis systems capabilities geni include note questions end issues geni services issues facility architecture protocol facilitate data transfers link node sensors collection synthesis systems protocol facilitate data transfers collection synthesis systems archive systems protocol facilitate coordination collection synthesis systems security model mechanisms collection synthesis systems geni instrumentation measurement systems gims specification december data archive element gims archival repository measurements collection systems stored made analysis existing repository similar envisioned geni crawdad warehousing sharing wireless measurements crawdad archive primary components repository resides high capacity storage systems located geni sites data catalog indexes data repository objectives archive provide secure reliable repository geni users measurements experiments provide standard interface data extraction users analyze data sites archival system interface collection synthesis systems data transfer protocol simple common sensor interface planetlab data transfer protocol data transfer protocol sensors collection synthesis systems consistency enable possibility direct streaming archival system archive located geni sites enables archive resilient site-specific failures spread network load sensor-to-archive transfers archive-to-user transfers data management system store retrieve measurement data systems large scale network data management system time daytona system daytona file-oriented archive system sql-like interface daytona open questions archive include details physical systems capacity processing capability archive run policies procedures maintenance backup systems details data management system run physical systems including interface exports users measurements users creating experiments details data archived include type data stored size lifetime storage space required case individual experiment archive application log access privileges include access anonymized data section data range projects data considered private data openly permanently archived case studies geni-wide activity details users data archive instantiated gims tbd archival system include separate related component data index data archive internet measurement data catalog caida datcat index enables users find data archive act portal pointing data sets collected geni reside remote sites geni instrumentation measurement systems gims specification december security access control significant issues security privacy gims general requirements security privacy sensors collection synthesis archival systems accessible authorized users authorized users allowed access proportion resources measurement systems views data required depending approved level authorization measurement systems secured attack aspects data collected compromise violate privacy individuals organizations source sink data mechanisms addressing requirements determined constant tension desired visibility measurement data privacy privacy requirement item violated lead legal action geni set policies procedures requesting granting access entire range measurements geni established cases straightforward access cpu utilization node openly immediately authorized alternately access full packet traces including payloads link handles commodity traffic circumstances hippa guidelines apply mechanisms addressing privacy issues determined gims design section design scenario gims model based idealized physical deployment model geni makes simplifying assumptions architecture model include envisioned equipment included geni wireless added coordination efforts wireless working group evolve reflect relevant underlying architecture focus model includes examples comprehensive service interface underlying gims capability function geni instrumentation measurement systems gims specification december figure gims design geni site physical deployement gims based physical deployment model consisting set sites interconnected fiber cables dwdm signals transmitted sites general case assumptions nature signals made apriori purpose model assume defined packets standard mode data transfer site include rack space power physical security gims equipment gims equipment site shown figure begins physical instrumentation duplicate dwdm signal network tap dedicated high performance workstations include dag measurements cards connected taps collection systems enable continuous full packet capture limited 
synthesis storage capability stream data additional high performance workstations enable robust synthesis large-scale storage systems site measurements archived gps time servers act pps sources dag measurement timestamps experimental synchronization measurement specific equipment site variety systems switches routers customizable vendor provided pcs programmable hardware pieces equipment communicate collection synthesis nodes data gathered operational experimental requirements site data pass instrumentation collection synthesis archive nodes communication place defined data transfer protocol running nodes setting configurations gims nodes facilitated protocol gims configuration primary configuration task site security access control policies policies details access data level quicktime tiff uncompressed decompressor needed picture quicktime tiff uncompressed decompressor needed picture dwdm infrastructure geni systems gims sensors collection analysis archive programming interface geni instrumentation measurement systems gims specification december anonymization required concern access packet payload information issue determined concerns information propagated infrastructure user access services sensor collection node combinations co-lo site basic set measurements made examples include packet traces links note model includes packet capture capability set basic measurements link sensors buffer occupancy routers cpu utilization end-hosts node make basic measurement capability measurement publish subscribe system developed geni service basic measurements transformed data sets transforming packet traces flows synthesis code downloaded run synthesis nodes transformation capabilities pub service users slice slivers slice include measurement capabilities reservation resources collection synthesis archive nodes experiment initiated basic measurements flow collection synthesis nodes synthesis transformations initiated measurement data archive storage activities mediated measurement subscription service based users credentials security policies co-lo site gdd- peterson wroclawski eds overview geni architecture geni design document facility architecture working group september gdd- paul requirements wireless geni management control geni design document wireless working group september crawdad crawdad community resource archiving wireless data dartmouth http carwdad dartmouth datcat caida internet measurement data catalog http imdc datcat dag endace network monitoring cards http endace taps netoptics network test access port devices http netoptics pasztor veitch based precision timing gps proceedings acm sigmetrics marina del rey june daytona labs research daytona data management system http research att daytona rpkw roscoe peterson karlin wawrzoniak simple common sensor interface planetlab http planet-lab pdn march split cisco systems wdm splitter cable http cisco tdmp tcpdump http ftp lbl gov tcpdump tar 
performance round trip time network tomography yolanda tsang mehmet yildiz paul barford robert nowak abstract network tomography appealing method active measurement link level characteristics delay loss end-to-end paths network tomography techniques developed date based one-way measurements requiring collaboration sending receiving hosts severely limits scope paths techniques extend previous work network radar tomographic inference method based round trip time rtt measurements tcp syn syn-ack packets paper contributions three-folded extend analytic framework estimating delay variance shared network segment network radar include confidence estimates enable measurement accuracy assessed important consideration practical deployment evaluate network radar series experiments conducted controlled laboratory environment tests explore boundaries effectiveness rtt-based method show works wide range traffic conditions evaluate network radar series tests conducted wide area internet tests show rtt-based delay variance estimates effectively identify network topology natural verifyable application rtt tomography performance results paper demonstrate network radar research operational purposes introduction researchers interested measuring behavioral structural characteristics internet face challenges lack open instrumentation infrastructure similarly network operators charged responsibility identifying diagnosing problems networks on-going measurement tools make process faster efficient issues led development methods systems measuring network characteristics confines single network tools report network characteristics based passive measurements traffic vantage point measuring response probe packets emitted tool class probe-based measurement tools developed past years tomographic inference techniques deduce link-specific information packet loss rates packet delay characteristics network topology prior work established basic mechanisms tomographic inference networking context interesting results validation wide-spread deployment tools based techniques problematic network tomography tools based probe traffic measurements require cooperation sending receiving hosts exceptions requirement aware methods based passive monitoring loss requirement places significant limit scope paths measurements made limits wide-spread tsang nowak ece dept wisconsin madison e-mail ytsang ieee nowak engr wisc yildiz ece dept cornell e-mail mey cornell barford dept wisconsin madison e-mail wisc tools research network management activities additional practical limitation one-way tomographic tools measure delay statistics require clock synchronization end hosts synchronization methods proposed offer promise synchronization large numbers end host clocks happen time recently network tomographic technique based round trip time rtt measurements proposed eliminates special-purpose cooperation receivers technique network radar rtt measurements tcp syn syn-ack segments estimate delay variance shared network segment standard sender receivers configuration work authors evaluated network radar series preliminary tests conducted emulation environment promising difficult access effectiveness network radar internet paper investigated conditions network radar effective careful designing series laboratory-based internet-based experiments emulation experiments conducted network cisco routers hosts configured simple topology experiments revealed network radar effective wide range traffic conditions importantly proposed confidence estimator establish correlation delay estimator number measurements experiments internet examine application rtt tomography problem logical topology discovery case clustering algorithm based measured shared segment delays establish logical connectivity nodes unlike rtt measurements prone variability delays choose application opportunity validate results tools delay loss tomography required instrumentation readily wide area experiments consist randomly selecting set destinations rtt tomography discern topological connectivity source destinations validated results traceroute results show rtt tomography effective establishing logical topology summary paper makes contributions extend analytical framework based rtt measurements include automatic confidence estimator enables measurements skew results discarded important capability practical network radar investigate robustness rtt tomography series controlled laboratory experiments show effective wide range operating conditions investigate capability network radar internet-based tests validate supporting measurements demonstrate tool effective wide area related work network tomography emerging area study past years variety inference techniques estimating loss rates delay statistics topology identification treated techniques promising widely applicable requirement cooperation receivers collect one-way measurement techniques require clock synchronization end hosts depend special cooperation internal routers practical limitations largely prevented tomographic techniques widely idea rtt-based network tomography introduced paper develop analytic foundation technique discuss preliminary considerations widespread treat paper rtt-based measurement studies inferring path characteristics unlike based time-to-live ttl timestamp options internet control message protocol icmp security privacy concerns related icmp options led rate limiting outright blocking icmp packets reducing effectiveness icmp-based tomography tcp-based methodology easy deploy asymmetric path widely iii methodology measurement framework section briefly introduce basic concept network tomography traditional network tomography assumes single source transmitting probe packets pairs receivers topology assumed fixed measurement period routing table change load balancing employed forming tree source root receivers leaves figure branching node source receivers represents internal router connections source router receivers called segments logical links segment direct connection hidden routers switches branching occurs path explicitly shown focus specifically delay variance estimation shared segment path focus convention inherent descriptions prevent tomography methods loss rate measurements basic tomographic measurement inference ideas straightforward assume individual link delays load balancing typically prefix based current internet contrast load based avoid packet reordering packets follow path source-destination pair fig round trip time tomographic delay variance estimation standard sender two-receiver network variances shared unshared segments noted end-to-end path independent stationary sender transmits closely time-spaced back-to-back probe packets receivers paths receivers traverse common set links point paths diverge tree branches packets expected experience approximately delay shared segment path round trip delay consists transmission propagation processing queueing delays delay variances caused queueing delay rest delays modeled constant quantities delays shared unshared links assumed independent straight-forward calculation shows delay variances path equals sum delay variances link observation topology identification evaluate demonstrate performance network radar detailed section iv-b network radar measures round trip times sending tcp syn packets http service port target end host remote host running service respond synack packet round trip time measurements made sender simple time differencing transmission syn receipt syn-ack cases port http server hosts send back rst receiving syn proposed estimator performance analysis section present unbiased estimator shared link variance derive confidence intervals estimator confidence intervals automatically detect reject cases estimator unreliable standard result unbiased estimator variance found statistics textbook section derive explicit formula unbiased estimator conditions assumptions context confidence estimator begin analysis formally demonstrate stated assumptions covariance rtts equal delay variance shared link proposition denote rtt packet pair measurements kth rtt measurements receiver respectivetively delay shared path denoted delays unshared paths denotes kth rtt pair assume packets k-th pair experience identical delay shared portion paths statistically independent remainder rtt delays assume delays measurements statistically independent cov hatwider unbiased estimator hatwider nsummationdisplay sample assumptions 
proposition approximately met actual practice assumption back-toback packets experience delay shared path reasonable due back-to-back nature probes experimentally verify assumption paper assumption statistical independence delays reasonable cross-traffic independent shared unshared paths sufficiently spacing probes time delays measurements fairly independent assumptions verified experimental work assumption independence weakened assume delays uncorrelated investigate reliability estimatorhatwider confidence intervals specifically determine theoretical variance estimator propose unbiased estimator variance square-root variance equals standard deviation hatwider confidence intervals form hatwider confidence level produces confidence interval standard deviations practice theoretical standard deviation estimate data shown proposition proposition define hatwide nsummationdisplay hatwider hatwider hatwider hatwider empirical variance rtts destination assumptions proposition hatwide hatwide unbiased estimate theoretical finally apply confidence intervals automatically detect reject cases estimator hatwider unreliable propositions measured data compute hatwider confidence interval thehatwider hatwide wherehatwide hatwide hatwide greatermuch hatwider confidence interval large relative center point cases conclude estimator unreliable unreliability due excessive noise unshared portions mentioned large deviations assumptions theory confidence level estimator -unreliable hatwider hatwide practice recommend level signal noise ratio snr ratio estimator confidence topology identification mentioned earlier topology tree-structured apply network radar pairs receivers localize delay variance individual logical link feature topology identification verifiable method demonstrating performance rtt tomographic tool significant challenges network tomography studies general situ evaluation access network internal instrumentation rarely context topology discovery end-to-end topology measurement tools traceroute scriptroute validate logical topology structures generated aforementioned rtt tomography clustering methods fig topology identification illustration receiver nodes assumption standard network tomography framework delays shared unshared links independent end-to-end delay variance sum link delay variances path information identify underlying network topology configuration interpreting estimates delay variation measure physical extent shared path pij denote shared path source pair receivers receivers suppose pij longer physical distance perspective pik shared paths included delay variance pij denoted pij larger delay variance pik partial ordering delay variance shared paths identify underlying topology refer figure greater receiver revealing receivers siblings logical tree property exploited devise simple effective bottom-up merging algorithms identifies full logical topology pairwise delay variances problem hierarchical clustering general access exact delay variances noisy measurements variability measurements pair receivers significant hierarchical clustering technique suitable topology identification problem proposed technique based likelihood model capable accounting statistical properties measurements pair receivers clustering techniques building likelihood model proposed deterministic greedy approach low computation complexity markov chain monte carlo method attempts find globally optimal likelihood sense topology expense computation power section v-b apply techniques infer topology solely rtt covariance measurements experimental evaluation evaluate capabilities robustness rtt tomography series lab-based internet-based experiments lab-based experiments enable control instrumentation aspects test environment verify capabilities limitations tool realistic limited infrastructure perform series internet experiments assess tool performance wide area network capability identifying logical network topology indirect verifiable traceroute means assessing tool performance series extensive tests dag fig laboratory network configuration includes routers pcs sending host receivers logical topology gray boxes denote cross-traffic generators balls denote routers denote measurement systems validate performance rtt based tool dag denotes dag measurement system placement emulation experiments lab-based experimental environment carried wisconsin advanced internet laboratory includes cisco commercial routers series pcs running redhat linux bandwidth connections setup illustrated fig boxes denote nodes interests fig box refers sender box receivers variable background non-probe traffic environment generated harpoon flow level traffic generator runs systems denoted propagation delays individual links emulated simple configuration click modular router experiment background traffic loads generated based input distributions derived netflow logs captured border router wisconsin emulated propagation delays link fixed remain constant measurement period consist packet pairs node sender receiver nodes send rate fixed rate probes sec intervals practically speaking low probe rate concern medium large web sites internet end measurement period collect packet traces tcpdump running sender node monitoring devices path receivers monitors lab verify performance tool providing ground truth measurements packet delays monitor records back-to-back packet spacing entering branching router monitor records outgoing packets branching router extra cross traffic true delay variance shared link path synchronize clocks monitoring hosts network time protocol clocks disciplined local stratum time source giving synchronization order single milliseconds important verification oneway delays experiments results figure depicts accuracy tool network radar comparing estimates true shared path delay standard deviation true delay shared path measured time difference tcp syn packets sender monitor figure estimates computed directly end-to-end measurements receiver moderate level background traffic experiment packet loss observed one-way delay node node fixed node node delay fixed ideally estimates identical true fall line hypothesize discrepancy arise timestamping mechanism inaccurate unreliable back-to-back assumptions previous section violated nonetheless estimates close real sec true fig plot standard deviation direct measurement horizontal axis estimated delay standard deviation rtt-tomography tool vertical axis operating conditions study primary objectives lab-based experiments understand operating conditions rtt tomography practical investigate potential sources errors make rtt tomography ineffective examine effects reliability timestamping mechanism comparing tcpdump varying levels background traffic varying spacing packet pairs emitted sender back-to-backness load receiving end-hosts variability generation response packets syn-ack generation delay number measurements compared resulting estimation error case investigate effects background traffic fix amount background traffic load dag sec fig verification timestamping mechanism tcpdump utility hardware-base systems dag cards timestamping mechanism evaluate timestamping mechanism endace dag cards current state art hardware timestamping timestamping high accuracy packet loss extra delay network interface cards suffer corrupted delayed lost packets traffic volume high systems dag cards assess tcpdump timestamping variability sender effects rtt measurements experiments capture packet departure arrival times tcpdump systems dag cards comparing results fig conclude variability rtt measurements caused tcpdump significant impact rest paper collect measurements tcpdump timestamping mechanism trafic load low moderate fig significant background traffic estimates high snr symbolizes high accuracy estimates signal noise ratio snr increases background traffic correlation shared segment increases unshared segments moderate load experiments background traffic respect background traffic capabilities rtt tomography proportionally dependent load shared segment inversely proportional load unshared segments fixing traffic http connections average delay delay variance table average syn-ack generation delay variance varying end host load unshared segment noise varying traffic shared segment signal shown figure signal quality improves note accuracy estimator depends variance shared segment variances unshared segments variabilities increase confidence weakens shown equation sec fig plot directly 
measured delay standard deviation vertical axis estimated horizontal axis shared link spacing packets circle triangle sender back-to-back assumption figure depicts accuracy results varying packet spacing probe pair spacing pairs remains unchanged results agree expectation accuracy estimates decreases back-to-back assumption weakens packets correlated packets longer similar experience shared link experiments exhaustive trials smallest achievable packet spacing end host load delays generation syn-ack response packets end hosts depends variety factors including scheduling load evaluate effects adjust end host load varying number active http connections apache http server system results average syn-ack generation delay illustrated table variability syn-ack generation delay negligible large number active simultaneous connections connections shown table number measurements fig plot signal noise ratio vertical axis number packet pair probe measurements number measurements compute snr measurement sets varying number packet pair probe measurements snr increases number probes shown fig expected confidence estimator increases increasing number measurements typically number probes needed depends variability traffic back-to-back assumption refer computational details theoretically infinite number measurements achieve high accuracy practice measurement period increases increase number probes measurement period shorter routing table updates increases probe frequency interfere normal traffic induce congestion outbound link processing load receiver ends increased internet experiments randomly chose universities abilene network collect measurements rice wisconsin madison homepages indexed oklahoma virginia commonwealth vermont utah state washington idaho collect set estimates good confidence standard deviation estimates ratio standard deviation estimate estimate snr recommended section input topology identification algorithm inputs clustering algorithm estimates variability variance normalize variance number measurements results topology measurement experiments based rtt tomography shown figure true topology traceroute estimated topology close expect estimated topology results artifact binary tree results representative topology tests topologies estimated homepages network radar fig comparison true topology estimated topology universities abilene network probes rice conclusions prior methods network tomography rely coordinated measurement infrastructures limited share internet tools number people potentially advantage inference technique paper present evaluate network tomography method based round trip time measurements confidence estimator confidence estimator critical rtt tomography probe packets subject dynamic conditions probes one-way coordinated infrastructure confidence estimator enables inaccurate delay estimates rejected detailed operating conditions tool effective summarize briefly effectiveness tool depends major components ability place probe packets closely spaced correlation shared link unshared link variability fixed number measurements paper show tool network radar conducted internet network diagnostic tools tool ready final stage integrating ability compute confidence interval beta version download future tested tool controlled environment wild internet shown confidence interval derived estimator good estimate traffic condition collecting measurements high confidence interval topology identification castro coates nowak likelihood based hierarchical clustering ieee transactions signal processing august tsang coates nowak network delay tomography ieee transactions signal processing vol august padmanabhan qiu wang server-based inference internet link lossiness proceedings ieee infocom san francisco april coates hero nowak internet tomography ieee signal processing magazine bohacek rozovskii models techniques network tomography ieee workshop information assurance security tsang coates nowak passive network tomography algorithms proc ieee int conf acoust speech signal proc asztor veitch precision based precision timing gps proc acm sigmetrics marina del rey los angeles june veitch babu pasztor robust synchronization software clocks internet proceedings acm usenix internet measurement conference taromina italy october tsang yildiz barford nowak network radar tomography round trip time measurements proceedings acm internet measurement conference taormina sicily italy oct anagnostakis greenwald ryger cing measuring network-internal delays existing infrastructure proceedings ieee infocom san francisco april adams aceres duffield friedman horowitz presti moon paxson towsley end-toend multicast measurements characterizing internet network behavior ieee communications magazine lai baker measuring link bandwidths deterministic model packet delay proc acm sigcomm stockholm sweden aug spring wetherall anderson scriptroute public internet measurement facility proceedings usenix symposium internet technologies systems usits seattle march tsang yildiz barford nowak network tomography unleashed technical report wisconsin madison barford landweber bench-style network research internet instance laboratory computer communications review vol july sommers barford self-configuring network traffic generation proceedings acm internet measurement conference taormina sicily italy october kohler morris chen jannotti kaashoek click modular router acm transactions computer systems vol august endace measurement systems dag network monitoring interface cards http endace 
improving nids performance hardware-based connection filtering vikas garg vinod yegneswaran paul barford dept computer sciences wisconsin madison vikas vinod wisc abstract traffic volume diversity significant impact ability network intrusion detection systems nids report malicious activity accurately based observation great deal traffic fact important accurate attack identification investigate connection filtering method improving performance nids describe classes connection filters developed explore design space trade load reduction versus alarm rates implement instances filter class network processor nids runs commodity hardware evaluate impact filter series laboratory-based tests establish idealized maximum performance static connection filters benign traffic show volume sensitive random connection filters improve performance significantly respect alarm rates heavy traffic load finally show dynamic connection filters attempt infer benign traffic improve performance level idealized static filters results underscore potential hardware-based connection filtering effective means improving performance nids introduction networks constant assault variety threats including worms viruses dos attacks malicious scans past years sophistication diversity threats steadily increased volume malicious traffic making task protecting networks increasingly difficult speaks directly tools techniques protecting networks address challenges scale diversity malicious traffic effectively network intrusion detection systems nids critical component comprehensive network security architectures nids monitor traffic typically network borders generate alarms specific attack profile recognized statistical signature-based methods ideally nids generate accurate alarms false alarms raised false positives attacks recognized false negatives prior work shown ability nids operate effectively depends large extent system manages resources face dynamic high volume packet traffic objective improve performance nids running commodity hardware define performance terms ability nids monitor traffic stream overloaded evidenced excessive packet loss false alarms similar approach based observation great deal traffic monitored nids benign redundant malicious traffic filtered blocked reaches nids negative impact alarm accuracy expect nids lower computation demands maintain state perform traffic volume general observation made past work distinguished filter designs implementation approach propose hardware-based connection filters mechanism identify discard packets specific connections passed nids study develop evaluate effectiveness classes connection filters static filters simple predefined rules decide traffic pass nids priori knowledge benign connections static filters establish upper limit effectiveness connection filtering filter class discards connections random significant state maintenance filter conjecture large percentage traffic benign random discard algorithms potential prune traffic affecting alarm accuracy significantly filter class attempt actively distinguish benign malicious connections based observed scanning behavior stateful approach hope improve random filtering reducing false negative alarms describe instances filters detail section iii glance reasonable question approach isolate filtering process potentially resource intensive nids running host system nids traffic filtering systems aware run host time contend resources detection processes address issue enhancing host system network processor network processors systems implemented daughter card provide high speed network interface programmable packet processing capability line rate benefits implementation choice np-based connection filters nids independent nids runs commodity hardware np-based connection filters exploit independent nps offer flexible high performance system suited filtering nps variety applications including intrusion detection knowledge explore nps context implemented instances connection filter type intel ixp network processor system tested utility series controlled laboratory experiments bro nids running commodity experiments evaluated false alarm rates range benign malicious traffic volumes filter static filter establish upper bound capabilities connection filtering showing improve nids effectiveness find volume-sensitive random filter improve nids effectiveness maximum heavy traffic load finally show dynamic filter improve nids effectiveness maximum significantly cpu utilization profile random filter results great potential connection filtering nids general nps function related work past years increasing number empirical studies characteristics malicious network traffic series papers moore provided details major worm outbreaks recent work based network honeypots shed light characteristics unwanted network traffic malicious detailed treatment intrusion traffic based large set logs provided dshield studies speak challenges nids face terms traffic dynamics loads problem evaluating design improving performance network intrusion detection systems addressed number studies relevant work include papers deal problems related capacity resource management nids including relevance study dreger reports real world experiences bro paper highlights resource management problems nids face high traffic volume evaluation mechanisms controlling packet load spirit connection filters filter operation implementation kernel-based idea hardware-based systems improve nids performance investigated past years bulk work focused developing special purpose systems fpgas design approach systems implement subset attack identification capability found standard nids worth noting authors test implementation system intel ixp precursor ixp study work differs focused developing connection filtering capability hardware study closely related reported authors propose early filtering method improving nids performance filters based static snort rules implementation kernel-based tests run offline iii connection filters design approach enhancing performance nids filter connections passed nids evaluation ideally filtering objective prune benign traffic redundant malicious traffic challenge construct filter ability classify traffic accurately benign redundant malicious essence dual challenge faced nids recognize non-redundant malicious component traffic propose classes connection filters static filtering strategy propose static filtering idea straight forward connection benign redundant malicious forward packets connection nids conceptually static filters benefit simplicity perfect knowledge benign redundant malicious connections filter offer maximum benefit nids kind omniscience unreasonable practice static filter reasons enables establish high water mark maximum performance improvement connection filtering enabling filters evaluated objectively static filters fact commonly employed nids enabling understand potential performance improvement removing activity host cpu primary intention developing static filter investigate laboratory-based experiments fact complete knowledge benign connections packet reaches filter static bitmap source addresses consulted decide forward packet nids unequivocally malicious source drop unequivocally benign source static filter implementation redundant malicious traffic difficult extension random filtering filtering strategy propose random filtering idea large percentage traffic benign connection filtering methods based minimal aggregate state effective uniform random sampling represents conceptually simple instance approach potential drawback random filtering volume mix malicious traffic grows increase false negative alarms malicious connections filtered consistent basic observations nids performance hypothesize adapting connection filtering rate observed packet volume reduce number false alarms caused random filter supplement instance uniform random filter load adaptation capability modeled random early detection method controlling congestion router queues implementation traffic volume threshold connections filtered traffic volume rises threshold probability connection filtering increases linearly accordance volume finally upper threshold forwarded connections fixed prevent nids overload dynamic filtering filtering strategy propose dynamic filtering idea measure insight gleaned host benign 
malicious informed connection filtering choices made perspective dynamic filter analogous static filter sense selects connections deny based explicitly packet header information opposed random filtering set addresses filtering based inference nature traffic investigate instances dynamic filters source-level target-port-level source-level filtering past behavior specific sources judge trustworthiness method establishing trustworthiness count number successful unsuccessful connections made observed source address heuristic based expectation malicious sources pick targets randomly experience larger number failed connections prototype implementation connections source addresses begin suspicious tag connection attempt counter set default unsuccessful connection attempt syn-ack observed rst observed results decremented likewise successful connection attempt syn-ack icmp echo-response observed results incremented threshold source address tagged benign tag change back suspicious falls back dynamic filter forwards connection source addresses tagged suspicious nids method susceptible source address spoofing intend address issue future work target-port-level filtering straightforward extension source-level strategy computes malice target port successful versus unsuccessful connections metric case port deemed receiving exclusively benign connections connections port filtered nids filters meant improve adaptability resilience false alarms surges benign traffic implement dynamic port filtering study leave future work discussion connection filters provide initial framework possibilities improving nids performance section designs simple extension add volume-aware adaptivity dynamic filters possibility appeal stratified sampling theory improve performance random filters possibility dynamically adjust filters based receiving feedback host nids network processor implementation important aspect approach connection filtering off-load entire activity host cpu connection filters run simultaneously host system load network processor theory enables maximum resource cpu memory utilization nids npbased approach benefit enabling portable nids runs commodity host developed network processor-based connection filters enp daughter card radisys system embedded intel ixp processor ixp micro engines data plane functions line rate arm processor control plane functions communicating host system ddr sdram qdr sram pci bus interface host machine gigabit ethernet ports data mbps ethernet port management development tasks connection filters implemented micro engines ixp ixp assembly language average size filter hundred lines implemented multiple threads application broken distinct stages receiving filtering forwarding receive filter stages implemented micro engines forwarding stage host nids implemented arm processor controls access pci bus interface pipelining stages improve performance synchronization stages enabled scratch-pad rings support atomic data transfers micro engines host system tests single cpu system configured ghz intel xeon processor cache main memory running linux fedora kernel arm processor ixp running montavista linux kernel tests ran network interface card ixp nic intelpro card experimental evaluation setup configuration experimental objective evaluate impact hardware-based connection filters popular nids running commodity specific focus tests measure alarm rates cpu utilization range workloads include benign malicious traffic evaluation conducted controlled laboratory environment enabled monitor aspects experiments including packet loss rate nids host target nids broa configured standard brolite bro policy script modification made script disable packet filters bro experiments based experience tool impact np-based connection filtering similar open-source nids run commodity hardware snort generated benign traffic pcs running harpoon machine configured class subnets total source destination addresses harpoon generating traffic flows approximate live router include capability reproduce diverse representative packet content important nids tests enhanced harpoon enabling include benign content darpa data set generated malicious traffic pcs running mace ip-aliasing emulate source destination addresses class subnets subnets client addresses subnets server addresses host based application level transport level network worms backdoors dos fragmentation dos based welchia rose nimda mydoom teardrop synflood smurf codered sdbot winnuke teardrop pod fraggle blaster bonk land dameware nestea jolt sasser oshare table taxonomy mace attack types experiments malicious traffic combined traffic mbps pps mbps pps testtest- testtest- table average test traffic load levels isink system active response capability send response packets malicious mace traffic enables bidirectional communication required accurately recreate exploits malicious traffic generated mace randomly selected mixture set typical attacks listed table claim distribution attacks representative network attacks commonly today traffic set exercises nids sufficiently diverse ways aggregate traffic mixture experiments comprised benign malicious volume average choose mixture convention experiments understanding aggregate traffic network highly variable potential benefit filters largely dependent amount benign traffic ran tests average traffic load levels evaluate connection filter performance shown table noted loads varied dynamically tests harpoon mace configurations minimum maximum average load levels determined trial error demonstrate parsimonious range performance connection filters experimental setup traffic generator systems connected single vlan cisco catalyst switch port mirroring forward traffic target systems systems ran nids configured standard nic ixp target system configured full packet trace tests tcpdump traces off-line validation results conducted experiments listed traffic levels experiment run minutes mace logged malicious attacks initiated bro logged malicious attacks identified logs evaluate alarm effectiveness defined ratio number true alarms generated bro total number malicious attacks generated mace measure false negatives false negatives malicious attacks filtered tests result decrease alarm effectiveness important note single instances attacks generated mace result multiple alarms bro alarm effectiveness calculation normalizes bro alarm count based off-line atomic evaluation mace attack type combinations attacks occur experiments occasionally suppress expected alarms leads effectiveness levels slightly bro accurately identifying attacks track cpu utilization nids host percentage packets processed bro tests experiment generate malicious traffic mace bro monitors host nic experiment meant establish maximum effectiveness benign connection filtering traffic levels experiment generate combined malicious mace benign harpoon traffic bro monitors host nic experiment meant establish baseline performance nids terms effectiveness cpu utilization packet processing compare np-based connection filters experiment generate combined malicious benign traffic bro monitors filtering enabled experiment enables compare performance versus nic experiment terms simple packet forwarding nids experiment important validating receiving forwarding components implementation fourth experiment generate combined malicious benign traffic bro monitors static filtering enabled configured block benign connections harpoon experiment enables assess simplest filter implementation comparing results experiment experiment generate combined malicious benign traffic bro monitors redlike random connection filter enabled prototype filter simple calculated packet rate adjusted filter rate intervals threshold set pps random connection filtering rates greater pps pps pps sophisticated implementation sensitivity analysis visa-vis thresholds subjects future work sixth experiment generate combined malicious benign traffic bro monitors dynamic connection filter enabled configure experiments sophisticated implementation sensitivity analysis visa-vis thresholds subjects future work results experiment figure shows results malicious traffic transmitted 
nids nic low traffic volumes bro process packets cpu utilization modest alarm effectiveness close noted fact artifact bro reports alarms combined attacks effectiveness level considered maximum testload level mbps malicious traffic system nears performance limits cpu utilization level effectiveness maximum system started dropping packets testload level mbps malicious traffic nids longer offered load evidenced decrease packets processed figure shows nids processed incoming packets alarm effectiveness fig nids performance malicious traffic transmitted nic experiment figure shows results combined malicious benign traffic transmitted nids nic graph demonstrates addition benign traffic significant impact performance nids moderate traffic levels testload level nids process packets testload level nids drops significant number packets highest testload level nids process packets effectiveness fig nids performance malicious benign traffic transmitted nic experiment figure shows results combined traffic transmitted nids filtering enabled expected nids performance experiment similar experiment nids receives packets nic primary difference cpu utilization bit higher lower load levels due fact driver interface host ixp unmodified prototype implementation shipped radisys board feel closer examination driver lead modifications resulting reduction cpu utilization experiment figure shows results combined traffic np-based static filter experiment static filter configured block benign connections based source addresses malicious traffic nids expected performance fig nids performance malicious benign traffic transmitted connection filter results experiment malicious traffic noted tests nids processing fraction total incoming traffic discernible impact effectiveness fig nids performance malicious benign traffic transmitted static connection filtering experiment figure shows results combined traffic red-like random connection filtering testload level packets forwarded nids performance similar static filter obvious difference cpu utilization higher nids processing lot packets load level increases random connection filter blocks traffic resulting reduction fraction packets processed alarm effectiveness stays high testload level surprised capability filter fig nids performance malicious benign traffic transmitted red-like random connection filtering experiment figure shows results combined traffic dynamic connection filtering dynamic filter identify drop traffic tests improving effectiveness maximum high load levels noted low testload level effectiveness nic baselines due fact low load level unfiltered nids process packets dynamic filter drops connections suggests adaptive dynamic filter based current traffic levels effective fig nids performance malicious benign traffic transmitted dynamic filtering conclusions intrusion detection systems fundamental components network security architectures widely studied remain important challenges managing resources face diverse dynamic traffic common method addressing nids resource demands push subsets pattern recognition functionality hardwarebased systems nps fpgas inspect packets line rate approach utility fraught basic challenges intrusion detection dealing non-malicious traffic passed host cpu paper makes case developing hardware-based connection filters complement nids operation host system define classes nids-independent connection filters framework exploring design space interest developing filters minimize false alarms time require minimal computation state maintenance static filters lowest resource demands establishing baseline performance experimental evaluation ineffective practice random filters higher resource demands offer possibility effective static filters practice dynamic filters highest resource demands offer potential query language network attack data bee-chung chen vinod yegneswaran paul barford raghu ramakrishnan computer sciences department wisconsin madison beechung vinod raghu wisc abstract growing sophistication diversity malicious activity internet presents challenge network security analysts paper describe efforts develop database query language network attack data firewalls intrusion detection systems honeynets step objective develop prototype database query interface identify coordinated scanning activity network attack data created set aggregate views templatized sql queries timing persistence targeted services spatial dispersion temporal dispersion enabling evaluate coordinated scanning dimensions demonstrate utility interface conducting case study set firewall intrusion detection system logs dshield show interface identify general characteristics coordinated activity instances unusual activity difficult mine data results highlight potential developing generalized query language broad class network intrusion data case study exposes challenges face extending system generalized queries potentially vast quantities data introduction malicious activity dos attacks viruses propagating worms prevalent internet time past years malicious code bases malware marked increasing sophistication broadening set capabilities blurring lines traditional malware types result task securing networks attacks growing difficult research focused long term objective improving tools methods defending networks malicious attacks past years empirical approach work trace files collected daily basis firewalls network intrusion detection systems nids honeynets distributed internet studies based huge multidimensional datasets brought sharp focus challenges sound internet measurement study paxson significant consistent data management verifiable analysis tools enable flexible efficient access data address problems undertaken task developing database management system query interface large diverse set network attack data engineering challenges designing implementing managing tuning database research challenge developing methods tools accessing data mining information interest security researchers analysts objective regard develop comprehensive query language network attack data high level language facilitate broad exploratory analysis efficient drill-down analysis network attack data approach query language development identify touchstone characteristics common types network attacks build functional capability analyze properties bootstrapped process developing interface investigate extent composition coordinated scanning activity internet context notion coordination defined ways basis means multiple hosts identified source addresses conducting malicious activity roughly time potential root coordinated scanning activity include botnets port scanners spammers misconfigurations ddos attacks outbreaks anecdotal evidence coordination takes place large scale sources coordination worms studied coordinated scanning general studied date hypothesize understanding characteristics coordinated behavior provide foundation defending networks repeated attacks common sources development query interface analyzing coordinated scanning behavior focused designing stylized language capable expressing range complex sql queries approach includes multi-level summarization techniques means efficient execution queries present outline language framework set templatized queries illustrate promise methods key idea search coordination subsets activity candidate sets sources targets time frames demonstrate templatized queries results case study prototype mysql database populated firewall nids logs provided dshield initial results coordinated scanning fact rich phenomenon structure diversity deserves investigation results highlight fact prototype methodology sufficient identifying interesting unique scanning events hard find hand provide examples qualitative quantitative summaries coordinated scanning activity generated tool sample data set related work database systems widely empirical network research studies instances network operations domain round robin database rrdtool logging network data snmp netflow designed efficient storage time-series data accessed writing scripts languages perl network data management system daytona developed research system archive operational data commercial network access daytona provided cymbal query language finally describe mind system indexing multi-dimensional data collected distributed sites current focus efforts centralized repository query language extended advantage mind future data stream management active field database community systems built network traffic analysis gigascope developed research network monitoring sql-like language minds confused mind stream-base system developed network intrusion detection main focus stream systems online monitoring contrast multi-level complex exploratory analysis offline evaluation motivations multi-level offline evaluation approach similar principle olap systems feasibility extending systems handle complex exploratory analysis remains unclear coordinated scanning design space characteristics affect degree coordination ability identify scans network data data collection network attack data analyzed initially firewall logs nids logs data shown provide valuable perspective global scanning activity important aspect data assumed anomalous result misconfiguration malicious attack combined benign traffic simplifies analysis respects data collected passively infer attacker intentions based coarse-grained metrics destination port scanning footprint good means accurately detect spoofed sources data future intend include data honeynet systems provide richer set information attacks responding unsolicited traffic unused address space target service single multiple design choice activities sources target ports isolation collectively activity individual target ports isolation significant scalability benefits conversely activity ports provide insight finer characteristics source behavior ordering inherent target port selection pre-cursor follow-up ports potentially provide additional means differentiate coordinated scanning groups target network single multiple important characteristic attack activity level scoping activity local global worm outbreaks tend global traverse large portion ipv address space randomly coordinated scans targeting single network single destination address suggest misconfiguration denial-of-service attack localized botnet sweep due limited measurement perspective difficult verify observed phenomenon restricted single network duration short long persistent duration scanning events identify inherently tied granularity detection algorithm determine level coordination accurately ability test coordination time granularities persistent events indicators worm traffic misconfiguration time lag important consideration algorithm identifies coordinated scanning events relative time-lag instances type coordinated event multi-occurrence events short duration longer time-lag instances good indicator coordination source volume assume identical events produce roughly similar levels traffic volume likewise coordinated sources generate similar traffic volume complication provider networks vary size observed traffic volumes normalized scans destination level absolute volume effective practice evaluate prototype implementations instances classes connection filters built ixp network processor system series laboratory-based experiments evaluation limited results encouraging traffic mix experimental system configuration prototype demonstrates factor improvement mbps mbps realized nids scalability hardware-based connection filtering specifically idealized static filters potential improve effectiveness performance target maximum volumesensitive random filters connection-aware dynamic filters show improvements maximum results promise approach additional filter designs broader set tests required types random dynamic filters developed possibly classes filters considered labbased experiments gaining insight filter behavior performance larger set experiments varying traffic mix target systems situ experiments required acknowledgements authors intel support donation ixp systems study work supported part nsf grant numbers cnsani- ccrany opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf intel ixp network processor http developer intel design network produces npfamily ixp htm caswell roesch snort network intrusion detection system http snort april charitakis anagnostakis markatos active traffic splitter architecture intrusion detection proceedings acm symposium modeling analysis simulation computer telecommunications systems orlando october clark lee schimmel contis kone thomas hardware platform network intrusion detection prevention proceedings workshop network processors applications madrid spain october dreger feldmann paxson sommer operational experiences high-volume network intrusion detection proceedings acm conference computer communications security ccs washington october floyd jacobson random early detection gateways congestion avoidance ieee acm transactions networking hall wiley capacity verification high speed network intrusion detection systems proceedings recent advances intrusion detection raid jung paxson berger balakrishnan fast portscan detectionusing sequential hypothesis testing proceedings ieee symposium security privacy oakland kruegel valeur vigna kemmerer stateful intrusion detection high-speed networks proceedings ieee symposium security privacy oakland usa lippmann haines fried korba das darpa off-line intrusion detection evaluation proceedings symposium recent advances intrusion detection raid october moore paxson savage shannon staniford weaver inside slammer worm proceedings ieee security privacy june moore shannon brown code-red case study spread victims internet worm proceedings acm sigcomm internet measurement workshop november pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm sigcomm internet measurement conference paxson bro system detecting network intruders real time computer networks december schaelicke slabach moore freeland characterizing performance network intrusion detection sensors proceedings recent advances intrusion detection raid sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference taormina italy october sommers yegneswaran barford framework malicious workload generation proceedings acm sigcomm usenix internet measurement conference taormina italy october song lockwood efficient packet classification network intrusion detection fpga proceedings international symposium field programmable gate arrays monterey february yegneswaran barford plonka design internet sinks network abuse monitoring proceedings recent advances intrusion detection yegneswaran barford ullrich internet intrusions global characteristics prevalence proceedings acm sigmetrics june 
system simple metric measuring source scanning similarity discounts volume network aggregation activity aggregating network levels important dimension coordinated scanning analysis estimating spatial dispersion source addresses distinguish worms botnets network temporal aggregation key concepts templatized query framework efficient execution queries basic design consideration system algorithms flexible support queries levels network address aggregation accuracy fundamental trade-offs anomaly detection system true false identification considerations hold system due limited fine-grained analysis capability afforded dataset consideration conduct quantitative evaluation identification accuracy study performance final design consideration performance objective develop interactive system capable executing queries coordinated scanning order seconds requirements guide design choices materializing views building indexes query language framework section describe system framework functionality implementation current query interface prototype key contributions advocacy high-level query language efficient implementation approach based multi-level aggregation enables interactive complex analysis massive datasets note 
language proposal implementation ideas preliminary stage current results make compelling case feasibility considerable work remains general robust system developed system framework key requirements guide design prototype ability support complex queries interactive analysis expect system support interactive exploratory analysis large datasets dshield data analyze day system handle complex queries time-series similarity comparison expressing notions temporal coordination approach efficient query processing based multi-level aggregation depending analysis task multi-level aggregate views original raw data created materialized stored dbms suppose raw data record source target pair addresses goal measure degree coordination pairs sources specific target network define aggregate view record represents amount activity source hourly intervals aggregated targets raw data time target ip-address level aggregate view time hour target level view low-resolution information raw data acceptable approximation intended analysis significantly fewer records supports complex analyses temporal pattern similarity comparison carried efficiently aggregate views powerful tool queries analysis tasks expressed terms views regard views implementation artifacts similar database indexes queries aggregate views workload shifts analysis algorithms added system set views maintain change propose abstract query language analysis task abstract queries translated database queries sql make aggregate views achieve high efficiency system architecture components abstract language framework abstract query language form-based interface users queries raw data raw data stored system order support drilling interesting patterns found abstract queries note raw data necessarily stored online dbms stored multiple data files indexes multi-level aggregate view subsystem workload abstract queries subsystem identifies maintains collection compact multilevel aggregate views query translator query translator converts abstract queries ideally efficient collection database queries aggregate views abstract language design design abstract language preliminary stage analysis tasks presented paper rely constructs complete language definition discussion language issues future work time-series expression time-series number packets npackets source network targeting destination network port aggregated time-interval time time window expressed qtime npackets source-set expression set sources scanning specific network specific port time-window expressed source raw data table large number implicit time series candidates analysis timeseries expression makes implicit series explicit encapsulates time-series generation process involves selection aggregation time specifies granularity time npackets specifies series values selects time series desired level aggregation similarly source-set expression easy represent generation process candidate sets specific sources exhibit malicious coordination subsection show translation expressions sql prototype sql statements harder understand depend underlying implementation aggregate views prototype status prototype system built mysql database development choose mysql simply freely platform choice dshield present query translation hardcoded specific queries interest multi-level aggregate views created manually prototype allowed obtain preliminary results presented sections demonstrate feasibility approach multi-level aggregate views enable queries answered interactively seconds modestly configured opens promising research direction challenges including optimize translation abstract language database language determine views created workload storage processing time budget adapt parallel database techniques multi-level aggregation framework developing general techniques query translation efficient multi-level aggregate computation active research describe components prototype starting raw data queries aggregate views query translation raw data week data obtained dshield data consists log records firewalls nids collected attributes time secs source sourceport target targetport protocol flags author npackets number packets row represents log record generated log provider author recording number network packets time seconds source port destined target port protocol optional flags attributes natural domain hierarchies aggregation central framework time hierarchy time considered granularities day hour minute network hierarchy source target networks considered aggregates entire ipv address space subnets single address attribute level express attribute aggregation level src denotes source network queries analysis coordinated scanning activity utilizes queries source co-occurrence time-lag target network level port number time level hour time window day ith hour interval day goal generate plot point pair size intersection set sources targeting port set sources targeting port source intersectiontextq source call time lag degree source co-occurrence intuitively high degree source cooccurrence long time lag coordination source co-occurrence network-distance port number time window hour target network level goal generate plot point pair lt-level target networks source intersectiontextq source call difference integer representations target networks network distance degree source co-occurrence intuitively high degree source co-occurrence long distance coordination sources similar temporal patterns port number lt-level target network time level time window source goal find sources time series similar find sim qtime npackets qtime npackets sim similarity function measuring similarity time series threshold paper simple similarity function called similarity percentage time sources scanning activity scanning activity multi-level aggregate views due space limitations show multi-level aggregate views query translation query queries handled similarly extending framework handle hierarchies straightforward basic idea multi-level aggregate views aggregate raw data table level queries efficiently executed mysql full support view materialization view indexing materialize views ordinary tables target network level means entire internet time level unit minute day create table aggv iew attributes time source target protocol targetport npackets clustered b-tree index primary key target protocol targetport source time populate sql statement insert aggv iew select time sec time div newtime source target div newtarget protocol targetport sum npacket rawtable group newtime source newtarget protocol targetport time sec function converting mysql internal time representation seconds target target address -bit integer form rawtable raw data table day query translation translation queries expressed abstract language queries aggregate views hard-coded sql statement generates points plot source co-occurence time lag lt-level target network port number time level day select time-v time timelag count co-occurrence aggv iew aggv iew target targetport target targetport source source time time group time time note clause time time source co-occurrence timev time time-v time case study results case study prototype system conducted data set spanning weeks dshield contained records important component study creation aggregate views order reduce amount data maintained computing aggregate views day similar computing data cube efficient data cube computation techniques applied figure single network ms-messenger pop-up spam port udp top all-ports bottom database system improve query performance amount size reduction depends level aggregation optimal aggregation strategy balances richness information efficiency prototype selected level aggregation based experience data objectives exploring capabilities interface expect individual security analysts tune environment part case study section aggregate data one-hour time resolution target networks result view size records note number days execute queries increases time resolution coarsened result control size aggregate view 
gigabytes principle adaptive re-sizing strategies require research co-occurrence analysis section set aggregate views levels created day raw data level time sec target time resolution seconds targets address granularity size records size aggregate view depends level aggregation ranging records coarsest level time hour target records finest level time min target phenomenological exploration coordination set results demonstrate capability interface identify instance coordinated scanning dimensions simple threshold-based technique identify significant elevations source counts tarfigure multi-network dameware botnet sweep class network top class network bottom geting service network botnet incidents spoofed floods call -heuristic refers ratio instantaneous source-count average sourcecount figures show examples singlenetwork multi-network coordinated activity detected interface figure shows udp traffic port udp ms-instant-messenger single network intent spamming traffic spoofed fits definition coordination figure multi-network event coordinated scan anomaly detected class networks belong distant networks traffic port tcp dameware actively targeted botnets based prior experience speculate traffic spoofed fact botnet sweep figure show data pollution essentially misconfiguration detected coordinated scan event instance provider submits logs include traffic port udp half-life popular network game strong diurnal pattern human-activity port number suggests malicious traffic qualitative source co-occurrence profiles ability obtain quick qualitative assessment coordination dimensions principle applications envisioned system end explored characteristic behavior amsuch techniques state-of-the-art honeynet monitoring systems time-series form qtime hour sources figure misconfiguration diurnal coordinated activity port udp half-life time lag min bins source cooccurence cardinality time lag min bins source cooccurence cardinality figure left source co-occurrence time-lag port tcp netbios-smb min resolution source co-occurrence time-lag port udp msmessenger min resolution date bient coordination worms viruses occasional outliers candidates deeper forensic analysis important note analyses presented section directly related queries provided section source co-occurrence time-lag analysis based notions importance coordinated scan events increases time-lag events increases importance coordinated scan events increases number sources involved figure shows examples scatter plots created queries point plots corresponds set co-occurring sources obtained pairwise comparison time intervals single day plot left shows ambient level coordinated activity tcp port netbios-smb represents worms sasser welchia cardinality co-occurrence high plot shows co-occurrence ms-messenger popup spam activity vastly plot examples clear outliers call in-depth analysis unlike appears limited correlation time-lag expected co-occurrence sources source co-occurrence network-distance scanning co-occurrence based network distance intuition attack sources sequentially sweep target address space strong local preference adjacent networks conetwork distance source cooccurence cardinality network distance source cooccurence cardinality figure left source co-occurrence networkdistance port mydoom min resolution source co-occurrence network-distance port sasser minute resolution date min min port sets set size sets set size table quantitative summary source co-occurrence time-lag min resolutions day occurring sources networks farther words co-occurrence distant networks unusual suggests analysis figure show source co-occurrence network distance generated popular worm back door ports tcp mydoom tcp sasser analysis ports informs cardinality source-network co-occurrence typically smaller source-time suggests anomalies easier identify subject greater scrutiny occur quantitative summary co-occurrence figure values close y-axis represent activities extend multiple adjacent intervals values close x-axis represent expected co-occurrence sources due internet background radiation traffic interface ability automatically select obtain summaries outliers level anomalous coordination threshold based number points threshold compute lag percentile values lag source counts count outliers sets slag lag summaries ports shown table envision summaries forming basis longitudinal tracking levels coordinated scanning drill-down analysis mitigation forensic analysis coordinated scanning events require ability drill-down details sources participating events prototype interface automatically selects sources group similar patterns time-intervals time-volume graph sources set similar sources interval min bins one-day scans log-scale figure pattern coordinated sources targeting port udp detected drill-down analysis targeting port udp ms-messenger shown figure patterns serve indicators botnet activity aid creation black lists firewalls summary future work malicious activity internet poses challenges researchers security analysts alike empirical study network attacks large diverse set traces benefit greatly consistent data management database systems importantly query interface facilitates broad deep analysis data end objective developing dbms comprehensive query language multi-dimensional network security data goal ambitious initially focusing efforts important subset problem interest understanding phenomenon received attention literature coordinated scanning describe efforts develop query interface enables investigate coordinated scanning terms timing persistence targeted services spatial dispersion temporal dispersion created set aggregate views templatized sql queries understand design trade-offs demonstrate utility approach applying queries data set dshield find coordinated scanning rich phenomenon interesting features results suggest promise efforts develop comprehensive query language network attack data continue build language investigate issues query translation budget-based view materialization parallel query processing multi-level aggregation framework finally actively current interface track variety coordinated scanning behavior including behavioral history identified source groups acknowledgements acknowledge johannes ullrich dshield providers access dataset anonymous referees insightful comments improved presentation paper work supported part nsf grants cnsani- ccrany opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf lei chen bee-chung chen raghu ramakrishnan composite subset measures technical report cooke bailey mao watson jahanian mcpherson understanding distributed blackhole placement proceedings ccs workshop rapid malcode worm fairfax october cranor johnson spataschek shkapenyuk gigascope stream database network applications proceedings acm sigmod ertoz eilertson lazarevic tan kumar srivastava dokas minds minnesota intrusion detection system generation data mining golab ozsu issues data stream management sigmod record jim gray surajit chaudhuri adam bosworth andrew layman don reichart murali venkatrao frank pellow hamid pirahesh data cube relational aggregation operator generalizing group-by cross-tab sub-totals data mining knowledge discovery greer daytona fourth generation language symbal proceedings acm sigmod philadelphia june bian zhang diot govindan hong iannaccone advanced indexing techniques wide area network monitoring proceedings ieee international workshop networking meets databases metasploit http metasploit oetiker rrdtool http people ethz oetiker webtools rrdtool pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm internet measurement conference taormina italy october paxson strategies sound internet measurement proceedings acm imc october research daytona http research att projects daytona ullrich dshield http dshield yegneswaran barford paxson honeynets internet situational awareness proceedings fourth workshop hot topics networks hotnets college park november yegneswaran barford plonka design internet sinks network abuse monitoring proceedings symposium recent advances intrusion detection raid yegneswaran barford ullrich internet intrusions global characteristics prevalence proceedings acm sigmetrics san diego june 
recent advances network intrusion detection system tuning joel sommers wisconsin-madison jsommers wisc vinod yegneswaran wisconsin-madison vinod wisc paul barford wisconsin-madison wisc abstract describe traffic generation framework online evaluation tuning network intrusion detection systems wide range realistic conditions framework integrates benign malicious traffic enabling generation packet streams diverse characteristics perspective packet content header payload packet mix order packets streams iii packet volume arrival rate packets streams begin describing methodology benign traffic generation combines payload pools possibly culled traces live traffic applicationspecific automata generate streams representative characteristics describe methodology malicious traffic generation techniques integration benign traffic produce range realistic workload compositions realize traffic generation framework tool call trident demonstrate utility series laboratory-based experiments traces collected departmental border router darpa intrusion detection evaluation data sets provided lincoln lab suite malicious traffic modules reproduce broad range attacks commonly today networks experiments demonstrate effects varying packet content mix volume performance intrusion detection systems introduction malicious traffic internet growing alarming rate terms volume diversity motivates methods tools assess tune capabilities network intrusion detection systems nids wide range malicious benign traffic standard methods nids testing include canonical packet traces offline tests traffic generation systems online evaluation controlled laboratory setting approach standardized comprehensive test suite nids enables rule sets configurations tuned meet projected demands detailed comparisons systems landmark work mchugh introduced set requirements nids test traffic streams summary requirements tests conducted diverse set representative packet flows including packet content benign malicious traffic natural approach addressing representativeness flows content empirical traces real networks offline analysis approach considered impractical due standard privacy concerns difficulty accurate labeling individual packets benign malicious notable exceptions darpa data sets developed lincoln lab offline nids testing authors studies great lengths create software robots mimicked user behavior means gathering empirical trace data work criticism remains largest publicly data set offline nids testing studies approach addressing challenge robust nids testing generate traffic streams synthetically principle process result traces offline tests live streams online tests traffic generators developed specific network systems tests address problem robust nids testing importantly synthetic generation diverse representative benign traffic including payload content addressed goal work create tools test methodology evaluating tuning growing number stateful protocol-aware intrusion detection systems secondary aim meeting test requirements outlined objectives guided design collection tools called trident generate packet traces traditional offline evaluations controlled laboratory settings assess online performance characteristics nids network systems firewalls capabilities trident include ability generate representative benign traffic streams including payloads ability construct generate types malicious traffic ability modulate mixture benign malicious test traffic ability modulate volume benign malicious test traffic ability modulate temporal arrival processes benign malicious test traffic knowledge existing toolset combination capabilities show enable unique important range tests nids important features trident distinguishes simple malicious traffic generators includes representative benign traffic trident handcrafted automata-based representations popular network services generate wide range protocolcompliant packet streams packets headers payload streams extracted traces carefully groomed remove malicious content outline strategies trace grooming iii complete discussion found demonstrate capabilities utility trident series tests live systems controlled laboratory environment begin populating trident benign traffic traces create set attack modules malicious traffic commonly today networks explained combination benign traces attack modules assess behavior popular nids range traffic volume packet diversity content mix experiments based set test hypotheses protocols designed system type results show trident easily exposes important range behavior test systems show nids performance sensitive mix benign application payloads show relative proportions malicious flows traffic clear impact nids performance resulting alarm quality show traffic volume clear effect nids packet loss effect alarm quality system dependent key implication results trident suited evaluating nids network systems protocol-aware stateful maintain connection state detecting anomalous malicious activity spanning multiple packets connections results suggest trident tuning nids rule sets host systems run related work tools exist generating purely malicious traffic including trident related metasploit exploitation framework projects provide libraries common modern attacks efforts generation benign malicious traffic streams include commercial product skaion trident differs systems approach benign traffic generation flexibility controlling volume mix content produced traffic streams study mchugh critique performed mahoney chan authors conducted evaluation anomaly-based nids enhanced version darpa data set created injecting benign traffic single host department web server work similar differs ways target systems broader anomaly-based nids goal provide flexible extensible framework recreating wide range attack scenarios modulating mix malicious benign traffic control traffic volumes inclusion representative benign payload contents iii problem separating potentially malicious traffic benign traffic based protocol knowledge statistical properties traffic relying firewall manual grooming iii constructing benign trace important aspects nids evaluation assessment system propensity generate alarms absence malicious traffic false positives quantity false positives intrinsically tied nids test nature benign traffic test environment essential aspects nids evaluation network benign traffic workload features spectrum characteristics typical expected network readily capture collection packet traces network period time difficulty arises fact expect traces mixture benign malicious traffic question identify isolate benign traffic ways precisely intrusion detection problem possibilities populating trident benign traffic payloads describe strategies techniques strategies reasonable effective cover large portion design space nids-based strategies strategy standard nids snort generate large number false alarms full rule set detects true attacks accurately groom packet trace local site argue approach problematic portion connections identified malicious removed highest interest sense benign packets trigger alarms false positives synthetic generation strategies strategy synthetic traffic generated software robots emulate user behavior idea craft robot ensure creates connections good hosts local remote data basis expansion trace synthetic generation packets darpa data set strategy limited terms representativeness application mix payload perspective environments benefit method base trace generated robots enable trace data sets shared trust-based strategies strategy groom packet trace local site connection heuristics failure rates scanning characteristics approach exploits differences connection characteristics benign versus malicious sources based model malicious connection behavior technique attractive based transport level characteristics require knowledge application semantics biased system nids independence posit trustbased grooming strategy results set packets labeled benign higher opportunity uncovering false positive behavior limited miss targeted attacks sophisticated adversaries connecs http clienthttp server responserequest http server data http service automaton smtp datasmtp serversmtp ehlosmtp ehlosmtp mailsmtp mailsmtp rcpt banner response response smtp rcpt smtp begin message packet 
smtp client message packet smtp client received smtp serversmtp client quit close smtp server fromfrom response message smtp client smtp service automaton fig service automata common application protocols tion characteristics sufficiently similar benign users examine trust-based strategy defining specifics trust-based grooming methodology evaluating performance packet trace department border router trident system section describe application-specific benign traffic streams malicious traffic streams generated trident framework benign traffic generation studies ids performance including papers darpa data set detection characteristics offline evaluation show results laboratory experiments dynamic characteristics traffic streams notably mix volume huge impact nids performance provide key insights system tuning challenges benign traffic generation dynamically generate diverse traffic streams based knowledge obtained limited set traces trident adopt protocol-aware emulation traffic based payload interleaving payload interleaving term dynamic construction flows random selection packets payload pools states service automaton describe method supports generation synthetic traffic streams realistic application level headers payloads describe components protocol-aware emulation scheme automata generation heart benign traffic generation system collection automata states describe classes packets observed specific service preliminary exploration feasibility approach basic automata describe popular services test data sets iv-c claim completeness automata suggest exercise classes nids examples demonstrate utility methods show accommodate flexible recreation broad class protocols automata describe service phase abstraction typical network protocols stage prologue describes application-level client server handshake stage dialog client server exchange data final stage epilogue participants agree gracefully tear connection stage conversation involve states automata final stage optional protocols http created automata model packet exchange protocols http smtp dns telnet ftp ssh popular services data sets automata-based abstractions http smtp shown figures pipelined http requests supported easy extension weakness protocol-aware automata-based system effectiveness evaluation related quality automata hope library automata developed research community time payload classification raw traces classified benign trusted trust neutral input payload classification module call payload-gen purpose payload-gen classify packets trace pools correspond states service automata step packets generated application state flows aggregated pool aggregation preserve packet ordering individual flow payload sanitization classification payloads discarded modified ensure violate simple set requirements discard original payload suffered truncation packet capture payload match valid automata state modification generally simplify service automata definition processing avoid generation false alarms result simply effect interleaving current approach aggressive normalization steps http remove connection content-length transfer-encoding headers server responses nids conceivably items monitor connection progress arbitrarily client server payloads maintaining elaborate state dynamically rewriting payloads remove echoed address server response required correct protocol operation effect sanitization underreport levels false alarms generated nids evaluate content aware traffic generation harpoon wrote traffic generation plug-in harpoon execute application state machines transmit sanitized payloads control state machine processing harpoon clients harpoon servers simply respond requests send number packets application payload pools exchange application-layer payloads service automaton standard user-level sockets transport layer benign traffic streams produced trident targeted intrusion detection systems focused layers transport layer presently explicitly account non-malicious transport-layer anomalies present trace captured live network misconfigurations implementation bugs malicious traffic generators include exploits target network transport layers higher layers attack traffic generation general attack traffic creation mace modular attack composition framework consists primary components exploit obfuscation iii propagation number functions support interpretation execution exception handling attack profiles work extended existing set exploits mace attacks enhanced ability modulate attack volumes taxonomy mace exploits found objective provide complete attack database intrusion testing provide spectrum attacks exercise nids sufficiently diverse ways support set basic building blocks create additional unseen attack vectors darpa attack recreation darpa data set collection attack instances catalog attacks found extend utility trident added capability dynamically replay attacks began developing tool called split-darpa distill labeled attacks mixed traces due inaccuracies labeling split-darpa automatically isolate attacks data set developed ability perform dynamic replay attack traces tool attack-replay key aspects effort tcp attacks reassembly payloads sending packets tcp sockets state maintained client server responses fed server out-of-band control channel timely manner udp icmp packets traffic transmitted raw sockets test methodology objective laboratory-based experiments reported demonstrate utility trident evaluating effectiveness specific nids configurations dimensions packet diversity content mix traffic volume test setup nids evaluated experiments bro version snort version bro default brolite bro policy snort default snort conf included nids configuration consisting snort version recent snapshot signatures bleeding snort nids ran separate workstation ghz intel pentium processor ram intel pro network cards freebsd installed machine nids hosts connected cisco enterprise switch router harpoon mace attack-replay traffic generators connected switch configured nids received traffic traffic generation hosts large address spaces internal external networks configuring interface aliases traffic generation host ran sets experiments set experiments designed establish baseline alarm behavior nids generated low rates benign traffic darpa data set sanitized packet trace department border router csl trace traced traffic experiments traces offline manner produce baseline set alarms generated nids configurations similarly exploit produced mace exploit darpa data set generated baseline set alarms nids configurations set experiments altered mix flow volumes benign traffic generated harpoon malicious traffic generated mace csl attack-replay darpa effect mixes benign traffic level constant introducing levels malicious flows specific mixes benign flows benign flows benign flows benign flows refer test setups mix mix mix mix set experiments levels traffic volumes tuned harpoon generate roughly csl darpa data sets traffic volume level tuned mace attack-replay produce approximately aggregate attack traffic refer tests exploring effect traffic volumes vol vol vol ran experiment minutes nids host measured cpu memory usage seconds vmstat note packet drops reported nids shutdown evaluating results results running malicious traffic baseline experiments constructed representations types number alarms nids expected observe exploit sets experiments recorded number times individual exploit executed mace attack-replay compare alarms produced nids expect specific exploits launched duration test wrote script automatically process representation expected alarms actual log files produced nids host modified kernel parameters debug bpf bufsiz debug bpf maxbufsize suggested bro documentation snort benefit change applied change nids host test script reported set alarms produced nids frequency occurrence expected number occurrences counts generate relative alarm efficiency effectiveness values efficiency defined ficiency truepositivesallalarms measure false positive occurrence means false positives means alarms false positives effectiveness defined fectiveness measure false negatives means false negatives alarms occurred occur laboratory-based ids evalution 
illustrate utility framework results experimental evaluation bro snort bleeding snort performance varying traffic content mix volume results substantiate effectiveness measurement tools potential methodology interpreted caveats results limited representativeness diversity protocol automata goal conduct black-box evaluation nids performance perform in-depth analysis behavioral causalities result results intended head-to-head comparison systems rule sets valuable demonstrate effects varying benign malicious traffic content mix volume establish feasibility approach baselining benign traffic evaluating effect interleaving important question payload interleaving process random selection packets individual payload pools based states service automaton affects alarm characteristics important demonstrate legitimate alarms introduced due data consistency issues counted number unique alarms produced nids setups offline online configurations csl darpa data sets results found offline setup ran nids configuration trace grooming prior payload classification sanitization original flows including tcp headers left intact online setup trident generate flows groomed classified sanitized traces number unique alarms consistently online test effect caused conservative nature sanitization process fact laboratory tests run simple environment set alarm types generated online tests subset alarm types produced offline setup alarms unique offline tests related transport addressing routing layers common alarms application-related baselining malicious traffic compiled summaries alerts generated bro snort bleeding snort instance mace darpa attacks details found data derive expected alarm types frequencies categorizing alarms false positives exploits tables highlight main differences bro snort bro generally concerned stateful monitoring connections applications snort oriented detecting specific conditions individual packets presence string specific string winnuke exploit generates alarms snort bleeding snort trigger bro alarms similarly unexpected smtp state produced mailbomb exploit triggers alarms bro snort bleeding snort evaluating effect traffic mix tests range benign malicious traffic mixes demonstrate remarkable diversity behavior bro snort bleeding snort figure shows cpu utilization packet loss results csl mace data set results darpa attack-replay data set found flow composition dominated malicious flows cpu utilization shows clear increasing trend difference caused application mix benign traffic flows csl data set malicious flows mix bleeding snort consumes cpu time bro opposite occurs darpa data set malicious flows packet loss behavior csl darpa traffic bro snort bleeding snort snort variants occurrence packet loss investigating high level packet loss low cpu utilization consistent previously reported experiments hand bro appears resilient dropping packets consumes cpu resources point loss endemic figure shows alarm effectiveness efficiency range benign malicious flow mixes csl mace data set results darpa attack-replay data set found csl data set alarm effectiveness drops traffic mix dominated malicious flows false negatives increase effect caused packet drops experienced bro snort variants false positives low mixes csl data set fewest false positives coming traffic malicious mix evaluating effect volume understand effect volume nids performance conducted experiments traffic rates mbps experiments mix malicious benign traffic fixed figure shows packet drops cpu utilization systems volumes csl mace data set systems increase traffic volume directly affects cpu utilization interestingly bro resilient packet drops csl data set darpa data set dominated http traffic substantial impact bro performance snort drop rates degrade intensely volume data set mix mix mix mix vol vol vol traffic scenario cpu utilization bro snort bleeding snort mix mix mix mix vol vol vol traffic scenario packet loss bro snort bleeding snort fig cpu utilization left packet loss measurements bro snort bleeding snort csl traffic setup figure show effectiveness efficiency systems volume experiments csl mace data set efficiency effectiveness highly correlated volume traffic counts alarms increase volume show results snort signature set tuned detect darpa attacks bro bro generates alarms darpa data result bro produces false alarms efficiency effectiveness poor csl traffic bro efficiency effectiveness significantly observation bleeding snort rule set superset snort rule set lower efficiency effectiveness expect volume baseline alerts bleeding snort higher snort result bleeding snort greater chance missing true alarms packet drops larger chance false positives decreases effectiveness conclusion paper describe online traffic generation framework robust evaluation tuning network intrusion detection systems objective work create system capable generating realistic diverse streams benign malicious traffic describe methodology creating benign traffic based protocol specific automata includes packet payloads culled live traces argue approach enables highly representative testing security administrators seeking tune systems environments realize traffic generation framework tool set call trident demonstrate utility trident set experiments open-source nids conducted controlled laboratory setting results experiments content mix volume tremendous effect nids performance demonstrate trident capability expose range diverse behavior modern nids mchugh testing intrusion detection systems critique darpa intrusion detection system evaluations performed mix mix mix vol vol vol traffic scenario effectiveness bro snortbleeding snort mix mix mix vol vol vol traffic scenario efficiency bro snortbleeding snort fig alarm effectiveness left efficiency bro snort bleeding snort csl traffic setup lincoln laboratory acm transactions information system security vol november lippmann fried graf haines kendall mcclung weber webster wyschogrod cunningham zissman evaluating intrusion detection systems darpa off-line intrusion detection evaluation proceedings ieee symposium security privacy oakland lippmann haines fried korba das darpa off-line intrusion detection evaluation proceedings symposium recent advances intrusion detection raid toulouse france october sommers yegneswaran barford framework malicious workload generation proceedings acm sigcomm usenix internet measurement conference taormina italy october comprehensive traffic generation online ids evaluation wisconsin-madison tech rep october thor tool test intrusion detection systems variations attacks http thor cryptojail net mutz vigna kemmerer experience developing ids simulator black-box testing network intrusion detection systems proceedings acsac las vegas december nessus http nessus metasploit project http metasploit exploitation framework http securityforest wiki index php exploitation framework hong interactive traffic replay proceedings symposium recent advances intrusion detection raid seattle september rossey cunningham fried rabek lippman haines zissman lariat lincoln adaptable real-time information assurance testbed proceedings ieee aerospace conference big sky montana march skaion traffic generation system tgs http skaion products index html mahoney chan analysis darpa lincoln laboratory evaluation data network intrusion detection proceedings symposium recent advances intrusion detection raid pittsburgh september valdes skinner adaptive model-based monitoring cyber attack detection proceedings symposium recent advances intrusion detection raid toulouse france october sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference taormina italy october bleedingsnort http bleedingsnort staniford hoagland mcalerney practical automated detection stealthy portscans journal computer security vol 
composite subset measures lei chen raghu ramakrishnan paul barford bee-chung chen vinod yegneswaran computer sciences department wisconsin madison usa yahoo research santa clara usa chenl beechung vinod wisc ramakris yahoo-inc abstract measures numeric summaries collection data records produced applying aggregation functions summarizing collection subsets large dataset computing measure subset typically user-specified collection fundamental problem multidimensional data model treats records points space defined dimension attributes offers natural space data subsets considered summarization candidates traditional sql olap constructs group cube compute measures subsets drawn space group summarize limited collection subsets cube summarizes subsets space restrict measure summarize data subset one-step aggregation functions sum field-values data records paper introduce composite subset measures computed aggregating data records measures related subsets summarization naturally related regions multidimensional space offering flexibility group cube choice data subsets summarize framework meaningful summaries computed targeted collection data subsets propose algebra called aw-ra equivalent pictorial language called aggregation workflows aggregation workflows intuitive expression composite measure queries underlying algebra designed facilitate efficient multi-scan execution describe evaluation framework based multiple passes sorting scanning original dataset pass measures evaluated simultaneously dependencies measures containment relationships underlying subsets data orchestrated reduce memory footprint computation present performance evaluation demonstrates benefits approach introduction multidimensional model data records central fact table viewed points multidimensional space attributes divided dimension attributes coordinates data point measure attributes values points domain values dimension organized hierarchy leading natural notion multidimensional regions region represents data subset summarizing records belong region applying aggregate operator sum measure attribute computing measure entire region fundamental operation olap sophisticated analysis carried based computed measures identifying regions abnormally high measures analyses compute measure region regions intuitively related region measures paper introduce composite subset measures differ traditional group cube approaches ways measures region computed summaries related regions compositional manner relationships capture types proximity multidimensional space contrast cube construct offer compute summary region typically overkill kinds complex measures seek compute language algebra carefully designed enable highly scalable parallelizable distributed evaluation strategies based streaming data passes possibly interleaved sorts study motivated ongoing work application domains environmental monitoring analysis network traffic data similar problems faced researchers dealing data internet companies google yahoo leading develop systems scalable aggregation tabular data contrast proposal explore declarative query-style approach spirit olap constructs focus highly parallelizable distributed evaluation framework simple one-step aggregation queries issue tackle paper highly distributed computation strong consideration design language intend address future work keeping goal avoided implementation choices require assign unique ids records maintain indexes potentially widely distributed tables focused evaluation strategies orchestrate aggregation steps scans data partitions network traffic analysis selfpropagating worm outbreaks potential wreak havoc internet place variety time scales potentially identify outbreaks based escalation traffic network time period kind escalation defined per-time period subpermission copy fee part material granted provided copies made distributed direct commercial advantage vldb copyright notice title date notice copying permission large data base endowment copy republish post servers redistribute lists requires fee special permission publisher acm vldb september seoul korea copyright vldb endowment acm network basis composite measure built traffic measures adjacent time periods compute composite measures existing tools relation algebra multidimensional query languages frequently result nested expressions hard human analysts understand processing system optimize requires import data dbms challenge large datasets goal develop standalone lightweight highly scalable analysis system supports composite measure queries contributions propose pictorial language called aggregation workflows algebra expressing composite aggregation queries representing streaming plans queries show query language expressed algebra present comprehensive framework highly scalable scan-based evaluation passes show exploit sorting passes orchestration dependencies aggregation steps present evaluation demonstrates potential methods significant performance gains traditional relational approaches work step broader research agenda develop efficient streamlined tools domain specialists mine large complex datasets complete technical report version paper discusses optimization problem finding good multi-pass streaming plans describes greedy optimizer approach offers potentially unlimited parallelism ability distribute computation current implementation advantage opportunities rest paper organized section describe dataset running define main concepts underlying multidimensional model including domains domain hierarchies regions section introduce composite subset measures algebra aw-ra section describe pictorial language aggregation workflows translation aw-ra describe evaluation framework section discuss query optimization briefly section experimental results based synthetic real datasets workloads presented section discuss related work section conclude section definitions data attacks intrusions internet increasing volume diversity represent significant threat government industry academia home users writ large developing effective efficient means identifying broad range cyber threats focus work network intrusion logs dshield running paper dataset collected continuously networks world wide normalized records attack packets identified network table lists attributes examples schema multidimensional dataset dimension attributes dimension vector possibly additional measure attributes explicit measure attributes dshield dataset typical multidimensional datasets record denoted tuple dimension values measure values dimension attribute dshield dataset time source target targetport abbreviated domains domain hierarchies base domain base dimension attribute base domain attributes source target -byte integers base domain time number seconds unix time base domain generalized generalize base domain source subnet domain contiguous addresses domain -byte integer representing subset domains domain generalization specific domains dimension attribute form domain generalization hierarchy directed acyclic graph dag node graph represents domain relationship defines partial order graph arc chain domain hierarchy linear domain hierarchy graph forms single path dimension attribute special domain called single generalization values dimension figure illustrates domain hierarchies dshield dataset domain hierarchies targetport source target linear domain hierarchy time non-linear week span months simplify discussion rest paper ignore week domain treat time linear attribute paper dimension linear hierarchy domain hierarchy collection domains dimension attribute denoted hier base hier time hour day month year extended domain dimension attribute union domains denoted function returns domain belongs year day avoid confusion assume overlap domains attribute table schema network log dataset description abbreviation timestamp packet arrival time source source address target target address targetport target port figure domain hierarchies network log data define many-to-one generalization function maps subnet require generalization functions consistent generalization function dimension attribute construct hierarchy graph node represents extended domain dimension attribute arcs represent generalization mapping figure illustrates hierarchies dshield dataset observation query evaluation proposition attribute domain hierarchy linear means hierarchy graph tree total order extended domain proof dimension attributes timestamp natural order domain 
values satisfies property order naturally exist encode values extended domain impose ordering encoded domain number distinct values extended domain large encoding decoding operations carried efficiently cube space regions region sets cube space dataset denoted d-dimensional space region hyper-rectangle covers data subset granularity region granularity vector gran hier represent relations granularity vectors granularity vector implies iid simplify notation omit attributes domains granularity vector equivalent expression region covers subset original data set denoted coverage region parent region denoted icd region set square brackets denote region sets parentheses denote granularity vectors set regions cube space granularity gran region set regions region covers data records sharing source target addresses composite subset measures section introduce concept composite subset measures propose algebra computing examples composite measures composite subset measures defined regions cube space typical analysis compute measures regions granularity region set identify regions interesting measure values illustrate queries expressed intuitive calculus formulas traffic counting hour compute outgoing packets source hour count coverage measure computed aggregating data records coverage region simply answered group aggregation data table partitioned time source attributes measure group computed aggregating measures individual records group strictly speaking measure composite measure busy source count hour compute number sources outgoing packets hour scount hour count measure constructed composing measures previous region identify child regions satisfy condition number outgoing packets count satisfactory child regions busy source traffic hour compute traffic generated sources outgoing packets hour straffic sum count hour count aggregation function busy source count moving average hour time window compute average hourly count busy sources thour avgcount average scount hour measure avgcount region evaluated based measures regions share granularity original region cube space ratio hour compute ratio average hour busy source count average traffic carried busy source hour thour ratio avgcount straffic scount differs previous measure directly depend measures regions computed combining multiple measures region hard examples answered combining relation algebra operators selection join aggregation operator relational algebra express composite subset measures disadvantages relational algebra applied composite subset measures typically results cumbersome expressions processing step requires operations join aggregaa targetport source target figure hierarchies network data tion algebra translated sql resulting query multiply nested sub-queries making hard understand difficult optimize hand multidimensional data query languages mdx make easy write queries aggregate records regions cube space complex compositional measure result expression complicated aw-ra algebra introduce algebra called aggregation workflow relational algebra aw-ra designed expressing composite subset measure queries aw-ra expression rewritten relational algebra group aggregation extension write composite measure queries succinctly exposes opportunities efficient scan-based evaluation plans recall dimension vector cube space vector granularity region measures regions granularity stored table schema granularity vector measure attribute domain dimension attribute dimension attribute txis abbreviation aw-ra expressions produce tables representing composite measures table represents measure regions share granularity denote collection expressions generated aw-ra thena constructed based rules fact table fact table atomic expression schema fact table granularity xdx xdx xdx dimension attributes defined base domains measure defined raw data records aggregation operator expression granularity vector granularity roll table produce higher-level aggregation notation gagg represent operation equivalent sql query shown table abbreviation measure count computed directly aggregating fact table expressed hour count defining aggregation operator assume mapping function atomic function real world dimension hierarchy information stored dimension tables order perform mapping domains lookup dimension table dimension table typically smaller fact table stored memory efficient lookup reasonable treat inexpensive functions selection operator expression selection cond examples expressed hour count hour count notice expression defined source composition match join composite measure typically generated based measures related regions related regions descendants region aggregation operator operator match join join algebra expressions group results dimension attributes notation cond agg stnullnull match join operation equivalent sql query table left outer join part sqlstandard matching tuple outer relation tuple join produce filler tuple outer attributes equal null match join express avg ststavgsm nullnull alias avoid confusion expression join condition cond matches rows rows join condition arbitrary practice types join conditions common discuss combine join collection expressions satisfies conditions expressions combine measures construct composite measure equi-joining tables dimension attributes selection unique combination dimension attributes table denote operation fcn sttt nullnull function combined measures equivalent sql shown table table equivalent sql query operator select agg group table equivalent sql query nullnull operator select agg left outer join cond true group table equivalent sql query nullnull operator select left outer join left outer join combine join express avg savg nullnull table shows summary atomic operators aw-ra notice deliberately exclude projection algebra table represent region measures drop dimension attributes measure attribute table summary operators aw-ra notation prerequisite raw fact table cond selection agg aggregation cond agg stnullnull match join fcn sttt nullnull combine join theorem aw-ra properties proof property agg agg agg gtgt aggregation function agg distributive property cond agg agg cond cond depends dimension attributes cond cond property stnullnull nullnull nullnull nullnull property nullnull ttt stttt nullnull derived fcv property fcn sttt nullnull fck stt nullnull fck nullnull find decomposition functions fcfcvv match join cond agg stnullnull match related regions granularities aggregation measures measure region practice commonly join conditions match cond source region target region cases match join operator equivalent combine join operator parent child cond condition target region set finer granularity source region set target region include measure ancestor region source region set input aggregation function ancestor matching region child parent cond condition coarser granularity target region include measures descendants source region set input aggregation descendants matching regions match join cond essentially equal aggregation operator sibling cond neighborsx set neighbor denotes collection regions adjacent cube space regions neighbor set granularity target region include measures neighbor regions input aggregation common sibling matches moving windows condition -low high low high give boundary attribute neighbor set aggregation workflows aw-ra rigorous define region-centric composite subset measures natural relational algebra intuitive complex queries section present pictorial interface address issue aggregation workflow graph describes composite subset measures types objects rectangles represent region sets ovals representing measures arcs representing dependencies rectangle aggregation workflow represents region set cube space ovals stands measure table aw-ra measure shown inside oval bold type formula aggregation optional selection condition measure computed applying 
aggregation operator fact table computing arc entering oval measure called basic measure aggregation workflow shown figure computes measure count based algebra expression count hour count measure computed values measures dependencies reflected aggregation workflow computational arcs measure oval computational arc leading measure computed compositely measures aggregation match join aggregation workflow figure equivafigure examples aggregation workflows lent aw-ra expression count hour count base hour avg base base count avg count count nullnull match condition child parent condition simplified expression avg hour avg count count aggregation workflow figure equivalent aw-ra expression count hour count base hour avg base base base count avg count count nullnull examples base important auxiliary table cells measures computed appears join condition arc multiple computational arcs leading oval means measure computed combine join case arcs ovals rectangle represent measures region set target measure aggregation workflow figure equivalent algebra expression maxt max uip mint min uip ratio maxt mint dmintmax nullnull generalizing examples result theorem measure aggregation workflow expressed aw-ra expression proof aggregation workflow benefits express composite subset measures show complex internal dependencies composite subset measure query er-diagram summarizes relational schema pictorial diagram captures complex dependencies intuitive manner analyst include multiple measures single workflow diagram specific measures easier identify measures defined region set attached rectangle aggregation workflows implemented graphical user interface user easily perform actions show hide measures region set show hide measures region sets granularity show hide measures involved computation measure evaluation framework composite measure query typically correspond multiple correlated aggregation queries considerable opportunity optimize execution taking advantage connections section present systematic evaluation framework exploits connections single-scan algorithm begin single-scan algorithm method evaluate measures including composite scanning raw dataset require massive amounts memory large datasets basic idea build hash table measure entry table corresponds region basic measure entry measure composite measure result match join combine join entry values source measures scan raw dataset evaluate values basic measures simultaneously aggregation functions distributive algebraic accomplish probing hash table update entry scan values basic measures values compute dependent composite measures topologically ordering dependent measures evaluated measures depends finished don recursive measure definitions order exists obtained topological sort aggregation workflow streaming aggregation plans single-scan algorithm effective size memory big hold hash tables case large datasets number hash tables number entries hash table large idea reduce memory requirement detect hash table entry longer modified referred out-of-core processing basetuple completion paper exploited idea detail subsection study evaluation graph induced aggregation workflow summarize general evaluation strategy collection aw-ra expressions draw evaluation graph node evaluation graph represents aw-ra algebra operator arc evaluation graph represents data flow taking data produced operator feeding operator input figure evaluation graph evaluation graph directed acyclic graph single source unique source node represents fact table nodes reached unique node large number operators evaluation graph perform operations benefit evaluation remaining operators query performance greatly improved hand selection join aggregation operator evaluated efficiently input data sorted appropriately result produced end operation input ordered operator produce output possibly ordered key output order benefit evaluation subsequent operators operators aw-ra properties scan fact table based specific order order propagate evaluation graph benefit execution operators data arc operator output order lead large memory footprint face choice sticking original output order paying cost large memory footprint caching output operator re-sorting multiple output streams combined match join combine join possibility input streams synchronized asynchrony caused match join operator sibling condition match join resulting output stream lag input stream computing hour moving average output result hour delay compared input subsection discuss handle asynchrony recording slack stream streaming aggregation plan sorts fact table ordering vector propagates ordered data subsequent operators arcs evaluation graph arc order vector synchronization information computed query evaluation based information total memory footprint estimated plan executed operator input output orders related explained order vector key hier data stream sorted hour order vector data records ordered hour source key vector general key vector fewer elements idi input order keys operator memory minimum memory required computing measure results function specific ordering vector result memory usage bounded memory show general input vectors aggregation workflow streaming evaluation plan theorem aggregation workflow ordering vector raw fact table streaming aggregation plan proof claim big picture aggregation workflow converted executable streaming aggregation plan list issues addressed solutions provide rest paper capture asynchronization information individual data stream section compute output order operator order synchronization inputs section input stream evaluation strategy individual operator section memory budget big optimal sorting order section identify sorting order result minimal memory footprint section one-pass sort scan algorithm based streaming aggregation plan one-pass algorithm capable handling composite subset measure queries memory evaluation consists sorting scanning dataset question choose good sort order deferred section processing record requires update hash table entries basic measures single-scan algorithm addition check finalized entries hash entries longer updated rest scan propagate compute dependent measures key issues addressed determine hash table entry finalized based order dataset propagating entries compute dependent measures updating hash-table entry dependent measure receipt finalized entry intermediate information finalized entries received computation graph begin constructing evaluation network based streaming aggregation plan node hash table stores intermediate aggregation result aggregation function distributive algebraic constant number registers track intermediate aggregation state edge computational arc indicating data flow operators edge labels order slack discuss figure conceptually node behaves stream data processor input streams scanned data output streams underlying nodes hash table node updated process records input streams node produces result stream consisting finalized entries arc computation graph stream stream determine important properties order slack label edge evaluation network order slack identify finalized entries node properties set incoming streams order order property describes records arranged stream based information make inferences remaining records stream stream ordered year record year equal future records time year general dataset sorted order vector key day dataset sorted figure evaluation network ascending order day source tie breaker target tie breaker day count query computes number packets source target day suppose underlying dataset sorted key month entries hash table finalized target current scanned data record current source target combination records scanned subsequently higher month day maximum memory footprint maximum number days month finalized hash entries sorted key month hand 
underlying dataset sorted key hour entries hash table finalized time attribute current record switches day maximum memory required number source target combinations day finalized hash entries sorted day make observation orders simplifies notation proposition update streams ordered order vector attribute vector identical sort key dataset scanned update streams differ solely granularities attributes sort keys stream order form xdx trailing attributes don influence sort simply padded domain proof slack slack property implies specific data stream lags advances actual progress scan fact table stream sorted year slack year records time equal scan progressed records time reason progress data stream ahead scan fact table existence sibling match join slack information important identifying finalized entries determining memory footprint measures multiple inputs attribute track highest lowest slack values query suppose sort data key day month count day count ratio cond nullnull lowest slack highest input stream ratio region day depends aggregation month end month general slack stream caused computational arcs parent child sibling match conditions data stream slack expressed vector pairs lower upper bounds slack attribute determining order slack data stream identify order slack update stream composite measure query sort order dataset order slack incoming finalized entry streams problem decomposed sub-problems measure orders slacks update streams source measures compute order slack finalized entries measure knowing order slack finalized entry stream measure determine order slack update stream produced applying match condition problem requires separate analyses match conditions details provided problem general order finalized entries common prefix sort orders incoming update streams slack computed bounding box slacks attribute share domains slacks orders incoming update streams table shows algorithm identify order slack composite measure algorithm function card returns number values domain mapped domain datasets number fixed precision function affect size estimation impact correctness evaluation algorithm one-pass algorithm introduce algorithm aims reducing memory footprint query evaluation sort data scanning reduce memory needed evaluate measure flushing hash table entries finalized algorithm table table compute order slack input region set rdrd order vectors input streams slacks incoming update streams output orders finalized entries slack finalized entries algorithm computeorderslack uvd jil return min max idri append iri iri llcarddd iri hcarddd jil return append jil return line identify measures involved composite subset measure query oval aggregation workflow represents measure compute order slack finalized entries measure create hash table key combination dimension attributes region set measure measure intermediate values composite measures line sort dataset sort key line scan dataset sort order data record repeat steps line record probe hash tables basic measures update hash entries aggregation functions line identify finalized entries hash table computational arc current measure prepare update collection set finalized entries applying match condition line propagate update set dependent measures recursively repeat outgoing arcs line update propagated finalized entries flushed disk line removed hash table line steps table straightforward query day count day count max tday max max tday max max max nullnull max max max max suppose dataset sorted key day measure max hash entries finalized target switches finalized entries propagated measure max measure max depends max day switches updates max cached hash table measure max day values switches entries hash table max finalized finalized entries propagated measure max trigger finalization entries hash table measure max critical steps require discussion convert finalized entries updates target measure determine hash entry finalized apply match conditions stream finalized entries convert update stream selfmapping match condition conversion finalized entry input target measure child parent match condition find parent regions finalized entries update measure parent child sibling match conditions require sophisticated mechanisms ensure update stream appropriately ordered omit details due space constraints identify finalized entries maintain array key values called watermark array entry watermark array represents progress input stream update source measure convert update record key based order key schema computed table output order composite measure prefix output orders source measures guaranteed key computed updates bigger stored entry source measure key replace values watermark array key replaced originally smallest watermark array global watermark composite measure risen check hash table identify entries global watermark sketch correctness proof definition aw-ra aggregation workflow proved composite subset measure query converted relational algebra group extensions proof shows simple evaluate composite subset measure queries topologically sorting table one-pass sort scan algorithm input dataset sort key measure set base measure set algorithm onepassevaluation compute orders slacks based sort based sort key scan dataset evalmeasure flush hash tables measures algorithm evalmeasure updateset scan updateset updateset update hashtable finalset finalized entries hashtable computational arc measure target measure generate updateset finalset evalmeasure updateset flush finalset disk remove finalset hashtable table identify finalized entries input precomputed order key rdrd source measure target measure orders incoming update streams watermark array output collection finalized entries algorihtm findfinalized update record mapkey min min return hashtable mapkey min function mapkey record key schema return measures based dependencies evaluating order algorithm interleaves evaluation measures key correctness proof entry labeled finalized updated future correctness proof builds proposition addition proposition stated earlier proposition algorithm shown table guarantees update streams sorted identified order order order key result streams proof based proposition algorithm table collect data entries key computed entries smaller update stream means entries receive future updates input update streams finalized multi-pass sort scan dataset large dimensions attribute query complex including measures region sets simultaneously fit intermediate results memory dynamically flush finalized hash entries optimal manner case scan multiple passes sorting order pass maximize number measures evaluated call pass sort scan iteration costly sort scan large dataset number passes minimized pass produce subset measures composite measures depend measures produced passes order compute composite measures materialize individual dependent measures iteration resort traditional join strategies combine optimization evaluation cost composite measure plan affected factors costs sorting scanning raw dataset sort scan general assume costs depend sort key cost updating in-memory data structures pass update sort order dataset measure evaluated cost writing values measure write cost evaluating measure traditional query evaluation techniques assuming measures depends evaluated stored disk rel present algorithm estimate memory footprint result initial sorting order based generalize optimization problem general assignment problem typically problem np-hard case number dimensions small brute-force search sorting order combination 
yield result reasonable cost experimental results section present preliminary experimental result proposed pass sort scan algorithm optimization brute force search sort orders identify smallest estimated minimal memory foot print system implemented standard stl library run experiments machine windows server intel dualghz cpu physical memory records exe ion sortscan scan result child parent match records exe ution time seco nds -chain sortscan -chain -chain sortscan -chain result sibling match dependent child measures execu sortscan increasing number measures child regoin size sibling chain ecu tion tim sortscan increasing size sibling chains test case ratio sort scan cost breakdown records eco csm join performance network data figure experiment results synthetic dataset synthetic dataset evaluate performance dimension attributes share domain hierarchy attribute domains domain hierarchy domain cover distinct values sub-domains datasets generated million records values attribute generated independently based uniform distribution datasets stored flat files input algorithm imported commercial relational database system relational tables comparison configured rdbms reduce logging activity minimum ran distinct types queries compared execution time sort scan algorithm relational database system single-scan algorithm sort dataset scanning query measure computed combining aggregations child regions goal illustrate sort-scan algorithm exploit relation child regions granularity small size memory hold intermediate results relational approach aggregation function count distinct generate aggregation child regions explicit join figure shows case child measures expected single-scan algorithm performs small dataset due low maintenance cost performance slows significantly due insufficient memory show number dataset larger dataset sort-scan approach achieves performance relational approach query measure computed multiple levels nested sliding windows database system implemented nested queries analytical functions figure shows results comparison approaches sort-scan approach performs relational approach -chain case level nesting -chain case levels nesting sort-scan algorithm outperforms relational approach cases importantly increase level nesting cost sort-scan approach increase result pipeline measures writing additional intermediate result disk experiment fixed size dataset increased number measures simultaneously maintained emphasize benefits coordination dependent measures figure shows case increase number child measures figure shows case increase number sibling chains cases cost sort-scan increases slower rate relational approach figure shows cost breakdown queries small dataset graph shows scan step pass raw data table compared sort step expensive sort phrase effect considerable query query larger memory means memory operation account significant part evaluation cost requires work optimization honeynet data set demonstrate capabilities techniques experimented analysis queries developed identify specific types malicious activity run lawrence berkeley laboratory lbl honeynet dataset target dataset log collected lbl monitor transformed format section query network escalation detection developed identify instances attack packet volume grows significantly time period measure sibling match joins intermediate result query small figure sort-scan algorithm perform compared methods reason size intermediate result small cost sorting raw fact table dominates cost simple scan algorithm performs situation addressed switching simple scan required memory smaller memory budget query multi-recon detection developed identify instances attack packets multiple unique source addresses target specific destination network specific period time query measures based child parent match joins figure shows sortscan algorithm performs significantly faster alternative database approach effect pronounced combine analysis tasks query result shown figure aggregation workflow capable expressing multiple measures evaluating sort-scan approach case results order magnitude performance improvement relational database query related work languages proposed constructing composite measures sql analytical function extension partial support partition order keywords query language flexibility terms form measures define composite measures levels clause introduced sql extension treats relation multidimensional array defines composite measures assignment integrated oracle dbms model clause order combine measures region sets proposed language requires nested subqueries mdx query language microsoft analytical service user define abstract measures applied arbitrary regions define composite measure requires nested expression composite measures records exec sec sort-scan single-scan olap join records sort-scan escalation detection multi-recon detection figure performance queries real data analysis sql extension proposed enables user combine multiple aggregations group query language extension formalized relational operator called md-join idea generalized generate cubes complex measures authors expand idea group variables matched group variables nested aggregations similar idea computational arcs express computational dependencies measures measures group input related groups single scan algorithm proposed paper major difference work work impose carefully chosen restrictions computational arcs composite measure query enables sort scan evaluation flush records early work follow-up work point benefit flushing finalized entries provide detailed mechanism realize critical optimization common evaluation strategies group queries sorting hashing papers studied optimization aggregation queries relational databases multidimensional setting cube construct introduced subsequent papers investigated efficient evaluation strategies algorithms proposed sort dataset scan sorted result evaluate correlated aggregates simultaneously choose cube subspace materialize cost subsequent queries cube minimized work considers optimization multiple aggregation queries approaches implicit dependencies grouping sets hierarchical region containment share common computation contrast dependencies seek exploit made explicit computational arcs query capture relationships simple hierarchical containment conclusion paper proposed query interface construct complex measures multidimensional dataset measure subset computed aggregating data records subset measures related subsets cube space proposed algebra called aw-ra developed intuitive pictorial query language presented evaluation framework multiple related measures computed coordinated fashion shown empirical study strategy substantially improve query efficiency compared traditional relational olap execution engine studied optimization framework suggested heuristics finding good evaluation plans acknowledgement work supported part nsf grant numbers itr iisiis- cnsani- ccrany opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf johannes ullrich vern paxson permission dshield lbl datasets agarwal agrawal computation multidimensional aggregates vldb akinde hlen efficient computation subqueries complex olap icde chatziantoniou evaluation hoc olap in-place computation ssdbm chatziantoniou akinde md-join operator complex olap icde chatziantoniou ross querying multiple features groups relational databases vldb chaudhuri shim optimizing queries aggregate views edbt chen yegneswaran barford ramakrishnan query language network attack data icde netdb workshops chen ramakrishnan composite subset meausres technical report wisconsin madison http wisc techreports chen narasayya efficient computation multiple group queries sigmod dean ghemawat mapreduce simplified data processing large clusters osdi dshield project http dshield ghemawat gobioff leung google file system sosp graefe query evaluation techniques large databases acm comput surv vol gray chaudhuri data cube relational aggregation operator generalizing group-by cross-tab totals data min knowl discov vol gupta harinarayan aggregate-query processing data warehousing environments vldb gupta harinarayan index selection olap 
icde hadoop project http lucene apache hadoop huang chen cai gross musicant ramakrishnan schauer wright mass spectrum labeling theory practice icdm johnson chatziantoniou extending complex ad-hoc olap cikm microsoft mdx specification http msdn microsoft pang yegneswaran characteristics internet background radiation imc pike dorward griesemer quinlan interpreting data parallel analysis sawzall sosp ross srivastava complex aggregation multiple granularities edbt shmoys tardos approximation algorithm generalized assignment problem math program vol shukla deshpande materialized view selection multidimensional datasets vldb witkowski bellamkonda spreadsheets rdbms olap sigmod yan larson eager aggregation lazy aggregation vldb 
proposed framework calibration bandwidth estimation tools joel sommers paul barford walter willinger wisconsin-madison labs-research jsommers wisc walter research att abstract examining validity accuracy proposed bandwidth estimation tools remains challenging problem common approach consists evaluating newly developed tool combination simple nstype simulations feasible experiments situ parts actual internet paper argue strategy fall short establishing reliable ground truth advocate alternative vitro-like methodology calibrating bandwidth estimation tools widely context approach relies performing controlled laboratory experiments tools visualize analyze relevant tool-specific traffic dynamics present case study canonical bandwidth estimation tools spruce pathload respond increasingly complex cross traffic network path conditions expose measurement bias algorithmic omissions lead poor tool calibration result evaluation designed calibrated bandwidth estimation tool called yaz builds insights pathload show head head comparisons spruce pathload yaz issignificantlyandconsistently accurate respect ground truth reports results quickly small number probes introduction calibration strategies internet measurement tools essential detecting inaccuracy underlying data misconceptions errors analysis paper propose investigate set calibration techniques greatly increase confidence validity accuracy end-to-end bandwidth estimation tools abets echoing sentiment expressed tool calibration meant achieve perfection aid understanding tools applicability producing results close ground truth calibration illuminate circumstances tools give inaccurate results conventional complementary aspects calibration comparison standard adjustment match standard notion encompasses task comparing output measurement tool ground truth quantity reading accurate precise device abets activity involves comparison measurements bandwidth obtained packet traces timestamps sufficient quality facet calibration involves changing feature measurement tool output matches standard closely context abets aspect calibration involve adjusting parameters algorithm algorithm traditional approaches calibrating validating abets employ basic strategies simple ns-type simulations consists small-scale experiments wild largely uncontrolled tests parts live internet nstypesimulationsareattractivesincetheyhavetheadvantage simplified implementations complete experimental control definition abstraction networking reality render results largely irrelevant situations details live system protocol implementations traffic conditions common simulation-based counterparts contrast experiments parts live internet encounter networking systems protocols traffic conditions confined similar expected parts network experiments run wide area largely uncontrolled typically lack instrumentation establishing reliable standard results compared understood networking researchers generally aware pros cons strategies lack realism nstypesimulationsandthelackofcontrolandinstrumentation wide area cast doubts predominant approaches abet calibration validation highlight improved calibration strategies paper investigate alternative abet calibration strategy based conducting experiments laboratory setting amenable establishing ground truth great variety internet-like scenarios setting include actual hardware found end-to-end paths internet routers switches versions full tcp protocol stack workload generators capable exercising systems range realistic conditions measurement devices provide level accuracy suitable establishing ground truth advocating vitro-like experimental environment combine advantages ns-type simulations complete control full instrumentation offered experiments wide area realistic network systems protocols traffic dynamics laboratory-based calibration techniques established scientific disciplines chemistry biology widespread application network measurement tools focus paper calibration strategy context abets future plans include investigating generalizations approach additional active measurement-based tools attempt infer network internal characteristics estimating network path topic received considerable attention recent years informally end-to-end bandwidth defined minimum spare capacity end-to-end path sender receiver calibrate validate abets detailed understanding realistic queuing effects experienced individual packets compete interact packets essential andrequiresfine-grained routers network path openly laboratory testbed apply calibration strategy series experiments abets spruce pathload canonical representatives basic methods abe analyze detailed arrival departure measurements testbed multiple tools show tools prone measurement bias errors range increasingly complex cross traffic network path conditions insights gained analyzing detailed arrival departure measurements designed calibrated abet called yaz builds basic insights pathload additional set laboratory-based calibration tests show yaz compares respect measures significantly accurate spruce pathload remaining intrusive pathload produces bandwidth estimates faster tools full details results study found background related work dynamic estimation end-to-end bandwidth spare capacity important potential network capacity planning network overlay monitoring management active measurement tools estimating inferring designed send precisely crafted packet pairs streams measuring perturbations pairs streams observed receiver infer bandwidth end-to-end path development fast accurate abets active area research seeforexample recent tools pathload spruce represent common strategies probing appealing methods inference tools focus abet calibration study study related high-speed links found additional contrasts focus calibration mechanisms lead performance differences tools simply head-to-head comparison abets varied range cross traffic experimental environment openly significantly precise measurements router snmp counters created highly accurate lowimpact abet result work end-to-end informally defined minimum spare capacity end-to-end path time interval link smallest referred tight link link minimum capacity path referred narrow link definitions avoid ambiguous term bottleneck link avoid implicit assumption tight link necessarily narrow link existing tools measuring assume simplification homogeneous environment assume fifo queuing routers assume cross traffic fluid cross traffic packets infinitely small finally cross traffic intensity assumed stationary measurement period spruce estimates sending packet pairs spaced back-to-back capacity tight link assuming fluid cross traffic amount packet pairs expanded tight link proportional volume cross traffic gin spacing backto-back probe packets tight link gout spacing spruce tight link narrow link assumed strauss claim estimates meaningful condition satisfied measured receiver calculated parenleftbigg gout ging parenrightbigg spruce sends default packet pairs poissonmodulated intervals reports average samples pathload attempts create short-lived congestion conditions order measure detects congestion trends one-way probe packet delays specifically increasing one-way delay owd trend equivalenttosayingthatthereisanincreasinginter-packetspacing trend average increase spacings probe rate measured receiver rout introduced sender rin decrease evidence end-to-end probe stream rate relationship expressed rin rout braceleftbig rin rin pathload takes measurements probe streams length packets iteratively adapting send rate determine owd trend streams referred fleet stream fleet quiesce default set details metrics pathload infer owd trends found calibration framework comparison standard subsequent adjustment abet algorithm parameters complementary activities basic task comparing output abet actual time interval requires simple measurements gain insight abet arrives estimate require measurements analysis suited probes produced abet reported measurements require test environments evaluate abet accuracy range controlled conditions expose algorithmic parametric assumptions adjustment part framework offer set issues abet calibration performance predictability limitations imposed operating system hardware workstations standard network interface cards running measurement tools key considerations probe packet streams specifically spacing packets generated sufficient fidelity timestamp accuracy cases synchronization sufficient assumptions abstract models behavior routers switches foundation inference methods interpret active measurements diversity implementation details systems limit effectiveness inference methods probes response packets generated measurement impose load network change conditions path interest potentially skew results heterogeneity burstiness 
traffic extend operating bounds tool active probe tools require specification set parameters tool effectiveness limited sensitivity configuration parameters valid simulation lead unexpected behavior abet deployed live internet environments issues imply fully instrumented environments key understanding impact reported measurements abets final issue identified suggests tool calibration performed controlled realistic environment calibration strategy address issues advocate laboratory-based testbeds calibrating abets environments provide important set capabilities offered standard simulation situ settings planetlab including repeatability transparency actual systems implementations actual protocols essence calibration strategy study consists design test environments standard established range increasingly complex repeatable test conditions essential step availability hardware measurements level accuracy greater abet accuracy typically situ studies setups defined step identify relevant test suites assessing issues host system capabilities loading effects network system behavior range expected conditions real systems generally required study issues evaluation data collected testbed aided flexible analysis visualization techniques provide insight relevant traffic dynamics ultimately bandwidth process abet attempting measure infer availability open lab-based environments deploy rise successfully recent studies openly external researchers calibration abets concern regard ability conduct tests representative traffic conditions lab environment tools addressed problem extent calibration measurements analysis interactions abet measurement probe packets cross traffic routers end-toend path occurs time scales typically range tens hundreds microseconds gain insight abet behavior capture time-synchronized packet headers interaction probes cross traffic congested queue measurements compare packet streams intended abet differ stream produced arrival measurements construct true measure time interval standard judge abet analyze probe arrival ingress departure egress measurements scatter phase plot representation construct phase plot time delay consecutive probe packets arrive router ingress spacing dimension plot spacing packets exit router egress spacing dimension measurements possibilities ratio spacing remained unchangedbytherouter ifsr thenotherpacketsenqueued packets causing expansion packet delayed queue diminished time packet arrives causing compression figure depicts phase plots abet calibration ingress dimension plot reveal differences spacings intended abet spacings produced ability assess bias introduced measurement process imprecise commodity hardware operating systems egress dimension plot shows spacings inferences made receiver interaction cross traffic differ spacings measured receiver note abets make inferences directly spacings pathload play key role egress spacing spacings range pair stream range pair stream spacings interaction cross traffic ingress spacing spacing intended abet produced abet figure application phase plots bandwidth estimation tool analysis calibration additional cross traffic experiment traffic generator hosts cisco cisco probe sender traffic generator hosts additional cross traffic experiment traffic generator hosts traffic generator hosts probe receiver abcd identifier hop propagation delay emulator milliseconds direction adtech cisco cisco cisco dag measurement system cisco cisco cisco figure experimental testbed abet infers spacings enable calibration inference method providing baseline calibrating receiving host calibration experiments objective calibration study pathload spruce examine tools number increasingly complex traffic path conditions understand work work poorly experiment evaluate tool ability report range tight link capacity threshold chosen arbitrary point sense threshold typically chosen based specific requirements target application required estimates consistently window accuracy series estimates reported abet duration experiment property consistent accuracy abets applications re-optimization overlay network testbed setup dumbbell-like topology ocnarrow link depicted figure total setups including traffic scenarios constant bit-rate cbr traffic udp traffic uniformly spaced byte packets long-lived tcp flows single direction long-lived tcp flows direction variants setup web-like traffic file sizes drawn heavy-tailed distribution produce self-similar traffic cases direction interest left figure cbr single direction long-lived tcp connections web-like traffic traveled left cross traffic generated hosts running harpoon web-like traffic iperf infinite source constant bit-rate traffic adtech sxhardware propagation delay emulator configured add delay milliseconds direction experiments considered topological setups topology narrow tight link homogeneous rtt probe traffic configured cross link directly connecting routers hops cross traffic routed link cbr longlived tcp connection traffic crossed cisco hop web traffic configured cisco cisco hop direct link hop decision route probe traffic direction hop hop caused tight link narrow link identicalinthecbr long-livedtcpsource andbasicweblike traffic scenarios web-like cross traffic setup configured harpoon produce average topology narrow tight link homogeneous rtt web-like cross traffic configured cross traffic link experiment configured cross traffic sources produce approximately traffic oclink hops causing fast ethernet link narrow link octo tight link topology narrow tight link heterogeneous rtt web-like cross traffic configured linux traffic generation hosts netpath emulate round-trip times milliseconds attached additional hosts hops generate cross traffic traveled links hops sharing link probe traffic oclink hops critical calibration methodology ability high accuracy measurements test environment attached optical splitters endace dag packet capture cards affording timestamping acour traffic generator hosts identically configured workstations running linux freebsd workstations ghz intel pentium processors ram intel pro cards interrupt coalescence disabled system dual-homed management traffic network separate depicted figure probe traffic systems identical traffic generators ran freebsd verified experiment tool measurement interval tight link oclink curacy order single microseconds monitor links hops hops monitoring points create phase plots measure utilization tight oclink configuration gave ground truth measurements coarsegrained snmp measurements prior situ studies abets abet calibration comparison calibration framework directs evaluation process begin assessing capabilities end hosts running abets sources potential bias introduced end hosts include context switches system capability effects network adapter interrupt coalescence interest untangling details source host system bias understanding impact experiments considered topology collected traces single pathload fleet probe packets bytes series spruce runs packet pairs packet length bytes constant bit rate cross traffic flowing narrow link test host systems emitted packets bias expect ingress spacings tools tightly clustered intended microseconds phase plots experiments shown figure immediately expose potential sources measurement bias easy abet wide range interpacket spacings ingress attributed sending host evident effect cbr cross traffic respacing probe packets egress back-to-back microseconds pathload packets microseconds spruce packets cross traffic packet interposed microseconds pathload microseconds spruce closer examination reveals packets spaced farther abet experience expansionbyacrosstrafficpacketthantobetransmittedback- to-back tight link figure perceptible shift upper cluster points similar shift exists figure finally note points diagonal line figure represent evidence compression pathload streams explore problem bias imposed probe senders collected thousand packet spacing meaas consistency calibration check captured traces endace dag cards employ higher frequency clock architectural features dag resulting phase plots consistent produced dag experiments employ dag cards quantify prevalence compression general pathload streams experience compression surements 
spruce pathload compared hops figure shows representative histogram differences spacing measured gettimeofday pathload measurements conclude magnitude individual errors significant deviation close ingress spacing relative density usec usec usec usec usec usec usec usec usec usec usec usec ingress spacing egress spacing relative density egress spacing phase plot produced pathload fleet probe packets length bytes usec usec usec usec usec ingress spacing egress spacing usec usec usec usec usec ingress spacing relative density egress spacing relative density phase plot produced spruce runs packets pairs packets length bytes figure phaseplotsofpathload andspruce streams grid lines separated microseconds plot cbr cross traffic uniform udp packets bytes shown plots bimodal output spacing distribution probe traffic target input spacing tool microseconds note slightly scale plot examined measurements receiving application pathload timestamps outgoing incoming packets gettimeofday operating system call spruce timestamps outgoing packets modified spruce pathload log timestamps gettimeofday system call incoming packets receive timestamps interrupt handler timestamps tools microsecond precision necessarily microsecond accuracy comparing timestamps measured packet receive timestamps measured dag monitor hops egress spacings fig compared applicationmeasured receive spacings obtain result similar sender figure shows representative histogram differences packet spacings measured probe receiver versus spacings measured dag monitor magnitude error smaller sender deviation close final calibration check test results unique hardware configuration attached dag gigabit ethernet monitor directly intel pro linux workstation collected additional measurements spruce histogram differences spacings measured spruce spacings measured dag shown figure deviation close packet receive errors linux system shown close table summarizes results averaged behavior probe streams intended bias individual probes significant detrimental effect operation pathload spruce abet calibration algorithmic adjustment found phase plots beneficial abet calibration study helped expose end-host limitations generating precise streams identify resulting bias studying egress spacings gain expectation receiving host measured realized compression events important summary phase plot analysis resulted observations error introduced end hosts approximately multiple measurements relationship input output probe rates invites refinements iii compression expansion indicative congestion measured path observations lead propose calibrated algorithm measuring bandwidth test quickly deviation measurements converges average packets comprise stream minimum order error threshold answer question created tool send packet streams length target spacings microseconds separate experiments ran tool topology cross traffic collect approximately packet stream send error microseconds relative frequency distribution error freebsd sender intel pro adapter dag hops receive error microseconds relative frequency distribution error freebsd receiver intel pro adapter dag hops send error microseconds relative frequency distribution error linux sender intel pro adapter dag attached directly network interface figure relative frequencies error send receive packet spacings spacings measured dag monitor measurements packets experiment packet stream counted number packets required deviation spacings measured dag monitor timestamps generated applicationtobelessthan microsecond thedistributionsshow error converges quickly packet streams length sufficient remain tradeoffs abet methodologies packet streams shorterstreams mayreduce intrusiveness tool reduce measurement latency averaging time scale reduced theoretically resulting greater measurement variance base proposed algorithm version equation erage input output spacings absolute difference compression expansion combination measurement period considered indication congestion average spacings shown individual spacings subject significant error formulation average difference input output spacings indication input rate bandwidth path analogous gin gout braceleftbig gin rin gin rin threshold parameter determine average send receive spacings input stream level spare capacity measurement path pathload algorithm finding bandwidth iterative set target send spacing minimum effectively setting maximum measurable proceed send probe stream measuring gin gout send receive hosts absolute difference average input output spacings threshold input spacing increasegtarget gin gout waitaconfigurable amount time previous step update exponentially-weighted moving average ewma withparameter withtheestimate rin report updated ewma estimate algorithm calibrated pathload implemented tool called yaz source code yaz research community evaluation experimental evaluation compared accuracy pathload spruce yaz forthe cbr long-lived tcp source experiments continuously collected estimates tool minutes discarding seconds seconds web traffic setups continuously collected estimates tool minutes discarding seconds seconds comparisons compute actual bandwidth dag monitor hops exact interval tool produces estimate experiment fraction estimates fall range tight link capacity tight link ocmb sbeforeciscohdlcoverhead thiswindow experiments yaz configured exponentially-weighted moving average setting produced minimum squared error experiments threshold parameter set equivalent rate found robust setting topologies traffic scenarios set yaz stream length packets spruce tight link capacity equation experiments web-like traffic scenario set narrow link fast ethernet default samples compute estimate pathload default parameters initial comparison yaz set stream length packets leaving number streams fleet default report midpoint pathload estimation range estimate additional details results results experiments shown figure results constant bitrate traffic topology figure show yaz pathload perform similar accuracy coming close true fewer spruce estimates acceptance range long-lived tcp traffic scenarios topology insomeways ditions due frequent traffic oscillations tight link figure plots results setup tcp flows single direction yaz estimates fully threshold pathload estimates bound spruce estimates fall acceptable range bidirectional long-lived tcp flows yaz pathload perform similarly approximately estimates falling acceptance range estimates produced spruce fall range web-like cross traffic topology experiment figure approximately estimates produced yaz acceptance range compared pathload estimates spruce estimates ran pathload setup setting stream length packets default pathload source code figure shows result experiment comparing yaz spruce results figure accuracy pathload improves results case web-like cross traffic topology shown figure setup pathload underperforms yaz spruce yaz estimates spruce estimates falling threshold pathload estimates falling range closer pathload results revealed longer average converge estimation range convergence times variable setup important calibration task omit detailed analysis sensitivity yaz parameters due space limitations midpoint estimation range general favorable pathload moving target increased convergence times led poor estimates finally figure shows results web-like cross traffic topology setup yaz estimates acceptance range compared pathload spruce lastly compare estimation latency average number probes emitted estimate number estimates produced web-like traffic scenario table summarizes results qualitatively similar traffic scenarios yaz produces estimates quickly producing estimates duration experiment pathload yaz operatein aniterative fashion wesee fromthe table yaz average requires fewer cycles arrive estimate tool parameters number iterations arrive number packets required estimate higher accuracy yaz packets roughly order magnitude spruce order magnitude fewer packets pathload pathload spruce represent tradeoff measurement accuracy overhead resultsfor yaz table summary errors packet spacings measured application send receive dag monitors values microseconds negative 
values larger spacing measured dag monitor application dag ocdag freebsd linux send error receive error send error min median max table comparison number estimates produced latency numberofpacketsemitted periteration pathload andyaz andaverage number packets emitted estimate abet web-like traffic topology estimates latency iterations pkts produced estimate seconds estimate pathload pathload spruce yaz relative error cdf yaz pathload spruce constant bit rate cross traffic topology relative error cdf yaz pathload spruce long-lived tcp sources direction left figure topology relative error cdf yaz pathload spruce long-lived tcp sources directions topology relative error cdf yaz pathload spruce web-like cross traffic produced harpoon average rate topology relative error cdf yaz pathload spruce comparison yaz pathload spruce web-like traffic pathload configured streams length topology yaz spruce curves figure relative error cdf yaz pathload spruce web-like traffic narrow link fast ethernet tight link ocas distinct physical links topology relative error cdf yaz pathload spruce web-like traffic additional points cross traffic diversity round-trip times topology figure comparison bandwidth estimation accuracy yaz pathload spruce cross traffic scenarios true bandwidth computed dag traces interval tool estimation performed dashed vertical line desired accuracy threshold summary conclusions primary objective paper highlight calibration key component design development rigorous testing bandwidth measurement tools advocate controlled laboratory experiments means partially overcoming limitations inherent standard ns-type simulations vitro-like testing fully replace experiments situ offers complete control full instrumentation repeatability critical tool calibration note laboratory setups study researchers propose framework calibration abets case study exposes potential biases inaccuracies abe due commodity systems high fidelity measurement inaccurate assumptions network system behavior traffic dynamics result observations developed calibrated pathload-like tool called yaz consistently accurate prior abets higher accuracy yaz packets roughly order magnitude spruce order magnitude fewer packets pathload pathload spruce represent tradeoff measurement accuracy overhead results yaz suggest tradeoff fundamental yaz representative type active measurement tool expected result insisting stringent calibration deter laboratory security research http isi deter emulab network emulation testbed http emulab net planetlab open platform developing deploying accessing planetary-scale services http planet-lab wisconsin advanced internet laboratory http wail wisc agarwal sommers barford scalable network path emulation proceedings ieee mascots september akella seshan shaikh empirical evaluation wide-area internet bottlenecks proceedings acm imc october carter crovella measuring bottleneck link speed packet-switched networks proceedings performance lausanne switzerland october cheng lzle cardwell savage voelker monkey monkey tool tcp tracing replaying proceedings usenix conference june donnelly data networks phd thesis waikato floyd paxson difficulties simulating internet ieee acm transactions networking august hernandez-campos smith jeffay real synthetic network traffic proceedings acm sigcomm poster session steenkiste evaluation characterization bandwidth probing techniques ieee jsac special issue internet measurement mapping modeling august jain dovrolis end-to-end bandwidth measurementmethodology dynamics andrelationwithtcp throughput proceedings acm sigcomm pittsburgh pensylvania august jin tierney system capability effects algorithms network bandwidth measurement proceedings acm sigcomm internet measurement conference october lakshiminarayanan padmanabhan padhye bandwidth estimation broadband access networks proceedings acm imc taormina sicily italy aikat jeffay smith effects active queue management web performance proceedings acm sigcomm karlsruhe germany mccanne floyd ucb lbnl vint network simulator version http isi nsnam melander bjorkman gunningberg endto-endprobingandanalysismethodforestimatingbandwidth bottlenecks proceedings global internet symposium paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france september paxson strategies sound internet measurement proceedings acm imc october prasad jain dovrolis effects interrupt coalescence network measurements proceedings pam april riberio riedi baraniuk navratil cottrell pathchirp efficient bandwidth estimation network paths proceedings passive active measurement workshop shriram murray hyun brownlee broido fomenkov claffy comparison public end-toend bandwidth estimation tools high-speed links proceedings pam sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference sommers barford andw willinger aproposedframework calibration bandwidth estimation tools extended version technical report computer sciences department wisconsin-madison sommers barford willinger splat visualizationtooformininginternetmeasurements inproceedings passive active measurement conference strauss katabi andf kaashoek ameasurementstudy bandwidth estimation tools proceedings acm imc miami florida october tirumala qin dugan ferguson gibbs iperf tcp udp bandwidth measurement tool http dast nlanr net projects iperf 
scalable network path emulation shilpi agarwal joel sommers paul barford wisconsin-madison shilpi jsommers wisc abstract laboratory-based experimentation increasingly popular method conducting network research enables implementations network systems protocols evaluated research conducted lab-based environments requires faithful reproduction wide area network conditions important step satisfying requirement creation paths nodes lab characteristics paths nodes internet paper describe evaluate highly scalable software-based path emulation tool called netpath describe design implementation netpath features fixed probabilistic packet propagation delay emulation probabilistic bit errors probabilistic packet loss packet duplication packet reordering capability series controlled laboratory experiments demonstrate netpath offers times loss-free throughput capacity popular software-based path network emulators show moderate load netpath propagation delay emulation precision hardware-based emulator result represents significant improvement software-based emulators illustrate relative hardware-based netpath improves application traffic behavior software-based emulators finally demonstrate characterize netpath ability provide path emulation simultaneously multiple physical links capability facilitated link configuration tool enables laboratory system resources efficiently utilized introduction important challenge networking distributed systems research communities development innovative testbed environments enable technologies evaluated accurately primary purposes testbed environments create spectrum realistic conditions found operational networks past years developed scalable flexible offer greater realism traditional analytic modeling simulation tools ronments roughly divided categories type testbed setting situ infrastructures consists managed host systems distributed internet examples include planetlab ron testbed ways follow tradition nimi widely deployed measurement infrastructures environments provide highly realistic network conditions hosts deployed internet ideal addressing questions internet structure behavior inherent lack ability reproduce conditions experiments limits utility category testbed environments include based laboratories canonical emulab testbed utah features large set commodity workstations flexibly configured conduct wide variety experiments environments offer capabilities end-to-end node configuration complete instrumentation repeatability creating conditions representative wide area networks continues significant challenge factors contribute creating realistic wide area network conditions network research laboratory argue accurate emulation link characteristics important challenging define link emulation task recreating conditions experienced packets single link physically virtually connecting nodes network link emulation primarily focused impact layers network protocol stack lab environment means emulation properties propagation delay speed light delay bit due physical distance nodes modeled constant delay bit bit errors caused noise factors physical path nodes modeled probabilistic change state bit link emulation capability importance experiments topological configurations meant recreate specific wide area network cases nodes configured act routers end hosts lab infrastructure emulate desired link characteristics nodes experimental configurations attempt instantiate specific topologies desirable emulate network path characteristics hosts define path emulation task recreating physical conditions experienced packets end-to-end path hosts network path emulation superset link emulation includes properties packet latency aggregate signaling delay caused network interface cards propagation delay caused physical distance hosts queuing delays caused routers path sum delays modeled probabilistic delay packet packetlossis drop packet due full bottleneck queue path hosts modeled probabilistic event packet duplication modeled probabilistic cloning packet path hosts packet reordering shuffles packets order event path emulation differs network emulation attempts subject packet delay bandwidth loss characteristics target topology path emulation notion core network topology ambitious objectives path emulation attempt emulate router characteristics statistical multiplexing queuing switching capabilities characteristics vary widely internet depending specific hardware implementations path emulation targets basic packet variability multiple-hop wide-area connections hosts finally mimicking link capacity listed distinct feature network emulators distinct component path emulation essence capacity limitation add latency bit equal inverse rate experiments requiring links capacities accommodated propagation delay mechanism current methods path emulation basic task path emulation abstracted ability flexibly buffer packets transmitted nodes buffering enables delays assigned individual packets packets buffered duplicated reordered dropped years software-based systems developed commodity hardware general objective providing functions systems differs terms emulation objective performance meant deployed experimental environments approaches link path emulation extreme method implementing propagation delays large spools cable effect specific delays systems approach obvious drawbacks accurate delays commercial labs approach specialized hardware developed purpose delay emulation offered spirent communications systems provide precise link delays probabilistic bit errors probabilistic packet loss common approach link path emulation general purpose computing hardware run link path emulation software widely-used softwarebased link path emulation tools dummynet nist net dummynet in-kernel network emulation system run end hosts running applications dedicated system interposed lab nist net kernel-based emulation interposed dummynet network emulators including nist net developed high level design objective network-in-a-box overly ambitious objective reasons software-based emulators dummynet nist net offer features cost effective provide high level accuracy performance broad range scenarios approach path emulation paper describe netpath network path emulation system designed provide performance approaching hardware-based solutions capabilities software-based systems netpath offers ability add fixed probabilistic packet delay probabilistic packet loss probabilistic packet duplication packet reordering links network netpath implementation based click modular router platform click extensible high performance packet click offers basic capabilities required path emulation making natural platform work primary challenge netpath development create reliable high capacity queuing system significantly extends basic packet buffering capabilities click extended click seamlessly efficiently utilize ram disk resources netpath host system briefly describe vict virtual interposition configuration tool configuration tool developed netpath easily variety testbed setups objectives evaluation netpath demonstrate raw performance capabilities perspectives precision throughput scalability compare capabilities dummynet nist net modelnet results show queuing module yields high throughput rates supports orders magnitude longer emulated delays packet loss versus standard click queue show moderate traffic load netpath delay emulation precision consistently hardwarebased emulator comparative analysis shows netpath offers times loss free throughput capacity orders magnitude delay precision software-based emulators demonstrate netpath improves application traffic behavior software-based emulators relative hardware-based finally investigate scalability netpath multiple link configurations implications key implications work ability netpath provide higher throughput precision software-based network emulation systems means evaluation delay sensitive protocols systems conducted realistic conditions scalability netpath ability accommodate high-throughput multi-link configurations means resources research labs efficiently automated network configuration capability offered vict enable netpath widely variety laboratory environments netpath freely download evaluation architecture implementation section describe design objectives general architecture netpath describe implementation details netpath including specific challenges faced development briefly describe configuration tool vict architecture network laboratory testbeds thousands individual links network interfaces routers switches end hosts project framed context balancing desire testbed operators limited number commodity host systems path emulation researchers accurately create range 
network path conditions design objectives netpath create system offer high precision link path emulation capability operate effectively network links operate effectively multiple network links time practical considerations related netpath lab environments led extending design objectives include ability easily configure vlans mpls paths deflect packets specific links node running netpath netpath implementation path emulation defined implies packet processing system basis implementation functionality chose click modular router open source platform building packet switching system runs commodity hardware click offers key features make natural choice netpath click high performance packet switching capabilities due kernel-based implementation ability operate polling interrupt mode respect network interface card nic click designed extensibility clickbased systems consist primitive elements arranged perform desired function click distribution library elements extended functionality click designed easily configured declarative language defines inter-element connectivity configuration language supports higher level abstractions definitions compound elements basic link emulation basic link emulation consists read packets nic delay queue fixed interval send network interface ensuring headed proper destination functions require selection click elements illustrated figure good performance element system polldevice polls nic reads timestamps packets arrive deferring discussion classify stridescheduler elements step delay packets function implemented queue delay elements queue simple fifo required interarrival time packets developed netpath pre distribution click queue delay queue delay changetag changetag todevice device classify stridescheduler poll figure click elements basic multiple link emulation lighter elements modified extended netpath delayisasinglepacket buffer empty pulls packets head queue computes elapsed time packet arrival holds desired delay setting definition link emulation includes ability random bit errors packets enabled user function included delay element toggling bit packet payload based sampling precomputed table uniformly generated random numbers final step basic link emulation place packet network interface proper addressing information changetag element takes packet delay encapsulates addressing information sends final element todevice accepts packets changetag responsible sending nic emulation multiple links addition elements related basic link emulation figure includes classify stridescheduler elements design requirements flexible efficient host systems implies ability assign delays packets based source destination addresses port information classify pulls packets polldevice based addressing information passes queue stridescheduler multiplexes packets link emulation paths sends todevice element click distribution includes basic elements changetag delay required minor modification enable probabilistic bit errors changetag element insures outgoing packets emulator correctly forwarded primary consideration developing changetag netpath easily physical configurations direct interposition hosts network interface cards netpath host hub switch router virtual interposition hosts switched routed environments developed changetag element operate link layer protocol stack facilitate packet routing netpath virtual local area networks vlans case switched links multiprotocol label switching mpls case routed links configuration required vlans mpls routes switches routers hand developed vict facilitate task high performance enhanced buffers click platform enabled bootstrap development effort performance basic elements fell short design objectives larger delays basic queue element quickly overflows packets lost eliminating bottlenecks extension unwanted packet loss maintaining precise control packets passing netpath primary challenges project comparing netpath emulators found vulnerable unwanted loss loss metrics comparison ify basic queue element queue implemented queue packet pointers restricted maximum packets implementation consists array circular queues queue maximum size due kernel restrictions memory allocation implementation users desired quantity size queue total amount ram host modification important positive impact performance scalability system limited ram greater scalability created seamless buffering mechanism couples queue storage allocated disk created diskqueue element allocate manage auxiliary queues disk queue ram fills diskqueue enables subsequent packets written queue disk space recovered ram queue diskqueue shifts packets auxiliary queue ram queue challenges developing element keeping track boundaries packets written disk efficiently interacting virtual memory system host tasks writing reading auxiliary queues managed single thread configurable thresholds determine quantity data transfer ram disk tasks execute tasks preempted depending traffic conditions lead packet loss thresholds selected based netpath configuration host capabilities expected traffic load queue management disks ensemble diskqueue queue enhances scalabilityofnetpath mance degradation address problem enhanced diskqueue advantage host system disk drives approach begin writing disk read request arrives subsequent write requests directed diskb reads exhausted data previously written disk reading switches disk writing switches back disk wecallthis opportunistic disk queue management simple algorithm reduces amount seek time disk heads show increases performance caveat algorithm necessarily path emulation features netpath configuration standard click elements modified queuing capabilities implement basic link emulation functions scalably good performance additions required meet objectives path emulation specifically addition applying fixed constant delays packets wanted ability probabilistically delay drop duplicate reorder packets dropping duplication simple matter making uniformly distributed random numbers distributions uniform trivially added netpath probabilistic delay values assigned precomputed table distributed random numbers user standard deviation subtle problem implementation head-of-the-line blocking occur queues packet arrival processes asfuture work problem probabilistic reordering packets depends packet arrival process requires create customized combination queue delay elements combined element makes reordering decision multiple packets enqueued reordering decision made based sampling uniform random number table packet queue serviced complex reorderings scope work vict implementation netpath path emulation multiple links configure setups routed switched environments developed vict implement netpath virtual interposition employ vlan tagging switched environments mpls tagging routed environments vlan tags bit fields identifying virtual lan membership information similarly mpls tags -bit virtual circuit identifiers vlan mpls tags mac addresses lab systems netpath vict netpath multiple links environmentsthatdonotsupportvlansormpls protocols commonly network systems today tools widely applicable vict implementation lines perl supports cisco ios configuration language future work intend modify expand vict support vendors performance evaluation objectives evaluating netpath assess raw performance characteristics compare performance similar tools verified probabilisticbiterrors loss netpath correctness present results scribed focus evaluation efforts throughput scalability precision properties netpath discussed primary limitations path network emulation systems ability handle high traffic loads dropping packets simply raw performance function load loss-free performance function load primary evaluation metrics experimental testbeds basic experimental testbed shown figure consisted commodity workstation cisco switch spirent traffic generator workstation contained ghz intel pentium main memory bit mhz pci bus intel pro gigabit ethernet adapters ran linux kernel host configured disk drives ide dma atainterfaces spirent precise traffic stream generation measurement capability system configured ocmb gigabit ethernet interfaces noted ports synchronized clock traffic source sink measure propagation delays precision 
order single microseconds noted traffic test constant rate stream nics intel device driver set txdescriptors maximum ethernet gigabit ethernet spirent cisco netpath gigabit basic setup constant rate udp streams produced redirected netpath cisco switch netpath processing packets returned propagation delays loss rates measured harpoon servers harpoon gege cisco gsrcisco cisco cisco gsr adtech delay emulator netpath nist net dummynet clients extended setup evaluating application traffic performance path emulation systems generated self-similar web-like tcp flows harpoon traffic generator dumbbell-like topology figure experimental testbeds evaluate netpath packet size bytes maximum loss free forwarding rate kpps pci bus bits mhz pci bus bits mhz figure netpath throughput function packet size host pci bus configurations offered packet rate kpps maximum propagation delay milliseconds bigqueue queue figure maximum propagation delays standard click queue elementcomparedwiththeen- hanced bigqueue element packet size bytes packet loss rate odqm diskqueue bigqueue queue figure packet loss rates queue implementations offered loads fixed varying packet sizes link capacity byte udp packets extended testbed shown figure evaluating application traffic performance consisted dumbbell-like topology bottleneck oclink cisco gsrs cisco aggregate end host traffic divert packets path emulation host testing protocol experimentsconsistedofgeneratingtrafficstreamsandtaking measurements period minutes netpath raw performance characteristic performance netpath evaluating throughput terms maximum loss-free packet forwarding rate mlffr mlffr maximum rate loss measured received packet stream entire duration experiment focus experiment measuring mlffr netpath packets lengths discussed throughput click limited hardware components cpu pci bus network adapter issue evaluated throughput performance workstations differed pci bus configuration bits wide running mhz shown figure netpath sustain mlffr minimum sized packets mhz configuration higher rate mhz pci system suggests pci bus bandwidth plays important role limiting throughput evaluated modifications queue element experiments tested instances queue base element provided standard click distribution refer queue extension enabling ram refer bigqueue extension enabling auxiliary queues disk refer diskqueue extension enabling auxiliary queues disks refer opportunistic disk queue management odqm begin showing maximum propagation delay realized link packet loss input rates figure bigqueue enables order magnitude longer delays queue typical transcontinental propagation delays internet order milliseconds bigqueue capable providing capacity high throughput fact cpu utilization due polling makes difficult bottleneck analysis links show propagation delays highly precise diskqueue odqm created enhance netpath scalability applications large propagation delay emulation capacity emulation evaluated capabilities systems fixing incoming traffic rate configuring netpath emulate capacity experiment tests run minutes considered exceptionally long burst internet figure show packet loss rates packet streams size packets queue element implementations experimented packet sizes click allocates memory based packets received effective allocation rate amount space allocated packet size increases figure shows basic queue application bigqueue packets lost overflow diskqueue enhances performance odqm achieves times throughput diskqueue packet loss occurs diskqueue odqm due buffer overflows nic due overhead read write tasks implementations occasionally block polling task implication result auxiliary queues created thediskqueueelement enable bursty traffic common internet handled effectively explained implementation probabilistic delays normal distribution based user standard deviation demonstrate netpath ability create delays follow distributional characteristics figures figures show cumulative distribution function generated delays compare measured distribution considered configurations delay milliseconds standard deviation milliseconds variable delays standard deviation microseconds stable delays test run offered loads kpps kpps figure variability increases measured delay shifted milliseconds kpps milliseconds packetrate kpps ing distributional difference delay values measured delay values depend packet inter-arrival times variability delay result current functionality probabilistic delays adequate applications typical arrival times longer typical delay times design goals netpath support emulation multiple point-to-point links time netpath design enables multiple queue-delaychangetag sequences operational single host table comparison delay precision netpath versus adtech sxhardware- based emulator values delay standard deviation delivered system millisec offered load netpath adtech sxkpps packets exiting element sequences subject stridescheduler element prior arrival todevice element increasing number links increases classifying overhead scheduling overhead affect cumulative forwarding rate precision system figure demonstrates effects experiment increased offered packet rate evenly links packet loss occurred link increasing number links ten results reduction forwarding rate result netpath effectively simultaneous path emulation multiple links long inputrateforallpathsislessthanabout ofthemaximum throughput rate link important implication highly scalable system reduction number hosts required path emulation laboratory testbed figure illustrates number systems required link case network research labs today compared assigning multiple links netpath host offered loads substantial savings comparative performance comparative performance test netpath considers capability generating high precision delays compared hardware-based emulator adtech sxour sxwas configured ocinter- faces enabling physically interposed nodes ocports axfor traffic generation measurement sxwe configured system fixed delay milliseconds experiments measured delays packets passing system offered packet rates period minutes ran series tests netpath configuration shown figure table shows netpath delay sxmean delay table shows netpath delay higher sxdue delay milliseconds cumulative fraction generated delay measured delay kpps measured delay kpps generated delay millisec standard deviation millisec delay milliseconds cumulative fraction generated delay measured delay kpps measured delay kpps generated delay millisec standard deviation microsec figure probabilistic delays produced netpath offered loads generated delays millisec standard deviations millisec left microsec links loss free ardin rate kpps maximum loss-free forwarding rate netpath host multiple links offered load spread evenly links number links number systems netpath kpps netpath kpps netpath kpps host link number host systems required netpath maximum link loads one-host-per-link line shown approach network testbeds today figure scalability netpath multiple links configured inherent overhead software-based systems table low variability delays generated netpath implication results input rates approach maximum lossfree forwarding rate netpath precise delays approaching dedicated systems sxnext compare performance netpath widely-used software-based network emulation tools including nist net dummynet modelnet assessment performance considers throughput precision tool series identical experiments experiment measures software-based emulator performance variety input rates byte udp packets configured tool provide modest millisecond delay single link experiment host system netpath configured nist net verson separate partition installed freebsd version dummynet modelnet version freebsd system set system clock rate khz set nmbcluster dummynet modelnet documentation figure shows standard deviation measured delays netpath nist net dummynet modelnet table selected values experiments results nist net delay precision fairly accurate kpps deviation target delay begins increase degradation threshold attributed interrupt driven implementation nist net similar nist net dummynet shows good performance kpps 
performance degrades dramatically modelnet performance software-based emulators kpps kpps unable response point comparison delay precision variability delays table provide precise delays links heavy load netpath stable range conditions delay distribution metric comparing software-based emulators incomplete notion loss-free forwarding figure shows packet loss characteristics tool function oftable delay precision emulation systems range offered loads incoming packets values delay standard deviation delivered system millisec offered load netpath nist net dummynet modelnet kpps -failurefered load netpath drop packets entire range dummynet modelnet begin drop kpps nist net kpps implications great negative impact types experiments final point comparison looked effects application traffic netpath nist net dummynet testbed shown figure configured path emulation system introduce millisecond round-trip time propagation delay harpoon traffic generator create self-similar web-like tcp traffic range bit packet rates approximately kpps kpps harpoon clients measured response times time initial syn data response packet server captured packet headers bottleneck link endace dag card measured packet drops bottleneck queue addition software emulators ran experiments adtech sxto obtain hardware-based point experiments run minutes figure shows distribution response times measured harpoon clients lowest offered load kpps response times shown relative sxreference response times nist net average slower sxand variable nist net drops packets experiment causing retransmissions shift response times dummynet response times closer point nist net high variance tails distribution dummynet drops fewer packets nist net experiment variable delays netpathdeliversresponsetimesthatarequiteclosetothehard- ware point low variability higher data rates netpath delivers performance similar shown figure systems degrade appears realistic packet arrival process presented harpoon elicits perthe bump nist net curve caused interrupt coalescence formance system constant-bit rate streams netpath exhibits behavior identical sxunder cbr traffic performs differentlyunderthissetup netpath sperformanceisfar superior nist net dummynet future work intend examine netpath behavior closely improve performance conclusions experiments conducted laboratory-based network research testbed require capability recreate characteristics wide area internet paths accurately paper design implementation netpath precisepathemulation capabilities netpath based click modular router platform developed significantly extending capabilities basic elements offered click software enable main memory netpath provide auxiliary queuing capability disk greatly improve scalability system evaluation performance netpath considers throughput ability generate precise delays scalability show netpath precise path emulation high throughput links softwarebased system netpath throughput precision capabilities softwarebased network emulators approach expensive hardware-based system show netpath effectively multiplexed provide path emulation links simultaneously acknowledgements authors vinod yegneswaran remzi arpacidusseau muthian sivathanu helpful discussions authors spirent communications cisco systems support work supported grants intel research nsf grants aniand anireferences deter testbed http isi deter spirent communications http spirentcom adams mahdavi mathis paxson creating scalable architecture internet measurement ieee network allman caldwell ostermann ohionetworkemulator technicalreporttrohio offered packet rate kpps delay milliseconds netpath nist net dummynet modelnet figure delay precision netpath nist net dummynet modelnet configured delay millisec lines curve represent standard deviation offered packet rate kpps packet loss percentage netpath nist net dummynet modelnet figure comparison packet loss characteristics netpath versus popular software-based emulators offered packet rates cumulative fraction netpath nist net dummynet figure distribution response times time initial syn data response packet web-like tcp traffic netpath nist net dummynet response times relative adtech sxd anderson balakrishnan kaashoek morris resilientoverlaynetworks inproceedingsofthe thacm sosp banff canada october banga mogul druschel scalable expliciteventdeliverymechanismforunix inproceedings usenix annula technical conference monterey june barford landweber bench style network research internet instance laboratory computer communications review october bavier bowman chun culler karlin muir peterson roscoe spalink wawrzoniak operating systems support planetary-scale networkservices infirst symposiumon network systems design implementation nsdi san francisco march braden gerla kurose lepreau rao turner report nsf workshop network research testbeds http www-net umass testbed-workshop october bradford simmonds unger parallel discrete event network emulator proceedings ieee mascots brakmo peterson experiences network simulation proceedings acm sigmetrics philadelphia june carson santay nist net linux-based network emulation tool acm computer communications review july committee research horizons networking fence networks neighbor view networking research national academy press washington fall network emulation vint simulator proceedings fourth ieee symposium computers communication red sea egypt july floyd kohler internet research models proceedings hotnetsi princeton october floyd paxson difficulties simulating internet acm transactions networking august kohler morris chen jannotti kaashoek click modular router acm transactions computer systems august aikat jeffey smith effects active queue management web performance proceedings acm sigcomm karlsruhe germany august leland taqqu willinger wilson self-similar nature ethernet traffic extended version ieee acm transactions networking pages nahum rosu seshan andj almeida theeffects proceedings acm sigmetrics cambridge june rizzo dummynet simple approach evaluation network protocols acm computer communications review january sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference vahdat yocum walsh mahadevan kostic chase andd becker scale network emulator proceedings symposium operating systems design implementation osdi boston december white lepreau stoller ricci guruprasad newbold hibler barb joglekar integrated experimental environment distributed systems networks proceedings symposium operating systems design implementation osdi boston december 
machine learning approach tcp throughput prediction mariyam mirza joel sommers paul barford xiaojin zhu computer science department wisconsin-madison mirza jsommers jerryzhu wisc abstract tcp throughput prediction important capability wide area overlay multi-homed networks multiple paths exist data sources receivers paper describe lightweight method tcp throughput prediction generate accurate forecasts broad range file sizes path conditions method based support vector regression modeling combination prior file transfers measurements simple path properties calibrate evaluate capabilities throughput predictor extensive set lab-based experiments ground truth established path properties highly accurate passive measurements report performance method ideal case passive path property measurements range test configurations results show bulk transfers heavy traffic tcp throughput predicted actual time representing -fold improvement accuracy prior history-based methods lab environment assess method accurate active probe measurements path properties show predictions made actual time range file sizes traffic conditions result represents approximately improvement history-based methods lower impact end-to-end paths finally implement predictor tool called pathperf test experiments conducted wide area paths results demonstrate pathperf predicts tcp throughput accurately variety paths categories subject descriptors performance systems measurement techniques general terms measurement keywords tcp throughput prediction active measurements machine learning support vector regression introduction availability multiple paths sources receivers enabled content distribution multi-homing overlay virpermission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee sigmetrics june san diego california usa copyright acm tual networks suggests ability select path data transfer common starting point problem define terms throughput achieved path end hosts sized tcp transfer case fundamental challenge develop technique accurate tcp throughput forecast arbitrary possibly highly dynamic end-to-end paths difficulties generating accurate tcp throughput predictions prior work problem largely fallen categories investigate formula-based approaches investigate history-based approaches formula-based methods suggests predict throughput mathematical expressions relate tcp sender behavior path end host properties rtt packet loss rate receive window size case measurement tools gather input data plugged formula generate prediction well-known network dynamics limited instrumentation access complicate basic task gathering timely accurate path information evolving set tcp implementations means set formula-based models maintained history-based tcp throughput prediction methods conceptually straightforward typically kind standard time series forecasting based throughput measurements derived prior file transfers gathered passively tapping link actively periodically sending file recent work show convincingly history-based methods generally accurate formula-based methods authors carefully outline conditions history-based prediction effective history-based approaches date remain inaccurate potentially heavy weight processes focused bulk transfer throughput prediction goal develop accurate lightweight tool predicting end-to-end tcp throughput arbitrary file sizes investigate hypothesis accuracy history-based predictors improved impact path reduced augmenting predictor periodic measurements simple path properties questions addressed paper include path properties combination path properties increase accuracy tcp throughput prediction minimum set file sizes required generate history-based throughput predictors arbitrary file sizes additional goals tcp throughput prediction tool make robust level shifts path properties change significantly show challenge history-based predictors include confidence predictions metric treatment prior history-based throughput predictors analytical framework study report paper based support vector regression svr powerful machine learning technique shown good empirical performance domains svr attractive properties make suited study accept multiple inputs multivariate features generate throughput prediction requirement approach svr commit parametric form unlike formula-based approaches svr models flexible based so-called non-linear kernels expressive power important reason potential accurate predictions formula-based methods svr computationally efficient makes attractive inclusion tool deployed wide area application extend basic svr predictor confidence interval estimator based assumption prediction errors distributed assumption test laboratory experiments estimation confidence intervals critical on-line prediction retraining triggered measured throughput falls confidence interval computed previous measurements begin laboratory-based experiments investigate relationship tcp throughput measurements path properties including bandwidth queuing delays packet loss lab environment enables gather highly accurate passive measurements throughput path properties develop test svr-based predictor range realistic traffic conditions initial experiments focus bulk transfers compare ground truth measurements throughput target tcp flows actual throughput predicted tcp throughput values generated multiple instances svr-based tool trained combinations path properties compare actual predicted throughput relative prediction error metric results show throughput predictions improved factor including path properties svr-based tool versus history-based predictor results show svr-based predictions actual time bulk transfers heavy traffic conditions average utilization bottleneck link interestingly find path properties provide improvement svrbased predictor including improvement predictor goal developing robust tool wide area expand core svr-based tool ways initial tests based passive traffic measurements widely internet address tested svr-based approach measurements provided badabing tool reduction accuracy active versus passive measurements resulted reduction accuracy svr-based throughput predictions bulk transfers heavy traffic conditions order significant improvement history-base estimates important note throughput prediction based training lightweight active measurements results dramatically lower network probe load prior history-based methods long-lived tcp transfers heavyweight probe-based estimates bandwidth quantify difference section experimented training data order enable predictions range file sizes bulk transfers focus prior work found training set file sizes results accurate throughput predictions wide range file sizes highlights strength svr-based approach showed level shifts path conditions pose difficulties throughput prediction suggesting adaptivity accomplish augmented basic svr predictor confidence interval estimator mechanism triggering retraining process show section technique adapt level shifts quickly maintain high accuracy paths level shifts occur combination capabilities sufficient develop active probe tool tcp throughput prediction call pathperf deployed tested wide area series experiments end-to-end paths ron testbed paths found case pathperf tcp throughput estimates actual time worst case estimates actual time improvements tools gathering path property information lead improvements throughput prediction accuracy plan investigate possibilities future work related work seminal work jacobson karels established basic mechanisms modern tcp implementations factors affect tcp throughput general include tcp implementation underlying network structure dynamics traffic sharing links path hosts steps understanding tcp behavior number studies including developed stochastic models tcp based packet loss characteristics series studies develop increasingly detailed mathematical expressions tcp throughput based modeling details tcp congestion control algorithm measurements path properties predictor relies measurement path properties svr-based approach completely distinguished prior formula-based models large number empirical studies tcp file transfer throughput behavior provided valuable insight tcp performance paxson conducted comprehensive studies tcp behavior work exposed plethora 
issues provided empirical data characteristics packet delay queuing loss tcp file transfers barford crovella application critical path analysis tcp file transfers detailed perspective delay queuing loss relate tcp performance balakrishnan studied throughput perspective large web server showed varied depending end-host time day characteristics finally detailed studies throughput variability time correlations throughput flow size found studies inform work terms basic characteristics throughput considered building predictor past studies history-based methods tcp throughput prediction based standard time series forecasting methods vazhkudia compare simple forecasting methods estimate tcp throughput transfers large files find similar performance predictors wellknown system throughput prediction network weather service system makes bulk transfer forecasts attemptpathperf openly http wail wisc waildownload ing correlate measurements prior large tcp file transfers periodic small tcp file transfers referred bandwidth probes dualpats system tcp throughput prediction system makes throughput estimates based exponentially weighted moving average larger size bandwidth probes total similar work found prediction errors generally normal distribution mentioned earlier extensively studied history-based predictors time series forecasts svrbased method includes information prior transfers training requires measurements lightweight probes generalized files sizes bulk transfers techniques developed measure path properties caida excellent summary page examples prior work path property measurement directs selection lightweight probe tools collect data predictor recent studies focused measuring bandwidth path defined informally minimum unused capacity end-to-end path conceptually appealing property respect throughput prediction number studies techniques measuring including investigate ability measurement path properties enhance tcp throughput predictions finally machine learning techniques widely applied network measurement notable exception network intrusion detection application support vector regression problem address structure predict round trip time latency multivariate machine learning tool main hypothesis work history-based tcp throughput prediction improved incorporating measurements end-to-end path properties task throughput prediction formulated regression problem predicting real-valued number based multiple real-valued input features file transfer represented feature vector dimension dimension observed feature file size proximal measurements path properties queuing delay loss bandwidth predict throughput achieved training regression function mapsto applying function trained training data historical file transfers features measured throughput analytical framework apply problem support vector regression svr state-of-the-art machine learning tool multivariate regression svr regression version popular support vector machines solid theoretical foundation favored practice good empirical performance briefly describe svr refer readers details svr software package understand svr start linear regression function assume training set file transfers training involves estimating d-dimensional weight vector offset close truth training examples ways measure closeness traditional measure svr insensitive loss defined braceleftbigg loss function measures absolute error prediction truth tolerance applicationdependent general experiments set loss functions squared loss give similar performance explored paper estimate parameters minimize loss training set large compared number training examples fit training data perfectly dangerous truth training data random fluctuations partly fitting noise generalize poorly causing bad predictions future test data phenomenon overfitting prevent overfitting reduce degree freedom selecting subset features reducing implicit convenient alternative require smooth defined small parameter norm bardbl bardbl combining loss smoothness estimate parameters solving optimization problem min bardbl bardbl weight parameter balance terms selected procedure called cross-validation training set randomly split parts regression functions trained part performance measured part finally selects performance experiments cross-validation optimization problem solved quadratic program nonetheless linear function fairly restrictive describe true function standard mathematical trick augment feature vector non-linear bases derived augment linear regressor augmented feature space produces non-linear fit original feature space note dimensions dimensions expressive extreme beneficial case infinite dimensions computationally impossible estimate infinite-dimensional parameter convert primal optimization problem dual form show number dual parameters dimension dual problem augmented feature explicitly product pairs augmented features function kernel computed original feature vectors instance radial basis function rbf kernel expparenleftbig bardblx bardbl parenrightbig implicitly corresponds infinite dimensional feature space experiments rbf kernel selected cross-validation dual problem efficiently solved quadratic program svr works training collects training set specifies kernel svr solves dual optimization problem equivalently finds potentially high-dimensional parameter augmented feature space defined produces potentially coefficients polynomial function function tend smooth slowly bardbl bardbl small noisy bardbl bardbl large highly non-linear prediction function function applied arbitrary test cases produces prediction case test cases file size prediction made current path properties based active measurements experimental environment methodology section describes laboratory environment experimental procedure evaluate throughput predictor experimental environment laboratory testbed experiments shown figure consisted commodity end hosts connected dumbbelllike topology cisco gsr routers measurement background traffic generated received end hosts traffic flowed sending hosts separate paths gigabit ethernet separate cisco gsrs hop figure forwarded links configuration created order accommodate precision passive measurement system describe traffic links multiplexed single link hop figure formed bottleneck congestion place adtech sxhardware-based propagation delay emulator link add milliseconds delay direction experiments configured bottleneck queue hold approximately milliseconds packets packets exited link cisco gsr hop figure passed receiving hosts gigabit ethernet measurement hosts traffic generation hosts identically configured workstations running freebsd workstations ghz intel pentium processors ram intel pro network cards dual-homed management traffic separate network depicted figure disabled tcp throughput history caching feature freebsd controlled variable net inet tcp inflight enable tcp throughput determined current path properties throughput history key aspect testbed measurement system establish true path properties evaluation optical splitters attached ingress egress links hop endace dag passive monitoring cards capture traces packets entering leaving bottleneck node comparing packet headers identify packets lost congested output queue experiments accurately measure bandwidth congested link fact measurements packets entering leaving hop synchronized fine granularity single microsecond enabled precisely measure queuing delays congested router experimental protocol generated background traffic running harpoon traffic generator pairs traffic generation hosts illustrated figure harpoon produced open-loop self-similar traffic heavy-tailed file size distribution mimicking mix application traffic web peer-to-peer applications common today internet harpoon configured produce average offered loads ranging approximately bottleneck link hops measurement traffic testbed consisted file transfers active measurements queuing delay packet loss bandwidth measurement traffic hosts set tcp receive window size receive window limited transfers file transfer throughput approximately bandwidth bottleneck link flow receive window rwnd limited congestion window cwnd limited experimented rwndand cwnd-limited scenarios active measurements bandwidth queuing loss yaz badabing tools yaz estimates end-to-end bandwidth lowoverhead iterative method similar pathload probe process iterative time produce estimate vary seconds tens seconds 
badabing reports characteristics loss episodes frequency loss episodes duration loss episodes lightweight probe process probe probability parameter parameters set rest paper refer loss characteristics combined loss badabing requires sender receiver time-synchronized accommodate wide area experiments badabing receiver modified reflect probes back sender timestamped logged original receiver sender clock probe timestamps badabing measure loss characteristics accurate loss characteristics measurement tool accurate loss rate measurement tools future loss rate replace frequency duration loss characteristic prediction mechanism measurement collection protocol consisted run badabing seconds run yaz obtain estimate bandwidth transfer file remainder paper refer series steps single experiment number consecutive experiments series experiments wide area omit bandwidth measurement individual experiments series separated period series experiments differ background traffic series distribution file sizes transferred experiments conducted physical paths series experiments divided mutually exclusive training test sets svr svr mechanism require sets experiments form training test set consecutive contiguous time contrast history-based prediction methods generally require consecutive historical information rely standard timeseries-based forecasting models evaluation contiguous portions training test sets beginning part series training set rest test set number experiments training test sets notions separate training test data sets required history-based methods predictions made continuous notion distant recent history evaluation history-based methods final prediction training set starting point test set series experiments gather sets measurements set oracular passive measurements opm measurements file transfer obtain packet traces refer measurements oracular give essentially perfect information traffic generator hosts probe receiver adtech probe sender traffic generator hosts dag monitor host cisco cisco cisco cisco propagation delay emulator direction milliseconds cisco hopidentifier laboratory testbed cross traffic flowed routers hop probe traffic flowed optical splitters connected endace dag passive packet capture cards testbed hops hops measurement traffic file transfers loss probes bandwidth probes flowed left congestion testbed occurred hop network conditions practice information making prediction arbitrary path information establish accuracy prediction mechanism set active measurements measurements active measurement tools note unlike opm provide values actual transfer set practical passive measurements ppm trace-based measurements time purpose show accuracy prediction mechanism measurements obtained practice show accuracy active measurements perfect accuracy measurements aggregates conditions path specific single tcp flow path experiments wide area created tool pathperf tool designed run pair end hosts initiates tcp file transfers path property measurements modified version badabing produces throughput estimates svr-based method configured generate arbitrary file size transfers training testing initiates retraining level shifts identified section evaluating prediction accuracy denote actual throughput predicted throughput metric relative prediction error introduced evaluate accuracy individual throughput prediction relative prediction error defined rmin distribution absolute compare prediction methods building robust predictor section describes developed calibrated evaluated prediction mechanism extensive set tests conducted lab test-bed calibration evaluation high traffic scenario step developing svr-based throughput predictor find combination training features lead accurate predictions wide variety path conditions trained predictor feature vector test contained combination set target path measurements measured throughput refer loss frequency loss duration loss expositional ease measures features feature vector trained svr model predict throughput feature vector sets network measurements compare prediction accuracy combinations compare accuracy svr exponentially weighted moving average ewma history-based predictor report detailed results tests low utilization bottleneck link receive window bound flows low utilization scenarios variance throughput flows svr-based predictor generated accurate forecasts tests reasonable prediction method forecast throughput accurately scenario formula-based predictor based performs poorly high utilization scenarios accurate low utilization scenarios results reported generated average background traffic create high utilization bottleneck link set experiments training set experiments testing file transferred experiment initial experiments file large make slow-start insignificant factor throughput receive window size sections smaller file sizes slow-start bigger impact throughput figures show scatter plots comparing actual predicted throughput prediction methods discussed point diagonal represents perfect prediction accuracy farther point diagonal greater prediction error path measurements oracle figure shows prediction accuracy scatter plot method figures show prediction error svr oracular passive measurements opm combinations path measurements feature vector svropm-queue means queuing delay measurements train test svr-opm-ab-queue means bandwidth queuing delay measurements train test table shows relative prediction errors forecasting svm-opm-based predictions values table fraction predictions method accuracy level columns row table predictions relative prediction errors smaller svr-opm-ab predictions relative prediction errors smaller present scatter plots actual throughput predicted throughput actual throughput predicted throughput svr-opm-ab actual throughput predicted throughput svr-opm-loss actual throughput predicted throughput svr-opm-queue actual throughput predicted throughput svr-opm-ab-loss actual throughput predicted throughput svr-opm-ab-queue actual throughput predicted throughput svr-opm-loss-queue actual throughput predicted throughput svr-opm-ab-loss-queue actual throughput predicted throughput svr-ppm-loss-queue actual throughput predicted throughput svr-ppm-ab-loss-queue actual throughput predicted throughput svr-am-loss-queue actual throughput predicted throughput svr-am-ab-loss-queue comparison prediction accuracy svr-opm svr-ppm svr-am high background traffic conditions addition tabular data provide insight path properties contribute throughput prediction svr method figure predictions predictor diffusely scattered diagonal predictions low-throughput conditions tend large relative error figures show behavior svr predictor single measure path properties feature vector graphs similar trend predictions accurate points close diagonal high actual throughput values diagonal horizontal line lower values actual throughput graph opposite trend points close diagonal lower values actual throughput form horizontal line higher values actual throughput explanation trends lies fact file transfers low actual throughput experience loss file transfers high actual throughput experience loss loss occurs values path constant maximum depends amount buffering bottleneck link path case throughput depends appears good predictor loss path constants case predictive power resulting horizontal lines single predicted throughput hand loss constant predictive power predict throughput accurately figures show improvements prediction accuracy obtained path property svr feature vector combined horizontal lines graphs replaced points closer diagonal combining svr method predict accurately lossy lossless network conditions measurements serve function helping predict throughput lossless conditions observation begs question achieve prediction accuracy answer question compared ab-loss loss-queue predictions ab-loss-queue predictions figures general trend cases scatter plots horizontal line points reduced eliminated suggesting prediction non-constant-value measurements occurring lossy lossless network conditions compare ab-loss loss-queue graphs closely observe things lossless prediction case points closer diagonal loss-queue case ab-loss case loss-queue case transition prediction lossless lossy case smooth horizontal line points ab-loss case horizontal line points actual throughput range suggests accurate predictor lossless case relative prediction error data table supports svr feature vector loss-queue information predicts throughput 
actual transfers feature vector ab-loss measurements predicts accuracy level transfers finally difference accuracy qualitatively quantitatively loss-queue ab-loss-queue discussion suggests measurements required highly accurate throughput prediction combirelative accuracy history-based throughput prediction svr-based predictors types oracular passive path measurements svr-opm feature vector table values fraction predictions accuracy level relative ab-l ab-q l-q ab-l-q error relative accuracy history-based throughput prediction svr-based predictors trace-based passive path measurements ppm active path measurements table values fraction predictions accuracy level relative ppm error ab-l-q l-q ab-l-q l-q nation sufficient framework observation surprising good news prior work shown accurate measurements require moderate amounts probe traffic formula-based tcp throughput estimation schemes measurements accurate throughput prediction contrast measurements lightweight probe processes discuss measurement overhead section practical passive active path measurements considered prediction accuracy svr based oracular passive measurements opm baseline best-case accuracy svr insight svr path properties prediction table graphs figure shows predicts transfers actual svr-opm-loss-queue predicts -fold improvement practice perfect measurements path properties assess svr measurements wide area compare svr-ppm svr-am due space limitations present loss-queue ab-loss-queue results svr choose expect ab-loss-queue highest accuracy information path properties loss-queue lightweight accuracy equal ab-loss-queue svr-opm figures show predicted actual throughput svrppm figures show predicted actual throughput svr-am table presents relative prediction error data svr-ppm svr-am examine issues finding loss-queue prediction accuracy ab-loss-queue svr-opm case holds svrppm svr-am case svr-ppm svr-am accuracy svr-am accuracy compares prediction accuracy scatter plots figures qualitatively similar encouraging suggests things loss-queue similar prediction accuracy ab-loss-queue observation svr-opm holds achieve good prediction accuracy measure relative prediction error data table supports graphical observation ab-loss-queue slightly accuracy loss-queue svr-ppm svr-am svr-am accuracy similar svr-ppm active measurement tools estimate path properties yields predictions accurate ground-truth measurements data table substantiates observation similar accuracy svr-ppm predictions svr-am predictions important real wide-area internet paths instrumentation generally providing accurate passive measurements finally compare svr-am figures qualitatively similar svr-am tighter cluster points diagonal high actual throughput svr-am appears higher accuracy table shows svr-am-loss-queue predicts throughput actual accuracy time time high traffic scenarios svr-am-loss-queue practically deployable lightweight version svr-based prediction mechanism significantly outperforms prediction nature prediction error observed study throughput prediction errors approximately normal distribution authors noted normality justify standard computations confidence intervals examined distribution errors experiments found evidence suggestive normality figure shows normal quantile-quantile q-q plots svropm-loss-queue figure svr-am-loss-queue figure samples consistent normal distribution form approximately straight line graph center figures throughput prediction samples case form approximately straight lines observations consistent normality distribution prediction errors error distributions experiments consistent normal distribution shown due space limitations discuss issues retraining detecting estimation problems section evaluation prediction accuracy level-shift background traffic previous section considered svr prediction accuracy variable stationary background traffic section case shift average load background traffic configure traffic generation process cycle average offered loads traffic virtually loss path throughput bound receive window size traffic bottleneck saturated endemic loss ensues procedure run background traffic minutes theoretical quantiles sample quantiles q-q plot svr-opm-loss-queue theoretical quantiles sample quantiles q-q plot svr-am-lossqueue normal q-q plots prediction errors oracular measurements active measurements loss-queue traffic hours min repeating cycle times follow measurement protocol section collecting throughput measurements train svr predictor environment test environment column labeled opm-l-q trainlowtesthigh table shows results prediction accuracy poor predictions factor train predictor cycle test series cycles columns table opm-loss-queue am-loss-queue figure show results experiments x-axis figure time represented number file transfers completed y-axis throughput case svr-opm svr-am predict throughput high accuracy svr-opm predicts throughput actual time svr-am time comparison column table figure present results history-based predictor accuracy significantly lower svr accuracy half svr-opm figure explains level-shift background traffic predictor takes time re-adapt contrast adaptation time required svr predictor trained range expected traffic conditions issue shifts average traffic volume samples previously unseen traffic level needed adequately train predictor examine issue train predictor kinds average traffic loads step constituting minutes traffic minutes traffic resulting experiments higher traffic level step constituting minutes traffic minutes traffic resulting experiments throughput file transfer timeline actual throughput svr-am-loss-queue level shift svr-am-loss-queue throughput file transfer timeline actual throughput level shift prediction accuracy fluctuating background traffic higher traffic level call conditions svr-am-l-qand svr-am-l-qrespectively prediction accuracy schemes presented table table training schemes yield accuracy svr-am-lq trains level approximately experiments results demonstrate fairly small training sets traffic levels needed accurate prediction comparison time series plots experiments shown due space constraints insight prediction accuracy improves larger training sets svr-am-l-qand svram-l-q- periods predicted throughput virtually constant actual throughput periods shorter svr-am-l-qcompared svr-am-l-qsvr- am-l-q figure periods reason effect predictors incorporating fewer samples include broad range network conditions svr prediction mechanism yield high accuracy small set training samples samples representative range network conditions path evaluation prediction accuracy file sizes considered file transfers step experimental protocol section tcp receive window majority lifetime transfer spent tcp congestion avoidance phase goal accurate predictor range file sizes bulk transfers predicting throughput small files complicated tcp slow start phase throughput rapidly increasing file size due doubling window round-trip time packet loss transfer small file large relative impact throughput hypothesize difrelative accuracy history-based svr-based throughput predictors oracular path measurements opm active measurements predictors subjected shifts average background traffic volume relative opm-l-q opm-loss-queue am-loss-queue error trainlowtesthigh comparison relative accuracy svr-based throughput prediction active measurements numbers training samples training samples am-loss-queue samples am-l-qand samples am-l-qback- ground traffic consists shifts average traffic volume relative am-loss-queue am-l-qam-l-q- error ferent file sizes train svr predictor lead accurate forecasts broad range file sizes treated prior prediction studies conducted experiments background traffic average offered load series training sets consisting unique file sizes file sizes training sets training set consists single file size training set consists file sizes training set adds file size subsequent training sets sample range fraction transfer lifetime spent slow start covers wider range test sets experiments consist file sizes diverse set training set test file sizes drawn biased random number generator resulting file transfers exhibit wide range behavior files fully transferred slow start transfers consisting varying proportion time spent slow start versus congestion avoidance wider range small files test set predictor performs unseen difficult predict file sizes wider range large file sizes expect throughput constant window congestion limited slow start insignificant fraction transfer 
time tables present prediction accuracy training sets consisting distinct file sizes svr-opm svram graphs figure present svr-am results file sizes training set include graphs remaining training sets due space limitations similar relative accuracy svr-based predictor oracular passive measurements opm training sets consisting distinct file sizes relative distinct file sizes training error relative accuracy svr-based predictor active measurements training sets consisting distinct file sizes relative distinct file sizes training error details ron paths wide-area experiments path number node locations path rtt path amsterdam-utah path utah-maryland path maryland-utah path maryland-new york path mexico-ithaca path mexico-new york wide area results transfers relative path path path path path path error wide area results transfers relative path path path path path path error file sizes training set observation single file size training prediction error high inaccuracy expected predictor information relationship size throughput small files observation file size prediction dramatically accurate predictor successfully extrapolate handful sizes training large number sizes testing observation relative error low large file sizes high actual throughput higher small files low actual throughput consistent expectation difficult accurately predict throughput small files fourth observation small file sizes small actual throughput error over-prediction smallest file training set smallest file test set difference over-prediction errors relationship file size throughput complicated small files broader training set svr mechanism unable provide accurate prediction important final observation prediction accuracy reaches maximum file sizes training set clear trend file sizes training set feature training set number transfers constant hundred single training size hundred transfers training sizes fifty transfers fifty transfers accuracy maximum training sizes experiments trade-off capturing diversity file sizes number samples single file size alluded discussion number samples needed good prediction accuracy section words maximum accuracy occurring file sizes increase accuracy increasing number file sizes training set number samples single file size constant training set allowed size training set increase increase number file sizes training set characterization trade-off diversity file sizes number samples file size future work wide area test results evaluate svr throughput prediction method created prototype tool called pathperf generate measurements make forecasts wide area paths pathperf conduct experiments small set paths ron testbed ron nodes experiments range cpu memory configurations ran freebsd limited additional experimental load time tests conducted tests set paths table include trans-continental paths trans-atlantic path path set modest size relative diversity path characteristics round-trip times range shown measurement improve throughput prediction accuracy eliminate experimental protocol section conduct experiments target file sizes training test sets consist transfers file size experiments conducted october october tables show results tests prediction accuracy high paths file sizes cases svr predicted throughput actual throughput svr-am file size training set predicted throughput actual throughput svr-am file sizes training set predicted throughput actual throughput svr-am file sizes training set scatter plots svr-based predictor distinct file sizes training set results shown active measurements train predictor testing range file sizes prediction accuracy actual greater time cases prediction accuracy transfers similar exception path accuracy original time transfers higher time transfers found path coefficient variation actual throughput files files making prediction files difficult suggesting path conditions dynamic test measurement data showed wide area paths lightly loaded tests exhibited variation throughput file transfers process extending wide area experiment set considerably hope encounter variability paths enable refine pathperf capability finally evaluated predictor performance experiments found forecasts approximately svr expect find paths dynamic conditions svr predictor distinguish lab experiments demonstrate discussion section addresses key issues related running pathperf operational settings network load introduced pathperf traffic introduced active measurement tools concern excessive traffic skew network property measured network operators engineers generally minimize impact measurement traffic customer traffic history-based tcp throughput estimation methods specific amount traffic introduced depends measurement protocol approaches method periodically transfer fixed-size files tcp connection transfer data fixed time period approach history-based evaluation estimate overhead history-based predictor fixed-duration transfers assume tcp connection rwnd-limited fixed duration data transfer seconds throughput measurements initiated minutes throughput closely matches bandwidth assume average bandwidth duration experiment approximately minute period measurement traffic produced resulting average bandwidth case pathperf measurement overhead training period consists file transfers queuing loss probe measurements testing phase overhead consists solely loss measurements assume minute training period minute testing period assume file sizes transferred training period samples file file transfer preceeded badabing measurement probe probability badabing traffic measurement testing badabing measurements ongoing assume badabing measurement initiated minutes minute training period measurement traffic produced resulting average bandwidth minutes testing period total measurement traffic produced resulting rate pathperf produces average minute measurement period dramatically standard history-based measurement approach conservative assumptions made history-based approach differences overhead significant reason dramatic savings svr predictor trained lightweight measurements required accurate predictions detecting problems estimation important capability throughput estimation live deployments detect significant estimation errors errors indicative change network routing causing abrupt change delay loss throughput signal pathological network condition ongoing denial-of-service attack leading endemic network loss path hand simply measurement outlier network-based discussed section normality standard statistical machinery compute confidence intervals measured variance prediction error show prediction errors consistent normal distribution propose confidence intervals mechanism triggering retraining svr assume trained svr predictor measurement periods throughput samples samples assume collect additional throughput samples making predictions sample recording error error samples predicted subsequently measured confidence level calculate confidence intervals sample error distribution low frequency collect additional throughput samples test prediction error exceeds interval bounds note additional samples application traffic predictions decide retraining svr predictor danger triggering retraining policy sensitive outliers confidence interval chosen generally threshold consecutive prediction errors exceed computed confidence interval bounds trigger retraining summary future work paper address problem generate accurate tcp throughput predictions arbitrary paths internet approach powerful machine learning tool support vector regression efficient mechanism generating predictor multiple inputs investigate measurements path properties including queuing delay packet loss bandwidth prior throughput measurements feature set predictor extensive series lab-based experiments find svr predictor makes highly accurate forecasts measurements queuing loss bandwidth measurement improve predictions heavy traffic conditions svr forecasts times accurate prior predictors make series extensions svr predictor make operationally viable lab experiments show extensions enable predictor work wide range file sizes robust measurements active probe tools adapt changing path conditions created tool called 
pathperf enables test svr predictor internet initial tests ron testbed show pathperf generates highly accurate throughput predictions pathperf generates probe traffic compared predictor configured suggested prior work future work intend continue refine pathperf investigating tune training set possibly experiment machine learning tools continuing expand tests run wide area evaluate pathperf capability broader range path conditions acknowledgements david andersen providing access ron testbed ana bizzaro wail lab testbed anonymous reviewers helpful suggestions work supported part nsf grants numbers cnscns- cnsand ccrany opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf abouzeid roy azizoglu stochastic modeling tcp lossy links proceedings ieee infocom tel-aviv israel march altman avachenkov barakat stochastic model tcp stationary random loss proceedings acm sigcomm august david andersen hari balakrishnan frans kaashoek robert morris resilient overlay networks proceedings acm symposium operating systems principles sosp banff canada october arlitt krishnamurthy mogul predicting short-transfer latency tcp arcana trace-based validation proceedings acm internet measurement conference berkeley october balakrishnan seshan stemm katz analyzing stability wide-area network performance proceedings acm sigmetrics seattle june barford crovella critical path analysis tcp transactions proceedings acm sigcomm stockholm sweeden august beverly sollins berger svm learning address structure latency prediction proceedings sigcomm workshop mining network data pisa italy september cardwell savage anderson modeling tcp latency proceedings ieee infocom tel-aviv israel march cooperative association internet data analysis http caida tools goyal buerin rajan predicting tcp throughput non-invasive network sampling proceedings ieee infocom york june dovrolis ammar predictability large transfer tcp throughput proceedings acm sigcomm philadelphia august ilgun kemmerer porras state transition analysis rule-based intrusion detection approach ieee transactions software engineering march jacobson karels congestion avoidance control proceedings acm sigcomm palo alto august jain dovrolis end-to-end bandwidth measurement methodology dynamics relation tcp throughput acm ieee transactions networking august thorsten joachims making large-scale svm learning practical sch olkopf burges smola editors advances kernel methods support vector learning mit press qiao dinda bustamante characterizing predicting tcp throughput wide area network proceedings ieee international conference distributed computing systems icdcs columbus june mathis semke mahdavi ott macroscopic behavior tcp congestion avoidance algorithm computer communications review july padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation proceedings acm sigcomm vancouver canada setpember paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france september paxson measurements analysis end-to-end internet dynamics phd thesis california berkeley sch olkopf smola learning kernels mit press cambridge shriram murray hyun brownlee broido fomenkov claffy comparison public end-to-end bandwidth estimation tools high-speed links proceedings passive active measurement workshop smola sch olkopf tutorial support vector regression statistics computing sommers barford self-configuring network traffic generation proceedings acm internet measurement conference taormina italy october sommers barford duffield ron improving accuracy end-to-end packet loss measurements proceedings acm sigcomm philadelphia august sommers barford willinger proposed framework calibration bandwidth estimation tools proceedings ieee symposium computers communication iscc june strauss katabi kaashoek measurement study bandwidth tools proceedings acm internet measurement conference miami november swany wolski multivariate resource performance forecasting network weather service proceedings supercomputing baltimore november vapnik nature statistical learning theory springer york edition vazhkudai foster predicting performance wide area data transfers proceedings ieee international parallel distributed processing symposium ipdps fort lauderdale april zhang breslau paxson shenker characteristics origins internet flow rates proceedings acm sigcomm pittsburgh august zhang duffield paxson shenker constancy internet path properties proceedings internet measurement workshop san francisco october 
inside botnets paul barford vinod yegneswaran vinod wisc computer sciences department wisconsin madison abstract continued growth diversification internet accompanied increasing prevalence attacks intrusions argued significant change motivation malicious activity place past years vandalism recognition hacker community attacks intrusions financial gain shift marked growing sophistication tools methods conduct attacks escalating network security arms race thesis reactive methods network security predominant today ultimately insufficient proactive methods required approach develop foundational understanding mechanisms employed malicious software malware readily source form internet large security companies maintain detailed databases information openly aware open repository paper begin process codifying capabilities malware dissecting widely-used internet relay chat irc botnet codebases codebase classified key dimensions including botnet control mechanisms host control mechanisms propagation mechanisms exploits delivery mechanisms obfuscation deception mechanisms study reveals complexity botnet software discusses implications defense strategies based analysis introduction software malicious attacks intrusions malware evolved great deal past years evolution driven primarily desire authors black hats elude improvements network defense systems expand enhance malware capabilities evolution malcode terms variants existing tools variants agobot malware release frequent emergence completely codebases major internet worm families introduced netsky bagle mydoom sassser korgo witty cabir virus cell phones worm outbreaks dos attacks widely reported popular press evaluated extensively network security research communities threat internet today collections compromised systems controlled single person botnets existence time trace roots eggdrop bot created jeff fisher benign network management high level overviews malicious botnet history basic functionality found years botnet capability increased substantially point blurring lines traditional categories malware numerous reports botnets hundred thousand systems average size appears dropping total number estimated systems botnets today millions plausible reason rise malicious botnets basic motivations malicious activity shifting past primary motivations attacks simple potent script kiddie vandalism demonstrations programming prowess black hat community increasing number reports for-profit malicious activity including identity theft extortion backed organized crime trend economic motivation catalyze development capabilities botnet code making task securing networks threat difficult thesis work effective network security future based detailed understanding mechanisms malware high level statement represent significant departure modus operandi security industry time data sharing industry research date common argue greater openness detailed evaluations mechanisms malware required network security research community respects broadens internet center disease control vision outlined staniford advocate analysis includes static inspection malware source code dynamic profiling malware executables controlled environment argument basic feasibility approach good deal malware fact line emerging laboratory environments wail deter enable safe evaluation executables important emphasize analyses meant complement ongoing empirical measurement-based studies provide important insight malware behaves wild critical identifying instances outbreaks attacks paper presents step process codification malware mechanisms present initial breakdown major botnet source codebases including agobot sdbot spybot bot conduct analysis creating taxonomy key mechanisms describe capabilities specific instances bot family taxonomy emphasizes botnet architecture control mechanisms methods propagation attack objectives highlight richness diversity codebase identify commonalities codebases knowledge mechanisms lead development effective defense mechanisms summary findings implications finding architecture implementation botnets complex evolving common software engineering techniques modularity implication regularization botnet architecture insight potential extensibility facilitate systematic evaluation botnet code future finding predominant remote control mechanism botnets remains internet relay chat irc general includes rich set commands enabling wide range implication monitors botnet activity irc channels disruption specific channels irc servers continue effective defensive strategy time finding host control mechanisms harvesting sensitive information host systems ingenious enable data passwords mailing lists credit card numbers gathered implication results study suggests design objectives future operating systems applications deal sensitive data finding wide diversity exploits infecting target systems written botnet codebases including worms target microsoft vulnerabilities implication additional evidence keeping patches date essential informs requirements network intrusion detection prevention systems finding botnets include denial service dos attack capability implication specific dos mechanisms botnets inform designs future dos defense architectures finding shell encoding packing mechanisms enable attacks circumvent defensive systems common agobot botnet codebase includes support limited polymorphism implication significant focus methods detecting polymorphic attacks warranted time encodings continue present challenge defensive systems finding botnets include variety sophisticated mechanisms avoiding detection anti-virus software installed host system implication development methods detecting disinfecting compromised systems pace finding present limited set propagation mechanisms botnets agobot showing widest variety simple horizontal vertical scanning common mechanism implication specific propagation methods botnets form basis modeling simulating botnet propagation research studies remainder paper structured studies botnets research literature date discuss related work section section present taxonomy botnet code results evaluating instances botnet source code section summarize work comment steps related work empirical studies important sources information malicious activity time moore characterized code red worm outbreaks sapphire slammer worm outbreak providing key details propagation methods infection rates recently kumar show broad range details witty worm outbreak inferred information malware random number generator firewall intrusion detection system logs collected sites distributed internet characterize global attack activity recent studies demonstrated utility unused address space monitors honeynets include active response capability means gathering details network attacks honeynet measurement studies provided valuable information botnet activity cooke discuss potential correlating data multiple sources means detecting botnet command control traffic finally virtual honeyfarm capabilities prove botnet tracking future advocated prior section study malware gather decompose instances source code instances malware source code found searching web usenet news groups executable code executables gathered enhancing honeynet environments standard tools reverse engineering executables including disassemblers debuggers system monitors capabilities tools complexity deception techniques instances malware executables complicate analysis likewise tools static analysis source code tools focused problems identifying run time errors security vulnerabilities general information provide parse trees symbol tables call graphs valuable malware analysis present simple taxonomy malware mechanisms paper forward static dynamic analysis tools depth study future evaluation process codification malware begins comparison botnet families agobot sdbot spybot bot selected based age instances diversity design capabilities reports popular press commercial research communities identifying commonly bot families families versions variants study evaluate version source code agotbot pre-release sdbot spybot bot variants commonly listed extensions word bot bot foo evaluated bot dcom version code attributes analysis include architecture botnet control mechanisms iii host control mechanisms propagation mechanisms target exploits attack mechanisms malware delivery mechanisms obfuscation methods vii deception strategies taxonomy developed based goal improving host 
network-based defensive systems exploiting knowledge basic features botnet systems architecture architecture refers design implementation characteristics bot code architecture readily analyzed source code includes assessment organization data design interface design component design system important additional objective analysis assess potential long term viability bot family codebase extended include functionality agobot earliest agobot find october time frame hundreds variants code commonly referred phatbot arguably sophisticated best-written source code families evaluated typical source bundle lines bot consists high level components including irc-based command control mechanism large collection target exploits iii ability launch kinds dos attacks modules support shell encodings limited polymorphic obfuscations ability harvest local host paypal passwords aol keys sensitive information traffic sniffing key logging searching registry entries mechanisms defend fortify compromised systems closing back doors patching vulnerabilities disabling access anti-virus sites vii mechanisms frustrate disassembly tools softice ollydbg agobot monolithic architecture demonstrates creativity design adheres structured design software engineering principles modularity standard data structures code documentation sdbot earliest sdbot find october time frame hundreds variants code provide wide range capabilities contrast agobot sdbot fairly simple compact instance bot code written slightly lines main source tree include overtly malicious code modules target exploits dos capabilities published gpl sdbot primarily utilitarian irc-based command control system code easy extend large number patches readily provide sophisticated malicious capabilities scanning dos attacks sniffers information harvesting routines encryption routines organization facilitates generation custom botnets specialized capabilities suit specific botmaster speculate important motivation patch-style dissemination strategy diffusion accountability easily found patches sdbot web malicious spybot earliest spybot find april time frame agobot sdbot hundreds variants spybot codebase compact written lines spybot command control engine appears shared sdbot fact evolved sdbot unlike sdbot explicit attempt diffuse accountability hide malicious intent codebase version spybot evaluated includes netbios kuang netdevil kazaa exploits scanning capability modules launching flooding attacks codebase spybot efficient exhibit modularity breadth capabilities agobot bot earliest bot find april time frame present hundred variants global threat bot referred aristotles bot design simple providing limited set functions based scripting capabilities mirc widely shareware irc client windows mirc functionality writing event handlers responds commands received remote nodes bot includes hidewindow program bot hidden local system bot proved easy modify suggests designed extensibility mind bot capabilities including port scanning dos attacks exploits rpc netbios services bot scripts commonly stored file called mirc ini compromised local hosts bot packaged version mirc exe hex-edited include configuration files pieces software packaged bot include bnc pronounced bounce proxy system users bounce shells irc server providing anonymity dos protection psexec exe sysinternals utility facilitates remote process execution based limited capabilities bot appears versions generated specific malicious intent general enhancement code provide broad set capabilities suggests dcom version bot evaluated includes dcom exploit capabilities unix-style patches simply well-commented source code fragments copied inserted recompilation implications bot codebases vary size structure complexity implementation approach appears convergence set functions highlighted subsequent sections report suggests possibility defensive systems eventually effective bot families demonstrated fact variants codebase bot families extensible project years due economic motivations capabilities open availability agobot codebase dominant modular design makes easy extend anticipate future enhancements improved command control systems peer-to-peer additional target exploits open-source-like approach agobot development daunting open availability means examined elements exploited defensive systems botnet control mechanisms botnet control refers command language control protocols operate botnets remotely target systems compromised command control mechanisms bots evaluated based irc understanding system ietf rfc defines irc make sense botnet commands detailed section general broad range commands include directing botnets deny service send spam phish forward sensitive information hosts systems add botnet important reason understanding details communication mechanisms disruption render botnet useless sniffing specific commands irc traffic network operators identify compromised systems irc server operators shutdown channels botnets commonly today additionally knowledge mechanisms development large botnet monitors active honeynet systems facilitates process detecting variants control mechanisms occasionally change versions strong commonality family analyzed bodes continued focus mechanisms designing network defenses botnets agobot command control system implemented agobot derivative irc protocol compromised systems establish connections control channels standard irc command language consists standard irc commands specific commands developed bot details command language summarized table bot command set includes directives request bot perform specific function bot openwhich opens specific file host control variables conjunction cvar set command turn features manipulate fields affect modes operation ddos max threads directs bot syn flood host maximum number threads table partial listing agobot command control language variables passed parameters cvar set set command variable description bot ftrans port set bot file transfer port bot ftrans port ftp set bot file transfer port ftp chanpass irc server information channel password mainchan irc server information main channel nickprefix irc server information nickname prefix port irc server information server port server irc server information server address servpass irc server information server password usessl irc server information ssl nick irc server information nickname bot version bot version bot filename bot runtime filename bot bot current bot prefix bot command prefix bot timeo bot timeout receiving milliseconds bot seclogin bot enable login channel messages bot compnick bot computer nickname bot randnick bot random nicknames letters numbers bot meltserver bot melt original server file bot topiccmd bot execute topic commands speedtest bot speed test startup avkill bot enable anti-virus kill stealth bot enable stealth operation valname autostart enabled autostart enabled service autostart start service service autostart short service scan maxthreads scanner maximum number threads scan maxsockets scanner maximum number sockets ddos maxthreads ddos maximum number threads redir maxthreads redirect maximum number threads identd enabled identd enable server cdkey windows return windows product keys cdkey scaninfo chan scanner output channel scaninfo level info level spam aol channel aol spam channel spam aol enabled aol spam enabled sniffer enabled sniffer enabled sniffer channel sniffer output channel vuln channel vulnerability daemon sniffer channel inst polymorph installer polymorphoic install command description bot displays information version bot code bot die terminates bot bot dns resolves hostname dns bot execute makes bot execute specific exe bot displays current bot code bot nick nickname bot bot open opens file bot remove removes bot host bot removeallbut removes bot match bot 
rndnick makes bot generate random nickname bot status echo bot status information bot sysinfo echo bot system information bot longuptime uptime days bot respond bot highspeed speed bot respond bot quit quits bot bot flushdns flushes bot dns cache bot secure delete shares disable dcom bot unsecure enable shares enables dcom bot command executes command system nick user pong ping join userhost est nick rejoin kick reset part quit action privmsg notice topic fig typical interaction sdbot irc server sdbot command language implemented sdbot essentially lightweight version irc figure illustrates state transition sequence compromised host interacting irc server bot begins establishing connection irc server steps send nick user login server ping received respond pong iii connected server return code send join message userhost request obtain hostname wait response connection established listen react commands master include kick bot rejoins channel kicked bot resets master master kicked nick master nickname replaced updated bot part quit resets master master parts quits return code bot successfully joined irc channel bot expects commands part privmsg notice topic irc messages commands sdbot listed table additional features supported sdbot absent agobot include irc cloning spying cloning bot connects irc channel multiple times deny service irc server spying simply act logging activity irc channel table partial listing sdbot command language commands passed bots privmsg notice topic irc commands command description displays information bot code action channel user text perform action channel addalias alias command add alias aliases return current list aliases cycle channel leave channel return seconds die kill threads close irc connection stop running disconnect disconnect channel reconnect minutes return bot join channel key join channel key log return log connections logins time stamps nick newnick bot nickname part part channel prefix temporary change bot prefix quit quit channel kill threads close bot raw text send text server reconnect disconnect reconnect receive nickname repeat numtimes command act command received numtimes rndnick change random nickname server servername temporarily bot irc server status echo version number bot uptime clones spies clone server port channel create clone channel rndnick threadnum clone change random nickname raw threadnum text clone send text server quit threadnum clone spy quit irc server nick threadnum nick clone spy change nickname privmsg threadnum user text clone spy send message channel text part threadnum channel clone spy part channel mode threadnum channel mode user clone set channel user mode join threadnum channel clone spy join channel action threadnum channel text clone spy perform action channel spy nick server port channel creates spy nickname server port channel spybot command language implemented spybot simple essentially represents subset sdbot command language commands spybot listed table irc connection set protocol spybot sdbot mechanisms pass execute commands bots identical bot families bot irc control infrastructure command language implemented bot simplest evaluated varies bit versions family due architecture bot facilitates creation versions specific intent developing broad range capabilities single line codebase provide list commands supported gtbot-with-dcom source code analysis table implications understanding command control systems direct implications creation methods systems disrupt botnets continued reliance irc foundation botnet command control means irc server operators play central role blocking botnet traffic anecdotally monitoring shutting botnet channels hand arduous automated mechanisms identifying botnet traffic retable partial listing spybot command language commands passed bots privmsg notice topic irc commands command description login password login bot info information host system passwords lists ras passwords windows versions disconnect secs disconnect bot seconds default minutes reconnect disconnect reconnect server server addr temporarily bot irc server quit quit channel kill threads close bot uninstall uninstalls bot redirect port host port redirect traffic host output port raw command echo command server download url filename copy contents url filename list path filter list spy redirects traffic irc server dcc chat stopspy stops spy redirectspy redirects traffic port redirect dcc chat stopredirectspy stops redirect spy loadclones server port numclones load numclones clones server killclones kills clones rawclones command execute raw command clones table partial listing bot command language commands passed bots privmsg notice topic irc commands command description ver returns version botnet info returns local host information uptime scan port scan address prefix port portscan sport eport scan address ports stopscan stops scans packet number start denial service attack ping exe bnc execute commands specific bounce proxy system clone directs irc clone behavior attacks update url update version bot code web page executes command local host quired botnet command languages outlined section development systems project fruitful short term focus area anticipate future botnet development include encrypted communication eventually movement irc adopt peerto-peer style communication versions phatbot reported rudimentary capability make defending botnets difficult botnet traffic identified statistical finger printing methods host control mechanisms host control refers mechanisms bot manipulate victim host compromised general intent host control fortify local system malicious attacks disable anti-virus software harvest sensitive information agobot set host control capabilities provided agobot comprehensive include commands secure system close netbios shares rpc-dcom broad set commands harvest sensitive information iii pctrl commands list processes running host kill specific processes inst commands add delete autostart entries summary agobot host control commands provided table table agobot host control commands command description harvest cdkeys return list keys harvest emails return list emails harvest emailshttp return list emails http harvest aol return list aol specific information harvest registry return registry information specific registry path harvest windowskeys return windows registry information pctrl list return list processes measurement class network citizen paul barford wisconsin madison measurement essential daily operation security internet ability measure explicit intrinsic component original design arpanet highlighted establishment network measurement center ucla development rfc formation network measurement group empirical study measured behavior arpa network kleinrock taylor hindsight clear task measurement early internet facilitated small size limited capability infrastructure fact entire infrastructure controlled single group past years things changed perspective internet instrumentation measurement explosion size diversity complexity global network systems made technical logistical tasks instrumentation difficult costly equipment vendors driven market forces developed measurement capability direction enables limits network operation private potentially conflicting interest distributed administrative entities part precluded wide spread data sharing difficulties motivation innovations measurement methods research community argued techniques developed due fundamental limitations instrumentation capability data availability position paper argues generation secure internet measurement class network citizen means measurement considered aspects design implementation deployment operation terms implementation deployment state art network measurement includes limited application performance logging takes place end hosts web servers network embedded systems web caches snmp flow-based traffic logging takes place routers switches purpose network management operations accounting embedded packet capture packet processing line rate systems endace dag cards network processors embedded traffic monitoring logging systems part network security infrastructures including firewalls network intrusion detection prevention systems ids ips igp egp routing configuration update logging standard practices network operations include aforementioned measurement systems level specifics systems varies widely administrative entities significant obstacles designing generation secure internet comprehensive effective measurement capability include developing methods overcoming barriers data sharing research data anonymization data transformation underway time technological hurdles overcome remain significant cultural issues difficult address comprehensive consideration problems determining technical aspects taking measurements sufficient support management security objectives generation network good deal learned directly measurement systems today clean slate design lead greatly increased efficiency effectiveness measurement systems finally measurement architectures progress liaison equipment manufacturers essential insure mechanisms implemented systems deployed network obstacles listed overcome risks developing measurement component generation secure internet shown time time traffic behavior internet legitimate malicious extremely dynamic measurement architecture extent fluid accommodate change clear cost enhanced measurement capability cost valid consideration preclude implementation essential measurement components architecture lastly enhanced measurement capabilities result vulnerabilities generation network architecture general measurement component carefully assessed order limit exposure wide range malicious threats 
pctrl kill kill process set service file pctrl listsvc return list services running pctrl killsvc delete stop service pctrl killpid kill process inst asadd add autostart entry inst asdel delete autostart entry inst svcadd adds service scm inst svcdel delete service scm sdbot host control capabilities provided base distribution sdbot limited include basic remote execution commands capability gather local information lack host control capabilities basic distribution due sdbot benign intent capabilities easily enhanced auxiliary patches large number readily summary sdbot host control commands provided table table sdbot host control commands command description download url dest action downloaded file execute action killthread thread kill thread update url bot current download sdbot executable update sysinfo 
list host system information cpu ram uptime execute visibility file parameters run program visibility cdkey getcdkey return keys popular games halflife soldier fortune spybot host control capabilities included spybot rich similar respects provided agobot include commands local file manipulation key logging process system manipulation remote command execution summary spybot host control commands provided table bot set host control commands provided bot limited families evaluated base capabilities include gathering local system information ability run delete local files table spybot host control commands command description delete filename delete file execute filename execute file rename origfilename newfile rename file makedir dirname create directory startkeylogger starts on-line keylogger stopkeylogger stops keylogger sendkeys keys simulates key presses keyboardlights flashes remote keyboard lights passwords lists ras passwords windows systems listprocesses return list running processes killprocess processname kills process threads returns list running threads killthread number kills thread disconnect number disconnect bot number seconds reboot reboot system cd-rom open close cd-rom cd-rom open cd-rom close opencmd starts cmd exe hidden cmd command sends command cmd exe filename triggers dcc send bot update url updates local copy bot code sdbot versions bot include diverse capabilities malicious host control implications capabilities diversity host control mechanisms botnets frightening implications underscore patch protect systems vulnerabilities informs software development stronger protection boundaries applications operating systems capabilities gathering sensitive information paypal passwords software keys provide clear economic incentives people operate botnets sponsorship organized crime propagation mechanisms propagation refers mechanisms bots search host systems traditional propagation mechanisms consist simple horizontal scans single port address range vertical scans single address range ports botnet capability expands adopt sophisticated propagation methods proposed agobot scanning mechanisms included agobot simple extend horizontal vertical scanning agobot scanning based notion network ranges network prefixes configured individual bots directed bot scan range randomly select addresses range current scanning command set means efficient distribution target address space collection bots table summary scanning commands agobot table agobot propagation scanning commands command description scan addnetrange range priority adds network range bot scan delnetrange range deletes network range bot scan listnetranges returns network ranges registered bot scan clearnetranges clears network ranges registered bot scan resetnetranges resets network ranges localhost scan enable module enables scanner module dcom scan disable module disables scanner module scan startall directs bots start scanning network ranges scan stopall directs bots stop scanning scan start directs enabled bots start scanning scan stop directs bots stop scanning scan stats returns results scans sdbot discussed section virtue benign intent sdbot scanning propagation capability base distribution variants sdbot include scanning propagation capability scanning control interface similar agobot providing horizontal vertical search capabilities instance slightly complex scanning methods interface netbios scanner sdbot accepts starting ending addresses parameters randomly selects addresses markers spybot command interface spybot scanning simple consisting horizontal vertical capability typical command scan start address port delay spreaders logfilename scan netbios portscan txt scanning begins start address opens max portscan sockets sockets default parameter set scanning proceeds sequentially spreader supported version spybot evaluated netbios gtbot shown table bot includes support simple horizontal vertical scanning implications implications bot propagation mechanisms present botnets simple scanning techniques means develop statistical finger printing methods identify scans botnets distributed monitors scanning methods inform requirements building configuring network defenses based firewalls intrusion detection systems scanning frequency finally source code examination reveals detail scanning mechanisms enable development accurate botnet propagation models analytic simulation-based evaluation project future versions bot codebases focus propagation area improvement including flash mechanisms stealthy mechanisms exploits attack mechanisms exploits refer specific methods attacking vulnerabilities target systems exploits attempted conjunction scanning target hosts section discuss specific exploit modules included bot capabilities launching remote attacks target systems agobot elaborate set exploit modules families analyzed included agobot contrast bot families agobot evolution included broadening set exploits individual versions exploits increases agobot potential compromising targeted hosts exploits version agobot evaluated include bagle scanner scans back doors left bagle variants port dcom scanners scans dce-rpc buffer overflow mydoom scanner scans back doors left variants mydoom worm port dameware scanner scans vulnerable versions dameware network administration tool netbios scanner brute force password scanning open netbios shares radmin scanner scans radmin buffer overflow ms-sql scanner brute force password scanning open sql servers generic ddos module enables types denial service attack targeted host list commands control attacks table table agobot ddos attack commands command description ddos udpflood target port rand time secs delay starts udp flood ddos synflood host time delay port starts syn flood ddos httpflood url number referrer delay recursive starts http flood ddos phatsyn host time delay port starts phat syn flood ddos phaticmp host time delay starts phat icmp flood ddos phatwonk host time delay starts phatwonk flood ddos targa target time secs start targa flood ddos stop stops floods sdbot discussed section virtue benign intent sdbot exploits packaged standard distribution numerous variants include specific exploits sdbot include modules sending udp icmp packets overtly malicious simple flooding attacks commands control capabilities listed table expected numerous variants sdbot include kinds ddos attack modules spybot exploits included version spybot evaluated included attacks netbios open shares sdbot variants include wide range exploits spybot ddos interface table sdbot commands ddos attacks command description udp host pkts pkt delay port send number udp packets ping host pkts pkt timeout send number icmp echo packets closely related sdbot includes capabilities launching simple udp icmp tcp syn floods gtbot mentioned earlier exploit set bot code evaluated developed include rpc-dcom exploits sdbot spybot variants bot include exploits version bot included capability launch simple icmp floods variants bot ddos capabilities udp tcp syn floods implications set exploits packaged botnets suggest basic requirements host-based anti-virus systems network intrusion detection prevention signature sets clear future bots include ability launch multiple exploits agobot increases opportunity success ddos tools included bots fairly straightforward highlight potential danger large botnets inform possibilities ddos protection strategies malware delivery mechanisms packers shell encoders long legitimate software distribution compress obfuscate code techniques adopted botnet malware reasons spy bots deliver exploit encoded malware packaged single script agobot adopted strategy malware delivery based separating exploits delivery idea exploit vulnerability buffer overflow open shell remote 
host encoded malware binary uploaded http ftp separation enables encoder exploits streamlining codebase potentially diversifying resulting bit streams figure provide shell-encoder agobot malware delivery important function shell-encoder remove null bytes terminate c-strings instruction sequences figure code begins xor key checks results string null characters check fails simply successive values xor key finds works copied shell code position encoder offset xorkey implications malware delivery mechanisms botnets implications network intrusion detection prevention signatures nids nips benefit knowledge commonly shell codes ability perform simple decoding separation exploit delivery widely adopted bot code anticipate suggests nids benefit greatly incorporating rules detect follow-up connection attempts char encoder xeb xeb xff xff xff xff xff xff int xorkey create local copies shellcode encoder char szshellcopy char malloc iscsize memset szshellcopy iscsize memcpy szshellcopy szorigshell iscsize char szencodercopy char malloc iencodersize memset szencodercopy iencodersize memcpy szencodercopy encoder iencodersize pfnsc pfnsc szshellcopy iscsize char szshellbackup char malloc iscsize memset szshellbackup iscsize memcpy szshellbackup szshellcopy iscsize set content size encoder copy char szshelllength char iscsize szencodercopy encoder offset size char szshelllength szencodercopy encoder offset size char szshelllength xor shellcode szshellcopy iscsize szshellcopy iscsize szshellcopy iscsize szshellcopy iscsize memcpy szshellcopy szshellbackup iscsize xorkey int iscsize szshellcopy szshellcopy xorkey szencodercopy encoder offset xorkey xorkey free szshellbackup fig agobot shell-encoding routine malware delivery obfuscation mechanisms obfuscation refers mechanisms hide details transmitted network arrives execution end hosts bots evaluated included tcp obfuscations aforementioned encoders provide obfuscation limited key encoded delivery signatures generated quickly recognize bit sequence polymorphism suggested means evading signatures based specific bit sequences generating random encodings bot supports kind polymorphism agobot polymorphic encoding strategies supported poly type xor poly type swap swap consecutive bytes poly type ror rotate poly type rol rotate left code appears function advertised analysis capabilities left future work implications polymorphic botnet delivery appears reality widely bot families concentrated focus polymorphism network security community warranted time polymorphic routine packaged agobot simplistic conceivable future botnets significantly support polymorphism result anti-virus systems nids eventually develop mechanisms account capability deception mechanisms deception refers mechanisms evade detection bot installed target host mechanisms referred rootkits bots analyzed agobot elaborate deception mechanisms include tests debuggers ollydebug softice procdump test vmware iii killing anti-virus processes altering dns entries anti-virus software companies point localhost implications elaborate deception strategy agobot ways represents merging botnets forms malware trojans implications honeynet monitors aware malware specifically targets virtual machine environments suggests tools dynamic analysis malware simply executing vmware debuggers provide false information finally mechanisms improve increasingly difficult system compromised complicating task host-based anti-virus rootkit detection systems conclusions continued improvements diversification malware making task securing networks attacks intrusions increasingly difficult objective work expand knowledge base security research systematic evaluation malicious codebases advocate approach includes static analysis source code dynamic profiling executables paper step process presenting evaluation instances botnet source code selected botnet code initial focus due recent emergence lethal classes internet threats source code evaluation highlights sophistication diverse capabilities botnets details findings include descriptions primary functional components botnets organized categories important findings categories include diverse mechanisms sensitive information gathering compromised hosts effective mechanisms remaining invisible installed local host simple command control systems irc-based command control systems remain area network security community potentially exploit defensive purposes systems evolve peer-to-peer infrastructure future results paper represent step larger process decomposing documenting malware types ultimately anticipate resulting database enable proactive network security steps begin process dynamic profiling botnet executables tools ida pro running executables laboratory environment plan lessons learned study begin irc monitoring effort border router objective developing methods identifying botnet communications plan expand on-going honeynet measurement efforts include botnet monitoring acknowledgements work supported part aro grant daad nsf grant cnsthe author supported part lawrence landweber ncr graduate fellowship views conclusions contained authors interpreted necessarily representing official policies endorsements expressed implied government agencies government f-secure corporation data security summary http f-secure california man charged botnet attacks reuters november honeynet scan month http honeynet scans scan ida pro http datarescue regmon http sysinternals softice driver suite http compuware products driverstudio softice htm sophos virus analyses http sophos virusinfo analyses associates gtbot http securityadvisor pest pest aspx bailey cooke jahanian nazario watson internet motion sensor distributed blackhole monitoring system proceedings network distributed security symposium san diego january barford wisconsin advanced internet laboratory http wail wisc canavan evolution irc bots proceedings virus bulletin conference october cooke jahanian mcpherson zombie roundup understanding detecting disrupting botnets proceedings usenix workshop stepts reducing unwanted traffic internet sruti cambridge july cousot cousot feret mauborgne mine monniaux rival astree static analyzer http astree ens coverity coverity prevent http coverity deter laboratory security research http isi deter dietrich distributed denial service ddos attacks tools http staff washington dittrich misc ddos evers dutch police nab suspected bot herders cnet news october german honeynet project tracking botnets http honeynet papers bots gostev malware evolution january march http viruslist handley kreibich paxson network intrusion detection evasion traffic normalization end-to-end protocol semantics proceedings usenix security symposium washington august honeynet project http project honeynet kandula katabi jacob berger botz-sale surviving organized ddos attacks mimic flash crowds proceedings usenix symposium network systems design implementation boston kawamoto bots slim tough cnet news november kumar paxson weaver exploiting underlying structure detailed reconstruction internet scale event proceedings acm internet measurement conference november mcafee -spybot worm http vil nai vil content htm metasploit http metasploit moore paxson savage shannon staniford weaver inside slammer worm proceedings ieee security privacy july moore shannon spread witty worm http caida analysis security witty moore shannon claffy code red case study spread victims internet worm proceedings acm internet measurement workshop november pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm internet measurement conference taormina italy october saha gairola botnet overivew cert-in white paper ciwp- june sophos troj agobot-a http sophos virusinfo analyses trojagobota html sophos troj sdbot http sophos virusinfo analyses trojsdbot html staniford paxson weaver internet spare time proceedings usenix security symposium thomson hackers fight create worlds largest botnet http vnunet august ullrich dshield http dshield verton organized crime invades cyberspace http computerworld august vrable chen moore vandekieft snoeren voelker savage scalability fidelity containment potemkin virtual honeyfarm 
proceedings acm symposium operating systems principles sosp brighton england october yegneswaran barford plonka design internet sinks network abuse monitoring proceedings recent advances intrusion detection sophia france september yegneswaran barford ullrich internet intrusions global characteristics prevalence proceedings acm sigmetrics san diego june 
model source addresses internet background radiation paul barford rob nowak rebecca willett vinod yegneswaran wisconsin duke e-mail vinod wisc nowak cae wisc willett duke abstract internetbackground radiation fundamentally unproductive traffic arises misconfigurations malicious activities pervasive complex characteristics understanding network locations hosts generate background radiation helpful development techniques aimed reducing unwanted traffic paper presents initial investigation network locations hosts generate malicious background radiation source addresses packet traces network telescopes firewalls intrusion detection systems distributed internet characterize background radiation source addresses ipv address space aggregates conservative multiscale density estimation method find source addresses background radiation form small number tight clusters distribution source addresses exhibits characteristics highly irregular multifractal broad spectrum consistent data verify distributional properties consistent multifractals propose multiscale multiplicative innovations mmi model host locations generate random variates distributional properties empirical data model targeted analytic simulation emulation evaluations methods reducing unwanted traffic potential real time monitoring detection applications introduction internet background radiation composed traffic generated systems infected malicious code systems temporarily permanently misconfigured unwanted traffic generated systems benign nuisance consumes modest amount network system resources worst represents latent threat internet resources harbinger large-scale malicious activity recent work shown internet background radiation complex characteristics suggesting long term objective reducing eliminating traffic challenging potential impact techniques tools systems developed reduce unwanted traffic evaluated analytically simulation emulation deployed critical accurate models basic mechanisms background radiation exploit methods targeting scanning methods corpus hosts responsible traffic objectives work provide initial characterization study malicious source addresses make contribution set models general analysis steps reduce malicious component background radiation central question work internet background radiation address question conducted empirical analysis source addresses malicious internet background radiation general problem understanding characteristics addresses networks packets addressed kohler paper concerned understanding traffic aggregates analysis destination addresses general traffic serves guide work study large data set collected network telescopes firewalls network intrusion detection systems distributed internet multidimensional data set broad perspective malicious background radiation traffic enables issues spoofed source addresses treated enabling clarify correspondence source addresses source locations investigate source address distribution ipv address space network aggregates conservative nature analysis results show distribution host locations smoothly varying observea bursty distribution significant number unique source addresses emanating small set tightly concentrated network locations densities show remarkable structural consistency data sets time network aggregates complexity observed scaling structure suggests modeled multifractal investigate conjecture find distributions exhibit multifractal characteristics based empirical evaluation propose random cascade model reproduce observed scaling structure source address densities model enables random variates generated distributional properties observed data easily parameterized source address data reflect wide range behavior model parsimonious requiring estimation single parameter easily accommodates unrouted bogon regions modeled address space enabling realistic distributions provide details variate generation demonstrate technique generates statistically representative densities data evaluation approach empirical datasets empirical analysis conducted data sets collected sources day period december large set firewall intrusion detection system logs provided dshield dshield aggregates logs daily basis networks distributed globe logs provide uniform condensed summary malicious activity observed provider network benefit data set study broad coverage fact source addresses obfuscated drawback ability distinguish spoofed source addresses data set sources data dark unused address space monitors run isink system includes unused portions class networks campus referred campus approximately addresses monitored entire class network referred provider million addresses monitored isink active responder capability enables separate verifiably non-spoofed sources set sources simply tcp sources engage complete tcp connection setup details data sets study table scans unique source addresses dshield campus provider table details data sets study collected dec single week data networks partition dataset time targeted service port dataset compute examine distribution number unique source hosts ipv source network analysis performed source network granularity modeling sources aggregates focus ports http dce rpc netbios smb services actively targeted week estimation source address distribution objective evaluation understand distributional characteristics backgroundradiation sourceaddresses throughoutthe ipv address space problem challenging reasons including fact host systems uniformly distributed address space fact background radiation dynamic address issue spatially adaptive multiscale analysis method section address breaking data sets table daily aggregates scans specific ports initial observations source locations bursty spatially inhomogeneous distribution implies characterizing distribution accurately measured data require spatially adaptive density estimation technique standard estimators histograms adapt spatial structure data density estimates practice frequently over-smoothed density changing rapidly undersmoothed density changing slowly estimators preserve singularities sharp underlying density selection histogram bin-width challenging problem introduce significant bias estimator overcome challenge multiscale density estimation technique based wavelet-type methods method optimally adapts unknowncharacteristics rangingfromhighly localizedspikesand abruptchanges smooth variations density estimate computed efficiently time number detected source addresses estimation procedure computes optimal partition address space local polynomial fit data partition interval optimal partition obtained tree pruning process pruning corresponds merging neighboring partition intervals pruning data driven enabling procedure adapt variations activity source address regions polynomial fits partition interval computed maximum-likelihood procedure details theoretical properties estimation procedure implementation analysis modeling evaluation source address distributions begin analysis density source addresses data sets grouped aggregates results shown figure source addresses uniformly distributed analysis show smooth lines entire ipv address space aggregates sharp discontinuities sparsity effects increasing shown due space constraints aggregates figure shows striking similarity data sets aggregation level crucial result campus provider graphs non-spoofed sources dshield data includes spoofed sources verified campus provider data sets included spoofed sources implication spoofing significant impact density malicious source addresses aggregate shows highest level detail focus subsequent analysis level analysis considersthe temporal characteristicsof malicious source addresses data sets generated density plots data set broken daily aggregates results days data sets areshownin figure figureshows whilesourcedensities vary networks consistent daily basis results temporal breakdowns shown due space constraints days similar final analysis considers malicious source address density broken destination port figure shows density plots target services section single day aggregated source networks data sets figure shows source address densities change ports essential characteristics sparsity burstiness maintained data sets ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources fig density plots campus top provider middle dshield bottom row left column middle column -all spoofed non-spoofed column ability obtain non-spoofed tcp dshield data left middle 
columns campus provider sites include verifiably non-spoofed tcp source addresses x-axis subnet y-axis observed source addresses random cascade model source address distributions kohler demonstrate distributions destination addresses internet links multifractal characteristics complex characteristics background radiation source address distributions led conjecture scaling structure consistent multifractal left plot figure shows sample distribution source addresses day snapshot campus data set aggregate multifractal spectrum calculated histogram method sampling effects dominate analysis finer scales analysis medium scales show spectrum covers wide range values consistent multifractal scaling similar results found data sets shown due space constraints leads propose simple algorithm generating random distributions multifractal characteristics similar empirical data model propose random cascade model called multiplicaipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources fig density plots campus top provider middle dshield bottom data set aggregates days left-right dec measurement period x-axis subnet y-axis observed source addresses tive multiscale innovations mmi model similar respects model generate density function defined interval map directly source address space easily incorporating important internet-specific characteristics unrouted networks bogon regions generative models multifractals begins assigning unit mass entire interval proceeds recursively subdividing interval re-allocating mass resulting subintervals unlike cantor dust model proposed re-allocates mass deterministic cantor set rule model re-allocates mass probabilistic manner based parametric density function easily fitted characteristics observed address data added flexibility model randomly generate distinct address distributions multifractal characteristics matched observed data capability obvious potential applications simulation studies testing cantor dust model proposed simply illustrate multifractal spectral characteristics resemble address distributions supporting hypothesis address distributions multifractal ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources ipv subnet sources fig density plots campus top provider middle dshield bottom data set aggregates single day dec broken port port left-right x-axis subnet y-axis observed source addresses nature cantor dust model deterministic generate address distributions simulation purposes model easily terms scaling coefficients haar wavelet transform denote address density function un-normalized haar scaling coefficient scale location defined integral interval denote generative model density iteration terms scaling coefficients begin iterate parameters process repeated sufficiently large corresponds address resolution parameters control re-allocation mass resulting dyadic subintervals parameters deterministic cantor dust model random variables fig sample distribution observed source addresses dec aggregate snapshot campus data set left multifractal spectra scale y-axis scaling exponent probabilistic models parameters model specific address distribution generate random distributions similar characteristics modeling distribution parameters important fit model observations finest scale observed reflect statistics measuring series discrete occurrences structure underlying multifractal model result observed finest scales factors similar sampling issues noted model beta distributed random variables beta density context reasons supported interval two-parameter density significant modeling flexibility denote density random variable distribution typically assume parameters reflecting prior assumptions regularity refinement process address space generative model uniform distribution space generative model highly multifractal distribution similar cantor dust model multiplicative cascade model well-known possess multifractal characteristics fact multifractal spectrum inf log parenleftbigg parenrightbigg multifractal spectrum broadens decreases narrows increases parameter directly controls multifracticality distribution model easily fitted data simply computing haar scaling coefficients solving parameters viewing collection computed parameters independent identically distributed samples underlying beta distribution easily find maximum likelihood estimate parameter beta density matlab simple function statistics toolbox called betafit purpose data scales coarser fig sample distribution generated source addresses parameters extracted distribution shown figure left multifractal spectrum scale y-axis scaling exponent mitigate sampling effects describedabove obtaining beta density parameter data set shown figure parameter generated source distributions share multifractal characteristics observed data multifractal spectrum shown figure note embed unallocated address space information distribution discussion conclusions essence empirical results source addresses internet background radiationaresparse bursty showconsistent structure network monitors time results preliminary due limited data set documented dynamics malicious traffic general background radiation tracking malicious source addresses on-going basis reason likewise multifractal cascade model captures essential characteristics source address density continue validate robustness versus empirical results time important question investigate deeply future mechanism malicious source addresses distributions multifractal simple intuition offeredin appealing place start ipv address space historically allocated series successively smaller prefix blocks follow typically left-to-right allocation block process virtually identical cascade model multifractal generation occurrence infected hosts allocated address block managed networks random isps home users complete poorly managed networks multifractal structure malicious source addresses direct reflection multifractal structure ipv address allocation model malicious source addresses initial contribution hope eventually library models characterize unwanted traffic behavior potential applications models including simulators large emulation testbeds models malicious code propagation coupled models wide area network topology autonomous system level model evaluate background radiation propagates internet filtering techniques employed reduce traffic analysis model general implications assumes background radiation traffic generated systems compromised implies machines vulnerable probable targets future worm outbreaks iii harvested zombies launching future denial-of-service attacks source location analysis valuable studying broader range malicious threats investigating possibility source address distributions basis fast accurate detection outbreaks attacks acknowledgements authors johannes ullrich dshield data logs dave plonka geoff horne isink support work supported part nsf grant numbers cnsani- ccrany opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf chen gao kwiat modeling spread active worms proceedings ieee infocom march cooke bailey mao watson jahanian mcpherson understanding distributed blackhole placement proceedings ccs workshop rapid malcode worm october deter laboratory security research http isi deter feldmann gilbert willinger data networks cascades investigating multifractal nature internet wan traffic proceedings acm sigcomm floyd kohler internet research models proceedings workshop hot topics networks october kohler paxson shenker observed structure addresses traffic proceedings acm internet measurement conference november mcceary claffy http caida outreach resources learn ipv space nowak fractal modeling analysis poisson processes conference record thirty-second asilomar conference signals systems computers november pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm internet measurement conference plonka flawed routers flood wisconsin time server tech report porras briesemeister skinner levitt rowe ting hybrid quarantine defense proceedings ccs workshop rapid malcode worm october riedi crouse ribeiro baraniuk multifractal wavelet model application network traffic ieee transactions information theory subramanian agarwal rexford 
katz characterizing internet hierarchy multiple vantage points proceedings ieee infocom june network simulator project http isi nsnam wisconsin advanced internet laboratory http wail wisc ullrich dshield http dshield white lepreau stoller ricci guruprasad newbold hibler barb joglekar integrated experimental environment distributed systems networks proceedings osdi december willett nowak multiscale poisson intensity density estimation submitted ieee transactions information theory http ece rice willett research html yegneswaran barford plonka design internet sinks network abuse monitoring proceedings raid september zou gong towsley worm propagation modeling analysis dynamic quarantinedefense proceedings ccs workshop rapid malcode worm october 
proposed framework calibration bandwidth estimation tools joel sommers wisconsin jsommers wisc paul barford wisconsin wisc walter willinger labs research walter research att abstract examining validity accuracy proposed bandwidth estimation tools remains challenging problem common approach consists evaluating newly developed tool combination simple ns-type simulations feasible experiments situ parts actual internet paper argue strategy fall short establishing reliable ground truth advocate alternative vitro-like methodology calibrating bandwidth estimation tools widely context approach relies performing controlled laboratory experiments tools visualize analyze relevant tool-specific traffic dynamics present case study canonical bandwidth estimation tools spruce pathload respond increasingly complex cross traffic network path conditions expose measurement bias algorithmic omissions lead poor tool calibration result evaluation designed calibrated bandwidth estimation tool called yaz builds insights pathload show head head comparisons spruce pathload yaz significantly consistently accurate respect ground truth reports results quickly small number probes introduction calibration strategies internet measurement tools essential detecting inaccuracy underlying data misconceptions errors analysis paper propose investigate set calibration techniques greatly increase confidence validity accuracy end-to-end bandwidth estimation tools abets echoing sentiment expressed tool calibration meant achieve perfection aid understanding tools applicability producing results close ground truth calibration illuminate circumstances tools give inaccurate results conventional complementary aspects calibration comparison standard adjustment match standard notion encompasses task comparing output measurement tool ground truth quantity reading accurate precise device abets activity involves comparison measurements obtained packet traces timestamps sufficient quality facet calibration involves changing feature measurement tool output matches standard closely context abets aspect calibration involve adjusting parameters algorithm algorithm traditional approaches calibrating validating abets employ basic strategies simple ns-type simulations consists small-scale experiments wild largely uncontrolled tests parts live internet ns-type simulations attractive advantage simplified implementations complete experimental control definition abstraction networking reality render results largely irrelevant situations details live system protocol implementations traffic conditions common simulation-based counterparts contrast experiments parts live internet encounter networking systems protocols traffic conditions depending part internet whichtheyareconfined partsofthenetwork largely uncontrolled typically lack instrumentation establishing reliable standard results compared understood networking researchers generally aware pros cons strategies lack realism ns-type simulations lack control instrumentation wide area cast doubts predominant approaches abet calibration validation highlight improved calibration strategies paper investigate alternative abet calibration strategy based conducting experiments laboratory setting amenable establishing ground truth great varietyofinternet-likescenarios thissettingshouldinclude actual hardware found end-to-end paths theinternet routers switches theuseofvariousversions full tcp protocol stack workload generators capable exercising systems range realistic conditions measurement devices provide level accuracy suitable establishing ground truth advocating vitro-like experimental environment combine advantages ns-type simulations complete control full instrumentation offered experiments wide area realistic network systems protocols traffic dynamics laboratory-based calibration techniques established scientific disciplines chemistry biology widespread application network measurement tools focus paper calibration strategy context abets future plans include investigating generalizations approach additional active measurement-based tools attempt infer network internal characteristics estimating bandwidth network path topic received considerable attention recent years informally end-to-end bandwidth defined minimum spare capacity end-to-end path sender receiver calibrate validate abets detailed understanding realistic queuing effects experienced individual packets compete interact packets essential requires fine-grained timesynchronized measurements packets arrive subsequently depart routers network path openly laboratory testbed apply calibration strategy series experiments abets spruce pathload canonical representatives basic methods abe analyze detailed arrival departure measurements testbed multiple tools show tools prone measurement bias errors range increasingly complex cross traffic network path conditions insights gained analyzing detailed arrival departure measurements designed implemented calibrated abet called yaz builds basic insights pathload additional set laboratory-based calibration tests show yaz compares respect measures significantly accurate spruce pathload remaining intrusive pathload produces bandwidth estimates faster tools dynamic estimation end-to-end bandwidth spare capacity important potential network capacity planning network overlay monitoring management active measurement tools estimating inferring designed send precisely crafted packet pairs streams measuring perturbations pairs streams observed receiver infer bandwidth end-to-end path development fast accurate abets active area research recent tools pathload spruce represent common strategies probing appealing methods inference tools focus abet calibration study definitions overview abetechniques bandwidth single link defined amount spare capacity time interval link capacity instantaneous link utilization time bandwidth time interval parenleftbig integraldisplay parenrightbig end-to-end bandwidth defined minimum hops path mini path length layer hops link smallest referred tight link link smallest capacity called narrow link definitions avoid ambiguous term bottleneck link avoid implicit assumption tight link necessarily narrow link term capacity paper refer maximum transmission rate layer assuming maximum framesizeof bytes forexample nominal physical layer transmission rate packet delivered layer transmission additional overhead bytes layers transmission rate layer reduced existing tools measuring generally focused estimating amount cross-traffic tight link direct measurement sending probe streams rates methods accomplished initial set parameters sending series probes measuring responses inferring estimate measurements methods measuring bandwidth assume simplification homogeneous environment assume fifo queuing routers assume cross traffic fluid cross traffic packets infinitely small finally cross traffic intensity assumed stationary measurement period spruce spruce estimates sending packet pairs spaced back-toback capacity tight link assuming fluid cross traffic amount packet pairs expanded tight link proportional volume cross traffic gin spacing back-to-back probe packets tight link gout spacing measured receiver calculated parenleftbigg gout ging parenrightbigg spruce sends bydefault intervals reports average samples spruce limitations formulation assumes tight-link capacity priori negative estimates spruce reports estimate negative measurement unknown estimate converged true assuming stationary average exists liu single-hop setting analyze spruce-like techniques bias introduced fluid assumption range cross traffic conditions claim bias minimized input gap gin set equal back-toback spacing tight link complex topology cross traffic non-tight links introduce bias links experiments discussed section fastest narrow link ocmb nominal transmission rate requires spruce send packet pairs spaced approximately microseconds show modestly provisioned hosts testbed accommodate requirement emitting packet pairs measure bandwidth oclinks nominal packets spacing microseconds borders infeasible commodity workstations pathload pathload attempts create short-lived congestion conditions order measure detects congestion trends one-way probe packet delays specifically increasing one-way delay owd trend equivalent increasing inter-packet spacing trend average increase spacings probe rate measured receiver rout introduced sender rin decrease spruce tight link narrow link assumed straussetal condition satisfied assuming frame sizes larger bytes shriram additional issues abe high speed links evidence end-to-end probe stream rate relationship expressed rin rout braceleftbig rin 
rin pathload takes measurements probe streams length packets iteratively adapting send rate determine owd trend streams referred fleet stream fleet separated amount time designed path quiesce default set streams pathload separate metrics estimate trends owd pair-wise comparison test pct pair-wise difference test pdt pct pdt metrics operate blocks packets stream block median chosen robust estimator owd metrics defined apct apdt function returning condition true pct returns stream experienced increasing owd trend consistent increasing trend owd pdt detects net increasing trend owd samples returns strongly decreasing owd trend probe rate measured higher receiver strongly increasing owd trend metric threshold chosen owd trend increasing thresholds pct pdt metrics agree increasing non-increasing owd fraction streams fleet judgment hold default threshold result inconclusive additional fleets required pathload limitations pct pdt metrics specific thresholds assume congestion takes form increasing one-way delays expansion intra-stream packet spacings paxson notes expansion predominant result queuing compression events commonly occur compression result packets earlier stream held allowing subsequent packets catch situation indicative queue draining suggests congestion existed recent past pct metric compression default threshold pdt metric eliminates compression indication congestion spruce abets self-loading techniques produce streams commodity systems sufficient detecting oclink speeds usinglargeframesizes orpersistent packet loss minimize impact packet streams short spaced cross traffic sources recover losses shorter streams result asnotedin anadditional problem longer streams increased possibility operating system context switches causing disruption intended packet spacings invalidating stream calibration framework comparison standard subsequent adjustment abet basic task comparing output abet actual time interval requires simple measurements gain insight abet arrives estimate require measurements analysis suited packet streams produced abet measurements collected require test environments evaluate abet accuracy range controlled conditions expose algorithmic parametric assumptions adjustment part framework offer set issues abet calibration operating system hardware workstationswithstandardnetworkinterfacecards runningthemeasurement tools key considerations probe packet streams specifically spacing packets generated sufficient fidelity timestamp accuracy cases synchronization sufficient assumptions abstract models behavior ods interpret active measurements diversity implementation details systems limit effectiveness inference methods probes response packets generated measurement impose load network change conditions path interest potentially skew results operating bounds tool active probe tools require specification set parameters tool effectiveness limited sensitivity configuration parameters issues imply assumptions valid simulation lead unexpected behavior abet deployed live internet environments issues imply fully instrumented environments key understanding impact reported measurements abets final issue identified suggests tool calibration performed controlled realistic environment calibration strategy address issues advocate laboratorybased testbeds calibrating bandwidth estimation tools environments provide important set capabilities offered standard simulation situ settings planetlab including repeatability transparency actual systems implementations actual protocols essence calibration strategy study consists design test environments standard established range increasingly complex repeatable test conditions essential step availability hardware measurements level accuracy greater abet accuracy typically situ studies setups defined step identify relevant test suites assessing issues host system capabilities loading effects network system behavior range expected conditions real systems generally required study issues evaluation data collected testbed aided flexible analysis visualization techniques provide insight relevant traffic dynamics ultimately bandwidth process abet attempting measure infer availability open lab-based environments deploy generalpurpose workstations network systems rise similar environments successfully recent studies calibration abets application ideally suited concern regard ability conduct tests representative traffic conditions lab environment tools addressed problem extent calibration measurements analysis traffic routers end-to-end path occurs time scales typically range tens hundreds microseconds gain insight abet behavior capture time-synchronized packet headers interaction probes cross traffic congested queue measurements compare packet streams intended abet differ stream produced arrival measurements construct true measure time interval standard judge abet toanalyzetheprobearrival ingress anddeparture egress measurements scatter phase plot representation construct phase plot time delay consecutive probe packets arrive router ingress spacing dimension plot spacing packets exit router egress spacing dimension measurements possibilities ratio spacing remained unchanged router packets enqueued packets causing expansion packet delayed queue diminished time packet arrives causing compression figure depicts phase plots abet calibration ingress dimension plot reveal differences spacings intended abet spacings produced ability assess bias introduced measurement process imprecise commodity hardware operating systems egress dimension plot shows spacings inferences made receiver interaction cross traffic differ spacings measured receiver note abets make inferences directly spacings pathload play key role abet infers providing baseline calibrating receiving host calibration experiments pathload spruce plex traffic path conditions understand work work poorly experiment evaluate stream spacings interaction cross traffic egress spacing ingress spacing range pair abet spacing intended spacings produced abet range pair stream figure application phase plots bandwidth estimation tool analysis calibration tool ability report range tight link capacity threshold chosen arbitrary point sense threshold typically chosen based specific requirements target application required estimates consistently window accuracy series estimates reported abet duration experiment property consistent accuracy abets applications re-optimization overlay network testbed setup primary testbed configuration consisted variations dumbbell-like topology ocnarrow link depicted figure total setups including traffic scenarios constant bit-rate cbr traffic udp traffic uniformly spaced byte packets long-lived tcp flows single direction long-lived tcp flows direction variants setup web-like traffic file sizes drawn heavy-tailed distribution produce self-similar traffic cases direction interest left figure cbr single direction long-lived tcp connections web-like traffic traveled left cross traffic generated hosts running harpoon web-like traffic iperf infinite source constant bit-rate traffic adtech sxhardware propagation delay emulator configured add delay milliseconds direction experiments create increasingly complex path conditions considered topological setups topology narrow tight link homogeneous rtt probe traffic configured cross link directly connecting routers hops cross traffic routed link cbr long-lived tcp connection traffic crossed cisco hop web traffic configured cisco cisco hop direct link hop decision route probe traffic direction hop hop caused tight link narrow link identical cbr long-lived tcp source basic web-like traffic scenarios web-like cross traffic setup configured harpoon produce average topology narrow tight link homogeneous rtt web-like cross traffic routed probe traffic fast ethernet link hops configured traffic generator hosts identically configured workstations running linux freebsd workstations ghz intel pentium processors ram intel pro cards interrupt coalescence disabled system dual-homed management traffic network separate depicted figure probe traffic systems identical traffic generators ran freebsd traffic generator hosts additional cross traffic experiment additional cross traffic experiment traffic generator hosts traffic generator hosts probe receiver 
probe sender traffic generator hosts dag measurement system adtech cisco cisco cisco cisco cisco cisco cisco hop identifier abd efc propagation delay emulator milliseconds direction cisco figure experimental testbed cross traffic scenarios consisted constant bit-rate traffic long-lived tcp flows web-like traffic cross traffic flowed routers hop probe traffic flowed directly hop hop setup forcing narrow tight links distinct physical links probe traffic crosses fast ethernet link hops setup additional web-like cross traffic hosts shown attached hops generate traffic persists shared links hop optical splitters connected endace dag measurement cards testbed hops hops bulk cross traffic probe traffic flowed left cross traffic link experiment configured cross traffic sources produce approximately traffic oclink hops causing fast ethernet link narrow link octo tight link topology heterogeneous rtt web-like cross traffic configured linux traffic generation hosts nistnet emulate roundtrip times milliseconds attached additional hosts hops generate cross traffic traveled links hops sharing link probe traffic oclink hops critical calibration methodology ability high accuracy measurements test environment attached optical splitters endace dag packet capture cards affording timestamping accuracy order single microseconds monitor links hops hops monitoring points create phase plots measure utilization tight oclink configuration gave ground truth measurements coarse-grained snmp measurements prior situ studies abets abet calibration comparison calibration framework directs evaluation process begin assessing capabilities end hosts running abets sources potential bias introduced end hosts include context switches system capability effects network adapter interrupt coalescence interest untangling details source host system bias understanding impact verified experiment tool measurement interval tight link oclink consistency calibration check captured traces endace dag cards employ higher frequency clock architectural features dag resulting phase plots consistent produced dag experiments employ dag cards experiments considered topology collected traces single pathload fleet probe packets bytes series spruce runs packet pairs packet length bytes constant bit rate cross traffic flowing narrow link test wewouldexpectingress spacings tools tightly clustered intended microseconds egress spacing relative density ingress spacing relative density usec usec usec usec usec usec ingress spacing egress spacing usec usec usec usec usec usec phase plot produced pathload fleet probe packets length bytes usec usec usec usec usec ingress spacing ingress spacing relative density egress spacing relative density usec usec usec usec usec egress spacing phase plot produced spruce runs packets pairs packets length bytes figure phase plots pathload spruce streams grid lines separated microseconds plot cbr cross traffic uniform udp packets bytes shown plots bimodal output spacing distribution probe traffic target input spacing tool microseconds note slightly scale plot phase plots experiments shown figure immediately expose potential sources measurement bias easy abet wide range interpacket spacings ingress attributed sending host evident effect cbr cross traffic respacing probe packets egress eitherback-to-back microsecondsfor pathload packets microseconds spruce packets cross traffic packet interposed microseconds pathload microseconds spruce closer examination reveals packets spaced farther abet experience expansion cross traffic packet transmitted back-to-back tight link figure perceptible shift upper cluster points similar shift exists figure finally note points diagonal line figure represent evidence compression pathload send error microseconds relative frequency distribution error freebsd sender intel pro adapter dag hops receive error microseconds relative frequency distribution error freebsd receiver intel pro adapter dag hops send error microseconds relative frequency distribution error linux sender intel pro adapter dag attached directly network interface figure relative frequencies error send receive packet spacings spacings measured dag monitor streams quantify prevalence effect collected large quantity packet spacing measurements spruce pathload ing measured dag monitor hops figure shows representative histogram differences spacing measured gettimeofday pathload measurements conclude magnitude individual errors significant deviation close examined measurements receiving application pathload timestamps outgoing incoming packets gettimeofday operating system call spruce timestamps outgoing packets gettimeofday system call incoming packets receive timestamps interrupt handler timestamps tools microsecond precision necessarily microsecond accuracy comparing timestamps measured packet receive timestamps measured dag monitor hops egress spacings fig compared application-measured receive spacings obtain result similar sender figure shows representative histogram differences packet spacings measured probe receiver versus spacings measured dag monitor magnitude error smaller sender deviation close final calibration check test results unique hardware configuration attached dag gigabit ethernet monitor directly intel pro linux workstation collected additional measurements spruce histogram differences spacingsmeasuredat spruce shown figure deviation close packet receive errors linux system shown close table summarizes results averaged behavior probe streams intended bias individual probes significant detrimental effect operation pathload spruce abet calibration algorithmic adjustment found phase plots beneficial abet calibration study helped expose endwe modified spruce pathload log timestamps table application send receive dag monitors values microseconds negative values larger spacing measured dag monitor application dag ocdag freebsd linux send error receive error send error min median max host limitations generating precise streams identify resulting bias studying egress spacings gain expectation receiving host measured realized compression events important summary phase plot analysis resulted observations error introduced end hosts approximately multiple measurements relationship input output probe rates bandwidth invites refinements measured path observations lead propose calibrated algorithm measuring bandwidth test quickly deviation measurements converges average packets comprise stream minimum order error threshold answer question created tool send packet streams length target spacings microseconds separate experiments ran tool topology cross traffic tocollect approximately packetstream measurements packets experiment packet stream counted number packets required deviation spacings measured dag monitor timestamps generated application microsecond figure plots cumulative distribution stream lengths required phase plots experiments similar shown figure omitted due space constraints target spacing distributions show error converges quickly packet streams length sufficient remain tradeoffs abet methodologies packet streams shorter streams reduce intrusiveness tool reduce measurement latency averaging time scale reduced theoretically resulting greater measurement variance base proposed algorithm version equation modified absolute difference average input output spacings absolute difference compression expansion considered indication congestion average spacings shown individual spacings subject significant error formulation average difference input output spacings indication input rate bandwidth path analogous gin gout braceleftbig gin rin gin rin threshold parameter determine average send receive spacings input stream level spare capacity measurement path pathload algorithm finding bandwidth iterative set target send spacing minimum effectively setting maximum bandwidth measurable proceed send probe stream measuring gin gout send receive hosts absolute difference average input 
output spacings threshold input spacing increase gtarget gin gout wait configurable amount time previous step update exponentially-weighted moving average parameter estimate rin report updated ewma estimate algorithm calibrated pathload implemented tool called yaz source code yaz research community evaluation experimental evaluation compared accuracy pathload spruce yaz scenarios cbr long-lived tcp source experiments continuously collected estimates tool minutes discarding seconds seconds web traffic setups continuously collected estimates tool minutes discarding seconds seconds comparisons compute actual bandwidth dag monitor hops exact interval tool produces estimate experiment fraction estimates fall range tight link capacity tight link ocmb cisco hdlc overhead window yaz reminiscent tool names starting tool named baseball great carl yastrzemski include cisco hdlc overheads bytes packet computation control packet payloads limit hidden effects due sonet character stuffing experiments yaz configured exponentially-weighted moving average threshold parameter set equivalent rate found robust setting topologies traffic scenarios produced minimum mse collection experiments set yaz stream length packets spruce tight link capacity equation experiments web-like traffic scenario set narrow link fast ethernet default samples compute estimate pathload default parameters initial comparison yaz set stream length packets leaving number streams fleet default report midpoint pathload estimation range estimate comment range estimates theresults constant bitrate traffic topology figure show yaz pathload perform similar accuracy coming close true fewer spruce estimates acceptance range required stream length microsec target cumulative fraction microsec microsec microsec microsec figure sending error microsecond target target spacings microseconds long-lived tcp traffic scenarios topology ways create pathological cross traffic conditions due frequent traffic oscillations tight link figure plots results setup tcp flows single direction yaz estimates fully threshold pathload estimates bound spruce estimates fall acceptable range bi-directional long-lived tcp flows yaz pathload perform similarly approximately estimates falling acceptance range estimates produced spruce fall range web-like cross traffic topology experiment figure approximately estimates produced yaz acceptance range compared pathload estimatesandabout spruce estimates wealsoran pathload setup setting stream length packets defaultinthe pathload sourcecode figure showstheresult experiment comparing yaz spruce results figure accuracy pathload improves results case web-like cross traffic topology shown figure setup pathload underperforms important calibration task omit analysis sensitivity yaz parameters due space limitations yaz spruce yaz estimates spruce estimates falling threshold pathload estimates falling range closer pathload results revealed longer average converge estimation range convergence times variable setup moving target increased convergence times led poor estimates finally figure shows results web-like cross traffic topology setup yaz estimates acceptance range compared pathload spruce report detailed results examined actual fell range reported pathload constant bitrate long-lived tcp experiments actual rarely pathload range reason range single point equal actual self-similar web-like traffic scenarios actual pathload range time estimates topology experiments width range varies greatly preventing general explanation end focus comparing midpoint pathload estimation range actual favorable pathload plan carefully evaluate variation future work understand underlying reason pathload improved estimates larger number probes examined series streams emitted pathload web-like traffic scenarios wecalculatedthepct andpdt metricsforeachstream beforeanyinteraction cross traffic table summarizes results pct stream lengths close threshold considers stream reflect increasing trend owd thelongerstreamlengthof themeanpct isfurtherawayfrom threshold shift suggests longer stream important side-effect pct metric substantial bias introduced sending host results table stream length appears impact initial bias pdt metric stream length streams departed sending host metrics exceeding threshold table standard deviation pct pdt values streams length departure prior interaction cross traffic web-like traffic scenarios stream pct pdt length table quantifies prevalence compression pathload streams compared spacing intended pathload stream spacings measured dag monitor hops values traffic scenario table show fraction streams effect compression general streams compressed case long-lived tcp flows direction queue tight link increasing flows increase windows loss occurs fact non-negligible fraction streams scenario experience compression supports equation key distinguishing feature yaz pathload part explains yaz outperforms pathload pathload median owd window samples appears critical component pct formulatable prevalence compression pathload streams cross traffic scenarios traffic fraction scenario compressed streams cbr traffic topology long-lived tcp direction topology long-lived tcp directions topology web-like traffic topology web-like traffic topology web-like traffic topology tion technique spruce hand insulated individual spacing measurement errors difference single microsecond assuming target spacing microseconds forexample ran spruce testbed introducing cross traffic setup tool invariably report close consecutive runs spruce produced estimates ranging standard deviation inaccuracies due measurement error estimates close true worst estimate desired accuracy range similar cross traffic experiments pathload yaz estimates consistently true lastly compare estimation latency average number probes emitted estimate number estimates produced web-like traffic scenario table summarizes results qualitatively similar traffic scenarios yaz produces estimates quickly producing pathload yaz operate iterative fashion table yaz average requires fewer cycles arrive estimate tool parameters number iterations arrive number packets required estimate higher accuracy yaz packets roughly order magnitude spruce order magnitude fewer packets pathload pathload spruce represent tradeoff measurement accuracy overhead results yaz suggest tradeoff fundamental table latency number packets emitted iteration pathload yaz average number packets emitted estimate abet web-like traffic topology estimates latency iterations pkts produced estimate seconds estimate pathload pathload spruce yaz limitations yaz limitations yaz fully examine receiver detect intra-stream indications congestion washed duration stream detect persistent expansion compression probe stream current understanding nature errors introduced commodity end hosts relative error cdf yaz pathload spruce constant bit rate cross traffic topology relative error cdf yaz pathload spruce long-lived tcp sources direction left figure topology relative error cdf yaz pathload spruce long-lived tcp sources directions topology relative error cdf yaz pathload spruce web-like cross traffic produced harpoon average rate topology relative error cdf yaz pathload spruce comparison yaz pathload spruce web-like traffic pathload configured streams length topology yaz spruce curves figure relative error cdf yaz pathload spruce web-like traffic narrow link fast ethernet tight link ocas distinct physical links topology relative error cdf yaz pathload spruce web-like traffic additional points cross traffic diversity roundtrip times topology figure yaz pathload spruce ios true bandwidth computed dag traces interval tool estimation performed dashed vertical line desired accuracy threshold significantly initial minimum gin user determining automatically set parameter range environments area future work finally calibration study focused average time interval pathload reports variation range jain shown variation important measurement target extending calibration study 
variation subject future work summary conclusions primary objective paper highlight calibration key component design development rigorous testing bandwidth measurement tools advocate controlled laboratory experiments means partially overcoming limitations inherent standard ns-type simulations vitro-like testing fully replace experiments situ wide area offers complete control full instrumentation repeatability critical tool calibration note laboratory setups study recreated researchers propose framework calibration abets case study exposes potential biases inaccuracies abe due commodity systems high fidelity measurement inaccurate assumptions network system behavior traffic dynamics result observations developed calibrated pathload-like tool called yaz consistently accurate prior abets yaz representative type active measurement tool expected result insisting stringent calibration advocate phase plots analyze visualize fine-grained measurements resulting abet experiments show phase plots instrumental exposing existing abet bias errors qualitative insight rendered key resulting design yaz claim plots panacea exposing sources bias error active measurement tools outstanding flexible analysis visualization tools capable fully exposing enormous quantity high fidelity measurement data collected calibration framework advocate paper focus calibration strategy tuned problem abe paper intend generalize approach additional active measurementbased tools attempt infer network internal characteristics deter laboratory security research http isi deter emulab network emulation testbed http emulab net nistnet wide area network emulator http www-x antd nist gov nistnet planetlab open platform developing deploying accessing planetary-scale services http planet-lab wisconsin advanced internet laboratory http wail wisc akella seshan shaikh empirical evaluation wide-area internet bottlenecks proceedings acm imc october carter crovella measuring bottleneck link speed packet-switched networks proceedings performance lausanne switzerland october cheng lzle cardwell savage voelker monkey monkey tool tcp tracing replaying proceedings usenix conference june donnelly high precision timing passive measurements data networks phd thesis waikato floyd paxson difficulties simulating internet ieee acm transactions networking august hernandez-campos smith jeffay real synthetic network traffic proceedings acm sigcomm poster session steenkiste evaluation characterization bandwidth probing techniques ieee jsac special issue internet measurement mapping modeling august jain dovrolis end-to-end bandwidth measurement methodology dynamics relation tcp throughput proceedings acm sigcomm pittsburgh pensylvania august jain dovrolis ten fallacies pitfalls end-to-end bandwidth estimation proceedings acm imc taormina sicily italy october jain dovrolis end-to-end estimation bandwidth variation range proceedings acm sigmetrics banff alberta canada june jin tierney system capability effects algorithms network bandwidth measurement proceedings acm sigcomm internet measurement conference october lakshiminarayanan padmanabhan padhye bandwidth estimation broadband access networks proceedings acm imc taormina sicily italy aikat jeffay smith effects active queue management web performance proceedings acm sigcomm karlsruhe germany liu ravindran liu loguinov single-hop probing asymptotics bandwidth estimation sample-path analysis proceedings acm imc taormina sicily italy october mccanne floyd ucb lbnl vint network simulator version http isi nsnam melander bjorkman gunningberg end-to-end probing analysis method estimating bandwidth bottlenecks proceedings global internet symposium paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france september paxson strategies sound internet measurement proceedings acm imc october prasad jain dovrolis effects interrupt coalescence network measurements proceedings pam april riberio riedi baraniuk navratil cottrell pathchirp efficient bandwidth estimation network paths proceedings passive active measurement workshop shriram murray hyun brownlee broido fomenkov claffy comparison public end-to-end bandwidth estimation tools high-speed links proceedings pam sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference strauss katabi kaashoek measurement study bandwidth estimation tools proceedings acm imc miami florida october tirumala qin dugan ferguson gibbs iperf tcp udp bandwidth measurement tool http dast nlanr net projects iperf 
laboratory-based calibration bandwidth estimation tools joel sommers paul barford walter willinger abstract examining validity accuracy proposed bandwidth estimation tools remains challenging problem common approach consists evaluating newly developed tool combination simple ns-type simulations feasible experiments situ parts actual internet paper argue strategy fall short establishing reliable ground truth advocate alternative vitrolike methodology calibrating bandwidth estimation tools widely context approach relies performing controlled laboratory experiments set tools visualize analyze relevant tool-specific traffic dynamics present case study canonical bandwidth estimation tools spruce pathload respond increasingly complex cross traffic network path conditions expose measurement bias algorithmic omissions lead poor tool calibration result evaluation designed calibrated bandwidth estimation tool called yaz builds insights pathload show head head comparisons spruce pathload yaz significantly consistently accurate respect ground truth reports results quickly small number probes key words bandwidth active measurement calibration yaz introduction calibration strategies internet measurement tools essential detecting inaccuracy underlying data misconceptions errors analysis paper propose investigate set calibration techniques greatly increase confidence validity accuracy end-to-end wisconsin-madison madison usa labs-research florham park usa addresses jsommers wisc joel sommers wisc paul barford walter research att walter willinger preprint submitted elsevier november bandwidth estimation tools abets echoing sentiment expressed paxson tool calibration meant achieve perfection aid understanding tools applicability producing results close ground truth calibration illuminate circumstances tools give inaccurate results conventional complementary aspects calibration comparison standard adjustment match standard notion encompasses task comparing output measurement tool ground truth quantity reading accurate precisedevice forabets bandwidth obtained packet traces timestamps sufficient quality facet calibration involves changing feature measurement tool output matches standard closely context abets aspect calibration involve adjusting parameters algorithm algorithm traditional approaches calibrating validating abets employ basic strategies simple ns-type simulations consists small-scale experiments wild largely uncontrolled tests small set paths live internet ns-type simulations attractive advantage simplified implementations complete experimental control definition abstraction networking reality render results largely irrelevant situations details live system protocol implementations traffic conditions common simulation-based counterparts contrast experiments paths live internet encounter networking systems protocols traffic conditions depending part internet confined similar expected paths network experiments run wide area largely uncontrolled typically lack instrumentationfor establishinga reliable standard results compared understood networking researchers generally aware pros cons strategies lack realism ns-type simulations lack control instrumentation wide area cast doubts predominant approaches abet calibration validation highlight improved calibration strategies paper investigatean alternativeabet calibration strategybased conducting experiments laboratory setting amenable establishing ground truth great variety internet-like scenarios setting include actual hardware found end-to-end paths internet routers switches versions full tcp protocol stack workload generators capable exercising systems range realistic conditions measurement devices provide level accuracy suitable establishing ground truth advocating vitro-like experimental environment combine advantages ns-type simulations complete control full instrumentation offered experiments wide area realistic network systems protocols traffic dynamics laboratory-based calibration techniques established scientific disciplines chemistry biology widespread application network measurement tools focus paper calibration strategy context abets future plans include investigatinggeneralizations approach additional active measurement-based tools attempt infer network-internal characteristics estimating network path topic received considerable attention recent years informally end-to-end bandwidth defined minimum spare capacity end-to-end path sender receiver calibrate validate abets detailed understanding realistic queuing effects experienced individual packets compete interact packets essential requires fine-grained time-synchronized measurements packets arrive subsequently depart routers network path address analyzing detailed measurements instrumented laboratory setting multiple tools including phase plot analysis phase plots enable visualization analysis variety complex network traffic behavior levels granularity packets flows application-specific quantities range time scales approach phase plot analysis based taking measurements spacings consecutive packets individual packet streams enter router exit router measurements y-coordinates points ingress-egress space resulting phase plots enable transformfree representation spacings individual packets change packets pass router simple representation provide surprisingly rich insightsinto wide variety network behavior context abets advocate phase plot analysis natural means assessing characteristics critical measurement tool calibration ability identify isolate sources bias active measurement tools ability assess basic design assumptions abets nature complex queuing effects individual packets flows experience routers traverse network interact competing traffic openly availablelaboratory testbed apply ourcalibration strategy series experiments abets spruce pathload canonical representatives basic methods abe showing tools prone measurement bias errors range increasingly complex cross traffic network path conditions insights gained analyzing detailed arrival departure measurements designed implemented calibrated abet called yaz builds basicinsightsof pathload tion tests show yaz compares respect measures significantly accurate spruce pathload remaining intrusivethan pathload produces bandwidth estimates faster tools pathload spruce represent tradeoffbetween measurement overhead measurement accuracy results yaz show tradeoff fundamental spruce-like budget yaz accurate pathload significantly background related work dynamic estimation end-to-end bandwidth spare capacity important potential network capacity planning network overlay monitoring management active measurement tools estimating inferring designed send precisely crafted packet pairs streams measuring perturbations pairs streams observed receiver infer bandwidth end-to-end path development fast accurate abets active area research recent tools pathload spruce represent common strategies probing appealing methods inference tools focus abet calibration study study related focus evaluating abets context high-speed links found additional contrasts focus calibration mechanisms lead performance differences tools simply head-to-head comparison abets varied range cross traffic experimental environment openly significantly precise measurements router snmp counters created highly accurate low-impact abet result work definitions overview abe techniques bandwidth single link defined amount spare capacity time interval link capacity instantaneous link utilization time bandwidth time interval parenleftbig parenrightbig end-to-end bandwidth defined minimum hops path min path length layer hops link smallest referred tight link link smallest capacity called narrow link definitions avoid ambiguous term bottleneck link avoid implicit assumption tight link necessarily narrow link term capacity paper refer maximum transmission rate layer assuming maximum frame size bytes standard ethernet nominal physical layer transmission rate packet delivered layer transmission additional overhead bytes layers transmission rate layer reduced existing tools measuring generally focused estimating amount cross-traffic tight link direct measurement sending probe streams rates methods accomplished initial set parameters sending series probes measuring responses inferring estimateof measurements methodsfor measuring bandwidth assume simplification homogeneous environment assume fifo queuing routers assume cross traffic fluid cross traffic packets infinitely small finally cross traffic intensity assumed stationary measurement period spruce spruce estimates sending packet pairs spaced back-to-back capacityc tight link assumingfluid cross traffic amount thepacket pairsare 
traffic gin spacing back-to-back probe packets tight link gout spacing measured receiver calculated parenleftbigg gout ging parenrightbigg spruce tight link narrow link assumed strauss claim estimates meaningful condition satisfied spruce sends default packet pairs poisson-modulated intervals reports average samples spruce limitations formulation assumes tight-link capacity priori negative estimates spruce reports estimate negative measurement unknown estimate converged true assuming stationary average exists liu single-hop setting analyze spruce-like techniques bias introduced fluid assumption range cross traffic conditions claim bias minimized input gap gin set equal back-to-back spacing tight link complex topology cross traffic non-tight links introduce bias practical limitations high-bandwidth links experiments discussed fastest narrow link ocmb nominal transmission rate requires spruce send packet pairs spaced approximately microseconds show modestly provisioned hosts testbed accommodate requirement emitting packet pairs measure bandwidth oclinks nominal packets spacing microseconds borders infeasible commodity workstations pathload pathload detects congestion trends one-way probe packet delays specifically increasing one-way delay owd trend assumed indicative queueing probe stream rate greater end-to-end iterative adaptation probe stream rate pathload converges bandwidth range center average spare capacity measurement period simple describe relationship one-way delay trends bandwidth terms probe stream rate probe packet size bytes gin spacing consecutive packets stream probe rate input rate produced pathload rin gin increasing one-way delay assuming frame sizes larger bytes shriram additional issues abe high speed links trend equivalent increasing inter-packet spacing trend average increase spacings probe rate measured receiver rout introduced sender rin decrease evidence end-to-end probe stream rate relationship expressed rin rout braceleftbig rin rin pathload takes measurements probe streams length packets iteratively adapting send rate determine owd trend streams referred fleet stream fleet separated amount time designed path quiesce default set streams pathload separate metrics estimate trends owd pair-wise comparison test pct pair-wise difference test pdt pct pdt metrics operate blocks packets stream block median chosen robust estimator owd metrics defined apct apdt function returning condition true pct returns stream experienced increasing owd trend consistent increasing trend owd pdt detects net increasing trend owd samples returns strongly decreasing owd trend probe rate measured higher receiver strongly increasing owd trend metric threshold chosen owd trend increasing thresholds pct pdt metrics agree increasing non-increasing owd fraction streams fleet judgment hold default threshold result inconclusive additional fleets required specific algorithm input stream rate modulated based outcome pct pdt metrics source code pathload pathload limitations pct pdt metrics specific thresholds assume congestion takes form increasing one-way delays expansion intra-stream packet spacings paxson notes expansion predominant result queuing compression events commonly occur compression result packets earlier stream held allowing subsequent packets catchup whichatleast suggests congestion existed recent past pct metric considercompression metriceliminates compression indication congestion spruce abets self-loading techniques produce streams commodity systems sufficient detecting oclink speeds large frame sizes potential problem congestion-inducing measurement tools significant persistent packet loss minimize impact packet streams short spaced cross traffic sources recover losses shorter streams result higher measurement variance noted additional problem longer streams increased possibility operating system context switches causing disruption intended packet spacings invalidatingthat stream pathload requires threshold parameter selection owd trend detection algorithm date study sensitivity metrics cross traffic default thresholds selected based experience network simulations calibration framework comparison standard subsequent adjustment abet algorithm parameters complementary activities calibration basic task comparing output abet actual time interval requires simple measurements gain insight abet arrives estimate require measurements analysis suited probes produced abet reported measurements require test environments evaluate abet accuracy range controlled conditions expose algorithmic parametric assumptions adjustment part ourframework offera set ofissuesto considerfor abet calibration thereare performanceand theoperating system hardware general purpose workstations standard network interface cards running measurement tools key considerations probe packet streams specifically spacing packets generated sufficient fidelity timestamp accuracy cases synchronization sufficient assumptions abstract models behavior routers switches networks foundation inference methods interpret active measurements diversity implementation details systems limit effectiveness inference methods probes response packets generated active measurement impose load network change conditions path interest potentially skew results heterogeneity burstiness traffic extend operating bounds tool active probe tools require specification set parameters tool effectiveness limited sensitivityto configuration parameters issues imply assumptions valid simulation lead unexpected behavior abet deployed live internet environments issues imply fully instrumented environments key understanding impact reported measurements abets final issueidentified suggests tool calibration performed controlled realistic extend environment calibration strategy address issues advocate laboratory-based testbeds calibrating abets environments provide important set capabilities offered standard simulation situ settings planetlab including repeatability transparency actual systems implementations actual protocols essence calibration strategy study consists range increasingly complex repeatable test conditions essential step availability hardware measurements level accuracy greater abet accuracy typically situ studies forthesetupsdefined inthefirststep issues host system capabilities loading effects network system behavior range expected conditions real systems generally required study issues evaluation data collected testbed aided flexible analysis visualization techniques provide insight relevant traffic dynamics ultimately bandwidth process abet attempting measure infer availability open lab-based environments deploy general-purpose workstations network systems rise similarenvironments successfully recent studies openly external researchers calibration abets concern regard ability conduct tests representative traffic conditions lab environment tools addressed problem extent calibration measurements analysis interactions abet measurement probe packets cross traffic routers end-to-end path occurs time scales typically therangeof tensto hundredsofmicroseconds gaininsightintoabet behavior capture time-synchronized packet headers interaction probes cross traffic congested queue measurements compare packet streams intended abet differ stream produced arrival measurements construct true measure time interval standard judge abet analyze probe arrival ingress departure egress measurements phase plot representation construct phase plot time ingress spacing dimension plot spacing packets exit router egress spacing dimension measurements possibilitiesfor theratio spacing remained unchanged router packets enqueued packets causing expansion packet delayed queue diminished time packet arrives causing compression figure depicts phase plots abet calibration ingress dimension plot reveal differences spacings intended abet spacings produced ability assess bias introduced measurement process imprecise commodity hardware operating systems egress dimension plot shows spacings inferences made receiver interaction cross traffic differ spacings measured receiver note abets make inferences directly spacings pathload play key role abet infers spacings enable calibration inference method providing baseline calibrating receiving host abet produced abet spacings range pair stream ingress spacing stream spacings interaction cross traffic spacing intended egress 
spacing range pair expansion compression fig application phase plots bandwidth estimation tool analysis calibration calibration experiments objective calibration study pathload spruce examine tools number increasingly complex traffic path conditions understand work work poorly thetightlinkcapacity thisthresholdischosen arbitrary pointinthe sense threshold typically chosen based specific requirements target application required estimates consistently window accuracy series estimates reported abet duration experiment property consistent accuracy abets applications re-optimization overlay network testbed setup primary testbed configuration consisted variationson dumbbell-liketopology ocnarrow link depicted figure total setups including traffic scenarios constant bit-rate cbr traffic udp traffic uniformly spaced byte packets long-lived tcp flows single direction long-lived tcp flows direction variants setup web-like traffic file sizes drawn heavy-tailed distribution produce self-similar traffic cases direction interest left figure cbr single direction long-lived tcp connections web-like traffic traveled left cross traffic generated hosts running harpoon web-like traffic iperf infinite source constant bit-rate traffic adtech sxhardware propagation delay emulator configured add delay milliseconds direction experiments additional cross traffic experiment traffic generator hosts cisco cisco probe sender traffic generator hosts additional cross traffic experiment traffic generator hosts traffic generator hosts probe receiver fidentifierhop propagation delay emulator milliseconds direction adtech cisco cisco cisco dag measurement system cisco cisco cisco fig experimental testbed cross traffic scenarios consisted constant bit-rate traffic long-lived tcp flows bursty web-like traffic cross traffic flowed routers hop probe traffic flowed directly hop hop gigabit ethernet link asetup forcing narrow tight links distinct physical links probe traffic crosses fast ethernet link hops setup additional web-like cross traffic hosts shown attached hops generate traffic persists shared links hop optical splitters connected endace dag measurement cards testbed hops hops bulk cross traffic probe traffic flowed left create increasingly complex path conditions considered topological setups topology probe traffic configured cross gigabit ethernet link directly connecting routers hops cross traffic routed thislink cbr longlived tcp connection traffic crossed cisco hop web traffic configured cisco cisco hop direct link hop decision route probe traffic direction hop hop caused tight link narrow link identical cbr long-lived tcp source basic web-like traffic scenarios web-like cross traffic setup configured harpoon produce average topology narrow tight link homogeneous round-trip time web-like cross traffic routed probe traffic fast ethernet link hops configured cross traffic link ourtraffic generator hosts identically configured workstations running linux freebsd workstations ghz intel pentium processors ram intel pro cards interrupt coalescence disabled system dual-homed sothatallmanagement theonedepicted figure probe traffic systems identical traffic generators ran freebsd experiment configured cross traffic sources produce approximately traffic oclink hops causing fast ethernet link narrow link octo tight link topology narrow tight link heterogeneous round-trip time web-like cross traffic configured linux traffic generation hosts netpath emulate round-trip times milliseconds attached additional hosts hops generate cross traffic traveled links hops sharing link probe traffic oclink hops critical calibration methodology ability high accuracy measurements test environment attached optical splitters endace dag packet capture cards affording timestamping accuracy order single microseconds monitor links hops hops monitoring points create phase plots measure utilization tight oclink configuration gave ground truth measurements coarse-grained snmp measurements prior situ studies abets abet calibration comparison calibration framework directs evaluation process begin assessing capabilities end hosts running abets sources potential bias introduced end hosts include context switches system capability effects network adapter interrupt coalescence interest untangling details source host system bias understanding impact experiments considered topology collected traces single pathload fleet probe packets bytes series spruce runs packet pairs packet length bytes constant bit rate cross traffic flowing narrow link test host systems emitted packets bias expect ingress spacings tools tightly clustered intended microseconds verified experiment tool measurement interval tight link oclink consistency calibration check captured traces endace dag cards employ higher frequency clock architectural features dag resulting phase plots consistent produced dag experiments employ dag cards ingress spacing relative density usec usec usec usec usec usec usec usec usec usec usec usec ingress spacing egress spacing relative density egress spacing phase plot produced pathload fleet probe packets length bytes usec usec usec usec usec ingress spacing egress spacing usec usec usec usec usec ingress spacing relative density egress spacing relative density phase plot produced spruce runs packets pairs packets length bytes fig phase plots pathload spruce streams grid lines separated microseconds plot cbr cross traffic uniform udp packets bytes shown plots bimodal output spacing distribution probe traffic target input spacing tool microseconds note slightly scale plot phase plots experiments shown figure immediately expose potential sources measurement bias easy abet wide range interpacket spacings ingress attributed sending host evident effect cbr cross traffic respacing probe packets egress back-to-back microseconds pathload packets microseconds spruce packets cross traffic packet interposed microseconds pathload microseconds spruce closer examination reveals packets spaced farther theabet morelikely experienceexpansionby traffic packet transmitted back-to-back tight link figure perceptible shift upper cluster points similar shift exists figure finally note points diagonal line figure represent evidence compression pathload streams quantify prevalence effect explore problem bias imposed probe senders collected thousand packet spacing measurements spruce pathload compared spacing spacing measured dag monitor hops figure shows representative histogram differences pathload fromthesemeasurements conclude magnitude individual errors significant deviation close modified spruce pathload log timestamps send error microseconds relative frequency distribution errors freebsd sender intel pro gigabit ethernet adapter dag hops receive error microseconds relative frequency distribution errors freebsd receiver intel pro gigabit ethernet adapter dag hops send error microseconds relative frequency distribution errors linux sender intel pro gigabit ethernet adapter dag attached directly network interface fig relative frequencies errors send receive packet spacings spacings measured dag monitor examined measurements receiving application pathload timestamps outgoing incoming packets gettimeofday operating system call spruce timestamps outgoing packets gettimeofday system call incoming packets receive timestamps interrupt handler timestamps tools microsecond precision necessarily microsecond accuracy comparing timestamps measured packet receive timestamps measured dag monitor hops egress spacings fig compared application-measured receive spacings obtain result similar sender figure shows representative histogram differences packet spacings measured probe receiver versus spacings measured dag monitor magnitudeof error smaller sender deviation close final calibration check test results unique weattachedadag gigabitethernet monitor directly intel pro linux workstation collected additional measurements spruce histogram differences spacings measured spruce spacings measured 
dag shown figure deviation close packet receive errors linux system shown close table summarizes results table summary errors packet spacings measured application send receive dag monitors values microseconds negative values larger spacing measured dag monitor application dag ocdag gigabit ethernet freebsd linux send error receive error send error min median max averaged behavior probe streams intended bias individualprobes significant detrimental effect operation pathload spruce source code tool treats timestamp accurate utilizing microsecond precision supplied gettimeofday system call tiny differences lead poor estimation errors widely distributed uniformly distributed simple filtering schemes ineffective abet calibration algorithmic adjustment phase plots networking community illustrated verybeneficial theynotonlyhelped expose end-host limitations generating precise streams identify resulting bias studying egress spacings gain expectation receiving host measured realized compression events important summary phase plot analysis resulted observations error introduced end hosts approximately multiple measurements relationship input output probe rates bandwidth invites refinements compression expansion indicative congestion measured path observations lead propose calibrated algorithm measuring availablebandwidth wefirst verges average packets comprise stream minimum order error threshold answer question created tool send packet streams length packets target spacings microseconds separate experiments ran tool topology cross traffic collect approximately packet stream measurements packets experiment packet stream counted number packets required deviation spacings measured dag monitor timestamps generated application microsecond figure plots cumulativedistribution stream lengths required target spacing distributions show error converges quickly packet streams length packets sufficient remain tradeoffs abet methodologies packet streams shorter streams reduce intrusiveness tool reduce measurement latency averaging time scale reduced theoretically resulting greater measurement variance base ofour proposed algorithmis version ofequation modified absolute difference average input output spacings absolute difference compression expansion combination measurement period considered indication congestion averagespacingsare significant error formulation absolute difference theaverage inputand outputspacings rate bandwidth path analogous gin gout braceleftbig gin rin gin rin phase plots experiments similar shown figure show detailed results ran experiments interrupt coalescence enabled packet transmit absolute timer microseconds default absolute timer sets maximum amount time packet held awaiting packet send triggering interrupt device driver results configuration show target spacings approximately microseconds absolute timer met packet stream reasonable length reduce error acceptable range ran experiments disabled threshold parameter determine average send receive spacings input stream level spare capacity measurement path pathload algorithm finding bandwidth iterative set target send spacing gtarget minimum effectively setting maximum measurable proceed send probe stream measuring gin gout send receive hosts absolute difference average input output spacings threshold input spacing increase gtarget gin gout wait configurable amount time previous step updatean ewma parameter estimate rin report updated ewma estimate reason exponentially-weighted moving average individual estimates outliers measurements figure implies stream length packets generally sufficient due unpredictability commodity systems care required algorithm calibrated pathload implemented tool called yaz source code yaz research community evaluation http wail wisc experimental evaluation compared accuracy pathload spruce yaz scenarios cbr long-lived tcp source experiments continuously collected estimates tool minutes discarding seconds seconds web traffic setups continuously collected estimates tool minutes discarding seconds seconds comparisons compute actual bandwidth dag monitor hops exact interval tool produces estimate experiment fraction estimates fall range tight link capacity tight link ocmb cisco hdlc overhead window yaz reminiscent tool names starting tool named baseball great carl yastrzemski include cisco hdlc overheads bytes packet computation control packet payloads limit hidden effects due sonet character stuffing forallexperiments yaz wasconfiguredwith movingaverageand thethresholdparameter set beequivalentto rateof found robust setting topologies traffic scenarios produced minimum mse collection experiments set yaz stream length packets spruce tight link capacity equation experiments web-like traffic scenario set narrow link fast ethernet default samples compute estimate pathload default parameters initial comparison yaz set stream length packets leaving number streams fleet default report midpoint pathload estimation range estimate discuss generally favorable pathload results experiments shown figure results constant bitratetrafficintopology figure showthatboth yaz pathload perform similaraccuracy comingquiteclose true fewer spruce estimates acceptance range required stream length microsec target cumulative fraction microsec microsec microsec microsec fig cumulative distribution stream lengths required sending error microsecond target target spacings microseconds long-lived tcp traffic scenarios topology ways create pathological cross traffic conditions due frequent traffic oscillations tight link figure plots results setup tcp flows single direction yaz estimates fully threshold pathload estimates bound spruce estimates fall acceptable range bi-directional long-lived tcp flows yaz pathload perform similarly approximately estimatesfallingwithinthe acceptancerange veryfewestimatesproduced spruce fall range web-like cross traffic topology experiment figure approximately estimates produced yaz acceptance range compared pathload estimates spruce estimates ran pathload setup setting stream length packets default pathload source code figure shows result experiment comparing yaz spruce results figure accuracy pathload improves results case web-like cross traffic topology shown figure setup pathload underperforms yaz spruce yaz estimates spruce estimates falling threshold pathload estimates falling range closer pathload results revealed longer average converge estimation range convergence times variable setup moving target increased convergence times led poor estimates finally figure shows results web-like cross traffic topology setup yaz estimates acceptance range compared pathload spruce detailed analysis experimental results reported range pathload report detailed results examined actual fell range reported pathload constant bitrate long-lived tcp experiments actual rarely pathload range reason range single point equal actual self-similar web-like traffic scenarios actual pathload range time estimates topology experiments width range varies greatly preventing general explanation end focus comparing midpoint pathload estimation range actual favorable pathload plan carefully evaluate variation future work effect pathload stream length understand underlying reason pathload improved estimates larger number probes examined series streams emitted pathload web-like traffic scenarios calculated pct pdt metrics stream dag monitor hops interaction cross traffic table summarizes results pct stream lengths close threshold considers stream reflect increasing trend owd longer stream length pct threshold shift suggests longer stream important side-effect relative error cdf yaz pathload spruce constant bit rate cross traffic topology relative error cdf yaz pathload spruce long-lived tcp sources direction left figure topology relative error cdf yaz pathload spruce long-lived tcp sources directions topology fig comparison bandwidth estimation accuracy yaz pathload spruce constant bit rate long-lived tcp traffic scenarios true bandwidth computed dag traces interval tool estimation performed dashed vertical line desired accuracy threshold pct metric substantial bias introduced sending host results table stream 
length appears impact initial bias pdt metric stream length streams departed sending host metrics exceeding threshold pathload stream compression table quantifies prevalence compression pathload streams compared spacing intended pathload stream spacings measured dag monitor hops values traffic scenario table show fraction streams effect compression general relative error cdf yaz pathload spruce web-like cross traffic produced harpoon average rate topology relative error cdf yaz pathload spruce comparison yaz pathload spruce web-like traffic pathload configured streams length packets topology yaz spruce curves figure relative error cdf yaz pathload spruce web-like traffic narrow link fast ethernet andtightlink ocasdistinct physical links topology relative error cdf yaz pathload spruce web-like trafficwithadditional points cross traffic diversity roundtrip times topology fig comparison bandwidth estimation accuracy yaz pathload spruce web-like cross traffic scenarios true bandwidth computed dag traces interval tool estimation performed dashed vertical line desired accuracy threshold streams compressed case long-lived tcp flows direction queue tight link increasing flows increase windows loss occurs fact non-negligible fraction streams scenario experience compression supports equation key distinguishing feature yaz pathload part explains yaz outperforms pathload table standard deviation pct pdt values streams length packets departure prior interaction cross traffic web-like traffic scenarios stream pct pdt length table prevalence compression pathload streams cross traffic scenarios traffic fraction scenario compressed streams cbr traffic topology long-lived tcp direction topology long-lived tcp directions topology web-like traffic topology web-like traffic topology web-like traffic topology tool accuracy cross traffic pathload median owd window samples appears critical component pct formulation technique spruce hand insulated individual spacing measurement errors difference single microsecond assuming target spacing microseconds lead estimation error ran spruce testbed introducing cross traffic setup tool invariably report close consecutive runs spruce produced estimates ranging standard deviation theseinaccuracies dueto measurement error whilemostestimatesare close true worst estimate desired accuracy range similar cross traffic experiments pathload yaz estimates consistently true asymptotic nature spruce lastly noted spruce formula asymptotic result long-lived tcp source experiments spruce reported negative estimates perfect measurement devices clear priori long tool spruce collect samples default sufficient traffic scenarios insufficient estimation latency overhead lastly compare estimation latency average number probes emitted estimate number estimates produced web-like traffic scenario table summarizes results whichare scenarios wesee yaz produces estimates quickly producing estimates duration experiment pathload yaz operate iterative fashion table yaz average requires fewer cycles arrive estimate tool parameters number iterations arrive number packets required estimate higher accuracy yaz packets roughly order magnitude spruce order magnitude fewer packets pathload pathload spruce represent tradeoff measurement accuracy overhead results yaz suggest tradeoff fundamental spruce-like budget yaz accurate pathload significantly table comparison number estimates produced latency number packets emitted iteration pathload yaz average number packets emitted estimate abet web-like traffic topology estimates latency iterations pkts produced estimate seconds estimate pathload pathload spruce yaz limitations yaz limitations yaz fully examine complete understanding set threshold parameter sensitivity operating system hardware characteristics cross traffic conditions spacing measured sender receiver detect intra-stream indications congestion washed duration stream detect persistent expansion compression probe stream current understanding nature errors introduced commodity end hosts significantly initial minimum gin user determining automatically set parameter range environments area future work finally calibration study focused average time interval pathload reports variation range jain haveshownthat thevariationofab importantmeasurement target extending calibration study variation subject future work summary conclusions akeycomponentin design development rigorous testing bandwidth measurement tools advocate controlled laboratory experiments means partially overcoming limitations inherent standard ns-type simulations vitro-like testing fully replace experiments situ offers completecontrol full instrumentationand repeatability critical tool calibration note laboratory setups study recreated researchers propose framework calibration abets case study exposes potential biases inaccuracies abe due commodity systems high fidelity measurement inaccurate assumptionsabout network system behavior traffic dynamics result observations developed calibrated pathload-like tool called yaz consistently accurate prior abets minute-long experiment traffic scenario internet-like bursty cross traffic yaz estimates true pathload estimates spruce estimates fall window accuracy significantly higher level accuracy yaz packets roughly order magnitude spruce order magnitude fewer packets pathload pathload spruce represent tradeoff measurement accuracy overhead results yaz suggest tradeoff fundamental yaz representative type active measurement tool expected result insisting stringent calibration advocate phase plots analyze visualize fine-grained measurements resulting abet experiments show phase plots instrumental exposing existing abet bias errors qualitative insight rendered key resulting design yaz claim plots panacea exposing sources bias error active measurement tools outstanding flexible analysis visualization tools capable fully exposing enormous quantity high fidelity measurement data collected calibration framework advocatein paper whilethefocus calibration strategy tuned problem abe paper intend generalize approach additional active measurement-based tools attempt infer network internal characteristics paxson strategies sound internet measurement proceedings acm sigcomm internet measurement conference floyd paxson difficulties simulating internet ieee acm transactions networking floyd kohler internet research models hotnets-i princeton akella seshan shaikh empirical evaluation wide-area internet bottlenecks proceedings acm sigcomm internet measurement conference carter crovella measuring bottleneck link speed packet-switched networks proceedings performance lausanne switzerland steenkiste evaluation characterization bandwidth probing techniques ieee jsac special issue internet measurement mapping modeling jain dovrolis end-to-end bandwidth measurement methodology dynamics relation tcp throughput proceedings acm sigcomm pittsburgh pennsylvania lakshiminarayanan padmanabhan padhye bandwidth estimation broadband access networks proceedings acm sigcomm internet measurement conference taormina sicily italy melander bjorkman gunningberg end-to-end probing analysis method estimating bandwidth bottlenecks proceedings global internet symposium paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france riberio riedi baraniuk navratil cottrell pathchirp efficientavailable bandwidth estimation network paths proceedings passive active measurement workshop shriram murray hyun brownlee broido fomenkov claffy comparison public end-to-end bandwidth estimation tools high-speed links proceedings passive active measurement workshop strauss katabi kaashoek measurement study bandwidth estimation tools proceedings acm sigcomm internet measurement conference miami florida sommers barford willinger splat visualization tool mining internet measurements proceedings passive active measurement conference wisconsin advanced internet laboratory http wail wisc liu ravindran liu loguinov single-hop probing asymptotics bandwidth estimation sample-path analysis proceedings acm sigcomm internet measurement conference taormina sicily italy jain dovrolis ten fallacies pitfalls end-to-end bandwidth estimation proceedings acm sigcomm internet measurement conference taormina sicily italy mccanne floyd ucb lbnl vint network simulator version http isi nsnam planetlab open platform developing deploying accessing planetary-scale services http planet-lab deter laboratory security research http isi 
deter emulab network emulation testbed http emulab net aikat jeffay smith effects active queue management web performance proceedings acm sigcomm karlsruhe germany cheng lzle cardwell savage voelker monkey monkey tool tcp tracing replaying proceedings usenix conference hernandez-campos smith jeffay real synthetic network traffic proceedings acm sigcomm poster session sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference tirumala qin dugan ferguson gibbs iperf tcp udp bandwidth measurement tool http dast nlanr net projects iperf agarwal sommers barford scalable network path emulation proceedings ieee mascots donnelly high precision timing passive measurements data networks thesis waikato jin tierney system capability effects algorithms network bandwidth measurement proceedings acmsigcomminternet measurement conference prasad jain dovrolis effects interrupt coalescence network measurements proceedings passive active measurement workshop jain dovrolis end-to-end estimation bandwidth variation range proceedings acm sigmetrics banff alberta canada 
framework malicious workload generation joel sommers vinod yegneswaran paul barford wisconsin madison jsommers vinod wisc abstract malicious traffic self-propagating worms denialof-service attacks constantly threatens everyday operation internet systems defending networks threats demands tools conduct comprehensive vulnerability assessments networked systems paper describes mace unique environment recreating wide range malicious packet traffic laboratory testbeds mace defines model flexible composition malicious traffic enables attacks welchia worm attack variants created implement model extensible library attack traffic specification generation demonstrate capability mace provide analysis stress tests conducted popular firewall popular network intrusion detection systems results expose potential weaknesses systems reveal modern firewalls network intrusion detection systems easily overwhelmed simple attacks launched small number hosts categories subject descriptors computercommunication networks general security protection firewalls performance systems performance attributes general terms measurement performance security keywords traffic generation network intrusions introduction network outages due self-propagating worms denialof-service attacks widely reported past years efforts research operational communities mitigate threats internet systems remain vulnerable reason insecurity systems protocols designed deliberate consideration threat models received recent attention tcp initial sequence number protocol vulnerability potential inflict chaos disrupting bgp sessions backbone permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee imc october taormina sicily italy copyright acm internet reason system behavior heavy load unpredictable scaling properties commercial software systems routing hardware impressive typically developed malicious traffic conditions mind case study ogielsky reports software bugs combined load introduced unprecedented spatial diversity code-red worm traffic elevated bgp activity led widespread cascading outages potency internet worms viruses continued evolve code-red outbreak examples include high-speed worms sql-slammer recently multi-modal worms viruses agobot package exploits vulnerabilities witnessed witty worm exploits vulnerable network stacks firewalls witty targets destination ports equally neutralized simple techniques port blocking network gateways attacks underscore scalable intrusion detection systems protect large networks performing signature matching internet gateways galvanize tools evaluating resiliency routers middleboxes intrusion detection systems work primary objectives create performance benchmarking tool enables assessment quality service degradation effect maltraffic good traffic resilience middleboxes network intrusion detection systems nids range malicious traffic volumes state art benchmarking firewalls nids considered nascent universally accepted standards current practice gather malware approach limited ability scale traffic volume compose previously unseen attack traffic flexible research-oriented toolkit producing maltraffic critical component development standardization benchmarks nids firewalls objective recreate attack traffic scenarios laboratory setting black-box testing protocol suites software hardware systems capability enable move quantitative measurement assessment claims degree individual network devices contribute large-scale correlated failures paper describes design implementation flexible extensible toolkit called malicious traffic composition environment mace mace basic building blocks recreating large set attacks mace satisfies requirements generate large diverse set attacks generate control benign background traffic compose attacks high-level language mace model decomposes attacks components exploit propagation obfuscation knowledge mace tool adopt extensible approach systematic attack synthesis modular attack composition framework mace enables resiliency systems resource exploits traffic mix evaluated mace distinguished efforts thor focus obfuscation methods individual session morphing results work easily folded mace discuss mace framework greater detail provide attack traffic configurations demonstrate mace providing case study popular firewall cisco pix nids snort bro varying traffic mixes results reveal modern firewalls nids easily overwhelmed simple attacks launched small number hosts instances resilience devices attacks varies respect degree connection state maintained device case study illustrates capabilities mace performance benchmarking tool related work internet traffic generation measuring application network device performance well-studied harpoon reproduces network traffic application-oblivious manner numerous application-aware traffic generators surge produce workloads stress-test web servers tools complementary mace generate legitimate benign background traffic taxonomies malicious traffic inform design development mace attack types propagation models taxonomy ddos attack characteristics provided similar taxonomy internets worms based target discovery carriers activations payloads attackers proposed study related work lippman dataset evaluation nids laboratory measurement performance firewall middlebox complementary work allman measured performance operational middlebox infrastructure mace intended black-box evaluation network infrastructure resiliency tuned exploit specific implementation features nids firewalls related efforts focused carefully designed attacks suspected algorithms implementations analogs work mucus nessus mucus tool black-box testing nids systems benchmarking tool nids systems mucus evaluation criteria alert correctness alert quality nessus tool penetration testing network hosts mace differs considerably tools objectives mace framework malicious traffic generation accommodates penetration testing nids benchmarking tool goals performance benchmarking nids middleboxes require complete database accurate replication specific attacks unnecessary faithfully replicate variants beagle worm desirable representatives classes attacks finally mace model isolates obfuscation propagation exploit signatures generate attacks present current vulnerability databases building library exploits obfuscations propagation models enables attacks composed permutation subcomponents spectrum attacks limited set subcomponents mace framework begin defining abstract model mace describe implementation details mace toolkit examples attack instances show composed abstract model definition conceptual model mace illustrated figure flexibility base characteristics malicious traffic define exploit model set vulnerabilities part attack sequence obfuscation model morphs header payload enable exploit elude nids network layer application layer propagation model order victims chosen attacked background traffic model legitimate traffic flow network attack vector aliciousm fficatr compositionnvironmente attack vector welchia blaster syn flood spoofed source fragmentation url rewriting random horizontal sweep coordinated scanexamples test background traffic harpoon surge traffic test objectives figure mace architecture test objectives inform selection composition exploit obfuscation propagation components series attack vectors existing tools harpoon produce desired benign background traffic model realization modular mace library consists exploit obfuscation propagation components defined model number functions support interpretation execution exception handling attack profiles objective provide complete attack database support set basic building blocks create custom attack vectors mace implemented python programming language dynamicism language python important mace enables sequences exploits obfuscations fabricated on-the-fly python libraries support application layer protocols http nntp smtp allowing application-specific exploits easily created evolving scalability requirements plan migrate key components library extending capabilities python interpreter nsextends tcl building blocks mace include payload construction elements payload elements mace defined character arrays practice payloads higher level protocols http netbios smb dce rpc defines http request file index html httprequest method absolute path index html header construction elements attack traffic requires raw sockets construct 
custom tcp udp headers header construction elements mace modify specific attributes exposing entire header user illustrates definition tcp syn packet source destination addresses ports defined propagation elements unspecified fields appropriately filled default random values rawtcp flags syn obfuscation elements obfuscation elements network layer application layer network layer obfuscation fragmentation examples application layer obfuscation include http url encoding techniques bare-byte unicode encoding worms nimda applies unicode obfuscator http request httprequest method absolute path urlobfuscator uencode index html propagation elements mace supports propagation models addresspool objects addresspool instantiated list cidr prefixes port ranges indication generate addresses pool address pools traversed randomly horizontally sequentially addresses sequentially ports vertically sequentially ports sequentially addresses complex methodology definable user illustrates address pool defined perform vertical sweep target address target pool addresspool addresspool vertical test scenarios focus attack vectors syn flood standard denial-of-service attack overwhelms target system sending large number tcp syn packets welchia ping series http requests designed exploit buffer overflow webdav module microsoft iis web server rose attack exploits poorly implemented handling fragments small fragments offset large offset network stacks reserve memory fragment hole series rose packets exhaust memory blaster attack exploits buffer overflow microsoft windows rpc service epmapper attack profiles realized code fragment shown figure attack profiles defined vulnerability exploit propagation method full exploit sequence generator validator steps parameters generator builds packet traffic payload header construction obfuscation building blocks validator collects processes responses attack target verifying generated traffic evoked response step attack vector executed long successful exploit step simply create tcp packet syn flag set line steps complicated create http request document validate http response contained success code produced microsoft web server lines generator steps validation rose attack validation unnecessary lines generators validators simply python functions easy define exploit steps propagation models attack profiles defined address pools lines finally attacks send send periodic functions lines send periodic convenience function produce attack traffic duration delaying amount time successive call send synflood rawtcp flags syn bad string buffer overflow string defined welchia ping httprequest method httpvalidate server microsoft-iis httprequest method search httpvalidate code server microsoft-iis httprequest method search absolute path bad string rosepayload small fragment rose rawudp frag offset frag flag payload payload rawudp frag offset payload payload byte offset bindreq dce rpc bind request defined overflow buffer overflow exploit request defined blaster dcerpcbind bindreq bindreq dcerpcbindack bindreq bindreq dcerpcreq payload overflow src pool addresspool addresspool vertical dst pool addresspool addresspool random http pool addresspool addresspool horizontal send src pool dst pool rose send periodic src pool http pool welchia duration delay figure mace code fragment similar experiments security system performance evaluation demonstrate mace capability examined performance characteristics standard network security systems firewall middlebox network intrusion detection systems running commodity hardware test environment firewall tested cisco pix fast ethernet interfaces ram mhz intel pentium runs version pix firewall operating system typical device deployed line defense edge networks implementing basic packet filtering network address translation nat network intrusion detection systems bro version snort version bro generally maintains significant connection state snort nids ran separate workstation ghz intel pentium processor ram freebsd installed internal network external network traffic generators remote hosts basesx basetx basetx basetx basetx bro snort cisco cisco delayemulator pix ecisco legitimate requestsmace trafficlegitimate responses cisco cisco adtech basetx figure experimental environment legitimate malicious traffic originate internal network directed external network pix firewall separates inside networks performs network address translation machine nids default set rules snort instance default snort conf included software bro policy pix nids configured testbed shown figure setup mimics edge network connected isp legitimate background traffic attacks focused remote network pix resided edge internal network isp external network internal network contained traffic generators mace background traffic nids network traffic received pix duplicated links connected nids external network hardware propagation delay emulator adtech sxbetween backbone-class routers cisco create round-trip time roughly milliseconds traffic generators target servers popular enterprise-scale switches cisco aggregate traffic endpoints host internal network created alias addresses remote hosts created aliases pix performed network port address translation hosts internal network pool addresses routable external network pix performs implicit packet filtering based nat configuration performs nat port address translation pat local addresses part configuration packets source address dropped levels benign background traffic generated attack traffic set exploits levels offered load levels background traffic low high generated harpoon tuned averages mbps mbps source destination addresses legitimate traffic chosen randomly pool source addresses pool destination addresses levels attack load generated hosts running mace exploit mace processes single host configured generate roughly mbps traffic background traffic level exploits welchia worm traffic syn flood denial-of-service attack syn flood spoofed source addresses rose fragment attack multi-modal attack consisting previous exploits blaster worm traffic host running mace host modified kernel parameter debug bpf bufsiz bytes bytes suggested bro documentation snort benefit change applied change nids host source address pool syn floods rose attack horizontally traversed source address pool worm exploits randomly uniformly sampled source address pool attack traffic directed single address remote network test measurements distinct experiments measured cpu memory utilization systems seconds measured packet counts pix seconds number reported packet drops snmp packet traces side pix nids hosts verified capabilities software package report received packet volume number dropped packets packets dropped system due overflow queue incoming packets received packet filter nids berkeley packet filter libpcap packet capture packet drops nids discriminate benign malicious traffic pix packet traces measure drops benign packets experiment run minutes including minute warm-up phase measurements discarded results figure shows average cpu utilization figure shows packet loss measurements experiment columns figure correspond low high background traffic levels rows display results device feature notice plots diversity responses system distinct mace attack profiles cases noticeable large divergence data points points correspond malicious traffic single mace host discuss detailed results device class firewall nids effects pix firewall pix rose attack effect performance processing fragmented packets pix queue default fragments order reassemble forwarding remote network missing fragments arrive configurable amount time default seconds fragments dropped rose attack fragment queue full shortly starting mace fragments arrive queued dropped fragmented legitimate traffic setup packets dropped attack rate rose packets queues interface 
fragment reassembly queue share common buffer pool fewer buffers rose attack interface queues fill causing additional packet drops non-spoofed syn flood attack impact pix pix performing nat maintain state connection single mace host system memory pix documentation notes set fragment reassembly maximum queue length equal total number buffers documentation warns configuration enable fragment attacks effective denial-of-service attacks load percent utilization pix firewall welchia syn flood syn flood spoofed rose multimodal low background load load percent utilization bro welchia syn flood syn flood spoofed rose multimodal load percent utilization snort welchia syn flood syn flood spoofed rose multimodal load percent utilization pix firewall welchia syn flood syn flood spoofed rose multimodal high background load load percent utilization bro welchia syn flood syn flood spoofed rose multimodal load percent utilization snort welchia syn flood syn flood spoofed rose multimodal figure cpu utilization measurements results pix bro snort top middle bottom rows left columns show results low high background traffic loads load levels x-axis correspond number mace hosts test mace host generates roughly mbps traffic attack background traffic level load percent loss pix firewall welchia syn flood syn flood spoofed rose multimodal low background load load percent loss bro welchia syn flood syn flood spoofed rose multimodal load percent loss snort welchia syn flood syn flood spoofed rose multimodal load percent loss pix firewall welchia syn flood syn flood spoofed rose multimodal high background load load percent loss bro welchia syn flood syn flood spoofed rose multimodal load percent loss snort welchia syn flood syn flood spoofed rose multimodal figure packet loss measurements results pix bro snort top middle bottom rows left columns show results low high background traffic loads plots pix show packet drops benign traffic plots bro snort show aggregate packet drops load levels x-axis correspond number mace hosts test mace host generates roughly mbps traffic attack background traffic level short state requirement memory buffering packets flow system memory pool smaller pix diminished ability absorb bursts packets situation occur spoofed syn flood source addresses conform nat configuration pix dropped traces persistent dropping legitimate packets non-spoofed syn flood multimodal experiments low high background traffic regimes aggregate traffic rates pix show well-known poor performance tcp face high packet loss low background syn flood experiment mace host inbound external internal packet rate pix spoofed syn flood nonspoofed syn flood experiments mace process results dramatic summary maintaining state managing system resources low rate non-spoofed syn flood difficult specialized device rate resources consumed embryonic connections reclaimed pix sweet spot syns low rate problems good traffic high rate easily detect welchia blaster worms worms typically short flows low attack rate primary effect pix increased rate connection initiations pix special packet filters installed worms benign traffic treated legitimate packets experiments pix appears sufficiently provisioned handle increased volume finally interesting note rose spoofed syn flood packets dropped pix attacks peculiar effects cpu usage detailed internal information pix surmise path handling fragments significantly faster process matching source address nat configuration pix pointed potential denial-of-service problem related fragment processing summary non-spoofed low-rate syn floods effective resource exploits leading significant service degradation obfuscations packet fragmentation effective resource exploits poorly configured systems effects bro snort sharp contrast behavior bro snort rose attack effect bro enormous impact snort bro snort receive raw packets network interface perform reassembly fragments bro handle fragments efficiently snort snort maintains state bro bro pix non-spoofed syn flood greatest impact cpu load packet loss timeouts defined pix reclaim resources idle half-closed connections feature called floodguard essentially prioritizes resources reclaim order deal resource shortages experiments shorter default values timeouts hour idle connections minutes half-closed connections non-spoofed syn flood bro maintains state attackinduced connections bro periodically expires idle connection state rate syns experiment high bro eventually exhausted memory table connections continues grow attack connection state lookups costly resulting effect packet drops shown center column graphs figure reason spoofed syn flood impact bro pix silently blocks spoofed syns bro syn ack response apparently lack response bro flush embryonic connection state efficient manner welchia attack snort performs similarly attacks syn floods rose multimodal attacks packet-level attacks contrast welchia perspectives tcp legitimate background traffic snort efficiently processing ill-formed packets pathological packet sequences requirement challenge nids respect packet loss bro snort exhibit contrasting behavior welchia attack snort consistently drops roughly packets mace traffic introduced bro maintaining significant connection-level state drops small proportion packets non-spoofed syn flood attack nids significant level packet dropping affect ability tool detect ongoing attacks additionally knowledge packet dropping behavior exploited attacker launch benign lowrate attack order mask insidious summary multiple attack vectors effective resource exploits leading packet loss implying degraded detection rates marginal impact resource exploits greater nids maintaining connection state conclusions future work escalation malicious activity internet motivates tools measure resiliency routers middleboxes malicious traffic address propose mace framework malicious network traffic generation mace architecture composed building blocks exploits obfuscators propagation elements components define create malicious traffic laboratory testing routers network security infrastructure provided experimental results measurements conducted popular firewall network intrusion detection systems document varying responses systems malicious traffic results show low rates attack traffic exploit overheads maintaining connection state inefficient processing packets tool mace testing refining operation network systems wrong hands generating malicious traffic live internet plan making mace wider experimented reduce-memory policy script bro caused increase cpu usage higher packet loss rates attacks default configuration snort lacks specialized rules processing http traffic enabling http-specific rules higher cpu load packet drops attack profiles community supply code legitimate researchers ability careful documentation copies code precautions remains possibility mace misused mace self-propagate seeding worms plan expand list exploit obfuscation building blocks mace make improvements volume exploit traffic mace produce enhancements facilitate laboratory emulation large-scale failure scenarios elaborate physical logical topologies greater diversity network devices acknowledgements somesh jha jon giffin shai rubin anonymous reviewers helpful comments material based work supported national science foundation grant support cisco systems opinions findings conclusions recommendations expressed material authors necessarily reflect views national science foundation cisco systems microsoft security bulletin http microsoftcom technet security bulletin mspx microsoft security bulletin http microsoftcom technet security bulletin mspx nessus http 
nessus network simulator nshttp isi nsnam niscc vulnerability advisory http uniras gov vuls thor tool test intrusion detection systems variations attacks http thor cryptojail net allman performance middleboxes proceedings acm sigcomm internet measurement conference aronne nimda worm overview http sans papers pdf barford crovella generating representative web workloads network server perfromance evaluation proceedings acm sigmetrics cowie ogielsky premore yuan global routing instabilities triggered codered nimda worm attacks http renesys projects bgp instability crosby wallach denial service algorithmic complexity attacks usenix security gandalf fragmentation rose attack http securityfocus archive lee cabrera thomas baliwalli saluja zhang performance adaptation real-time intrusion detection systems proceedings raid lippmann fried graf haines kendall mcclung weber webster wyschogrod cunningham zissman evaluating intrusion detection systems darpa off-line intrusion detection evaluation proceedings ieee security symposium mirkovic reiher taxonomy ddos attack ddos defence mechanisms acm sigcomm computer communication review mutz vigna kemmerer experience developing ids simulator black-box testing network intrusion detection systems proceedings acsac sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference weaver paxson staniford cunningham taxonomy computer worms proceedings ccs worms 
characteristics internet background radiation ruoming pang vinod yegneswarany rpang princeton vinod wisc paul barfordy vern paxsonzx larry peterson wisc vern icir llp princeton abstract monitoring portion internet address space reveals incessant activity holds monitoring traffic unused addresses term background radiation background radiation reflects fundamentally nonproductive traffic malicious flooding backscatter scans vulnerabilities worms benign misconfigurations general presence background radiation network operator community nature broadly characterized develop characterization based data collected unused networks internet key elements methodology filtering reduce load measurement system active responders elicit activity scanners order differentiate types background radiation break components background radiation protocol application specific exploit analyze temporal patterns correlated activity assess variations networks time find menagerie activity probes worms autorooters heavily dominate conclude considerations incorporate characterizations monitoring detection activities categories subject descriptors local widearea networks internet general terms measurement keywords internet background radiation network telescope honeypot introduction recent years basic characteristic internet traffic changed older traffic studies make mention presence appreciable on-going attack traffic monitoring operating today networks immediately familiar incessant presence traffic good dept computer science princeton ydept computer science wisconsin madison zinternational computer science institute xlawrence berkeley laboratory permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee imc october taormina sicily italy copyright acm broadly characterize traffic nonproductive destined addresses exist servers running servers receive traffic hostile reconnaissance scan backscatter flooding attack victimizing spam exploit attempt volume traffic minor traffic logs lawrence berkeley national laboratory lbl arbitrarily-chosen day show remote hosts scanned lbl addresses total million connection attempts double site entire quantity successfully-established incoming connections originated distinct remote hosts fine-grained study remote scanning activity found day scanners probing lbl addresses nonproductive traffic filter order detect types malicious activity phenomenon incessant nonproductive traffic detailed characterization literature lacked means answer questions study aim provide initial characterization traffic traffic pervasive nature demonstrate term internet background radiation basic issue attempting measure background radiation large determine observed traffic unwanted simply include unsuccessful connection attempts conflate unwanted traffic traffic representing benign transient failures accesses web servers running happen off-line measurement period measuring traffic hosts don exist internet addresses unallocated unused eliminate forms benign failures focus traffic highly reflect unwanted activity addition analyzing unused addresses yields major measurement benefit safely respond traffic receive means passively measure unwanted traffic ports probed engage remote sources order elicit intentions specific actions duped thinking found running server newness type internet measurement contributions study set methodologies develop analysis include considerations filtering reduce load measurement system construct active responders differentiate types background radiation ways interpreting facets collected data merit investigation ways goals study prosaic aim characterize nature background ubiquity runs risk boring sameness fact measure success achieve numbingly complete characterization background radiation facilitate construction classifiers remove elements background radiation set observations classifiers offload types network analyzers reducing state network intrusion detection system track provide means return simpler world decade ago allowing recover notion normal attack-free traffic attack-free traffic highly valuable establishing baselines types analysis flag departures normality harbingers malicious activity meriting investigation proceed study discuss previous work related efforts describe sources data study methodology related capturing analyzing data analyzes learn monitoring purely passively extends learn respond traffic receive evaluate aspects traffic source behavior conclude summary themes developed study related work studies characterized specific types malicious traffic moore investigate prevalence denial-of-service attacks internet backscatter analysis observing attack traffic replies flooding victim routed internet due attacker spoofed source addresses measurement studies code red worm outbreaks sapphire slammer worm outbreak provide detail method speed effects worm propagation internet additional studies assess speed counter-measures deployed inhibit spread similar worms empirical components studies based largely data collected network telescopes similar study active-response component related paper staniford mathematically models spread code red considers threats posed potential future worms small scale study internet attack processes fixed honeypot setup provided yegneswaran explore statistical characteristics internet attack intrusion activity global perspective work based aggregation analysis firewall intrusion detection logs collected dshield period months coarsegrained nature data precluded assessment attacks attribution specific ports finally yegneswaran provide limited case study demonstrates potential network telescopes provide broad perspective internet attack activity extend work developing comprehensive analysis attack activity unused address space important source information intrusion attack activity measurement systems deployed unused address ranges referred internet sink-holes network telescopes active projects focused unused address space monitoring include honeynet honeyd honeynet focuses live vmware-based systems monitor unused addresses honeyd set stateful virtual responders operate interactive honeypot finally network intrusion detection systems including snort bro variety commercial tools commonly detect scans specific malicious payloads emerging area research automated generation attack signatures honeycomb extension honeyd longest common substring lcs algorithm packet-level data recorded honeyd automatically generate signatures recent work pursues similar approach including earlybird autograph study inform future developments systems respect type volume ambient background attack activity measurement methodology section describes methods tools measure analyze background radiation traffic addressing key issues taming large traffic volume listen respond background traffic thousands millions addresses sheer volume traffic presents major hurdle handle approaches devising sound effective filtering scheme significantly reduce traffic volume maintaining variety traffic building scalable responder framework respond traffic high rate building application-level responders find tcp syn packets dominate background radiation traffic passive measurements means accept connections sources extend dialog long distinguish types activities involves building responders application protocols http netbios cifs smb taming traffic volume responding entirety background radiation traffic received thousands millions addresses entail processing enormous volume traffic packets background radiation class network monitor taming traffic volume requires effective filtering important investigate scalable approaches building responders discuss turn filtering devising filtering scheme balance trade-offs traffic reduction amount information lost filtering considered strategies source-connection filtering strategy connections initiated source discards remainder disadvantage strategy inconsistent view network source live addresses unreachable problem effective serviceor attack-dependent attacks code red suffices multi-stage activities welchia multi-vector activities agobot require larger values source-port filtering strategy similar connections source destination port pair alleviates problem estimating multi-vector activities agobot multi-stage activities single destination port welchia remain problem strategy exposes inconsistent view network filter size number 
live destination ips source effectiveness filter reduction pkts bytes campus pkts campus bytes lbl pkts lbl bytes filter size number live destination ips source effectiveness filter reduction pkts port http port dcerpc port netbios smb port mydoom figure effectiveness filtering networks left services source-payload filtering strategy instance type activity source data richness perspective attractive hard implement practice activities similar respond packets true multi-stage activities chatty protocols netbios strategy requires significant state source-destination filtering strategy chose experiments based assumption background radiation sources possess degree affinity monitored addresses specifically source contacts destination address displaying activity assume kind activity addresses source contact find assumption generally holds case multi-vector worms pick exploit address identify attack vectors figure illustrates effectiveness filtering networks services run two-hour interval plot shows filter reduces inbound traffic orders magnitude networks lbl network obtains significant gains larger campus networks campus network intentionally respond stage exploits frequently-seen welchia variants step send large attack payload buffer overflow plot illustrates effectiveness filter services blaster port mydoom port scanners tend horizontally sweep subnets lead significant gains filtering energetic http netbios scanners nipped bud low benefit active sink event-driven stateless responder platform part active response framework explores stateless approach generating responses goal devising highly scalable architecture active sink active response component isink measurement system developed scalably monitor background radiation observed large address blocks active sink simulates virtual machines network level honeyd maximize scalability implemented stateless fashion click kernel module achieves statelessness form incoming application traffic determine response including sequence numbers maintaining transport application level state key question approach responders constructed stateless fashion exploring issue scope present work note responders discuss implement stateless form active sink stateful form based honeyd facilitate dual development developed interface modules underlying code responders application-level responders approach building responders data driven determined responders build based observed traffic volumes general strategy pick common form traffic build responder detailed differentiate traffic specific types activity unknown category type activity sufficiently small repeat process largest type traffic process built array responders protocols figure http port netbios port cifs smb port dce rpc port cifs named pipes dameware port built responders emulate backdoors installed mydoom port beagle port application-level responders adhere structure underlying protocol sources probing implementation protocol emulate behavior target software order conversation http webdav demonstrates entails frequent requests port responding mimicking microsoft iis webdav enabled elicit traffic sources full sequence plays server microsoft-iis search length required search aaa uri length buffer overflow exploit received types activity require intricate responders microsoft windows services run top cifs port lead develop detailed set responses shown figure requests named pipes tunneled dce rpc responders complicated activities exploit samr srvsvc pipe involves ten rounds exchanging messages source reveal specific intent attempting create executable file destination host figure shows classify source create andx honeyd active sink responder honey interface http responder welchia agobot codered tickerbar ports nbns responder netbios requests port smb responder welchia sasser xibo agobot randex port responder port dcerpc responder welchia blaster agobot ports dameware responder agobot port echo responder beagle mydoom agobot ports rpc smb figure top level umbrella application responders request msmsgri exe netrremotetod command schedule worm process invoked minute timeofday found attack sequence shared viruses including lioten worm agobot variants building responders prove difficult due lack detailed documentation services cifs dce rpc resort probing actual windows system running virtual machine environment order analyze responses makes route infected modified existing trace replay tools flowreplay purpose generally types activities emerge time responders evolve find current pace maintaining responders tractable important question degree automate development process srvsvc samr exe epmapper rpc buffer overflow locator welchia locator buffer overflow svcctl msmsgri exe winlord exe wmmiexe exe lovgate exe microsoft exe lsarpc negotiate protocol session setup port figure summary port activity class sessions arcs number sessions traffic analysis engage conversations background radiation sources undertake task understanding traffic approach components separate traffic analysis responders analyze traffic terms application-level semantics job traffic analysis responders responders understand traffic significant benefits performing traffic analysis independently capturing storing tcpdump packet traces off-line analysis approach preserve complete information traffic evolve analysis algorithms time flip side poses challenge analysis tool tcp stream reassembly application-protocol parsing address issue built tool top bro intrusion detection system convenient platform application-level protocol analysis found early order filter background radiation traffic normal traffic understand application semantics traffic background radiation traffic distinctive application semantic characteristics compared normal traffic sections differences difficult detect network transport level analysis important limitation attempt understand binary code contained buffer-overrun exploits means worm autorooter exploit due lack publicly database worm virus autorooter packet traces variant existing worm arises exploits vulnerability discern difference analysis identify worm exploits vulnerability case sasser worm experimental setup conducted experiments sites ran systems isink lbl sink conducted forms application response underlying mechanisms isink isink instance monitored background traffic observed class network addresses subnets addresses adjacent campus class net- smb negotiate protocol request smb negotiate protocol response smb session setup andx request smb session setup andx response smb tree connect andx request path ipc smb tree connect andx response smb create andx request path samr smb create andx response dcerpc bind call uuid samr dcerpc bind ack samr connect request samr connect reply samr enumdomains request samr enumdomains reply samr lookupdomain request samr lookupdomain reply samr opendomain request samr opendomain reply samr enumdomainusers request start session connect srvsvc pipe issue netremotetod remote time day request smb negotiate protocol request smb negotiate protocol response smb session setup andx request smb session setup andx response smb tree connect andx request path ipc smb tree connect andx response smb create andx request path srvsvc smb create andx response dcerpc bind call uuid srvsvc dcerpc bind ack call srvsvc netrremotetod request srvsvc netrremotetod reply smb close request smb close response connect admin share write file smb tree connect andx request path admin smb tree connect andx response smb create andx request path system msmsgri exe smb create andx response fid smb transaction request set file information smb transaction response set file information smb transaction request query information smb transaction response query information smb write request figure active response sequence samr-exe 
viruses nat filter campus nat filter class translation trace collection src dest filtering network address active sink filtered request response filtered request response unfiltered request filtered response intra campus router active trace collection external border router internal border router tunnel filter passive trace collection src dest filtering udp encapsulation honeyd responder filtered responsesfiltered requests lbl setupisink setup figure honeynet architecture isink lbl works filtered packets routed network address translation active sink figure separate filters class network campus subnets collected sets tcpdump traces networks prefiltered traces packet headers passive measurements periods active responders turned filtered traces complete payloads active traffic analysis prefiltered traces class network sampled packets mitigate storage requirements lbl sink lbl sink monitors sets contiguous subnets passive analysis listen respond filter traffic active analysis divide halves subnets apply filtering separately filtering system tunnels traffic active responders shown figure tunnel one-way responses routed directly internal router set application protocol responders lbl isink invoked honeyd isink honeyd sufficient scale traffic lbl filtering trace active response traffic honeyd host stated halves subnets site networks size datasets duration isink uw-i active mar passive mar uw-ii active mar passive mar class active mar mar passive mar mar lbl sink lbl-a active mar lbl-p passive apr table summary data collection note lbl campus prefix locality class network table summarizes datasets study network collected passive tcpdump traces filtered activeresponse traces networks lbl network collected months worth data provisional access class enabled collect weeks data sites mechanisms forward packets active responder tunneling network address translation nat lbl site tunneling encapsulation datagrams inside udp datagrams advantages straightforward implement require extensive state management forwarder tunneling requires receive end decapsulate traces analysis handle fragmentation full-mtu packets allocate dedicated tunnel port nat hand issues necessitates maintaining per-flow state forwarder significant large networks stateless responder deployed site state ephemeral makes approach feasible maintain consistent flow outstanding incoming packet flow record filter evicted sees response lifetime flow records order milliseconds rtt forwarder active-sink seconds passive measurement background radiation section presents baseline background radiation traffic unused addresses actively responding packet starts traffic breakdown protocols ports takes close facet traffic backscatter traffic composition question background radiation characteristics type volume observed traffic start answer question snapshots background radiation traffic shown table includes hour trace collected campus network week trace lbl collected contiguous networks april finally one-week trace class sampling march protocol uwlbl-p class rate rate rate tcp icmp udp table traffic rate breakdown protocols rate computed number packets destination address day network size sampling rate normalized tcp dominates networks lower tcp rate class partly due artifact class trace collected mar large worm malware outbreaks include sasser worm shown table observed tcp packets tcp syn large number icmp packets icmp echo-req lbl form daily high volume spikes figure result small number sources scanning address observed networks hand lot fewer icmp packets class monitor welchia worm probes icmp echo-req avoids class network finally surprising low rate udp packets observed largely due artifact filters udp port slammer worm figure tcp syn packets lbl arrive steady rate case networks contrast daily icmp spikes closer breakdown tcp syn packets destination port numbers lbl table reveals small number ports time hour number packets hour icmp tcp udp figure number background radiation packets hour lbl targets majority tcp syn packets ports listed table account packets table shows traces perspective source traffic note rows mutually exclusive host send tcp udp packets clear tcp packets dominate population source hosts distribution ports lbl traffic shown table small number ports dominant protocol lbl srcip percentage srcip percentage tcp icmp udp table traffic breakdown number sources tcp port source packets table popular tcp ports ports visited number source ips week passive trace lbl total packets distinct source addresses tcp syn packets constitute significant portion background radiation traffic observed passive network obvious question intentions connection requests explore question section analysis backscatter activity term backscatter commonly refer unsolicited traffic result responses attacks spoofed network address figure time-series graph backscatter activity networks surprisingly tcp rsts syn-acks account majority scans networks common responses spoofed syn-flood denial service attack figures class networks span wed thu fri sat sun mon tue wed day week number packets hour rst syn-ack comm adm proh host ttl exceeded backscatter wed thu fri sat sun mon tue wed day week number packets hour rst syn-ack comm adm proh host ttl exceeded backscatter wed thu fri sat sun mon tue wed day week number packets hour rst syn-ack ttl exceeded backscatter lbl fri sat sun mon tue wed thu day week number packets hour rst syn-ack backscatter syn-acks rsts class fri sat sun mon tue wed thu day week number packets hour ttl excd transit comm adm prohibited comm adm prohibited host port unreachable host unreachable remaining backscatter class figure time series weekly backscatter networks note class shown charts showing components backscatter dominant rst syn-ack weeks backscatter networks highly similar terms volume variability observed tcp rsts syn-acks surges icmp ttl-exceeded shown figures makes sense spoofed traffic eliciting backscatter uniformly distributed addresses difference networks receive communication administratively prohibited icmp messages explanation common spikes syn-acks class networks significant differences rsts notable difference class network attracts backscatter categories shown figure lbl graph shown figure belongs week displays pattern note backscatter networks week shown shows similar pattern lbl dominant traffic types tcp rsts syn-acks icmp ttl-exceeded surprising networks lbl network belong network hand lbl network receive fewer scans categories significant portion icmp host-unreach messages class responses udp packets spoofed source addresses port port thought backscatters dns poisoning attempts found udp packets networks examining packets reveals dns packets windows messenger pop-up spams discussed section activities background radiation section divide traffic ports present tour dominant activities popular ports add temporal element analysis volume activities vary time details port rank activities popularity number source ips packet byte volume reasons filtering algorithm biased sources reach destinations affects packet byte volumes unevenly activities number source ips largely remain unaffected filtering assuming symmetry destinations number source ips reflects popularity activity internet activity huge number sources prominent internet finally single-source activities result eccentric host multi-source activity intentional port abbrev activity 
getsrch search srchaaa search search aaa srch search byte uri bind rpc bind rpc unknown rpc request bytes bla rpc exploit blaster wel rpc exploit welchia rpc-x rpc exploit exploit tcp empty tcp probe tcp rpc exploit exploit nego tcp session negotiation locator ipc locator rpc exploit exploit samr-exe dst-ip ipc samr dst-ip ipc srvsvc create file exe samr dst-ip ipc samr srvsvc dst-ip ipc srvsvc epmapper dst-ip ipc epmapper table abbreviations popular activities source host contacts port common sends probes revealing real intention connection destination host probe empty connection source opens closes connection sending byte short request http interested intention sources choose activities per-session sourcedestination pair granularity per-connection granularity reach conclusion probes dominant elements connections source-destination pair destination port collectively suppress repetitions approach clear picture activity port examine activities popular destination ports port present dominant activities convenience presentation introduce abbreviations activity descriptions shown table pick arbitrary day march compare distribution activities networks lbl class network networks single network eliminate bias occur due single filter background radiation traffic highly concentrated small number popular ports mar distinct source ips lbl source hosts contacted port popular ports discussed popular ports cover background radiation activity note ports distinguish background radiation traffic popular ports tcp http tcp dce rpc tcp smb heavily normal traffic hand background radiation traffic application semantic level distinctive modal distribution activities port predominantly targeted interfaces buffer-overrun exploits focused interface worth noting activity composition change dramatically time ignore effect source spoofing responder establish tcp connections source hosts activity lbl class getsrch srchaaa srch codered nimda table port activities mar note reduce trace size active responders class respond search avoid large srchaaa requests vulnerabilities worms dominant activity port longer locator rise sasser worm modal pattern long background radiation traffic remains highly automated tcp port http http proxy ports activities port table targeted microsoft iis server cases imitating response typical iis server enables attract follow-up connections source dominant activity port webdav buffer-overrun exploit denoted srchaaa exploit makes probes search connection sending search request long uri cases bytes length vary starting aaaa overrun buffer unlike exploits ports exploit shows lot payload diversity uris hundreds bytes difference due byte shifting interestingly uris composed solely lower-case letters dozens unicode characters beginning uri appears constructed venetian exploit executable code unicode encoding inserting byte byte exploit webdav exploits popular exploit srch agobot carries fixed byte uri iis worms nimda codered remain visible datasets codered worm original codered shift space change expiration date year options propfind request requests short probes elicit requests sources fully comprehend intention probes suspect scanners obtain listing list scriptable files sending translate header http request interesting component background radiation observed networks http proxy ports port source hosts open-proxies send probes tickerbar net typical request shown figure requests sources abusing rich quick money scheme greenhorse web site pays users money running tickerbar surf net open-proxies sources potentially running hundreds nodes greenhorse website inactivated ports officially assigned http traffic received contained http requests http tickerbar net tld pxy http host tickerbar net connection close figure typical http request tickerbar host lbl class data set volume percentage source ips rpc-x wel bla rpc bind empty figure port activities mar tcp port dce rpc port endpoint mapper port windows systems entry points exploit infamous microsoft windows dcom rpc service buffer overrun vulnerability vulnerability exploited blaster worm welchia worm figure shows dominant activities port blaster worm networks strangely welchia worm lbl number empty connections follow-ups types probes rpc understand comparing activity distribution networks difference striking unlike ports due lack single dominant activity scanning exploits targeted localized port open normal windows host similar set exploits dce rpc exploits smb pipes port present closer rpc exploit section tcp port cifs port netbios session service port windows systems cifs common internet file system netbios port cifs tcp microsoft-ds cifs sessions ports identical netbios requires extra step session setup sources simultaneously connecting ports prefer port abandon port connection frequently empty port connections windows services run top cifs great variety exploits ports figure shows snapshot exploits port class network basically kinds activities buffer-overrun rpc exploits named pipes locator pipe epmapper pipe connected endpoint mapper service access control bypassing attempts upload executable files target host exploit samr-exe shown table locator pipe exploit dominates port activities networks sources session negotiation step step activity lbl class empty nego locator samr-exe samr srvsvc epmapper table port activities cifs session exploits connect samr session account manager pipe connect srvsvc pipe attempt create executable file names msmsgri exe randex microsoft exe finally connecting epmapper pipe sources exploiting vulnerability port note activity class network port source hosts initiate empty connections netbios session setup stage migrate port dominant activity accurately identify attempts create files startup folders connecting srvsvc pipe exe -xibo unlike port hosts attempting exploit buffer overflows locator epmapper pipe agobot variants connect samr pipe drop executables tcp port dameware port listened dameware remote control administration tool windows systems buffer overrun vulnerability early versions dameware exploits similar published exploit programs payload launch exploit source host send byte message probe operating system version ship exploit payload bytes long mar source hosts connect port lbl close connections sending byte abandoned connections sending probe message exploit messages remaining number apr reasonable question large number abandoned connections suggest sources responders find source hosts connect empty connection back send exploit port agobot connects variety ports section possibilities bots connect number ports simultaneously decide exploit port receive response tcp port virus backdoors port backdoor ports mydoom virus beagle viruses port connections fixed -byte header windows executable files uploads files marked bytes string program run dos mode head file running captured executable files closed environment reveals programs scan tcp ports port dominant payload lbl ftp url exchanging due isink responder problem data class network short binary messages ftp bla bla src-ip port bot exen class network lot port activities interestingly source hosts attempt upload windows executables hosts close connection exchange initial message port cases binary upload echoing header similar port cases receive cryptic -byte message unable elicit response echoing tcp port exploit follow-ups worms codered slammer contained completely buffer-overrun 
payload worms blaster sasser infect victim hosts steps buffer-overrun payload carries piece shell code listen port accept commands source instructs shell code download execute program remote host port follow-up port blaster worm tftp src-ip msblast exe start msblast exe msblast exe similarly port agobots sasser sequences shell commands download execute bot exe contrast kind shell code called reverse shell listen port connects back source host home port source host randomly chosen embedded shell code victim welchia worm reverse shell random port selection flawed makes harder capture contents follow-up connections understand shell code find phonehome port initiating connections honeypots violates policy hosting networks empty udp port expected lot dns requests find sources sending non-dns malformed packets shown domain domain udp sum type class domain ttl len xxxx xxxx xxxx packets requests dominate udp packets observed lbl networks table summary dns activity observed class network hour trace showing diverse activity lbl networks sources sending malformed dns requests dominate terms packet counts queries substantial suspect possibly due misconfigured dns server addresses hosts queries destination addresses originate networks result stale dns entries biggest contributor terms volume standard queries resolve address domain names soa packets start authority packets register domain authorities observed sources total registering domain authorities bgc net queries include ptr queries reverse dns lookups srv records locations services aaaa queries ipv resolution type num packets num sources malformed packets standard queries standard query soa standard query ptr dns standard query srv packets dns standard query aaaa packets dns standard unused packets dns standard unknown packets table summary dns activity class hours udp port activities dominated netbios standard queries probes udp port windows messenger pop-up spam udp packets source port destination port port combination typically connotes dns reply examination packet contents reveal fact dce rpc requests exploit weakness windows messenger api deliver spam messages unpatched windows desktops figure shows trace typical packet source addresses packets spoofed suggested observed icmp host-unreach backscatter attacks class choice source port evade firewalls domain xxx xxx xxx xxx class type domain ffff ffff real wom sex fin exx xxxx xxxx xxxx biz figure observed windows messenger pop-up spam packets udp port slammer worm alive background radiation port tcp port built detailed responder ms-sql appears source hosts log blank passwords tcp port port port reserved universal plug-and-play windows systems requests valid http requests requests number consecutive nop buffer-overrun exploits ports examine exhibit modal distribution application semantic level dominant elements exception dce rpc ports diversity sense exploits dce rpc ports single dominant element higher level target vulnerability dominant elements normal traffic suggests filter majority background radiation traffic sound classification scheme time day number source hosts locator srchaaa rpc exploit bytes sasser lsarpc figure big exploits apr observed networks lbl source hosts counted hours application semantic level temporal distribution activities examine cases temporal activity exploits largest source population distributional variation time exploits targeted vulnerability exploits evolve diversify time focus lbl network analysis dominant exploits figure shows numbers source hosts vary days exploits largest source population source volumes srchaaa locator exploits stable close time surprising exploits coming worm section exploits exploit sasser show wider range source volume dynamics true exploit temporarily retreated smaller scale april exploits demonstrate strong diurnal pattern obvious peaks local time noon good explanations pattern srchaaa locator sasser exploits peak due hosts turned daytime local-biased search exploit steep narrow peaks lead caused scanning mechanism dce rpc exploits dce rpc exploits target microsoft dcom rpc vulnerability present interesting case single well-known vulnerability reused worms autorooters vulnerability attractive exists unpatched windows system contrast vulnerabilities exist iis sql servers exploit payloads data payload lengths result intentional polymorphism reasons single source payload length easy vary length payload simply inserting nop adversary wanted incorporate polymorphism infer diversity payloads due deliberate polymorphism due code bases payloads interesting diversity due shell code carry diversity offers opportunity rising ebbing exploit programs robust cluster payloads contents payloads length differ tens hundreds bytes differences byte shifting choose cluster exploits lengths ports including port epmapper pipes port scheme exploit types select popular exploits number source addresses exploit varies time april exploits payload lengths port observe strong temporal correlation exploits length lengths case lengths exploits show correlation terms activity port port due source probing ports find multiple sources activity port length pairs bursty spikes suggesting synchronized scanning sources characteristics sources section examine background radiation activities terms source hosts associate activities coming source construct activity vector source examine dimensions ports destination networks time caveat identifying hosts addresses due dhcp hosts assigned addresses time study concluded addresses accurate measure spread worm timescales longer hours notion identify hosts addresses identify hosts keeping caveat mind ports associating activities ports significantly picture source goals helps analyzing puzzling activities puts behavior individual ports context collective activity simply rpc exploit readily reveal worm autorooter sends follow-up port tftp msblast exe earlier exploit blaster table summary top multi-port scanning episodes networks common sources scan viruses exploit netbios smb cifs exhibit behavior propagation ports interchangeably common multiport source behavior exploits microsoft dce rpc vulnerability port connecting epmapper pipe port port episode variants welchia port connections empty rest small portion buffer overrun exploits find agobot variants occasionally target services connect samr pipe cifs obtain registry information sequence figure drop file mdms exe startup folders common profiles exclusively agobot variants iii marmar- marmar- mardate month-day number sources hour agobot sources marmar- marmar- mardate month-day number sources hour agobot sources figure time series activity agobot ports networks adjacent class networks ports description lbl class num sources rank num sources rank num sources rank num sources rank nbxi exe -xibo msmsgri exe randex antivirus exe sdbot nb-ep epmdms exe agobot nb-ep epep- agobotagobot variant-i agobotagobot variant-ii agobotagobot variant-iii table hours multi-port source activity sites examine spatial variance multi-port profiles comparing data collected network hour period order profiles based ranks multi-port profiles collected network showed greatest affinity agobot table reveals notable observations top exploits extensively observed networks rankings consistent class networks spatial invariant lbl network smaller observes number sources networks top exploits due fact networks belong suggests multi-port sources sweep address space receives agobot scans networks 
don explore agobot scans greater detail figure figures show volume unique sources hour agobot ports day period march adjacent networks graph shows visible spikes indicating agobot attack background radiation closely follow agobot spikes peculiarly absent graphs provide temporal perspective growth agobot striking daily spike-followed-bydecay pattern machines cleaned day agobot class network reflects agobot maturity malwares iterative enhancements essentially evolved activity lbl class lbl lbl class srch loc samr-exe witty table traffic sources networks intersections individual networks programmed avoid telescopes equipped list target networks scanning consciously focused human operator irc control channels sources networks sets source hosts multiple networks approximately time analyze source ips networks arbitrarily chosen day mar gmt characterizing terms source hosts send traffic networks activity distribution compare distribution individual networks shown table source ips lbl surprisingly large intersection set half source ips lbl contrast intersection lbl class smaller mar mar apr -day -month srch loc witty blaster table traffic sources time intersections individual periods source ips class contrast due sources avoiding class networks proximity lbl address space evaluation confirm source sends traffic networks extract activity vector source lbl networks compare finding case peculiarity thousand srchaaa locator sources common find thousand locator-only sources network srchaaa-only sources turns due interaction source-destination filtering scanning mechanism srchaaa locator sources sources choose apparently randomly send srchaaa locator destination finally activity profile source shown table sources exhibiting dominant activity profile srchaaa locator multiple locations network hand samr-exe witty present interesting case samr-exe sources intersection lbl find lbl inconsistency caused number source hosts completing exploit contacting lbl identified addition samr-exe population surprisingly large overlap lbl hand lbl class samr-exe sources common class suggesting samr-exe sources scan local bias sources time characterize sources network time analyze activity lbl days march march april comparisons adjacent days month table characterizes variation intersection source hosts case day smaller intersection networks partly network larger lbl set sources lbl network size march find hosts common confirms tend larger intersection source ips networks time effect controlled dhcp artifacts host assigned addresses days note month time greatly reduce intersection size suggesting host dhcp artifact stay intersection initial steep decaying source sets suggest easier track malicious host space time icmp unreachable backscatter class network constitute significant number source ips exclude comparison avoid skewing activity distribution number source hosts time varies activity witty persist month rare instance worm deliberately damages host blaster grip hosts tenacious srchaaa locator sources fall summary previous studies internet traffic identified number well-established properties diurnal cycles volume variability mix sites time bursty arrivals ubiquity heavy-tailed distributions past years important dimension internet traffic emerged systematic observation characterization gross features breed traffic complex structure highly automated frequently malicious potentially adversarial mutates rapid pace characteristics motivates deeper understanding unwanted traffic presented initial study broad characteristics internet background radiation evaluation based traffic measurements large unused subnets ipv address space developed filtering techniques active responders monitoring analyzing characteristics completely unsolicited traffic passive analysis details traffic elicited active responses activities analysis passive analysis demonstrates prevalence variability background radiation evaluation destination ports reveals vast majority traffic targets services frequentlyexploited vulnerabilities analysis backscatter traffic shows dominance tcp syn-ack rst packets find great deal consistency monitored subnets activities analysis focused popular services targeted background radiation finding rich variegation activities monitored services include worms released study vestiges worms code red nimda frequent presence autorooter scans similar worms self-propagation noticeable number connections simply empty opportunity send data passive analysis find significant diversity subnets monitored time examined background radiation perspective source host behavior source activities ports reveals consistent behavior measurement sites prevalent multi-port scan type scans ports appreciable intersection sources measurement sites explained random scanning behavior worms welchia smaller set sources common measurement sites considered time striking result analysis extreme dynamism aspects background radiation unlike benign traffic shows major shifts constituency applications popular fairly lengthy time scales mix background radiation nearly-daily basis dynamism results potpourri connection-level behavior packet payloads activity sessions regions address space efforts implications research operational communities ubiquity background radiation presents significant difficulties monitor internet traffic clog stateful analyzers uninteresting activity due variety significantly complicate detection types activity worm port existing worms clear highly diverse dynamic activity found work needed assess evolution background radiation time develop detailed characterizations framework prefiltering traffic lightweight responders engage sources detail categorize analyzing resulting traffic axes explored important step comprehensively studying phenomenon acknowledgments system network security group network operations staff lawrence berkeley national laboratory hosting lbl monitoring setup grateful dave plonka jeff bartig geoff horne bill jensen continuing support isink project niels provos setting honeyd monitor lbl anonymous reviewers constructive critiques work supported aro grant daad nsf grant ccrand nsf grant itr anireferences agobot http sophos virusinfo analyses trojagobotib html anley creating arbitrary shellcode unicode expanded strings january http nextgenss papers unicodebo pdf arlitt williamson web server workload characterization search invariants proceedings sigmetrics philadelphia baldwin sloss friedl iraqi trace http mynetwatchman security articles iraqiworm iraqitrace htm beagle http securityresponse symantec avcenter venc data beagle html caswell roesch snort network intrusion detection system http snort april common internet file system http snia tech activities cifs cifs-trp final pdf dacier pouget debar attack processes found internet proceedings nato symposium danzig jamin aceres mitzel estrin empirical workload model driving wide-area tcp network simulations internetworking research experience dce remote procedure call http opengroup onlinepubs toc htm flowreplay design notes http synfin net papers flowreplay pdf greene bgpv security risk assessment june honeynet project http project honeynet jung paxson berger balakrishnan fast portscan detectionusing sequential hypothesis testing proceedings ieee symposium security privacy oakland kim karp autograph automated distributed worm signature detection usenix security symposium san diego california august kohler morris chen jannotti kaashoek click modular router acm transactions computer systems august kreibich crowcroft honeycomb creating intrusion detection signatures honeypots workshop hot topics networks hotnets-ii cambridge massachusetts november moore network telescopes observing small distant security events invited presentation usenix security symposium moore paxson savage shannon staniford weaver inside slammer worm proceedings ieee security privacy june moore paxson savage shannon staniford weaver spread sapphire slammer worm http caida outreach papers sapphire sapphire html moore shannon brown code red case study spread victims internet 
worm proceedings acm sigcomm internet measurement workshop november moore shannon voelker savage internet quarantine requirements self-propagating code proceedings ieee infocom april moore voelker savage inferring internet denial service activity proceedings usenix security symposium washington august mydoom http securityresponse symantec avcenter venc data mydoom html paxson empirically-derived analytic models wide-area tcp connections ieee acm transactions networking paxson bro system detecting network intruders real time computer networks december provos honeyd virtual honeypot http honeyd randex http liutilities products wintaskspro processlibrary msmsgri roesch snort lightweight intrusion detection networks proceedings usenix lisa sasser worm http securityresponse symantec avcenter venc data sasser worm html security focus microsoft iis translate source disclosure vulnerability http securityfocus bid discussion april singh estan varghese savage earlybird system real-time detection unknown worms technical report california san diego august staniford paxson weaver internet spare time proceedings usenix security symposium thompson miller wilder wide area internet traffic patterns characteristics ieee network november make richer money easily http rcpt lists rlinetd msg html dameware mini remote control server buffer overflow http securityfocus archive microsoft windows dcom rpc interface buffer overrun vulnerability http securityfocus bid microsoft windows locator service buffer overflow vulnerability http securityfocus bid microsoft windows webdav buffer overflow vulnerability http securityfocus bid windows messenger popup spam http lurhq popup spam html xibo http sophos virusinfo analyses xiboa html yegneswaran barford plonka design internet sinks network abuse monitoring proceedings recent advances intrusion detection yegneswaran barford ullrich internet intrusions global characteristics prevalence proceedings acm sigmetrics june 
comprehensive traffic generation online ids evaluation joel sommers wisconsin-madison jsommers wisc vinod yegneswaran wisconsin-madison vinod wisc paul barford wisconsin-madison wisc abstract describe traffic generation framework conducting online evaluations network intrusion detection systems wide range realistic conditions framework integrates benign malicious traffic enabling generation packet streams diverse characteristics perspective packet content header payload packet mix order packets streams iii packet volume arrival rate packets streams begin describing methodology benign traffic generation combines payload pools possibly culled traces live traffic application-specific automata generate streams representative characteristics describe methodology malicious traffic generation techniques integration benign traffic produce range realistic workload compositions realize traffic generation framework tool call trident demonstrate utility series laboratory-based experiments traces collected departmental border router darpa intrusion detection evaluation data sets provided lincoln lab suite malicious traffic modules reproduce broad range attacks commonly today networks experiments demonstrate effects varying packet content mix volume performance intrusion detection systems introduction malicious traffic internet growing alarming rate terms volume diversity escalating threat demands methods tools assess robustness capabilities network intrusion detection systems nids wide range malicious benign traffic standard methods nids evaluation include canonical packet traces offline tests traffic generation systems online tests controlled laboratory settings approach benefits established comprehensive test suites assessing network intrusion detection systems obvious greater control reproducibility standardized methods comparing performance systems landmark work mchugh introduced set requirements nids test traffic streams summary requirements tests conducted diverse set representative packet flows including packet content benign malicious traffic specifically sequences packets make flows test realistic nids raise alarms based signatures packet exchanges likewise packet headers payloads reflect wide diversity benign malicious content nids raise alarms based content signatures natural approach addressing representativeness flows content empirical traces real networks offline analysis approach considered impractical due standard privacy concerns difficulty accurate labeling individual packets benign malicious notable exceptions darpa data sets developed lincoln lab offline nids testing authors studies great lengths create software robots mimicked user behavior means gathering empirical trace data work criticism discuss remains largest publicly data set offline nids testing studies approach addressing challenge robust nids testing generate traffic streams synthetically principle process result traces offline tests live streams online tests traffic generators developed specific network systems tests address problem robust nids testing importantly synthetic generation diverse representative benign traffic including payload content addressed goal work create tools test methodology evaluating growing number stateful protocol-aware intrusion detection systems secondary aim meeting test requirements outlined objectives guided design collection tools called trident generate packet traces traditional offline evaluations controlled laboratory settings assess online performance characteristics nids network systems firewalls capabilities trident include ability generate representative benign traffic streams including payloads ability construct generate types malicious traffic ability modulate mixture benign malicious test traffic ability modulate volume benign malicious test traffic ability modulate temporal arrival processes benign malicious test traffic knowledge existing toolset combination capabilities show enable unique important range tests nids important features trident distinguishes simple malicious traffic generators includes representative benign traffic trident handcrafted automata-based representations popular network services generate wide range protocol-compliant packet streams packets headers payload streams extracted traces carefully groomed remove malicious content objective trace grooming create large pool packets realistic diverse discuss benefits drawbacks strategies grooming packet traces trident approach synthetically generate traces statistical models developed live traces creation darpa data sets approach nids rule set sets extract benign packets empirically collected trace approach based notion trust matrix similar nids rule sets extract benign packets empirically collected packet traces important note strategies absolutely guarantee resulting benign trace free malicious packets comparisons grooming techniques treat capabilities case site-specific nids evaluation tuning demonstrate capabilities utility trident series tests live systems controlled laboratory environment begin populating trident benign traffic traces create set attack modules malicious traffic commonly today networks explain detail combination benign traces attack modules assess behavior popular nids range traffic volume packet diversity content mix experiments based set test hypotheses protocols designed system type results show trident easily exposes important range behavior test systems show nids performance sensitive mix benign application payloads show relative proportions malicious flows traffic clear impact nids performance resulting alarm quality show traffic volume clear effect nids packet loss effect alarm quality system dependent key implication results trident suited evaluating nids network systems protocol-aware stateful maintain connection state detecting anomalous malicious activity spanning multiple packets connections results suggest trident tuning nids rule sets host systems run finally interesting note tests previously unknown udp fragmentation bug bro discovered found diverse capabilities trident summary contributions work include development set commonly attack profiles development framework integrated set systems provide flexibility test systems range content volume mix benign attack traffic development unbiased trace grooming technique separate benign malicious traffic demonstration tool utility laboratory evaluation popular open source nids collection scripts extraction attacks darpa data set controlled dynamic replay attacks traces related work tools exist generating purely malicious traffic including efforts generation benign malicious traffic streams include commercial product skaion trident differs systems approach benign traffic generation level flexibility controlling volume mix content produced traffic streams trident related metasploit exploitation framework projects provide libraries common modern attacks related study mchugh critique paper mahoney chan authors conducted evaluation anomaly-based nids enhanced version darpa data set created injecting benign traffic single host department web server work similar respects differs respects target systems broader anomaly-based nids goal provide flexible extensible framework recreating wide range attack scenarios modulating mix malicious benign traffic control traffic volumes inclusion representative benign payload contents iii problem separating potentially malicious traffic benign traffic based protocol knowledge statistical properties traffic relying firewall manual grooming trust framework separating attack traffic mixed data set inspired work jung study authors proposed hypothesis testing framework detecting malicious scanners similar simple method study scope work hypothesis testing framework incorporated benign trace grooming algorithm similarly antonatos examined problem generating benign traffic based statistical properties existing traces details algorithm differ effort limited replicating payload contents environment broader allowing control packet content higher level attributes flow arrivals source address distribution mchugh critique lincoln lab ids evaluation starting point work comprehensive critique mchugh darpa-sponsored ids evaluations key contribution mchugh work identified shortcomings reported evaluations observations springboard 
requirements comprehensive ids testing data sets lincoln lab evaluations consist week-long trace packet data feature distinct attack types weeks trace benign traffic week benign traffic mixed labeled attack traffic train anomaly-based intrusion detection systems weeks test data unlabeled mix attack benign traffic problems remains largest comprehensive data sets ids evaluation today suitable offline tests online tests trace replay tool tools flexible manipulation resulting traffic streams ways distill major points mchugh evaluation motivation ids traffic generation architecture benign data lincoln lab evaluation validate false alarm characteristics background benign data partable summary darpa csl data sets dataset tcp udp icmp pkts bytes flows pkts bytes flows pkts bytes week week week week week csl table port distribution csl traffic port flows pkts udp ntp udp dns tcp smtp tcp http tcp udp udp condor tcp net tcp ftp tcp ssh table port distribution darpa week traffic port flows pkts tcp http tcp smtp udp dns udp ntp tcp telnet tcp finger tcp ftp tcp pop tcp time tcp ssh ticular rationale provided convince reader observed rates data set similar observed live environments volume burstiness terms packet arrival characteristics background traffic vary widely networks impossible create single representative background trace packet storms resulting misconfigurations common real networks resemble flooding attacks summary rates volume burstiness benign traffic important considerations timing parameters derived network emulators validated malicious data lincoln lab evaluations attempt ensure mix malicious benign traffic trace data realistic number systems subject attacks limited attempt made validate distribution realistic attacker-centric approach evaluators produce biased results offers understanding ids behavior finally mchugh notes significant effort expended research community generate attacks testing intrusion detection systems attack-on-demand facility tracks replicates latest attacks extremely community summary benign malicious traffic mix important consideration diversity current prevalence malicious traffic tests finally simple topologies commonly conduct experiments build data sets burden rests experimenters prove artificial environment significantly alter meaningfulness experiments data collection data sets derive benign packet traces study include week-long traces darpa data set trace headers payloads collected minutes departmental border router refer csl trace weeks darpa data set malicious traffic week includes labeled malicious training data weeks include malicious test data table summary data sets contrasts data sets tcp byte counts csl trace larger typical week darpa data number flows order magnitude smaller suggests large data transfers prevalent csl network darpa trace large number udp flows csl data dominated ntp dns traffic high volume ntp traffic csl network partly attributed comparing port distributions tables application mix identified port numbers trace difference expected fact csl data collected january darpa data generated underscores continuous collection updating test data constructing benign trace important aspects nids evaluation assessment system propensity generate alarms absence malicious traffic false positives quantity false positives intrinsically tied nids test nature benign traffic test environment essential aspects nids evaluation network benign traffic workload features spectrum characteristics typical expected network readily capture collection packet traces network period time difficulty arises fact expect traces mixture benign malicious traffic question identify isolate benign traffic ways intrusion detection problem possibilities populating trident benign traffic payloads discuss strategies employed explore design space techniques strategies discuss reasonable effective cover large portion design space nids-based strategies strategy wellknown nids snort generate lot false alarms detects attacks accurately groom packet trace local site argue highly problematic approach portion connections removed highest interest sense benign packets trigger alarms false positives synthetic generation strategies strategy synthetic traffic generated software robots emulate user behavior idea craft robot ensure creates connections good hosts local remote data basis expansion trace synthetic generation packets darpa data set strategy limited terms representativeness application mix payload perspective environments benefit method base trace generated robots enable trace data sets shared trust-based strategies strategy groom packet trace local site connection heuristics failure rates scanning characteristics approach exploits differences connection characteristics benign versus malicious sources based model malicious connection behavior technique attractive based transport level characteristics require knowledge application semantics biased system nids independence posit trust-based grooming strategy results set packets labeled benign higher opportunity uncovering false positive behavior limited miss targeted attacks sophisticated adversaries connection characteristics sufficiently similar benign users remainder section explores trust-based strategy begin defining specifics trust-based grooming methodology evaluate performance csl packet trace conclude section discussing strengths pitfalls strategy trust-oriented grooming trust-based approach addresses problem separating benign traffic diverse trace developing systematic set rules attributing connection trace specific level trust begin defining framework establishing trust assignment rules nids-specific application-specific framework unbiased framework approach associate trust levels characteristics observed behavior participant end hosts networks reside sense trust assignment site specific site-specificity essential effective nids testing directly lend standardized benchmarking framework supports attributing trust host multiple granularities begin individual hosts trusted neutral suspect estimate derived simply based connection utility endpoint location local remote extend notion define trusted neutral suspect networks execution trust assignment algorithm labels computed based behavior individual hosts network networks preidentified trusted trusted hosts networks whitelisted blacklisted specific network based personal knowledge managed strong enforced security policies network likewise networks common source malicious traffic blacklisted suspect network trust matrix algorithm trust assignment algorithm call trust matrix basic metrics decisions including endpoint location number failed inbound outbound connections iii volume traffic exchanged framework benign traffic grooming modified individuals environment based experience algorithm derived framework isolating benign traffic assumes transitivity trust goal identifying hosts trusted suspect step trust local white listed hosts assume local network managed hosts trustworthy assume possibility networks sufficiently trustworthy based knowledge management security practices label hosts networks trusted assumption reasonable well-managed network step trust remote servers trust local hosts trust connections initiate trust remote servers connect label hosts trusted step distrust scanners identify sources failed connections multiple ports destinations suspect simple heuristic identify scanners considers ratio good connections connections established successfully receive data connections call host threshold parameter determines minimum acceptable trusted host determines minimum neutral host hosts values labeled suspect important point heuristic effective capturing port-scanners describes worms malware randomly selects addresses propagation step trust behaved clients identify remote clients high values label hosts trusted step distrust hosts suspect networks identify unlabeled hosts networks scanners network suspect hosts ratio unsuccessful connections 
connections network falls label unlabeled hosts suspect step trust peer networks classify networks exchange high volumes data local network peer networks label unlabeled hosts peer networks trusted step trust well-behaved networks identify networks high values label unlabeled hosts networks trusted step label remaining unlabeled hosts trust neutral aspects process noteworthy designed conservative favors labeling hosts suspect host deemed suspect sum activities fail meet single trust metric algorithm hoc meant modified enhanced network basis summarized table demonstrate utility live traffic trace table ideal host classification trust matrix trusted neutral suspect applicable hosts remote local server client neutral scanner trusted network neutral network peer network suspect network estimating trust matrix parameters describe empirical packet trace estimate reasonable values threshold parameters individual addresses considered simply ratio successful connections connection attempts implicit trusted hosts local clients network aggregates ratio connections network determine network figure shows distribution values individual hosts network unsuitable networks considerations include prevalence spyware compromised hosts local clients include follow-up connections situation occurs remote client initiates connection local host leads follow-up connection local host technique related methods beta number ips beta number nets beta number nets figure distribution values networks sizes csl trace individual addresses left networks center networks volume data mbs number ips volume data mbs number nets volume data mbs number nets figure summary transfer volumes csl trace individual addressees left networks center networks aggregates csl trace observation plots distribution individual host level bimodal hosts tend well-behaved failed connections effect important impact ability identify malicious scanners results show desirable bimodal-like distributional properties continue hold network aggregates strong aggregates suggests good starting point network trust trace lies aggregates results provide basis fixing figure parameters identifying peernetworks defined networks participate highvolume data transfers trusted local network histograms csl trace suggest networks exchange large volumes data easily isolated figure shows volume appears reasonable threshold separating high-volume transfers overly sensitive size network fix volume threshold parameter csl trace explored dynamics trust assignment algorithm network radius expands radius network radius goal maximize number accurately labeled hosts trusted suspect minimizing number inconsistent labels trusted hosts suspect networks suspect hosts trusted networks results reinforce results earlier heuristics optimal network aggregation trust labeling suggest correct aggregation traces lies range result related administrative granularities allocation ipv addresses trust matrix evaluation evaluation resiliency false negatives involves validation nids rule-set conducting manual examination trace missed alert specifically legitimate hosts marked suspect false positives malicious hosts marked trusted algorithm false negatives begin analysis csl trace full ground truth data approximate manual tagging process classify sources marked suspicious protocol port numbers examine activity exemplars pool determine sources malicious benign experience dominant pools tend legitimate malicious misconfiguration popular ports single source simply activity label accurately similarly encounter activity include sufficient context determine intent source icmp echo requests benign measurement worms welchia small fraction sources full trace deemed suspect summarize evaluation trace table find high degree failed connections directed departmental mail servers obvious explanation spammers open-relays find legitimate dns requests dropped dns server expected behavior bind requests timeout likewise small fraction ntp requests dropped ntp server explanation behavior marks sources running condor suspicious sources send periodic one-way udp updates server receive acknowledgment incorrect labeling illustrates current weakness tcp connection semantics condor widely-used computational resource sharing system table activity summary sources deemed suspect sources category legitimate considered false alarms includes malicious legitimate unknown service port sources category smtp spam open-relay dns legitimate ntp legitimate condor legitimate dcerpc exploit beagle exploit http worms open-proxy mydoom exploit edonkey misconfiguration ftp legitimate ms-sql ms-sql probe response slammer extended udp sessions isolated applications follow two-way data exchange presently accounted whitelisted successfully detects instances malicious traffic sources exploit dcerpc vulnerabilities port sources scanning beagle mydoom backdoors ms-sql password probing attempts ms-sql slammer worm robust evaluation resiliency false negatives involves validation respect nids rule-set conducting manual examination trace missed alert system task labor intensive size data set volume false positives modern nids rulesets discuss false negatives respect common background radiation signatures developed bro ids results revealed falsenegative rate compare groomed trace result alerts generated snort found running snort version default configuration snort-rules-prraises alerts distinct sources result line number sources flagged suspect summarize dominant snort alert categories table examining behavior typical sources dominant categories suggests correspond legitimate traffic attack sources detected snort payload signatures sql-probing sqlslammer portscan detector dcerpc beagle snort detected ms-sql attacks detected small portion obvious background-radiation attack instances dcerpc attacks beagle attacks comparing sources flagged malicious snort find overlap sources highlights potential utility approach large fraction packets trigger false positives snort flagged overlap includes background-radiation scanners detected snort dcerpc exploit beagle backdoor attempts sources flagged superset snort sources attacks legitimate dns ntp sources flagged malicious confuse snort portscan detector services snort false positives subset false positives listed table limitations trust assignment algorithm advantages unbiased simple detected instances true alerts mssql slammer background radiation attacks missed table summary dominant snort false alert categories note individual sources contribute multiple snort alerts alert sources instances icmp ping nmap web-misc doc access icmp large icmp packet web-misc invalid http version string portscan udp portsweep ftp command overflow attempt web-misc robots txt access http inspect double decoding attack limitations limited amount malicious packets persist trace grooming randomly scanning http worm send connection request local network request contact open web server detecting presence attacks impossible trust assignment algorithm connection flagged ids reject approach ids rule sets trace grooming loose rule sets flag benign traffic false positives tests argue unexpected true positives test results reduce eliminate possibility false positives due oversanitized benign traces note inspecting packets trace task infeasible possibility false negatives tests potential difficulty poses analyzing test results inevitable trade-off realism traffic streams collected operational network site-specific applications condor one-way udp streams whitelisted well-formed notion goodness extending methodology traffic area future work finally notion trust depends perspective local network network perceived hostile neutral network service provider hostile network peering relationship trident system section describe application-specific benign traffic streams malicious traffic streams generated trident framework trace grooming payload classification payload sanitization harpoon client harpoon server service automata generation figure steps benign traffic generation trident benign traffic generation 
studies ids performance including papers darpa data set detection characteristics line evaluation show results laboratory experiments dynamic characteristics traffic streams notably mix volume huge impact nids performance provide key insights system tuning challenges benign traffic generation dynamically generate diverse traffic streams based knowledge obtained limited set traces end considered strategies generating benign traffic strategy tool flow-replay create flows modification packet headers payloads significant drawback approach recreates client side connection component trident called attack-replay capability replay endpoints flow strategy simple limited amount diversity introduced traffic stream strategy statistical replication payloads protocols based byte-level properties knowledge limited work area context anomaly detection language-independent statistical profiles n-grams proposed model application payloads techniques attractive traffic generation systems oblivious session application layer protocols current trend protocol-awareness modern nids traffic analyzers suggests traffic generation application-aware generate meaningful headers payloads exercise nids ways similar real traffic approach adopt trident protocolaware emulation based payload interleaving payload interleaving term dynamic construction flows random selection packets payload pools states service automaton describe method supports generation synthetic traffic streams realistic application level headers payloads focus evaluation statistical techniques discussed considered complementary generate application level data entity body http connection describe components protocol-aware emulation scheme automata generation heart benign traffic generation system collection automata states describe classes packets observed specific service preliminary exploration feasibility approach basic automata describe popular services csl trace darpa data set claim completeness automata suggest exercise classes nids examples demonstrate utility methods show accommodate flexible recreation broad class protocols automata describe service phase abstraction typical network protocols stage prologue describes application-level client server handshake stage dialog client server exchange data final stage epilogue participants agree gracefully tear connection stage conversation involve states automata final stage optional protocols http created automata model packet exchange protocols http smtp dns telnet ftp ssh popular services data sets automata-based abstractions http smtp shown figures pipelined http requests supported easy extension weakness protocol-aware automata-based system effectiveness evaluation related quality automata hope library automata developed research community time payload classification raw traces classified benign trusted trust neutral input payload classification module call payload-gen purpose payload-genis classify packets trace pools correspond states service automata step packets generated application state flows aggregated pool aggregation preserve packet ordering individual flow payload sanitization classification payloads discarded modified ensure violate simple set requirements discard original payload suffered truncation packet capture payload match valid automata state modification generally simplify service automata definition processing avoid generation false alarms result simply effect interleaving current approach aggressive normalization steps http removeconnection content-length transfer-encoding headers server responses nids conceivably items monitor connection progress arbitrarily client server payloads maintaining elaborate state dynamically rewriting payloads remove echoed address server response required correct protocol operation effect sanitization underreport levels false alarms generated nids evaluate content aware traffic generation harpoon wrote traffic generation plug-in harpoon execute application state machines transmit sanitized payloads control state machine processing harpoon clients harpoon servers simply respond requests send number packets application payload pools addition distributional data harpoon default tcp traffic generator define pnumpackets pflowsize distributions prologue epilogue state machine stages executed packet application payload pool dialog stage number packets send state chosen distribution pnumpackets addition dialog stage ends total traffic exceeds chosen distribution pflowsize connections initiated distribution pinterconnection distributions service effect modulating flow size interconnection time active session distributions traffic volume application mix tuned desired exchange application-layer payloads service automaton standard user-level sockets transport layer benign traffic streams produced trident targeted intrusion detection systems focused layers transport layer presently explicitly account non-malicious transport-layer anomalies present trace captured live network misconfigurations implementation bugs malicious traffic generators include exploits target network transport layers higher layers attack traffic generation general attack traffic creation mace modular attack composition framework consists primary components exploit obfuscation iii propagation number functions support interpretation execution exception handling attack profiles work extended existing set exploits mace attacks enhanced ability modulate attack volumes taxonomy http client request http server response http server data http service automaton smtp server banner smtp ehlo smtp ehlo response smtp mail smtp mail response smtp rcpt smtp rcpt response smtp data smtp begin message smtp client message packet smtp client message smtp client message packet smtp server rcvd smtp client quit smtp server close smtp service automaton figure service automata common application protocols table taxonomy mace exploits host based application level transport level network based worms backdos fragmenother doors tation dos welchia rose nimda mydoom teardrop synflood smurf codered sdbot winnuke teardrop pod fraggle blaster bonk land dameware nestea jolt sasser oshare table summary trident tools developed nids performance evaluation description attack-replay flow replay tool two-way replay packet trace autom-gen script stores service descriptions generates service-specific automata harpoon exec-groom traffic grooming algorithm trust heuristics separate benign traffic suspicious traffic payload-gen tool reads groomed packet trace outputs packet pools correspond automata states payload-sanitize tool sanitizes inconsistencies protocol headers introduced due interleaving split-darpa script separate malicious darpa traffic benign based labels harpoon plugin traffic generation plugin harpoon executes service description automata produce application payload traffic mace exploits provided table objective provide complete attack database intrusion testing provide spectrum attacks exercise nids sufficiently diverse ways support set basic building blocks create additional unseen attack vectors darpa attack recreation darpa data set collection attack instances extend utility trident added capability dynamically replay attacks began developing tool called split-darpa distill labeled attacks mixed traces due inaccuracies labeling split-darpa automatically isolate attacks data set developed ability perform dynamic replay attack traces tool attack-replay key aspects effort tcp attacks reassembly payloads sending packets tcp sockets state maintained client server responses fed server out-of-band control channel timely manner udp icmp packets traffic transmitted raw sockets test methodology objective laboratory-based experiments reported demonstrate utility trident evaluating effectiveness specific nids configurations dimensions packet diversity content mix traffic volume test setup nids evaluated experiments bro version snort version bro default brolite bro policy snort default snort conf included nids configuration consisting snort version recent snapshot signatures bleeding snort nids ran separate workstation ghz intel pentium processor ram intel pro network cards freebsd installed machine nids hosts connected cisco enterprise switch router harpoon mace attack-replay traffic generators connected switch 
configured nids received traffic traffic generation hosts large address spaces internal external networks configuring interface aliases traffic generation host ran sets experiments set experiments designed establish baseline alarm behavior nids generated low rate benign traffic csl darpa data sets tracing traffic captured packet trace offline manner produce baseline set alarms generated nids configurations similarly exploit produced mace exploit darpa data set generated baseline set alarms nids configurations set experiments altered mix flow volumes benign traffic generated harpoon malicious traffic generated mace csl attack-replay darpa effect mixes benign traffic level constant introducing levels malicious flows specific mixes benign flows benign flows benign flows benign flows refer test setups mix mix mix mix set experiments levels traffic volumes tuned harpoon generate roughly csl darpa data sets traffic volume level tuned mace attack-replay produce approximately aggregate host modified kernel parameters debug bpf bufsiz debug bpf maxbufsize suggested bro documentation snort benefit change applied change nids host attack traffic refer tests exploring effect traffic volumes vol vol vol ran experiment minutes nids host measured cpu memory usage seconds vmstat note packet drops reported nids shutdown evaluating results results running malicious traffic baseline experiments constructed representations types number alarms nids expected observe exploit sets experiments recorded number times individual exploit executed mace attack-replay compare alarms produced nids expect specific exploits launched duration test wrote script automatically process representation expected alarms actual log files produced nids test script reported set alarms produced nids frequency occurrence expected number occurrences counts generate relative alarm efficiency effectiveness values efficiency defined iciency truepositivesallalarms measure false positive occurrence means false positives means alarms false positives effectiveness defined ectiveness measure false negatives means false negatives alarms occurred occur laboratory-based ids evalution illustrate utility framework results experimental evaluation bro snort bleeding snort performance varying traffic content mix volume results substantiate effectiveness measurement tools potential methodology interpreted caveats results limited representativeness diversity protocol automata goal conduct black-box evaluation nids performance perform in-depth analysis behavioral causalities result results intended headto-head comparison systems rulesets valuable demonstrate effects varying benign malicious traffic content mix volume establish feasibility approach baselining benign traffic evaluating effect interleaving important question payload interleaving process random selection packets individual payload pools based states service automaton affects alarm characteristics important demonstrate legitimate alarms introduced due data consistency issues table shows number unique alarms produced nids setups offline online configurations csl darpa data sets offline setup ran nids configuration trace grooming prior payload classification sanitization original flows including tcp headers left intact online setup trident generate flows groomed classified verified counts packet trace separate unloaded host handled payload-sanitize table number unique alarms generated data set offline online setups offline setup groomed traces original flows tcp headers left intact online setup trident generate flows groomed classified sanitized traces csl darpa ids offline online offline online bro snort bleeding snort table alarm counts bro snort bleeding snort single instance mace exploit exploit bro snort bleed exploit bro snort bleed snort snort syn flood oshare blaster pingofdeath bonk rose codered sasser dameware sdbot fraggle smurf jolt teardrop land teardrop mydoom welchia nestea winnuke nimda sanitized traces number unique alarms consistently online test effect caused conservative nature sanitization process fact laboratory tests run simple environment set alarm types generated online tests subset alarm types produced offline setup alarms unique offline tests related transport addressing routing layers common alarms application-related offline csl test bro snort variants report address port scan activity small packet fragments nefarious activity bro maintains connection state reports unexpected transport layer behavior odd tcp window resizing tcp checksum errors potential split routing randomly traversed laboratory address spaces online tests scanning alarms triggered configuration set alarms examples snort alarms common offline online tests include http urls malicious activity php scripts ftp cwd directory examples bro alarms common offline online tests include detection ftp pasv command detecting single carriage return end http smtp commands carriage return-line feed pair baselining malicious traffic tables provide summaries alerts generated bro snort bleeding snort single instance mace darpa attacks data create tables produce representation alarm types frequencies expect mace darpa exploit exploits tables highlight main differences bro snort bro generally concerned stateful monitoring connections applications snort oriented detecting specific conditions individual packets presence string specific string winnuke exploit table generates alarms snort bleeding snort trigger bro alarms similarly unexpected smtp state produced mailbomb exploit table triggers alarms bro snort bleeding snort evaluating effect traffic mix tests range benign malicious traffic mixes demonstrate remarkable diversity behavior bro snort bleeding snort figures show cpu utilization packet loss results csl mace darpa attack-replay data sets flow composition dominated malicious flows cpu utilization shows clear increasing trend difference caused application mix benign traffic flows csl data set malicious flows mix bleeding snort consumes cpu time bro opposite occurs darpa data set malicious flows packet loss behavior csl darpa traffic bro snort bleeding snort snort variants occurrence packet loss investigating high level packet loss low cpu utilization consistent previously reported experiments hand bro appears resilient dropping packets consumes cpu resources point loss endemic figures show alarm effectiveness efficiency range benign malicious flow mixes csl data set alarm effectiveness drops traffic mix dominated malicious flows false negatives increase effect caused packet drops experienced bro snort variants false positives low mixes csl data set fewest false positives coming traffic malicious mix bro darpa data set low absolute number expected alarms snort variants expected alarms low absolute number bro large variation false positives darpa data set existed time snort tuned perform set exploits note show results mix benign traffic flows scenario alarm efficiency effectiveness alarms considered false alarms evaluating effect volume understand effect volume nids performance conducted experiments traffic rates mbps experiments mix malicious benign traffic fixed figures show packet drops cpu utilization systems volumes systems increase traffic volume directly affects cpu utilization interestingly bro resilient packet drops csl data set darpa data set dominated http traffic substantial impact bro performance snort drop rates degrade intensely volume data set figures show effectiveness efficiency systems volume experiments efficiency effectiveness highly correlated volume traffic counts alarms increase volume snort signature set tuned detect 
darpa attacks bro bro generates alarms darpa data result bro produces false alarms efficiency effectiveness poor csl traffic bro efficiency effectiveness significantly observation bleeding snort rule set superset snort rule set lower efficiency effectiveness expect volume baseline alerts bleeding snort higher snort result bleeding snort greater chance missing true alarms packet drops larger chance false positives decreases effectiveness discussion results demonstrate trident well-suited test nids protocols unique set capabilities testing class networked systems maintain connection state results suggest range possibilities tuning configuring nids local site based expected average worst case traffic scenarios traffic volume experiment high nids configuration exhibits wide range performance characteristics set tests diversity performance reveals importance mix benign application traffic malicious traffic experiments show decision interleave payloads originally belonged flows respecting service automaton discernible impact alarm quality ability packet interleaving create flows virtually size mix facilitates exercising nids broad spectrum conditions trident system resource requirements ids configuration tested emulated live network setting typically offline evaluations publicly data sets locally captured packet traces reveal limited aspects total system performance key consequence capabilities provided trident comprehensive system evaluation locally captured packet traces enabling tests range relevant site-specific conditions lastly results expose key challenge designing nids graceful degradation unexpected extreme conditions comparing results csl darpa data sets shows mix application traffic significant impact nids system performance mix greatly affect alarm quality low traffic volumes trident easily push ids operating threshold conclusion paper describe traffic generation framework robust online evaluation network intrusion detection systems objective work create system generates realistic diverse streams benign malicious traffic develop methodology benign traffic generation based service specific automata packet payloads empirical packet traces standard darpa traces approach preclude exact reproduction experimental results privacy concerns limit sharing sites argue enables highly representative testing highly researchers developing systems security administrators seeking test tune systems implemented traffic generation framework tool set call trident demonstrate utility trident set experiments open-source nids conducted controlled laboratory setting results experiments content mix volume tremendous effect nids performance demonstrate trident capability expose range diverse behavior modern nids flowreplay design notes http synfin net bleedingsnort http bleedingsnort metasploit project http metasploit skaion traffic generation system tgs http skaion products index html thor tool test intrusion detection systems variations attacks http thor cryptojail net valdes skinner adaptive model-based monitoring cyber attack detection proceedings symposium recent advances intrusion detection raid toulouse france october table counts alarms generated bro snort bleeding snort single instance darpa exploit exploit bro snort bleeding exploit bro snort bleeding exploit bro snort bleeding snort snort snort apache named sendmail casesen ncftp smurf crashiis neptune snmpget dict netbus sqlattack dosnuke netcat sshprocesstable fdformat ntinfoscan sshtrojan ftpwrite perl syslogd guessftp phf teardrop guesspop pod udpstorm guesstelnet portsweep warezclient guest processtable warezmaster httptunnel xlock illegalsniffer queso xsnoop imap resetscan xterm land satan xterm loadmodule sechole yaga secret mailbomb selfping mix mix mix mix vol vol vol traffic scenario cpu utilization bro snort bleeding snort mix mix mix mix vol vol vol traffic scenario packet loss bro snort bleeding snort figure cpu utilization left packet loss measurements bro snort bleeding snort csl traffic setup antonatos anagnostakis markatos generating realistic workloads network intrusion detection systems proceedings acm workshop software performance redwood shores january mutz vigna kemmerer experience developing ids simulator black-box testing network intrusion detection systems proceedings acsac las vegas december exploitation framework http securityforest wiki index php exploitation framework hong interactive traffic replay proceedings symposium recent advances intrusion detection raid seattle september jung paxson berger balakrishnan fast portscan detection sequential hypothesis testing proceedings ieee symposium security privacy oakland lippmann fried graf haines kendall mcclung weber webster wyschogrod cunningham zissman evaluating intrusion detection systems darpa off-line intrusion detection evaluation proceedings ieee symposium security privacy oakland lippmann haines fried korba das darpa off-line intrusion detection evaluation proceedings symposium recent advances intrusion detection raid toulouse france october mahoney chan analysis darpa lincoln laboratory evaluation data network intrusion detection proceedings symposium recent advances intrusion detection raid pittsburgh september mchugh testing intrusion detection systems critique darpa intrusion detection system evaluations performed lincoln laboratory acm transactions information system security november nessus http nessus pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm sigcomm usenix internet measurement conference taormina italy october plonka flawed routers flood wisconsin internet time server http wisc plonka netgear-sntp rossey cunningham fried rabek lippman haines zissman lariat lincoln adaptable real-time information assurance testbed proceedings ieee aerospace conference big sky montana march sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference taormina italy october sommers yegneswaran barford framework malicious workload generation proceedings acm sigcomm usenix internet measurement conference taormina italy october staniford hoagland mcalerney practical automated detection stealthy portscans journal computer security wang stolfo anomalous payload-based network intrusion detection proceedings symposium recent advances intrusion detection raid sophia antipolis france september mix mix mix mix vol vol vol traffic scenario cpu utilization bro snort bleeding snort mix mix mix mix vol vol vol traffic scenario packet loss bro snort bleeding snort figure cpu utilization left packet loss measurements bro snort bleeding snort darpa traffic setup mix mix mix vol vol vol traffic scenario effectiveness bro snort bleeding snort mix mix mix vol vol vol traffic scenario efficiency bro snort bleeding snort figure alarm effectiveness left efficiency bro snort bleeding snort csl traffic setup mix mix mix vol vol vol traffic scenario effectiveness bro snort bleeding snort mix mix mix vol vol vol traffic scenario efficiency bro snort bleeding snort figure alarm effectiveness left efficiency bro snort bleeding snort darpa traffic setup 
recent results sizing router buffers guido appenzeller nick mckeown stanford appenz nickm stanford joel sommers paul barford wisconsin jsommers wisc abstract today internet routers built buffers hold packets times congestion buffers typically store worth data widely rule-of-thumb link buffer size rtt rtt average round-trip time flow passing link data rate link router linecard approximately gbits buffers amount buffering grows linearly line-rate large buffers challenging router manufacturers large slow off-chip drams lead high latencies case congestion recent research suggest rule-of-thumb rtt outdated incorrect routers serving highly aggregated traffic results link flows requires rtt long-lived short-lived tcp flows lower buffer requirements verified simulation laboratory experiments real networks live traffic consequences router design enormous link carrying flows reduce buffers negligible difference throughput link carrying flows requires mbits buffering easily implemented fast on-chip sram introduction motivation background substantial amount space power cost high-end router line card today buffer memory stores packets times congestion buffers fill queueing delay delay-variance overflow packet loss underflow degrade throughput significance role expect dynamics sizing router buffers understood based well-grounded theory supported extensive simulation experimentation router buffers sized today based rule-of-thumb commonly attributed paper villamizar song experimental measurements tcp flows link concluded router amount buffering equal average round-trip time flow passes router multiplied capacity router network interfaces well-known rtt rule show rule-of-thumb make sense small number long-lived tcp flows network operators follow rule-of-thumb require router manufacturers provide buffering rule found architectural guidelines requiring large buffers complicates router design impediment building routers larger capacity router linecard approximately gbits buffers amount buffering grows linearly line-rate commonly attributed paper rule-of-thumb older figure single flow topology consisting access link latency lacc link capacity cacc bottleneck link capacity latency assumptions lead rule thumb changed justified holds true traffic tcp number flows increased significantly today backbone links commonly operate carry flows recent results suggest rule-of-thumb longer correct significantly smaller buffers backbone routers removing buffers loss network utilization demonstrate theoretically simulations experiments section possibility smaller buffers warrants comprehensive testing real backbone networks paper isn word goal persuade network operators reduced router buffers backbone network worth care accurately size router buffers declining memory prices overbuffer routers overbuffering bad idea reasons complicates design high-speed routers leading higher power consumption board space lower density overbuffering increases end-to-end delay presence congestion large buffers conflict low-latency real time applications video games device control rule-of-thumb rule-of-thumb desire congested link busy maximize throughput network thinking sizing queues prevent overflowing losing packets tcp sawtooth congestion control algorithm designed fill buffer deliberately occasional loss provide feedback sender matter big make buffers bottleneck link tcp buffer overflow rule-of-thumbcomes dynamics tcp congestion control algorithm single tcp flow passing bottleneck link requires buffer size equal bandwidthdelay product order prevent link idle losing throughput give quick intuitive explanation rule-of-thumb amount buffering router carried long-lived tcp flow section give precise explanation set stage theory buffer sizing flow multiple longand short-lived flows confirm theory true simulation experiments sections simple topology figure single tcp source sends infinite amount data packets constant size flow passes single router sender access link faster receiver bottleneck link capacity causing packets queued router propagation time sender receiver vice versa denoted assume tcp flow settled additive-increase multiplicative-decrease aimd congestion avoidance mode sender transmits packet time receives ack gradually increases number outstanding packets window size buffer gradually fill eventually packet dropped sender doesn receive ack halves window size pauses sender packets outstanding network amount equal window window size halved pause waits acks arrive resume transmitting key sizing buffer make sender pauses router buffer doesn empty force bottleneck link idle determining rate buffer drains determine size reservoir needed prevent empty turns equal distance bytes peak trough sawtooth representing tcp window size show corresponds rule-of-thumb rtt worth tcp sawtooth factor determines buffer size shouldn statistical multiplexing sudden arrival short bursts effect expect bursty tcp slow-start phase increase queue occupancy frequently fill buffer find section bursts short flows effect small buffer size fact dictated number long flows buffer size influences router design rule-of-thumb matters complicates design routers time writing state art router linecard runs aggregate rate physical interfaces buffering gbits gbytes buffer memory buffers backbone routers built commercial memory devices dynamic ram dram static ram sram largest commercial sram chip today mbits means linecard require chips making board large expensive hot build linecard dram devices dram devices gbit problem dram random access time hard minimum length byte packet arrive depart worse dram access times fall year problem worse line-rates increase future practice router linecards multiple dram chips parallel obtain aggregate datarate memory-bandwidth packets scattered memories ad-hoc statistical manner sram cache refresh algorithm large packet buffer number disadvantages wide dram bus hundreds thousands signals huge number fast data pins network processors packet processor asics frequently pins making chips large expensive wide buses consume large amounts board space fast data pins modern drams consume lot power summary extremely difficult build large packet buffers slowly memory speeds improve problem worse time substantial benefits gained placing buffer memory directly chip processes packets network processor asic case wide fast access single memory commercial packet processor asics built mbits embedded dram memories delay-bandwidth product acceptable smaller today single-chip packet processor external memories present evidence buffers small make difference utilization backbone links buffer size single long-lived tcp flow sections determine large router buffers tcp flows long-lived start examining single long-lived flow dram includes devices specialized ddr-sdram rdram rldram fcram figure schematic evolution router buffer single tcp flow window pkts queue pkts figure tcp flow single router buffers equal delay-bandwidth product upper graph shows time evolution congestion window lower graph shows time evolution queue length flows multiplexed starting single flow topology figure single sender bottleneck link schematic evolution router queue source congestion avoidance shown figure time sender steadily increases window-size fills buffer buffer drop packet round-trip time sender stops sending time detects packet dropped halves window size wmax wmax packets window size limits number unacknowledged outstanding packets network loss sender allowed wmax outstanding packets timeout allowed wmax outstanding packets sender outstanding packets pause waits acks wmax packets goal make router buffer empty order router fully utilized buffer empty sender pausing buffer 
empty router sending packets bottleneck link constant rate turn means acks arrive sender rate sender pauses wmax seconds wmax packets acknowledged resumes sending starts increasing window size key sizing buffer make buffer large sender pauses buffer doesn empty sender pauses buffer full drains period shown figure buffer avoid empty packet sender shows buffer hits empty wmax wmax determine wmax situation sender resumed transmission window size wmax buffer empty sender send packets rate link underutilized sending rate tcp rtt tcp measures window size bytes count window size packets simplicity presentation window pkts queue pkts figure tcp flow underbuffered router window pkts queue pkts figure tcp flow overbuffered router buffer empty queueing delay send rate require wrtt wmax wmax buffer leads well-known rule-of-thumb rtt figure illustrates evolution single tcp flow topology shown figure buffer size equal rule-of-thumb rtt window size familiar sawtooth pattern increasing steadily loss occurs halving window size starting increase steadily notice buffer occupancy hits packet loss stays empty behavior bottleneck link stay busy figures show link underbuffered overbuffered figure router underbuffered buffer size rtt congestion window sawtooth pattern sufficiently buffered case window halved sender pauses waiting acks insufficient reserve buffer bottleneck link busy buffer empty bottleneck link idle lose throughput hand figure shows flow overbuffered behaves correctly buffered flow fully utilizes link window halved buffer completely empty queueing delay flows increased constant buffer packets queued summary rtt router buffer empty bottleneck link idle probability packets buffer pkts link underutilized packets dropped pdf aggregate window normal distribution figure probability distribution sum congestion windows flows passing router approximation normal distribution vertical marks mark boundaries number outstanding packets fit buffer sum congestion windows lower packets outstanding link underutilized higher buffer overflows packets dropped long tcp flows share link backbone router flows share bottleneck link simultaneously single long-lived flow realistic model link typically carries flows time change model reflect buffers required bottleneck link flows situations case flows synchronized sawtooths march lockstep perfectly in-phase flows synchronized synchronized marching lockstep sufficiently desynchronized argue case practice amount buffering required drops sharply well-documented multiple tcp flows share bottleneck link synchronized coupled experience packet drops roughly time sawtooths synchronized in-phase number flows share bottleneck link halve window size time aggregate window process sum window size processes amplified version single flow single flow buffer large distance peak trough aggregate window size process equal bandwidth-delay product flows synchronized backbone router carrying thousands flows varying rtts small variations rtt processing time sufficient prevent synchronization absence synchronization demonstrated real networks likewise found simulations experiments in-phase synchronization common concurrent flows rare concurrent flows don precisely understand shouldn surprising typical user today connected modem fully utilized simultaneously carry flows fully utilized buffers barely link isn bottleneck size buffers large number flows out-of-phase synchronization flows synchronized scale window times cycle visible simulations flows buffer requirements similar out-of-phase synchronization synchronization synchronization tcp flows takes place observed aggregates flows amount in-phase synchronization decreases circumstances treat flows synchronized understand difference adding synchronized desynchronized window size processes recall add synchronized sawtooths single large sawtooth buffer size requirement doesn change hand sawtooths synchronized flows add sum sawtooth smooth distance peak trough aggregate window size smaller buffer distance peak trough aggregate window size expect buffer size requirements smaller increase number flows case provide intuitive argument detailed mathematical treatment set tcp flows random independent start times propagation delays assume desynchronized window size processes independent model total window size bounded random process made sum independent sawtooths central limit theorem aggregate window size process converge gaussian process figure shows aggregate window size converge gaussian process graph shows probability distribution sum congestion windows flows summationtextwi propagation times start times explained section shape gaussian buffer depend number flows flows expect statistical multiplexing narrower gaussian fact central limit theorem tells increase number flows width gaussian formally standard deviation decrease role buffer absorb fluctuation total window size standard deviation total window size decreases expect required amount buffer correct amount buffering single flow single flow rule-of-thumb holds expect required amount buffering desynchronized flows bmin result important practical implications building routers core router flows passing time vast majority flows short flows fewer packets flow length distribution heavy tailed majority packets time belong long flows result router achieve close full utilization buffer sizes delay-bandwidth product verify result experimentally section sizing router buffer short flows tcp flows long-lived fact flows packets leave slow-start reach equilibrium sending rate considered long-lived tcp flows short tcp flows affect size router buffer find short flows tcp non-tcp smaller effect long-lived tcp flows backbone router large number flows define short-lived flow tcp flow leaves slow-start flow fewer packets assuming typical maximum window size topology figure multiple senders separate access links widely reported measurement assume short flows arrive poisson process slow-start flow sends packets sixteen slow-start algorithm sender increases window-size packet received ack access links lower bandwidth bottleneck link bursts spread single burst queueing assume worst case access links infinite speed bursts arrive intact bottleneck router shown case model queue buffer simple queueing theoretical model model calculate probability distribution router queue length queue length distribution derive upper bound loss rate buffer length queue shorter length buffer packets dropped probability queue exceeding length greater drop probability router buffer length model approximate queue length distribution effective bandwidth methodology result probability queue exceeding length upper bound drop probability router length queue pdrop complete derivation result found goal drop packets short flow drops packet retransmission significantly increases flow duration words choose buffer size small key observation short flows size buffer depend line-rate propagation delay flows number flows depends load link length bursts practice length bursts limited maximum window size tcp current operating systems maximum window sizes flavors windows default unix hosts window sizes require scaling options rarely today result amount buffering needed absorb bursts fixed typically order hundreds packets methodology model tcp flows udp flows traffic react congestion practice buffers made smaller model simulation assumed access links faster bottleneck link evidence highly aggregated traffic slow access links cases lead bursts smoothed completely case individual packet arrivals close poisson resulting smaller buffers buffer size easily computed model setting summary short-lived flows require small 
buffers mix shortand long-lived flows simulations experiments section shortlived flows contribute buffering requirements buffer size determined number long-lived flows simulation experimental results theoretical models longand short-lived flows present results validate models validation methods simulation experiments physical routers lab setting experiment live production network distribution flows define short flows long flows flows slow-start congestion avoidance mode means flows transition short long existence minimum required buffer pkts number long-lived flows utilization utilization utilization rttxbw sqrt rttxbw sqrt figure minimum required buffer achieve percent utilization line average rtt measured long-lived tcp flows simulations simulations assume network congested link core network operators run backbone links loads result packet drops rare internet backbone single point congestion rare flow encounter congestion points assume router maintains single fifo queue drop-tail expect results valid queueing disciplines red average propagation delay tcp flow varied long-lived tcp flows figure simulates line carrying long-lived tcp flows graph shows minimum required buffer utilization line compares buffer size predicted model model predicts utilization buffer rtt sufficient number long-lived flows small flows partially synchronized result doesn hold number flows exceeds model holds shown graph found order attain utilization needed buffers big model predicts simulations experiments looked packet loss rate decreasing latency tcp flow increase loss rate loss rate tcp flow function flow window size approximated reduce buffers decrease rtt flow decrease average increase loss positive side-effect smaller buffers tcp performance improves short flows commonly performance metric short flows flow completion time defined time packet packet reaches destination measure average flow completion time afct figure shows minimum required buffer afct increased experimental data experiments load model plotted graph bound predicted model closely matches simulation minimum required buffer length tcp flow pkts mbit link mbit link mbit link model figure minimum required buffer increases average flow completion time afct infinite buffers short flow traffic average completion time pkt tcp flow number long-lived flows afct packet flow rtt buffers afct packet flow rtt sqrt buffers figure average flow completion times buffer size rtt compared buffer size rtt results key result amount buffering needed depend number flows bandwidth round-trip time depends load link length bursts traffic mix short flows future generation core router amount buffering local router today mixes shortand long-lived flows mixes short flows long lived flows buffer requirements driven number long flows case vast majority flows half bandwidth generated short flows mixes flows smaller buffers hurt quality service short flows figure shows opposite case small buffers short flows complete quickly simulation average flow completion time shorter rtt buffers rtt sized buffers queueing delay lower reducing buffer size achieve utilization decrease completion times shorter flows real networks classes flow length flow lengths follow typically heavytailed distribution ran similar experiments pareto distributed flow lengths essentially identical results measurements physical router simulation captures characteristics router-tcp interaction verified model running experiments real backbone router traffic generated real tcp sources router cisco gsr pos engine line card switches packets pos ppp sonet router input output queues input queueing place experiments total throughput router maximum capacity switching fabric tcp traffic generated harpoon traffic generator linux bsd machines aggregated cisco gsr router gigabit ethernet line cards tcp router buffer link utilization flows rtt pkts ram model sim exp mbit mbit mbit mbit mbit mbit mbit mbit mbit mbit mbit mbit mbit mbit figure comparison model simulation experimental results buffer requirements cisco gsr linecard figure shows results measurements gsr router router memory adjusted limiting length interface queue outgoing interface buffer size multiple rtt number packets size ram device needed model lower-bound utilization predicted model sim exp utilization measured simulation physical router flows expect synchronization model predicts utilization correctly measurement accuracy predicts lower utilization found practice attribute synchronization flows simulations real network key result model simulation experiment agree router buffer size equal approximately rtt opposed rtt case packets buffer rtt bandwidth measured utilization measured utilization model figure results experiment production network measurements production network verified rtt hypothesis production network stanford throttled router serves traffic commercial internet student dormitories measured performance buffer sizes buffer serving wide range traffic protocols applications estimated number concurrent flows approximately assumed maximum rtt table shows results buffers size model predicts achieve close utilization additionally model qualitatively predict amount buffering utilization drops full substantially experiment link internet backbone ongoing preliminary results running router default buffer size compared default measurable degradation quality service conclusion recent results router buffer sizing suggest buffers backbone routers significantly larger possibly orders magnitude results hold variety conditions important consequences design operation backbone routers difficult persuade network operators remove buffer capacity routers functioning profitable networks experiments step results presented paper steps convincing operators make network operations community persuaded configure smaller buffers production routers manufacturers routers convinced build routers smaller buffer capacities short-term difficult competitive marketplace obvious router vendor feel comfortable building router buffers competitors historical reasons network operator buy router larger buffers unnecessary eventually routers continue built current rule-of-thumb difficult build linecards commercial memory chips end necessity force buffers smaller results true routers continue work fine network utilization affected acknowledgments authors stanford network team specifically sunya wang wayne sung lea roberts conducting stanford experiments curtis villamizar cheng song high performance tcp ansnet acm computer communications review van jacobson latest tcp measurements thoughts posting end-to-end mailing list march cisco line cards http cisco products modules products data sheets list html bush meyer rfc internet architectural guidelines philosophy december guido appenzeller isaac keslassy nick mckeown sizing router buffers technical report -hpng- stanford june extended version paper published sigcomm sundar iyer kompella nick mckeown analysis memory architecture fast packet buffers proceedings ieee high performance switching routing dallas texas chuck fraleigh provisioning internet backbone networks support latency sensitive applications phd thesis stanford department electrical engineering june shenker zhang clark observations dynamics congestion control algorithm acm computer communications review pages oct sally floyd van jacobson random early detection gateways congestion avoidance ieee acm transactions networking lili qiu yin zhang srinivasan keshav understanding performance tcp flows comput networks gianluca iannaccone martin christophe diot aggregate traffic performance active queue management drop tail sigcomm comput commun rev vern paxson sally floyd wide area traffic failure poisson modeling 
ieee acm transactions networking anja feldmann anna gilbert walter willinger data networks cascades investigating multifractal nature internet wan traffic sigcomm pages kelly notes effective bandwidth pages oxford press cao cleveland lin sun internet traffic poisson independent load increases technical report bell labs robert morris scalable tcp congestion control proceedings ieee infocom tel aviv usa march joel sommers paul barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference taormina italy october 
honeynets internet situational awareness vinod yegneswaran paul barford vern paxson vinod wisc wisc vern icir abstract effective network security administration depends great extent accurate concise high-quality information malicious activity network honeynets potentially provide detailed information volume diversity data prove overwhelming paper explore ways integrate honeypot data daily network security monitoring goal sufficiently classifying summarizing data provide ongoing situational awareness present system built bro nids discuss experiences drawn months operation key aspect environment ability provide insight large-scale events problem accurately classifying botnet sweeps worm outbreaks turns difficult grapple due high dimensionality incidents datasets collected number events explore utility analysis methods finding show promise contributing effective situational awareness introduction effective network security administration depends great extent accurate concise high-quality information malicious activity network attaining good information increasingly difficult profile malicious traffic evolves quickly varies widely network network security analysts discern presence threats potentially hidden immense volume background radiation addition information security analysts sources intrusion detection systems form pinpoint descriptions low-level activities source launched attack cve-xxx destination standard practices rarely include automatically acting information due prevalence false redundant alarms addition information lacks sufficient breadth forensic root analysis long-term objective work elevate quality timeliness information provided network security analysts appeal notion network situational awareness means defining information quality situational awareness military term referring degree consistency perception situation reality accurate set information environment scaled specific level interest envision network situational awareness netsa analysts accurate terse summaries attack traffic organized highlight prominent facets netsa supplement reports drill-down analysis facilitate countermeasure deployment forensic study netsa environment enable analyst quickly assess high-level information attack worm botnet misconfiguration attacker specifically targeted victim network atdept computer science wisconsin madison international computer science institute lawrence berkeley laboratory tacker matches past work represents initial foray developing netsa environment pursue environment coupling honeynets capturing large-scale malicious activity unpolluted benign traffic application-level analysis capabilities bro intrusion detection system approach geared developing building blocks netsa architecture provide ranging realtime event notification forensic analysis large scale events non-goal initial work providing automated big picture achieves flexibility robustness ultimately envision honeypots internet systems deployed sole purpose compromised order assess adversaries networks honeypots termed honeynets network telescopes typically deployed unused address space systems honeyd isink internet motion sensor simulate honeynets network-level active responders systems offer benefit finegrained attack analysis control issues high-interaction honeypots manage real systems deal compromised ability honeynets monitor large amounts address space makes appealing source timely information outbreaks scanning attacks related previous study describing broad characteristics internet background radiation data collected honeynets effectively analyzing potentially vast quantity data collected networks prove challenging focus automating process honeynet monitoring bro organize condense honeypot data situational awareness summaries quickly scanned large-scale events system presently highlights classes events activity application-level abstraction previously spikes activity type previously occurring unusually large number offending sources initial goal work accurately attribute events due worm outbreaks botnet sweeps pursued objective developing set statistical analyses source-arrival scanning patterns characterize features large-scale events report experiences operating prototype netsa environment past months constructed corpus large-scale events include well-known worm outbreaks botnet sweeps misconfiguration work remains preliminary capability consistently discriminate types combinations methods promising june profiles hour summary unique first-packet-md sigs first-packet-md sigs radiation-analy profiles fig comparison radiation-analy first-packet signature summarization radiation-analy significant benefit system structure section describe system components built acquiring inputs netsa include initial filtering raw telescope feed engaging sources survive filtering dialog abstracting dialogs semantic elements identifying semantic elements previously unseen determining recent activity merits attention operator extracting features large-scale events gain insight nature note crucial effectively identifying previously unseen semantic elements building longitudinal baseline compare recent observations discuss experiences operating system time order section netsa system includes components tunnel filter sends traffic monitored address space active responders udp encapsulation tunnel employs simple one-source one-destination filter source talk destination contacts filtering greatly reduces amount traffic responders substantial impact attack profiles analysis includes filtered prefiltered data active responders collection service emulators running honeyd isink responders enable fine-grained attack analysis engaging sources packet exchanges specific services presently run responders number commonly exploited services including netbios smb ports dce rpc http mydoom beagle dameware ms-sql generic echo-responder ports details responders provided radiation-analy collection bro policy scripts constructed analyze data active honeypots objective enable accurate high-level classification attack profiles challenging due complexity dominant protocols netbios ms-sql developing scripts aimed strike balance specificity generality group activity semantically equivalent attack perspective identical transmitted achieve means protocol well-known exploit semantics aggregating activity multiple granularities radiation-analy scripts generate summaries granularities per-source scanning profiles connectionlevel summaries distill aggregate source counts identical connection profiles iii aggregate summaries session profiles session comprised multiple types connections daily evaluations aggregating session profiles proven difficult due diversity groups connections figure compare effectiveness radiation-analy summaries simple first-packet-md classification strategy proposed compute signature payload test matches previous payload month radiation-analy summaries enable system quickly learn attack profiles couple six-hour summaries typically fewer profiles six-hour interval time-scale suitable manual supervision contrast first-packet-md signature caching produces hundreds profiles interval learn adaptation key aspect framework automatically updates notions types activity time specifically activity fails match already-known profile system inserts description activity mysql database future identified previously base descriptions semantic-level tags derived bro application-level analysis examples tcp binary-upload create file lsarpc rpc bind afa -bef len rpc request bytes operational deployment radiation-analy produces situational summaries -hour batches update honeynet database feed situational-analy situational-analy script queries honeynet database generates periodic summaries organized highlight events previously mysql database large-scale unusual events endemic activity identify large-scale unusual events compute deviation event source volume number distinct source addresses past type event compute deviation ratio denoted number sources connection profile time interval number intervals prior previously observed profile mpi summationtexti number sources observed divided number sources observed activity ignoring intervals observed situational-analy generates situational summaries highevents experiences found threshold minor escalations highevents works satisfactorily terms finding events interesting discuss section situational in-depth series statistical analyses developed classify large-scale events presently off-line tools aim adapt real-time classification future iii experiences operated netsa system months -address honeynet hour summaries alerted host potential exploits botnet incidents period details incident compelling insight netsa system terms isolating summarizing events clear operation surprisingly required tuning refinement 
time gained experience examining situational summary reports modified format thresholds adaptive rule generator provide information level fidelity daily situational summaries generated parts events report summarizes events matching existing profile abstracted bro radiation-analy script part report includes target port source count newly generated bro tag event includes protocol payload details experience number events category typically target ports vary widely number distinct sources identified events identified types events portion summary including number misconfigurations suspected virus strains polymorphisms initially expected previously unseen activity prove highly interesting reflecting significant forms malware operated long fully populate activity database regular background radiation sees important negative result turned case difficulty low levels activity include minor variations previously activity problem perfectly generalizing activity avoid flagging variants proven difficult remains challenge future work highevents section summarizes highevents component report aims identify fastscanning worms large-scale botnet attacks report lists radiation-analy tag event hourly minute breakdowns number unique sources observed overlap sources successive time intervals number source number targets scanned order high beta event day bursty single event spans multiple reports tools presented assessment botnet scans misconfigurations minor escalations section summarizes minor escalations volume report lists target port source count source count past radiation-analy tag hypothesize slow-scanning worms exploiting vulnerabilities initially visible worm outbreak place study outbreak fast-scanning worm typically section includes order fewer events top profiles final section describes top activity profiles ranked distinct source count observed period report includes target port source count radiation-analy tags section ongoing sense endemic activity frequently dominated netbios smb dce rpc activity significant attribute misconfig botnet worm source arrivals temporal source counts sharp onset gradual sharp onset arrival window narrow narrow wide interarrival distribution exponential exponential super-exp dst src net coverage dest-net footprint hotspots binomial binomial first-dest preference hotspots variable binomial source-net dispersion low-med low-med high source macro-analysis per-source profile hotspots variable variable target scope ipv ipv source lifetimes short short persistent table situational awareness attributes summary incident type date sources bittorrent nat misconfig edonkey misconfig edonkey misconfig edonkey misconfig hiddenshare botnet ms-sql botnet ms-sql botnet ms-sql botnet ms-sql botnet incomplete botnet dcerpc botnet dcerpc botnet dcerpc botnet -unknown botnet testfile botnet wkssvc botnet codered worm codered re-emergence worm codered worm nimda worm witty worm slammer re-emergence worm table summary highincidents worm outbreaks diversity terms forms activity situational awareness in-depth section present set statistical analyses developed objective effectively classifying largescale events base hypothesis expected behavior major classes large-scale events worm outbreaks botnet sweeps misconfigurations table summarizes expected behavior type event perspective honeynet focus source arrivals probe distinct source individual source characteristics network coverage discussed sections identify single method works cases analyses provide broad perspective large-scale events elements table merit clarification interarrival distribution row exponential interarrivals consistent poisson process independent arrivals occur constant rate exponential entry botnets initially expected botnet probing arrive impulse poisson process reasons discussed case super-exp entry worms reflects instant time expect arrivals poisson assuming worm random-scanning well-seeded random number generator expect worm activity grow time spreads anticipate poisson process rate steadily increases worm attains saturation collected traces large-scale events detailed table evaluate utility type analysis time minute interval sources time minute interval sources time minute interval sources fig temporal source counts minute intervals left edonkey wkssvc botnet code-red collected traces misconfiguration botnet events honeynet deployment worm outbreak traces slammer resurgence archival sources turn discussion type analysis source arrivals temporal source counts hypothesized botnet sweep characterized sharp rise sharp decay temporal source counts botnet ordered masse probe completed probing contrast expected growth worms reflect size infected population scanning behavior steadily increase worm shut code red cleaned evaluate scanning activity terms number distinct sources successive time intervals figure shows temporal source counts events probing specific honeynet address appears due misconfiguration edonkey peer-to-peer file sharing system left probing windowswkssvcservice event plausibly attributed botnet historical data initial outbreak code red july plot exhibits measurement outage sharp line left events exhibit sharp onset edonkey sharp wkssvc concave code red concave potentially reflect types activity onset sudden propagation sources edonkey propagation reaches sources quickly takes time find wkssvc logistic growth characteristic worm code red addition probable botnet activity distinguished gradual steady decay arrival window nature sources arrive initially expected botnets exhibit sharp spike arrivals master botnet pushed probing commands bot turns case confirmed analysis source code widely botnet controller phatbot common structuring botnets push commands bots poll pull source code examined bots wake seconds check commands behavior sharp onset expect steady rate arrival interval minutes figure shows arrival rate events wkssvc event regular nimda spread sec reflects botnet polling interval sec sec find arrival window sources insufficient distinguish worms botnets interarrival distribution bots poll independently instructions activate uniform distribution polling interval addition rate bots reach honeynet probing independent receive instructions expect arrival sources uniformly distributed polling interval arrivals form poisson process resulting exponentially distributed interarrival times hand source interarrival times worms exhibit increasing rate worm initially propagates evaluate source interarrival characteristics break events successive intervals equal number sources pick intervals sources plot distribution interarrival times compare exponential distribution fitted unable show graphs due space constraints evaluation events set find botnet misconfiguration events show consistency exponential interarrivals worm outbreaks rates intervals destination source net coverage destination-net scan footprint set salient features large-scale events concerns destinations probe expect misconfigurations target addresses botnets worms exhibit localized scanning structured botnets randomized worms evaluate behavior number scans source number sources scanned destination addresses figure shows destination network scan footprint events edonkey misconfiguration event shows hotspots target selection worm botnet scenarios visually random comprehensive destination preference test preference destination chosen sources reveal trends botnet sources start sequentially scanning top subnet sources bias random number generators worms select targets evaluate behavior count number times destination address chosen source target scanning process random bias scanning order time seconds percent sources edonkey wkssvc nimda lifetime milliseconds percent sources edonkey wkssvc nimda fig left cdf source arrivals edonkey wkssvc nimda cdf source lifetimes destinations contacts real pdf analytic pdf destinations contacts real pdf analytic pdf fig pdf destination preference left wkssvc botnet incident nimda expect counts binomial distribution terms trials sources probability success destination visited size networks 
monitored figure plots first-destination preference events expected values binomial distribution wkssvc botnet fits binomial indicating chooses destinations fully random nimda exhibits local preference surprisingly edonkey misconfiguration event shown shows complete lack fit source-net dispersion distribution source hosts ipv address space hypothesize hosts observed worm outbreaks broadly spread address space botnets sources sending traffic honeynet interact active responder single-packet udp probes generally eliminate possibility spoofed source ips compute histogram count sources address aggregate plots shown reveal source dispersion worm outbreaks higher botnet sweeps misconfigurations source macro-analysis per-source scanning profile investigate degree scanning profiles individual sources provide insight large-scale event aggregate behavior randomly select sources plot destinations visit sorting lowest destination address visited alternative sort arrival time addition construct phase-space plots consecutive honeynet addresses source probes plots complementary per-source coverage information per-source ordering information figure shows examples scan profiles phase-space plots ms-sql event due botnet left plot reveals types sources covering dest source prev fig left dest scanning profiles random sources ordered destination phase plot successive destination ips scanned local network mssql botnet incident entire target space scanning small number ips phase-space plot suggests set sources scan address space sequentially parallel lines side single diagonal line artifact consistent single source independent scanning threads traverses address space separately rate similar plots botnet incidents suggesting account concurrent scanning testing sequential scanners inferring target scope general situational awareness question concerns broadly event scoped opposed prevalence honeynet matter great deal event specifically targeted monitored network incidentally probed part broader probing activity roughly expect worms tend global target scope botnets misconfigurations considerably localized problem assess global scope single honeynet vantage point infer compare global scanning rate source versus local honeynet scanning rate base method observation retransmitted tcp syn packets generally seconds estimate packets source observed packets counter source implements common policy incrementing packet -second interval sufficiently short highly field fully wrapped source sends packets spacing retransmitted syn packets estimate source global scan rate extend trick admittedly work sources craft packets udp sources packets observed arrive sec addition construct estimate local scanning rate source dividing number probes lifetime estimate broader reach source ratio estimated global rate versus estimated local rate multiplied size addresses honeynet figure shows log-log scatter plots estimated global local scanning rates source events confining plot sources contacted destinations edonkey misconfiguration event estimate multiplier infer misconfiguration simply target honeynet includes thousands targets thewkksvcbotnet incident yields esdest scans sources scans harpoon flow-level sources traffic dest generator scans router sources network scans tests joel sommers computer science department wisconsin jsommers wisc hyungsuk kim electrical computer engineering department wisconsin hyungsuk cae wisc paul barford computer science department wisconsin wisc abstract describe harpoon application-independent tool generating representative packet traffic flow level harpoon configurable tool creating tcp udp packet flows byte packet temporal spatial characteristic measured routers live environments validate harpoon traces collected live router demonstrate capabilities series router performance benchmark tests categories subject descriptors computer-communicaton networks internetworking routers performance systems measurement techniques modeling techniques performance attributes general terms measurement performance keywords traffic generation network flows introduction network research community persistent evaluate algorithms systems protocols tools create range test conditions similar experienced live deployment tools critical laboratory facilities evaluate behavior performance systems real networking hardware essential emulation environments simulation environments representative background traffic required ability create array traffic conditions systems run risk unpredictable behavior unacceptable performance deployed live environments current practices traffic generation focused simple packet streams recreation single application-specific behavior packet streaming methods tools iperf consist sequences packets separated constant interval infinite ftp source commonly copyright held author owner sigmetrics performance june york usa acm traffic generation simulations approaches provide insight network system capabilities lack richness diversity packet streams observed live internet number successful application-specific workload generators developed tools focus generating application-level request sequences result network traffic statistical properties live traffic modeled application tools evaluating behavior performance host systems cumbersome router switch tests reconstruct kind application traffic diversity traffic observed internet observation suggests tool capable generating range network traffic observed edges core internet developed harpoon tool generating packet traffic characteristics traffic observed live routers approach harpoon abstract flowlevel traffic generation series application independent file transfers tcp udp transport model includes temporal diurnal effects traffic volume spatial visa-vis address space coverage components result constructive model ten distinct components parameterized netflow data collected live routers model summarized figure architecture harpoon architecture begins notion unicast file transfers tcp udp harpoon address packet level dynamics tcp file transfers relies version tcp running end hosts transfer requested files modeling udp traffic complicated fact packet emission behaviors largely application-specific harpoon simple models udp packet transfer development model diverse set udp traffic sources left future work refer lowest level harpoon model file level made components measurable distributional properties component size file transferred component time interval consecutive file transfer requests inter-file request time harpoon makes requests files sizes drawn modeled file size distribution psize requests separated time intervals drawn user time inter file request time sessions composed files users engage multiple sessions session durationa number active userssession start times file levelblocks represent individual files session level user level figure harpoon flow-based hierarchical traffic model canonical five-tuple flows analogous harpoon users users engage sessions composed individual files heavy-tailed file size distribution transfer model generates self-similar packet-level behavior modeled inter-file request distribution pinterfile middle level harpoon model referred session level sessions consist sequences file transfers distinct addresses session level components spatial distribution inter-session start times session duration harpoon picks source destination addresses ranges addresses make series file transfer requests address selection made preferentially weights drawn modeled distribution piprange series file transfer requests takes place source destination session duration drawn modeled distribution psessionon consecutive sessions separated time interval drawn modeled distribution pintersession highest level harpoon model referred user level harpoon users divided tcp udp types conduct consecutive sessions protocol time active user level components user time number active users harpoon starts users remain active period time drawn modeled distribution puseron modulating number users active point time harpoon realize temporal diurnal traffic volumes common characteristic internet number users type tcp udp active point day flow data time series average number users calculated flow data create empirical model pactiveusers tcp udp types validation validated ability harpoon generate traffic qualitatively exhibits statistical signatures distributional models input input distributions derived netflow logs captured border router january validation testbed comprised workstations cisco router workstations act harpoon servers data sources workstation acts harpoon client data sink results show harpoon faithfully reproduces distribution input validated result adhering input distributions harpoon generates traffic volumes consistent original flow traces results show harpoon introduces roughly number packets flows time interval sends bytes measured original flow records discrepancy effect file size distribution derived flow records area future work comparison packet-oriented traffic generators addition validating ability harpoon scalably accurately generate background traffic based measured flow data compare router performance workloads produced harpoon workloads generated standard packet-level traffic generator motivation comparing harpoon standard traffic generator system demonstrate differences approaches standard tools tuned exercise routers comprehensively system test cisco router connect workstations running harpoon spirent traffic generator tests contrast harpoon model traffic generation representative tools generate packets constant spacing iperf separate series experiments generate load gbps links traffic generator experiment measure forwarding rates cpu memory switching fabric utilization router choose levels load harpoon tune constant spacing packet generator match harpoon average output perform experiments routing table sizes ranging entries entries constant spacing packet generator perform experiments range burst series packets separated minimum inter-frame gap sizes packet sizes clear results precisely controlled traffic streams internet rfc conformance testing subjecting network systems extreme conditions dimensions experiments demonstrate workload based measured characteristics real internet traffic generates fundamentally variable load routers results suggest ranges behaviors expected average loads ranges tune constant bit rate streams explore operational space finally subsystem load variably imposed harpoon provide insights system designers stresses systems subjected real operating conditions inform allocation resources future system designs tirumala qin dugan ferguson gibbs iperf tcp udp bandwidth measurement tool http dast nlanr net projects iperf barford crovella generating representative workloads network server performance evaluation proceedings acm sigmetrics pages madison june cisco ios netflow feature http cisco warp public netflow 
sources dest scans sources scans sources fig destination net scan footprint left edonkey misconfiguration middle wkssvc botnet incident nimda global rate scans hour local rate scans hour global rate scans hour local rate scans hour global rate scans hour local rate scans hour local rate scans hour global rate scans hour fig log-log plot global local scanning rate ratio estimate instantaneous global footprint left edonkey misconfiguration wkssvc botnet incident nimda worm outbreak witty worm outbreak net timated multiplier event targeted equivalent network level scoping holds botnet incidents analyzed hand data nimda reveals clusters sources multiplier higher cluster consistent entire ipv address space finally data witty worm outbreak yields estimated multiplier target network collect data addresses scales footprint order entire ipv address space correct scope witty source lifetimes final attribute lifetime sources long active honeynet hypothesize botnet sources short lived told conduct specific scan stop completed worm sources persistent mechanisms stop scanning point date code red die-off month figure plots cdf source lifetimes events lifetime corresponds source briefly expectation largely holds botnets misconfigurations short lifetimes lifetimes worm sources distributed broadly analysis discriminator worms botnets utility limited fact wait make determination conclusions future work quest study enrich set information security analyst disposal creating internet situational awareness base study premise honeypot data provide source timely accurate concise information situational awareness data organized condensed end developed system based honeynets analyzers leverage bro nids mysql backend database facilitate analysis honeynet data system captured identified numerous interesting events six-month preliminary deployment important component netsa environment statistical analyses developed gain insight large-scale events attained integrated analysis regimen accurately automatically classifies events individual analyses provide perspectives study continues plan explore real-time classification working integrated analysis acknowledgements ruoming pang initial design radiation-analy joint work cristi estan anonymous referees helpful comments earlier versions paper work supported part nsf grants cnsani- ccrnsf- stiany opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf bailey cooke jahanian nazario watson internet motion sensor distributed blackhole monitoring system network distributed security symposium san diego january cooke bailey mao watson jahanian mcpherson understanding distributed blackhole placement proceedings ccs workshop rapid malcode worm october german honeynet project tracking botnets http honeynet papers bots honeynet project http project honeynet navy aviation schools command situational awareness https cnet navy mil crm crm stand mat skills asp network centric operations industry consortium situational awareness http ncoic download ncoic lexicon pdf pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm sigcomm internet measurement conference paxson bro system detecting network intruders real time usenix security symposium san antonio texas january provos virtual honeypot framework proceedings usenix security symposium san diego august yegneswaran barford plonka design internet sinks network abuse monitoring proc raid 
improving accuracy end-to-end packet loss measurement joel sommers wisconsin-madison jsommers wisc paul barford wisconsin-madison wisc nick duffield labs-research duffield research att amos ron wisconsin-madison amos wisc abstract measurement estimation packet loss characteristics challenging due rare occurrence typically short duration packet loss episodes active probe tools commonly measure packet loss end-to-end paths analysis accuracy tools impact network objective study understand measure packet loss episodes accurately end-to-end probes begin testing capability standard poisson-modulated end-to-end measurements loss controlled laboratory environment routers commodity end hosts tests show tools inaccurate range traffic conditions motivated observations introduce algorithm packet loss measurement designed overcome deficiencies standard poisson-based tools specifically method creates probe process enables explicit trade-off accuracy impact network enables accurate measurements standard poisson probing rate evaluate capabilities methodology experimentally developing implementing prototype tool called badabing experiments demonstrate trade-offs impact network measurement accuracy show badabing reports loss characteristics accurately traditional loss measurement tools networkoperations network monitoring local wide-area networks internet tcp performance systems measurement techniques general terms algorithms design experimentation measurement keywords active measurement badabing network congestion network probes packet loss permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee sigcomm august philadelphia pennsylvania usa copyright acm introduction measuring analyzing network traffic dynamics end hosts provided foundation development network protocols systems importance understanding packet loss behavior loss significant impact performance tcpand udp-based applications efforts network engineers operators limit loss eliminated due intrinsic dynamics scaling properties traffic packet switched network network operators ability passively monitor nodes network packet loss routers snmp end-to-end active measurements probes provide equally valuable perspective conditions application traffic experiencing paths commonly tools probing end-to-end paths measure packet loss resemble ubiquitous ping utility pinglike tools send probe packets icmp echo packets target host fixed intervals loss inferred sender response ified time period generally speaking active measurement approach problematic discrete sampling nature probe process accuracy resulting measurements depends characteristics interpretation sampling process characteristics underlying loss process widespread mention literature tune calibrate active measurements packet loss improve accuracy interpret resulting measurements approach suggested wellknown pasta principle networking context tells poisson-modulated probes provide unbiased time average measurements router queue state idea lay loss asymptotic nature pasta means applied practice higher moments measurements considered determine validity reported results closely related issue fact loss typically rare event internet reality implies measurements long time period average rates poisson-modulated probes high order report accurate estimates timely fashion increasing probe rate lead situation probes skew results trade-offs packet loss measurements probe rate measurement accuracy impact path timeliness results goal study understand accurately measure loss characteristics end-to-end paths probes lossepisode frequency loss episode duration commonly referred notion loss rate estimated directly measurements study consists parts empirical evaluation prevailing approach development estimation techniques based experimental design probing techniques simple validation tests iii empirical evaluation methodology begin testing standard poisson-modulated probing controlled carefully instrumented laboratory environment consistingofcommodityworkstationsseparatedbyaseriesofiprouters background traffic end hosts levels intensity generate loss episodes enabling repeatable tests range conditions setting ideal testing loss measurement tools combines advantages traditional simulation environments tests wide area simulation high level control ability compare results ground truth tests wide area ability loss processes actual router buffers queues behavior implementations tools commodity end hosts tests reveal important deficiencies simple poisson probing individual probes incorrectly report absence loss episode successfully transferred loss episode underway suited measure loss episode duration limited measurement periods ing motivate part study development approach end-to-end loss measurement key elements approach design probe process assesses likelihood loss experienced flows path reporting packet losses design experimental framework estimation techniques directly estimate duration loss episodes estimating duration individual loss episode estimators proved consistent mild assumptions probing process provide simple validation tests require additional experimentation data collection statistical assumptions underly analysis part study involves empirical evaluation tothisend wedeveloped one-way active measurement tool called badabing badabing sends fixed-size probes intervals measurement host collaborating target host target system collects probe packets reports loss characteristics period time compare badabing standard tool loss measurement emits probe packets poisson intervals results show tool reports loss episode estimates accurately number probes important implication results loss characteristics enables researchers understand trade-offs accuracy impact tool self-calibrating sense report estimates poor practical applications include path selection peer-to-peer overlay networks tool network operators monitor specific segments infrastructures remainder paper structured section related work areas loss measurement techniques loss measurement studies section provide definitions loss episode frequency duration provide critical context probe process laboratory testbed configuration results tests basic poisson-modulated probing reported section details probe process analytic treatment validity resulting loss estimators provided section description tool built implement probe process results evaluation experiments section provide discussion practical considerations tool section concluding summary future directions work provided section related work packet loss substantial impact performance wide range internet protocols applications understanding characteristics impact packet loss led development newreno sack versions tcp loss characteristics fundamental component tcp throughput modeling studies packet loss behavior internet bolot paxson evaluated end-to-end probe measurements reported characteristics packet loss selection paths wide area yajnik evaluated packet loss correlations longer time scales developed markov models temporal dependence structures zhang characterized aspects packet loss behavior work reported measures constancy loss episode rate loss episode duration loss free period duration loss rates authors sophisticated passive monitoring infrastructure inside sprint backbone gather packet traces analyze loss episodes frequency duration finally sommers barford pointed limitations standard endto-end poisson probing tools comparing loss rates measured tools loss rates measured passive means fully instrumented wide area infrastructure erages pasta developed brumelle formalized wolff adaptation queuing theory ideas network probe context measure loss delay characteristic began bolot study extended paxson relevance work paxson recommendation poisson-modulated active probe streams reduce bias delay loss measurements studies include loss measurements estimate network properties bottleneck buffer size cross traffic intensity internet performance measurement analysis efforts resulted series rfcs packet loss measurements conducted rfcs devoid details tune probe processes interpret resulting measurements guided paxson recent work advocates rigorous calibration network measurement tools zing tool measuring end-to-end packet loss direction participating end hosts zing sends udp packets 
poisson-modulated intervals fixed rate savage developed sting tool measure loss rates forward reverse directions single host sting clever scheme manipulating tcp stream measure loss allman demonstrated estimate tcp loss rates passive packet traces tcp transfers close sender related study passive packet traces middle network presented network tomography based figure simple model system consideration flows input links aggregate bandwidth bin compete single output link router bandwidth bout bin bout output link seconds buffer capacity multicast unicast probes demonstrated effective inferring loss rates internal links end-to-end paths finally controlled laboratory environments paper begun emerge effective arenas network protocol system evaluation environments wail deter emulab openly research community include routers general purpose workstations ideal measurement tool testing definitions loss characteristics factors contribute packet loss internet describe detail foundation understanding active measurement objectives environment modeled set flows pass router compete single output link bandwidth bout depicted figure aggregate input bandwidth bin greater shared output link bout order loss place typical round trip time flows seconds router configured bytes packet buffers accommodate traffic bursts typically sized order assume traffic includes mixture shortand long-lived tcp flows common today internet fluctuate time figure illustration occupancy buffer router evolve time congestion occurs aggregate sending rate flows exceeds capacity shared output link onset congestion results filling output buffer positive slope queue length graph rate increase queue length depends number sending rate source loss episode begins aggregate sending rate exceeded bout period time sufficient load bytes output buffer router times figure loss episode ends aggregate sending rate drops bout buffer begins consistent drain times figure typically tcp sources sense packet loss halve sending rate simply number competing flows drops sufficient level case duration loss episode related depending loss sensed timeout fast retransmit signal define loss episode duration difference start end times definition model loss episodes simplistic dependent behaved tcp flows important measurement method robust flows react congestion tcp-friendly fashion router-centric view end-to-end flow loses packet senses lost packet contrasts prior work discussed section losses individual groups probe packets words methodology loss episode begins probability duringtheepisode theremight transient periods packet loss ceases occur resumption packet loss episode ends probability packet loss stays sufficient period time longer typical rtt offer definitions packet loss rate router-centric loss rate number dropped packets output link router period time number successfully transmitted packets link period time define router-centric loss rate end-to-end loss rate define end-to-end loss rate manner router-centric loss-rate caveat count packets belong specific flow interest important distinguish notions loss rates packets transmitted maximum rate bout loss episodes result period routercentric loss rate non-zero flows lose packets end-to-end loss rates observation central study bears directly design implementation active measurement methods packet loss simple poisson probing packet loss loss probe measurements zing tool tested zing series experiments conducted laboratory environmentconsistingofcommodityworkstationendhostsandaseriesof routers environment ideally suited understanding calibrating end-to-end loss measurement tools laboratory environments weaknesses typically ns-type simulation abstractions measurement tools protocols systems weaknesses wide area situ experiments lack control repeatability complete high fidelity end-to-end instrumentation address important issue testing tool representative traffic conditions combination harpoon traffic generator iperf evaluate tool range cross traffic loss conditions testbed setup laboratory testbed experiments shown figure topology comprised cisco gsr routers probe traffic flowed sending hosts separate paths gigabit ethernet separate cisco gsrs hop figure transitioned links configuration created order accommodate measurement system probe background traffic multiplexed single link hop figure formed bottleneck loss episodes place hardwarebased propagation delay emulator link add milliseconds delay direction experiments configured bottleneck queue hold approximately milliseconds time capacity buffer length queue cdba figure evolution length queue time queue length grows aggregate demand exceeds capacity output link loss episodes begin points maximum buffer size exceeded loss episodes end points aggregate demand falls capacity output link queue drains traffic generator host badabing receiver adtech badabing sender traffic generator host dag monitor host cisco cisco cisco cisco propagation delay emulator direction milliseconds cisco hop identifier abc figure experimental testbed cross traffic scenarios consisted constant bit-rate traffic long-lived tcp flows harpoon web-like traffic cross traffic flowed routers hop probe traffic flowed optical splitters connected endace dag passive packet capture cards testbed hops hops probe traffic flowed left loss episodes occurred hop packets packets exited link cisco gsr hop figure passed receiving hosts gigabit ethernet probe traffic generator hosts consisted identically configured workstations running linux workstations ghz intel pentium processors ram intel pro network cards dual-homed management traffic separate network depicted figure important aspects testbed measurement system establish ground truth experiments optical splitters attached ingress egress links hop endace dag passive monitoring cards capture traces packets entering leaving bottleneck node dag cards extensively studies capture high fidelity packet traces live environments theyaredeployedinsprint sbackbone andin nlanr infrastructure comparing packet header information identify packets lost congested output queue experiments fact measurements packets entering leaving hop time-synchronized order single microsecond enabled easily infer queue length queue affected probe traffic tests performance poisson probes zing tool measuring packet delay loss direction end-to-end path zing sender emits udp probe sequence numbers receiver logs probe packet arrivals users probe rate probe packet size number packets flight evaluate simple poisson probing configured zing parameters ran tests byte payloads byte payloads determine duration experiments selected period time limit variance loss rate estimator var loss rate number probes conducted separate experiments evaluation simple poisson probing test measured frequency duration packet loss episodes definition loss episode series consecutive packets possibly length lost experiment infinite tcp sources receive windows set fullsize bytes packets figure showsthetimeseriesof queue occupancy portion experiment expected synchronization behavior tcp sources congestion avoidance clear experiment run period minutes enabled zing measure loss rate standard deviation intable thetableshowsthat zing loss frequency duration scenario probe rates instances consecutive lost packets explains inability estimate loss episode duration set experiments iperf create series approximately constant duration milliseconds loss episodes spaced randomly exponential intervals seconds minute period time series queue length portion test period shown figure results experiment randomly spaced constant duration loss episodes shown table table shows zing measures loss frequencies durations closer true values final set experiments harpoon create series loss episodes approximate loss resulting web-like traffic harpoon configured briefly increase 
load order induce packet loss average seconds variability traffic produced harpoon complicates delineation loss episodes establish baseline loss episodes compare found trace segments events packet losses queuing delays packets losses milliseconds milliseconds maximum ran test minutes portion time series queue length shown figure results experiment harpoon web-like traffic shown table measuring loss frequency probe rate results close match true frequency loss episode duration results poor probe rate consecutive losses measured probe rate instances consecutive losses lost packets table results zing experiments infinite tcp sources frequency duration seconds true values zing zing table resultsfrom zing constant duration loss episodes frequency duration seconds true values zing zing table results zing experiments harpoon weblike traffic frequency duration seconds true values zing zing probe process model results experiments previous section show simple poisson probing generally poor measuring loss episode frequency loss episode duration results deeper investigation reasons deficiencies loss episode duration measurement form foundation measurement process time seconds queue length seconds figure queue length time series portion experiment infinite tcp sources time seconds queue length seconds figure queue length time series portion experiment randomly spaced constant duration loss episodes general setup methodology involves dispatching sequence probes closely spaced packets aim probe snapshot congestion state network instant probing end record probe encountered congestion loss sufficient delay packets probe reason multipacket probes packets passing congested link subject loss multiple packets enables accurate determination made probes organized term basic experiments comprises number probes time seconds queue length seconds figure queue length time series portion experiment harpoon web-like traffic time segments grey loss episodes rapid succession aim basic experiment determine state network show enables estimate duration congestion periods full experiment comprises sequence basic experiments generated rule sequence terminated number basic experiments duration open-ended adaptive fashion estimates desired accuracy congestion characteristic obtained accuracy determined impossible formulate probe process discrete-time process decision fundamental limitation concerned measuring congestion dynamics ensure interval discrete time slots smaller time scales congested episodes congested slot simply time slot congestion occurs congestion episode maximal set consecutive slots congested steps explanation loss measurement method experimental design subsequent estimation present basic algorithm version design model designed provide estimators frequency congested slots duration congestion episodes frequency estimator unbiased weak statistical assumptions estimators consistent sense converges respective true values number measurements grows describe improved algorithm version design loss episode estimators weaker assumptions requires employ sophisticated experimental design version model insert mechanism estimate correct bias estimators basic design describe simple validation techniques assign level confidence loss episode estimates enables open-ended experimentation stopping criterion based estimators reaching requisite level confidence basic algorithm time slot decide commence basic experiment decision made independently fixed probability slots series decisions random variables takes basic experiment started slot dispatch probes measure congestion slots random variable records reports obtained probes -digit binary number means probes observe congestion means probe observed congestion methodology based fundamental assumptions view probe reporting design describedin theseassumptions required algorithmic versions basic algorithm requires stronger version assumptions detail assumptions assume probes accurately report congestion congestion present time slot observed probe packets slot assume specific structure inaccuracy letyi meansthat congestion congestion true means congestion observed knowledge router buffer occupancy queueing delays packet drops specific assumption correct equalsyi probability independent depends number digits incorrect explicitly congestion occurs congestion reported probability congestion begins congestion ends independent fails match necessarily congestion on-going independent fails matchyi necessarily estimation basic algorithm assumes consistent duration estimation consistent unbiased frequency estimation estimators congestion frequency estimation straightforward denote true frequency congested slots define random variable digit estimate hatwidef index running basic experiments conducted total number experiments estimator unbiased hatwidef expected congestion frequency mild conditions estimator consistent durations congestion episodes congestion-free episodes independent finite proportion congested slots experiment slots converges surely grows congestion frequency stated property congestion duration estimation sophisticated recall congestion episode consecutive occurrence congestions preceded congestion binary representation written suppose oracle state router buffer time slots discretization count congestion episodes durations find congestion episodes length congestion paul barford joel sommers wisconsin madison comparing probeand router-based packet-loss measurement empirical analysis internet traffic characteristics biased measurement methodology gather data article compares probeactive router-based passive methods measuring packet loss laboratory wide-area network laboratory case study demonstrates accuracy passive simple network measurement protocol snmp measurements low loss rates wide-area experiments show active-probe loss-rate measurements don correlate measured snmp routers live network case study findings reveal common methods active probing packet loss suffer high variance effects end-host interface loss acket loss due congestion fundamental problem wide-area packet-switched networks researchers expended effort characterizing phenomenon designing protocols operate effectively lossy environments internet dynamic nature requires continued empirical evaluation packet-loss behavior divide methods measuring packet loss categories passive monitors attached network links network nodes standard means passive monitoring set management information base mib counters network nodes simple network management protocol snmp counters track packet losses due congestion router subsystems benefit capture important details local traffic behavior cost information high terms data-storage requirements snmp access administrative domains impossible means measuring packet loss active end-to-end probing tool ubiquitous ping utility active probe tools september october published ieee computer society ieee ieee internet computing internet measur ement ping send series packets aimed target system measure returned response packets sender sequence numbers track lost packets benefits active probes twofold run virtually network give endto-end perspective network conditions sampling tools probes discrete nature limits resolution increasing probing rate increase resolution probes skew results frequency high objective address question probeand router-based measurements packet loss correlate work describe article main implications exposes limitations probe-based loss measures low-loss environments implication probe-based methods accurate picture results demonstrate accuracy snmp-reported loss measurements suggesting snmp attractive alternative measuring loss low-loss environments finally study suggests characterizations models packet loss based active measurements reevaluated data probing methodologies passive measurements setting experiments started examined accuracy snmp loss measurements series laboratory experiments precise measurement systems found snmp accurately reported loss router-based snmp measurements packet loss collection periods backbone routers internet internet aggregated data path endto-end perspectives loss behavior simultaneously one-way probe-based measurements packet loss zing utility gps-enabled nodes directly connected internet backbone router zing sends probe packets exponentially modulated intervals provide unbiased time-averaged data loss conditions end-to-end path measurement periods set average probe rate aggregated measured loss rates compare snmp data evaluated degree agreement probeand router-based measurements comparing correlation coefficients lossrate time series end-to-end path results showed correlation probeand router-based data sets compared distributional characteristics loss measurements loss properties including lengths lossfree periods loss rates lossy periods loss constancy periods trend loss rate case found low level agreement distributions concluded probeand router-based loss measures give perspectives feasible explanations lack agreement data sets possibility artifacts measurements interface loss bias results attributed loss measured active probes host interfaces didn observe simultaneous loss snmp data found losses rare censoring data didn improve correlation data sets plausible explanation lack correlation sampling rates probe-based measurements coarse accurately measure typical loss episodes probe rates correlation didn significantly improve faster probe rates snmp loss-rate measurements extremely low required sampling long periods time close correlations established statistical issues probe-based measurements standard statistical technique unbiased estimate random process average state sample exponentially distributed intervals extension approach led well-known poisson arrivals time averages pasta theorem states exponentially distributed arrivals queue system average state theorem expresses asymptotic result considered carefully practice binary process states describing packet lost due congestion interested estimating loss rate probability loss due congestion sampling times poisson intervals average samples expected number samples note estimate large variance var standard devia-x ieee internet computing computer internet september october probeand router-based packet-loss tion approximately average loss rates order samples simple analysis important implications loss rates uncommon highly engineered network internet send probes weeks accurate projection loss rates fast probe rate simply decide increase probe rate reduce time required inevitably forced make trade-offs increasing bandwidth consumption probe traffic potential skewing loss measurements data collection collected wide-area measurement data internet abilene backbone researchers frequently network measurement characterization projects active probes full mesh end hosts directly connected routers snmp queries seconds collect packet count loss data router interfaces selected period compromise increased load routers sufficiently detailed data snmp measurements included packet drops due full queues packet corruption interface errors total probe-based measurements distinct paths router-based measurements router interfaces details measurement infrastructure methods collected active measurement data zing utility -byte udp probes exponentially distributed intervals means probes literature treat problem probe-size choice loss measurements selected probe size consistent study ensure modest bandwidth consumption cisco gsr series routers internet buffer carving queue packets bytes probepacket size impact loss measurements buffer configurations routers tests analysis called zing traces parallel zing probes -byte udp probes uniform spacing methodology essentially ping tool case probe packets flow direction probes continuously data-collection period type probe forwarding path normal packet traffic routers compare zing ping traces snmp data aggregated probe traces -second interseptember october computer internet ieee internet computing internet measurement related work packet-loss behavior researchers studied packetloss behavior internet bolot paxson active probe measurements establish baseline understanding packet-loss characteristics wide-area networks including correlation structures fine time scales typical loss rates probe-based method measuring packet loss tomography coordinated end-to-end measurements infer link-level loss rates yajnik colleagues evaluated correlation structure longer time scales developed markov models temporal dependence structures zhang colleagues assessed aspects constancy loss rates based active probing internet future promises interesting results ongoing passive active measurement projects http moat nlanr net amp national laboratory applied network research recent work active measurement program data projects provide important empirical perspective packet-loss behavior results article suggest data active measurements considered carefully bolot end-to-end packet delay loss behavior internet proc acm special interest group data communications sigcomm acm press paxson end-to-end internet packet dynamics proc acm special interest group data communications sigcomm acm press coates nowak network loss inference unicast end-to-end measurement proc int teletraffic congress seminar traffic measurement modeling publisher duffield inferring link loss striped unicast probes proc ieee conf computer comm infocom ieee press pages cited yajnik measurement modeling temporal dependence packet loss proc ieee conf computer comm infocom ieee press zhang constancy internet path properties proc acm special interest group 
data communications sigcomm acm press fraleigh packet-level traffic measurements sprint backbone ieee network vol matthews cottrell pinger project active internet performance monitoring henp community ieee comm vol vals made analysis conservative reporting loss fusion events filtering distributed events intrusion measured detection systems paul snmp barford somesh active jha probe vinod yegneswaran interval wisc active jha probe wisc appeared vinod detect wisc congestion-loss event wisconsin madison traceroute abstract false measurements alarms timely full mesh identification end hosts attacks minutes determine biggest challenges sets router effective interfaces network encountered intrusion detection end-to-end systems path nids potential means physical interface addressing layout information shortcomings openly modern nids employing abilene network multiple operations distributed network center intrusion abilene detection systems dnids complete path details paper found routes potential benefits extremely stable dnids addressing open study problems collected data problem combine periods data april multiple intrusion sensors -hz network probes july fusion july problem -hz probes problem august identify important august data -hz provided probes due multiple sensors immense amount network data generated filtering problem measurements develop collected series data analytic simulation models days link assess utilizations potential benefits study dnids period averaged reducing false percent alarms percent improving percent timeliness detection standard deviations fusion percent filtering percent strategies percent analysis explores measurement trade-offs period fusion filtering router-based measurements shows calculated significant loss improvements rates paths introduction multiple malicious hops traffic union-of-loss form probabilities self-propagating means worms taking viruses product port scans loss rates denial service hop attacks specifically profound calculated threat loss-rate internet multihop path length infrastructures interfaces internet communication period protecting networks malicious traffic remains vexing problem sum packets lost research operational -second communities period current interface practices protecting networks sum malicious packets traffic transmitted deploy packets lost multi-layered security infrastructure interface includes network intrusion period detection calculation systems assumes nids independence-of-loss nids events meaning loss identifying events malicious activity unrelated network hop generally suffer path feel major drawbacks reasonable high false highly alarm engineered rates networks perspective single vantage single point flow limits ability detect distributed coordinated attacks promising approach addressing above-mentioned shortcomings distributed network intrusion detection systems dnids dnids composed diverse set sensors coordinate identify malicious traffic sensor diversity appears forms information temporal geographical sensors measure features network traffic detection algorithms provide fundamentally information network traffic term information diversity improve intrusion detection capabilities attacks consist multiple steps sensor measurements correlated time term temporal diversity correlating sensor readings events occur times lead improved intrusion detection classes malicious traffic worms widespread effect network sensors monitor sets network addresses similar affect measurement widespread attacks term geographical diversity context intrusion detection geographical diversity improve time-to-detection false-alarm rate focus work investigate combine data geographically diverse dnids order improve false-alarm rates timeliness detecting attacks paper simple models summarizing filtering combining fusing data dnids order explore problem space approach small group flows correlated congestion losses points path calculated correlation coefficients loss periods loss rates multihop paths found coefficients tightly bunched result doesn prove independence consistent assumption laboratory evaluation snmp loss counters effectively compare probeand router-based packet-loss measurements experimentally evaluated packet-loss counters cisco gsr router spirent generate traffic ocinterface terminated cisco gsr traffic routed back ocforming bottleneck packet loss generated direction optical splitters endace dag capture cards cards sprintlab ipmon environment precise packet-measurement capabilities tuning packet-emission parameters generated varying degrees packet loss router experiments lasted hours consisted loss regimes created generate approximately percent percent percent packet loss uniformly -byte packets generated packet bursts varying sizes combination average inter-burst time average burst length created desired loss rate correlation coefficients snmp dag traces demonstrating precision snmp loss measurements lower correlation higher loss rates primarily artifact edge conditions due -second sampling interval loss-rate comparison compared results loss measures snmp zing ping arbitrarily chosen canonical path indianapolis indiana los angeles california representative paths study detailed description loss measurements appears quantified degree distributional agreement zing ping router counters goodness-of-fit test parameterized conservatively favor finding agreement distributions parametric goodness-of-fit hypothesis test extremely robust underlying distributional characteristics comparison methods objective make straightforward quantitative assessment loss-rate time series figure page shows time-series graphs loss measurements canonical path active probes largely overestimate loss rate compared router interfaces important note lower bound probe-measured rate group measurements sample intervals time-series analysis lower bound statistical defined opposed measuring single signature-based loss intrusion event detection thresholding time interval alarm bound raised ieee sensor internet reading computing computer threshold internet september system october false alarm probeand router-based defined packet-loss alarm function raised normal considered probe conditions rate primary reason time interval false alarms probe statistical rate detection systems variance average network traffic packets normal -second operations sample interval reduce set false-alarm effective rate lower bound statistical loss detection dnids rate percent important reduce effective variance lower bound normal traffic snmp assume lower assuming identical average sensors packet located size bytes geographical sites minimum loss rate alarm raised -second central period site average reading ocbps sensors exceeds roughly noted threshold minimum snmp-measured sensors loss rates deployed order sites averaging readings consistent reduce average packet variance sizes computed normal component mib variables traffic estimate effect attack component transmission loss due traffic typically network interface correlated drops compared sites averaging raw data affect filtered set increases created variance set attack raw data component retaining questions snmp measurements removing granularity losses data reported zing ping passed snmp didn central site report -second data sample combined interval figure central shows site filtered end results paper makes path congestion contributions loss analytical formulation occurred section router measured analytical formulation active probe studying reduction router counters false-alarm didn rate averaging readings significant possibility sensors based simulation previous analysis experiments section filtered data simulation-based evaluation probes impact miss false alarm rate loss events timeliness router detection recorded rows methods table filtering quantify fusion related effects work transmission network loss traffic due characteristics host general interface properties drops internet traffic loss rate studied low intensely raw years standard filtered data sets filtered include data studies loss rate focused order establishing baselines magnitude lower invariant occasionally properties typical network traffic behavior wide area draw studies means understanding characteristics benign network traffic inform choices generating traffic simulation experiments important results relating work typical network traffic self-similar scaling properties high variability significantly complicates detection anomalies statistical means good deal work characterize internet intrusion attack activity moore examined prevalence denial-of-service attacks backscatter analysis authors analyze details code red worm outbreak provide important perspective speed worm propagation follow-on work moore provide insights speed counter measures installed inhibit spread worms code red yegneswaran explore statistical characteristics internet intrusion activity global perspective related study unwanted internet traffic internet background radiation presented background radiation consists primarily scans remnants worms traffic continually cycle internet finally profiles worm outbreaks characterized papers including important contribution studies development models propagation scanning behavior worms authors demonstrate equations highlights shortcomings active probing loss host interface drops completely avoided calculated time-series correlation coefficients path router-based measures probe traces correlation coefficients low raw filtered traces percent paths correlation loss-free periods loss-free period defined number consecutive -second sample intervals loss measured evaluation loss-free periods measured snmp paths showed wide range values figure shows cumulative distributions loss-free periods measurement method canonical path router-based measures show loss events closely spaced time probe-based measures values rejected fit hypothesis percent acceptance level indicating probe-based marginal distributions marginals loss-free periods good approximations router-based marginals loss periods assessed loss rates measured -second intervals detected packet loss observed wide range snmp-measured loss rates paths canonical path figure page shows probes experienced vastly loss rates router-based measures lower bound probe-measurable loss rate obvious curves path zing ping measured similar loss rates results tests probe-measured loss periods fit snmp data good fit based conservative choice parameters breaks quickly degrees freedom september october computer internet ieee internet computing internet measurement figure loss rates compared loss rates indianapolis indiana los angeles california canonical path -hz probe rate simple network measurement protocol snmp measurements identical data set filtered data sets contained active probe events measured loss event router sample interval zing ping snmp zing ping snmp model epidemic growth rates finite systems equally vulnerable entities naturally adapted domain internet worms results inform simulation models anomaly attack intrusion detection wide variety techniques detecting anomalies attacks intrusions developed investigated common misuse detection employed standard network intrusion detection systems including snort bro wang describe interesting method detecting syn flood attacks based change point detection statistical methods network anomaly detection focus work investigated anomaly detection methods include information retrieval data mining inductive learning statistical signal processing based change point detection multiresolution analysis detailed treatment network intrusion detection reader consult surveys textbooks including literature related study specific focus investigating problem space related combining analyzing data distributed network detection systems problem event recognition distributed sensor environments continues receive attention signal processing sensor networking communities intention investigate utility techniques developed studies specific context internet intrusions attacks barkat varshney treat problem identifying events distributed radar system device makes local detection decision sends results fusion center merges data make final detection decision voting rule chamberland veeravalli treat similar problem context sensor networks study similar objective approach work proposes change point detection heuristic identifying attacks data multiple sensors general aspects distributed network intrusion detection systems dnids treated number papers including studies typically treat problems physical infrastructure required measurement communication dnids aspects treat detection dnids emerald modular dnids includes monitoring analysis components analysis component emerald signature-based bayesian methods detect intrusions dshield takes completely approach dnids problem systems noted part target centralized security management authority dshield accepts logs nids firewalls internet aggregates reports summaries intrusion attack activity system administrators information configure tune security infrastructure finally commercial entities symantec offer canonical path loss rate log canonical path loss rate log change-free periods finally compared measures loss constancy previous work defined time series series piece-wise steady regions delineated change points periods statistically discernable trend loss rate task identifying change-free periods cfps reduces identifying change points bootstrapping method identify change points cfp duration distributions paths router-based measures showed wide range durations including paths conditions didn change days loss conditions changed higher frequency figure page shows cumulative distributions cfp duration canonical path indicating zing ping experienced high proportions short durations steady loss rates router interfaces path loss rate remained constant entire collection period statistics rejected fit hypothesis percent acceptance level indicating probe-based cfp marginals good approximations router-based cfp marginals future work results highlight great care active probes loss characterization potential router-based measures results suggest prior published results based active probes require scrutiny interpretation future active probe tools sample network characteristics designed traffic variability mind ieee internet computing computer internet september october probeand router-based packet-loss table summary statistics canonical path indianapolis indiana los angeles california data set loss rate raw snmp zing ping loss rate filtered snmp zing ping loss-free periods raw snmp zing ping loss periods raw snmp zing ping change-free period raw snmp zing ping number changesnmp free periods raw zing ping figure loss-free periods canonical path -hz probe period cumulative distributions consecutive -second sample intervals paths show router-based measures display loss events closely spaced time probe-based measures router-based measures loss events common zing ping 
snmp cdf length loss-free run seconds step investigate lightweight probing methods tools ability detect loss shorter time frames acknowledgments authors matt zekauskas guy almes chris robb larry landweber dave donoho jay rosenbloom nevil brownlee mark crovella sue moon yin zhang cisco systems spirent communications zhang constancy internet path properties proc acm special interest group data communications sigcomm acm press wolff poisson arrivals time averages operations research vol barford sommers comparison probe-based router-based methods measuring packet loss tech report trcomputer science dept univ wisconsin madison paxson architecture large-scale internet measurement ieee comm vol read output show controller frfab tofab queue commands cisco series internet router cisco systems cisco warp public fabqueues html fraleigh packet-level traffic measurements sprint backbone ieee network vol paul barford assistant professor computer science wisconsin madison founder director wisconsin advanced internet laboratory research interests design measurement modeling wide area networked systems network protocols barford received electrical engineering illinois champaignurbana phd computer science boston contact wisc joel sommers pursuing phd computer science wisconsin-madison research focuses internet measurement analysis network dynamics received math computer science atlantic union college south lancaster computer science worcester polytechnic institute worcester contact jsommers wisc september october computer internet ieee internet computing internet measurement figure loss rates loss intervals canonical path -hz probe period cumulative distributions loss rates sample intervals paths probe-based measurements differ vastly router-based measures loss rates loss intervals lower zing ping snmp loss rate log cdf figure change-free periods canonical path probe period cumulative distributions change-free periods cfps paths don match indicating probe-based cfp marginals good approximations router-based suggest steady loss rates cdf duration cfp seconds zing ping snmp 
managed security early warning services customers based dnids systems studies offers perspective problem distributed intrusion detection principles approach evaluating capabilities utility systems specific classes threats domino infrastructure prior work developed distributed intrusion detection infrastructure call domino distributed overlay monitoring internet outbreaks domino secure scalable robust data sharing infrastructure composed heterogeneous set intrusion sensors distributed internet domino objective improve timeliness accuracy detecting malicious traffic infrastructure composed hierarchical set systems decreasing levels trust shown figure domino participants include axis overlay central component domino responsible bulk data sharing connected peer-to-peer overlay network communication axis nodes axis nodes satellites authenticated encrypted facilitated domino summary exchange protocol figure domino node organization axis nodes participate peer-to-peer overlay network satellite terrestrial nodes form hierarchy figure empirical evaluation reaction time sql-snake outbreak networks added distributed detection system satellite communities smaller networks nodes implement version domino communication protocol nodes organized hierarchy axis node satellite node data nodes considered trustworthy axis nodes terrestrial contributers trustworthy nodes network potentially large source data importance domino work environment empirically test evaluate fusion filtering functions performed off-line analysis potential distributed intrusion detection system domino reducing 
reaction time attack detection study set logs collected dshield time sql-snake outbreak worm rapid propagator compared prior outbreaks code red nimda perform evaluation randomly selected networks calculated hourly average number scans average number sources port summary data port ms-sql weeks define reaction time elapsed time outbreak inflection point alarm point simple rules chose alarm generation increase number scans hourly average increase number sources hourly average number sources greater figure shows decrease observed reaction time average hour single node add sufficient axis nodes approximately analytical model random variables model feature network traffic normal attack conditions assume random variables non-negative true measurements number scans port specific feature modeled random variables depends attack considered detecting worms random variables represent number scans port worm exploits rest section assume sensor monitors specific feature network traffic modeled assume sensor raises alarm simple thresholding scheme raise alarm sensor measurement threshold case false-alarm false-negative rate expressions false alarm rate defined probability alarm raised normal conditions analogously false-negative rate defined probability alarm raised conditions network attack intrusion detection objective low false-alarm falsenegative rate random variable chebyshev inequality shown formulation chebyshev inequality var assume threshold greater chebyshev inequality upper bound false-alarm rate var important notice false-alarm rate directly proportional variance random variable set threshold equal rradicalbigvar false-alarm rate bounded var variance normal traffic false-alarm rate assume random variable models specific network feature attack conditions sum random variables measurement normal conditions additional measurement caused due attack case sequence equations bounding false-negative rate formula assumes independent notice ideal false-negative rate denoted fnideal hope observing pure attack traffic normal traffic added notice fnideal var words variance normal traffic false-negative rate ideal false-negative rate reducing variance normal traffic lowers false-alarm false-negative rate averaging sensor readings assume sensors intuitively sensors measure network traffic disjoint set addresses xni xni reading sensor normal attack conditions make assumptions normal measurement xnn independent identically distributed iid xni independent random variables finite variances var nsummationdisplay summationdisplay cov mutually independent var normal conditions average sensor readings expression equation variance variance normal traffic xni false-alarm rate expression bounded recall false-alarm rate single sensor rate bounded averaging false alarm rate reduced factor noted reducing variance normal traffic reduces false-alarm false-negative rate attack conditions average sensor measurements denoted expression expression expression znn assume zis identically distributed variance correlation coefficient recall cov related equation cov equation variance expression var summationdisplay assume attack component correlated case lower bound var var notice var var words readings sensors averaged variance normal traffic variance attack traffic stays positive lower bound experimental evaluation evaluate performance trade-off fusion filtering strategies worm detection terms accuracy overhead metrics accuracy time response reaction time average number alerts generated normal operations false alarms estimate bandwidth overhead function number data units exchanged participating nodes traffic model begin simulation analysis selecting models normal worm traffic refers additional traffic introduced due outbreak background noise traffic port aggregate traffic hour volume scans figure simulated background worm traffic infection rates simulating worm traffic studied models simulating worm traffic include simple homogeneous infection models two-factor worm model extends kermackmckendrick classic epidemic model primary difference considers clean-up infected hosts pick model simplicity primarily concerned decisions growth-phase worm outbreaks growth rate volume scans expressed logistic equation assume due variability network connectivity topology lags affect inflection point outbreak observed networks assume offset normal distribution model traffic outbreak equation infection rate volume scans observed peak infection inflection point point values codered outbreak infections hour experiments fix values cases explicitly state variance offset function fixed two-phase model slow spreading worms sql-snake percentage susceptible population correspondingly infection rate small hour data units log exchange summary exchange voting number nodes data units log exchange summary exchange voting figure time-volume graph hourly data exchanged nodes growth data exchanged size hour estimated signal noise number nodes var figure hourly variance outbreak reduction cumulative variance add nodes simulating background noise model background traffic pareto distribution commonly heavy tailed distribution probability density function noteworthy aspect heavy tailed distributions pareto distribution infinite variance referred shape parameter location parameter figure background worm traffic generated twenty nodes values fixed fixed experiments data filtering strategies begin describing strategies exchanging alert information distributed worm defense infrastructure domino scan basis simple strategy exchange complete header information scans observed network represents maximal filtering sensor nodes approach provide high fidelity alerts flexibility perform sophisticated analysis feasible due privacy concerns communication overhead summary basis alternate strategy filter sensors summarizing volume activity ports centralized server simply aggregate volume summaries sensors simple strategy makes sense diverse sensors providing logs networks sizes aggregation model similar adopted dshield number nodes reaction time theta theta theta number nodes number false alarms theta theta theta figure reduction reaction time false alarms add nodes theta values number nodes reaction time hour theta theta theta number nodes number false alarms theta theta theta figure reduction reaction time false alarms add nodes theta values voting function vote basis final strategy sensors make local decision simply pass alert no-alert data central server global decision function parametrized simply votes participating nodes strategy represents minimal filtering sensor nodes measuring communication overhead evaluate overhead filtering strategies function number data units exchanged strategies assume voting trivial set weight data unit voting summaries grow linearly number nodes simply constant size bigger votes set finally data exchange scan basis grows volume traffic number nodes assume additional scan corresponds data unit trade-off data exchange voting strategies illustrated figure results sense thought representing information loss due filtering suggest compression methods interesting direction future work evaluating performance fusing summaries performance implications fusing summaries centralized server scenario fusion algorithm generates single global alert signal noise ratio exceeds pre-defined threshold estimate summationtextt simply obtained subtracting figure shows variance site hour simulation period intuition picking fundamental trade-off false alarms reaction time values greater resilient false alarms perspective provided figure shows aggregating data nodes reduces variance results reliable signal impact additional sensors reaction time false alarms shown figure confirms intuition previous graph values provide reduced reaction time false alarms values chosen moving average detector dependent underlying variance investigating statistics f-test normalizes variance evaluating performance fusing votes perform similar evaluation performance alert generation based fusing 
votes individual sensor generates alarm threshold global alert raised participants raise alarm results strategy shown figure conclusions paper explored problem combining data distributed network sensors goal improving timeliness accuracy identifying attacks contribution work defining problem space creating analytic framework understanding utility distributed detection demonstrating utility distributed detection simulation simple threshold-based data fusion methods analysis shows combining data distributed sensors reduces noise caused benign traffic enhancing signal caused attack traffic simulations demonstrate simple summary data fusion voting schemes effective increasing timeliness attack identification reducing false alarm rates results distributed detection methods great promise defending networks malicious attacks process extending work ways deeper exploration analytic methods fusing data clear simple threshold-based methods improved area investigation applying results empirical data collecting conjunction domino project area expand analysis include information temporal diversity allen christie fithen mchugh pickel stoner state practice intrusion detection technologies technical report cmu sei-tr- software engineering institute carnegie mellon january anderson khattak information retrieval techniques intrusion detection proceedings international workshop recent advances intrusion detection raid september balasubramaniyan garcia-fernandez isacoff spafford zamboni architecture intrusion detection autonomous agents proceedings annual computer security applications conference acsac december baras cardenas ramezani on-line detection distributed attacks space-time network flow patterns proceedings army science conference november barford kline plonka ron signal analysis network traffic anomalies proceedings acm internet measurement workshop marseilles france november barkat varshney decentralized cfar signal detection ieee transactions aerospace electronic systems march gong zou towsley code red worm propagation modeling analysis proceedings acm conference computer communications security ccs washington october aceres measurements wide-area internet traffic technical report ucb csd computer science department california berkeley chamberland verravalli decentralized detection sensor networks ieee transactions signal processing february symantec corporation deepsight http enterprisesecurity symantec cuppens miege alert correlation cooperative intrusion detection framework proceedings ieee symposium security privacy janakiraman waldvogel zhang indra peer-to-peer approach network intrusion detection prevention unpublished manuscript lee stolfo mok data mining framework building intrusion detection models proceedings ieee symposium security privacy leland taqqu willinger wilson self-similar nature ethernet traffic extended version ieee acm transactions networking pages lunt tamaru gilham jagannathan neumann javitz valdes garvey real-time intrusion detection expert system ides -final technical report technical report computer science laboratory sri international menlo park february moore paxson savage shannon staniford weaver inside slammer worm proceedings ieee security privacy symposium oakland july moore shannon claffy code red case study spread victims internet worm proceedings acm sigcomm internet measurement workshop november moore shannon voelker savage internet quarantine requirements self-propagating code proceedings ieee infocom april moore voelker savage inferring internet denial service activity proceedings usenix security symposium washington august northcutt network intrusion detection analyst handbook riders pang yegneswaran barford paxson peterson characteristics internet background radiation proceedings acm internet measurement conference october paxson measurements analysis end-to-end internet dynamics phd thesis california berkeley paxson bro system detecting network intruders real-time ieee computer networks roesch snortlightweight intrusion detection networks proceedings usenix lisa conference november snapp brentano dias goan heberlein levitt mukherjee smaha grance teal mansur dids distributed intrusion detection system motivation architecture early prototype proceedings national computer security conference washington staniford hoagland mcalerney practical automated detection stealthy portscans proceedings acm ccs ids workshop november staniford paxson weaver internet spare time proceedings usenix security symposium august teng chen c-y adaptive real-time anomaly detection inductively generated sequential patterns proceedings ieee symposium security privacy thottan anomaly detection networks ieee transactions signal processing august ullrich dshield http dshield valdes skinner probabilistic alert correlation proceedings international workshop recent advances intrusion detection raid september wang zhang shin detecting syn flooding attacks proceedings ieee infocom april warrender forrest pearlmutter detecting intrusions system calls alternative data models proceedings ieee symposium security privacy yegneswaran barford jha global intrusion detection domino overlay system proceedings network distributed system security symposium ndss february yegneswaran barford ullrich internet intrusions global characteristics prevalence proceedings acm sigmetrics san diego june 
occurred total kjk slots total number congestion episodes average duration congestion episode defined order estimate observe structure congestion episodes hand time slots time slots time slots negationslash define letn thenp similarly andp denoting parenleftbigge parenrightbigg basic algorithm assume estimator hatwided obtained substituting measured values means hatwided note estimator unbiased finite due appearance quotient consistent conditions stated hatwidef congestion alternating renewal process finite lifetimes dprime congested uncongested periods case converges surely grows dprime converges dprime hatwided converges surely improved algorithm improved algorithm based weaker assumptions basic algorithm longer assume view details provided estimation duration ratio modify basic experiments decide independently time slot conduct experiment probability basic experimentasbefore comprising probes dispatched slots redefine -digit number returned probes means congestion observed beforeyi records true states ith experiment attempts identify make additional assumptions additional assumptions assume probability misses true state records string depend length ofyi number string wheneveryi note ignore states address claim additional assumptions realistic defer discussion describe reporting mechanism congestion additional assumptions hand denote combined number states full time series combined number states form withu estimating employ obtain hatwided parenleftbiggr parenrightbigg validation running experiment assumptions require quantities validate assumptions checking means basic algorithm probability assumed design stopping criterion on-going experiments based ratio number measurements number measurements large discrepancy numbers bridged increasing indication assumptions invalid note validation check important assumptions basic design improved design expect similar occurrence rate expect similar occurrence rate check rates stop close invalidate experiment events coincide eventually occurrence considered violation assumptions large number events reason reject resulted estimations experimental investigation stopping criteria future work modifications straightforward modifications design address detail time improved algorithm triple-probe experiments estimation parameter include actual estimation duration decreasing total number probes required order achieve level confidence obvious modification unequal weighing basic extended experiments view expression obtain hatwided clear motivation miss estimatingv unlessthe average duration small basic experiments incur cost terms network probing load hand reports triple probes estimating increase proportion note formulation reported events estimating failure rate reporting state assumed unknown topic research quantify trade-offs probe load estimation accuracy involved extended experiments probes probe tool implementation evaluation evaluate capabilities loss probe measurement process built tool called badabing implements basic named spirit past 
tools measure loss including ping zing sting tool approximately lines community testing evaluation algorithm conducted series experiments badabing laboratory environment test traffic scenarios objective lab-based experiments validate modeling method evaluate capability badabing arangeoflossconditions areas probe process assume receive true indications loss probes accuracy reported measurements improve probes reliably loss mind set experiments designed understand ability individual probe consisting tightly-spaced packets accurately report encounter loss episode examine accuracy badabing reporting loss episode frequency duration range probe rates traffic scenarios final set experiments compare capabilities badabing simple poissonmodulated probing accurate reporting loss episodes probes important component probe process dealing instances individual probes probe consists series packets report loss accurately words ideally probe report braceleftbigg loss episode encountered loss episode encountered noted requirement probe necessarily individual packets probe satisfying requirement problematic noted packets successfully transmitted loss episodes hypothesized increase probability probes correctly reporting loss episode increasing number packets individual probe hypothesized assuming fifo queueing one-way delay information improve accuracy individual probe measurements investigated hypothesis series experiments infinite tcp source background traffic constant-bit rate traffic infinite tcp traffic loss event duration approximately milliseconds constantbit rate traffic loss episodes approximately milliseconds duration modified version badabing generate probes fixed intervals milliseconds number probes encounter loss episodes experimented probes consisting packets packets individual probe back back capabilities measurement hosts approximately microseconds packets probe packet sizes set bytes figure shows results tests constant-bit rate traffic longer probes clear impact ability detect loss half single-packet probes experience loss loss episode probes couple packets reliable indicators loss infinite tcp traffic improvement probes longer improvement small examination details queue behavior tests demonstrates packet probes greatly improve loss reporting ability packet size chosen exploit architectural feature cisco gsr probe packets impact internal buffer occupancy maximum-sized frames investigating impact packet size estimation accuracy subject future work bunch length packets empirical probability probe bunch experiences loss loss episode infinite tcp traffic constant bit rate traffic figure results tests ability probes consisting packets report loss episode encountered infinite source traffic shown figure longer probes begin impact queuing dynamics loss episodes observation hypothesis one-way packetdelays identifying loss events method considers individual packet loss probes one-way packet delay probes packet lost one-way delay recent successfully transmitted packet estimate maximum queue depth owdmax loss episode generally congestion episode delimited probes seconds indication lost packet missing probe sequence number one-way delay greater owdmax parameters mark probes form estimates loss episode frequency duration ing intermediate routers fifo number estimates owdmax taking determining probe owd threshold effectively filters loss end host operating system buffers network interface card buffers losses correlated end-to-end network congestion delays conducted series experiments constant-bit rate traffic assess sensitivity loss threshold parameters range values probe send probability explored cross product values selected effectively setting high-water level queue milliseconds selected values milliseconds figure shows results loss frequency range fixed milliseconds varying equivalent milliseconds figure fixes milliseconds letting varyover milliseconds wesee asexpected larger values threshold estimated frequency increases similar trends loss duration shown trade-off selecting higher probe rate permissive thresholds appears breakeven point expected time probes standard deviations appears depend probe rate traffic process level mulno probe traffic time seconds queue length seconds xxxx xxxx cross traffic packet cross traffic loss probe train packets time seconds queue length seconds xxx xxx xxx xxxx cross traffic packet cross traffic loss probe probe loss probe train packets time seconds queue length seconds xxx xxx xxxx cross traffic packet cross traffic loss probe probe loss figure queue length portion loss episode size loss probes top plot shows infinite source tcp traffic loss probes middle plot shows infinite source tcp traffic loss probes packets bottom plots shows loss probes packets plot annotated tcp packet loss events probe packet loss events tiplexing determines quickly queue fill drain issues discuss parameterizing badabing general internet settings measuring frequency duration formulation loss probe process section calls user parameters probability sending probe interval set experiments explore effectiveness badabing report loss episode frequency duration fixed values implying probe traffic consumed bottleneck link timediscretizationsetat milliseconds wefixedn fortheseexperiments yielding experiment duration seconds examine loss frequency duration estimates fixed hour-long experiment experiments background traffic scenarios scenario iperf generate random loss episodes constant duration section modified iperf create loss episodes durations milliseconds average seconds loss episodes final traffic scenario harpoon generate web-like workloads foralltrafficscenarios badabing wasconfiguredwithprobe sizes packets packet sizes fixed bytes packets probe back-to-back capabilities end hosts approximately microseconds packets probe rate set expected time probes standard deviation probe rate probe rates probe rates forlossepisodeduration confirm validity assumption made probability close probability equally measure practice beginning loss episode measure end estimates derived values table shows results constant bit rate traffic loss episodes uniform duration values loss frequency estimates close true values estimated loss episode duration actual table shows results constant bit rate traffic loss episodes randomly chosen milliseconds result similar constant bit rate setup loss episodes uniform duration values low-impact probing loss frequency estimates close true values estimated loss episode durations true table displays results setup harpoon web-like traffic create loss episodes harpoon designed generate average traffic volumes long time scales actual loss episode characteristics experiments vary loss frequency constant bit rate traffic scenarios estimates close case loss episode durations estimates fall range actual estimate falls range tables range values increasing trend loss frequency estimated badabing effect arises primarily problem selecting parameters similar nature trends figures important note trends peculiar well-behaved cbr traffic sources increasing trend loss frequency estimation exist significantly bursty harpoon web-like traffic table note trend exists loss episode duration estimates empirically complex relationships choice selection estimation accuracy considered range traffic conditions limited realistic setting explore relationships complex multi-hop scenarios wider range cross traffic conditions intend establish rigorous criteria badabing parameter selection ongoing work finally table shows results experiment designed understand trade-off increased increasedvalueofn wechose andshowresultsusingtwo values milliseconds background traffic experiments simple constant bit rate traffic uniform loss episode durations slight improvement frequency duration estimates probe rate loss frequency true loss frequency alpha millisec alpha millisec alpha millisec estimated loss frequency range values holding fixed milliseconds probe rate loss frequency true loss frequency tau millisec tau millisec tau millisec estimated loss 
frequency range values holding fixed equivalent milliseconds figure comparison sensitivity loss frequency estimation range values improvement coming larger empirically understanding convergence estimates loss characteristics grows larger subject future experiments table badabing loss estimates constant bit rate traffic loss episodes uniform duration loss frequency loss duration seconds true badabing true badabing table badabing loss estimates constant bit rate traffic loss episodes milliseconds loss frequency loss duration seconds true badabing true badabing comparing loss measurement tools final set experiments compares badabing zing constant-bit rate harpoon web-like traffic scenarios set probe rate zing match link utilization badabing packet size bytes capacity bottleneck experiment run minutes table summarizes results experiments similar results included table badabing results row tables cbr traffic loss frequency measured zing close true loss episode durations web-like traffic loss frequency table badabing loss estimates harpoon web-like traffic harpoon configured loss frequency loss duration seconds true badabing true badabing table comparison loss estimates values values threshold parameter loss frequency loss duration seconds true badabing true badabing loss episode durations measured zing good matches true values comparing zing results badabing traffic conditions probe rate badabing reports loss frequency duration estimates significantly closer true values badabing practice number important practical issues considered badabing wide area tool requires user select values assume sake current discussion number loss events stationary time note duration loss events vary arbitrary change time mind current formulation estimate average duration distribution durations table comparison results badabing zing constant-bit rate cbr harpoon web-like traffic probe rates matched badabing probe packet sizes bytes badabing results copied row tables traffic tool loss frequency loss duration scenario true measured true sec measured sec cbr badabing zing harpoon badabing web-like zing number loss events occur unit period time average loss events occur minute discretization unit milliseconds estimate true stationarity assumption expect accuracy estimators depend product pnl individual values specifically reliable approximation standard deviation estimation duration stddev duration pnl individual choice trade timeliness results impact user link prior empirical studies provide initial estimates alternate design measurements continuously report validation techniques confirm estimation robust situations set low level case measurement stream expected impact traffic run time reliable estimate obtained estimation duration critically based correct estimation ratio estimate ratio counting occurrence rate occurrence rate number estimated average rates validation measuring difference rates differenceisdirectlyproportionaltotheexpectedstandarddevi- ation estimation similar remarks apply validation tests mention estimation algorithms recent study packet loss passive measurement reported loss episodes backbone links short-lived order microseconds condition tool successfully detect estimate short durations discretization time finer slight order duration attempt estimate requirement imply commodity workstations accurate active measurement end-to-end loss characteristics circumstances corollary active measurements loss high bandwidth networks require high-performance specialized systems support small time discretizations classification probe traversed congested path concerns probe lost note estimators average individual estimations duration loss episode perform low values long delayed parameter appears dictated primarily clear set arbitrary path characteristics level statistical multiplexing physical path configuration unknown examination sensitivity complex environments subject future work accurately calculate end-to-end delay inferring congestion requires time synchronization end hosts trivially eliminate offset clock skew concern on-line synchronization techniques reported line methods effectively address issue summary conclusions future work purpose study understand measure end-to-end packet loss characteristics accurately probes enables impact bottleneck queue began evaluating capabilities simple poissonmodulated probing controlled laboratory environment consistingofcommodityendhostsandiprouters weconsiderthistestbed ideal loss measurement tool evaluation enables repeatability establishment ground truth range traffic conditions subject tool initial tests simple poisson probing ineffective measuring loss episode frequency measuring loss episode duration subjected tcp reactive cross traffic experimental results led development probe process accurate estimation loss characteristics simple poisson probing experimental design constructed performance accompanying estimators relies total number probes sending rate simple techniques users validate measurement output introduced implemented method tool badabing tested laboratory tests demonstrate badabing cases accurately estimates loss frequencies durations range cross traffic conditions packet rate ourresultsshowthat badabing poisson probing measuring loss episode characteristics badabing enables superior accuracy understanding link impact versus timeliness measurement room improvement considered adding adaptivity probe process model limited sense alternative parametric methods inferring loss characteristics probe process task estimate variability estimates congestion frequency duration directly measured data minimal set statistical assumptions congestion process acknowledgments david donoho valuable discussions anonymous reviewers helpful comments work supported part nsf grant numbers cnsani- ccrand cisco systems opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf cisco systems wisconsin advanced internet laboratory http wail wisc adams mahdavi mathis paxson creating scalable architecture internet measurement ieee network almes kalidindi zekauskas packet loss metric ippm ietf rfc september alouf nain towsley inferring network characteristics moment-based estimators proceedings ieee infocom tel aviv israel april appenzeller keslassy mckeown sizing router buffers proceedings acm sigcomm portland barford sommers comparing probeand router-based packet loss measurements ieee internet computing september october benko veres passive method estimating end-to-end tcp packet loss proceedings ieee globecom taipei taiwan november bolot end-to-end packet delay loss behavior internet proceedings acm sigcomm san francisco september brumelle relationship customer time averages queues journal applied probability cardwell savage anderson modeling tcp latency proceedings ieee infocom tel-aviv israel march coates nowak network loss inference unicast end-to-end measurement proceedings itc conference traffic measurement modeling september duffield presti paxson towsley inferring link loss striped unicast probes proceedings ieee infocom anchorage alaska april floyd paxson difficulties simulating internet ieee acm transactions networking fraleigh diot lyles moon owezarski papagiannaki tobagi design deployment passive monitoring infrastructure proceedings passive active measurement workshop amsterdam holland april hoe improving start-up behavior congestion control scheme tcp proceedings acm sigcomm palo alto august merit internet performance measurement analysis project http nic merit ipma internet protocol performance metrics http advanced ippm index html aikat jeffay smith effects active queue management web performance proceedings acm sigcomm karlsruhe germany august leland taqqu willinger wilson self-similar nature ethernet traffic extended version ieee acm transactions networking pages mahdavi paxson adams mathis creating scalable architecture internet measurement proceedings inet geneva switzerland july mathis mahdavi floyd romanow tcp selective acknowledgement options ietf rfc mathis semke mahdavi ott macroscopic behavior tcp congestion avoidance algorithm computer communications review july nlanr passive measurement analysis pma http pma nlanr net padhye firoiu towsley kurose modeling tcp 
throughput simple model empirical validation proceedings acm sigcomm vancouver canada september papagiannaki cruz diot network performance monitoring small time scales proceedings acm sigcomm internet measurement conference miami october pasztor veitch based precision timing gps proceedings acm sigmetrics marina del ray june paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france september paxson strategies sound internet measurement proceedings acm sigcomm internet measurement conference taormina italy november salamatian baynat bugnazet cross traffic estimation loss process analysis proceedings itc specialist seminar internet traffic engineering traffic management wurzburg germany july savage sting tool measuring packet loss proceedings ieee infocom tel aviv israel april sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference deter testbed http isi deter tirumala qin dugan ferguson gibbs iperf tcp udp bandwidth measurement tool http dast nlanr net projects iperf villamizar song high performance tcp asnet computer communications review december white lepreau stoller ricci guruprasad newbold hibler barb joglekar integrated experimental environment distributed systems networks proceedings symposium operating systems design implementation osdi boston december wolff poisson arrivals time averages operations research march-april yajnik moon kurose towsley measurement modeling temporal dependence packet loss proceedings ieee infocom york march zhang liu xia clock synchronization algorithms network measurements proceedings ieee infocom york june zhang duffield paxson shenker constancy internet path properties proceedings acm sigcomm internet measurement workshop san francisco november 
architecture generating semantics-aware signatures vinod yegneswaran jonathon giffin paul barford somesh jha computer sciences department wisconsin madison vinod giffin jha wisc abstract identifying intrusions developing effective signatures detect essential protecting computer networks present nemean system automatic generation intrusion signatures honeynet packet traces architecture distinguished emphasis modular design framework encourages independent development modification system components protocol semantics awareness construction signatures greatly reduce false alarms building blocks architecture include transport service normalization intrusion profile clustering automata learning generates connection session aware signatures demonstrate potential nemean semantics-aware resilient signatures prototype implementation datasets evaluate system production dataset false-alarm evaluation honeynet dataset measuring detection rates signatures generated nemean netbios exploits false-positive rate false-negative rate introduction computer network security multidimensional activity continues grow importance prevalence attacks internet ability selfpropagating worms infect millions internet hosts documented developing techniques tools enable precise rapid detection attacks presents significant challenges research operational communities network-security architectures include network intrusion detection systems nids monitor packet traffic networks raise alarms malicious activity observed nids employ misusedetection compare traffic hand-built database signatures patterns identify previously documented attack profiles effectiveness misuse-detector tightly linked quality signature database competing requirements make generating maintaining nids signatures difficult hand signatures specific identify characteristics specific attack profiles lack specificity leads false alarms major problems nids today sommer paxson argue including context victim response nids signatures reduces false alarm rates hand signatures general match variants specific attack profiles signature account transport application-level semantics lead false alarms balance specificity generality important objective signatures present design implementation architecture called nemean automatic generation signatures misuse-detection nemean aims create signatures result lower false-alarm rates balancing specificity generality achieve balance including semantics awareness ability understand session-layer application-layer protocol semantics examples session layer protocols include netbios rpc application layer protocols include smb telnet ntp http increasingly preprocessors protocols integral parts nids argue capabilities essential automatic signature generation systems reasons semantics awareness enables signatures generated attacks exploit small part entire payload semantics awareness enables signatures generated multi-step attacks exploit occur step semantics awareness weights assigned portions payload timestamps sequence numbers proxy-cache headers based significance semantics awareness helps produce generalized signatures small number input samples semantics awareness results signatures easy understand validate architecture components data abstraction component normalizes packets individual sessions renders semantic context signature generation component groups similar sessions machine-learning techniques generate signatures cluster signatures produced suitable deployment nids address specificity producing connection-level session-level signatures address generality learning signatures transport-normalized data consideration application-level semantics enables variants attacks detected argue nemean generates balanced signatures present nemean goal provide automated mechanism build accurate signatures pace exploits network viruses released everyday meant automate real-time deployment signatures discuss issue greater detail section input nemean set packet traces collected honeynet deployed unused address space data observed honeynet anomalous mitigating problem privacy problem separating malicious normal traffic assume honeynet subject attack traffic standard hosts discuss ramifications assumption section evaluate nemean architecture developed prototype implementation component implementation enables automated generation signatures honeynet packet traces developed simple alert generation tool off-line analysis compares packet traces signatures demonstrate current implementation extremely effective modular design architecture enables individual components easily replaced expect developments tune expand individual components resulting timely precise effective signatures broader perspective results demonstrate importance nemean capability comprehensive security architecture section describes architecture sections present prototype implementation nemean performed evaluations prototype calculated detection misdiagnosis counts packet traces collected unused address ranges total addresses distinct class networks allocated campus collected sessionlevel data exploits targeting ports http netbios smb section describes data collection environment packet trace data input nemean produce comprehensive signature set target ports section describe major clusters signatures produced data set leave-out testing results system generates accurate signatures common intrusions including code red nimda popular exploits detected http exploits netbios exploits misdiagnoses validated signatures testing false alarms packet traces http traffic collected department border router nemean produced false alarms data set comparison snort generated false alarms data set results suggest smaller signature set nemean achieves detectability rates par snort identifying attacks superior precision fewer false alarms related work sommer paxson proposed adding connectionlevel context signatures reduce false positives misuse-detection handley transportlevel evasion techniques designed elude nids normalization methods disambiguate data comparison signature similar work common http evasion techniques standard url morphing attacks vigna mutations demonstrated widely deployed misuse-detectors susceptible mutations works handley vigna highlight importance incorporating semantics signature generation process honeypots excellent source data intrusion attack analysis levin honeypots extract details worm exploits analyzed generate detection signatures signatures generated manually automated signature generation systems proposed table summarizes differences nemean signature-generation systems systems proposed honeycomb developed kreibich crowcroft nemean honeycomb generated signatures traffic observed honeypot implementation honeyd plugin heart honeycomb longest common substring lcs algorithm longest shared byte sequences pairs contraffic source generates contextual semantics signature generation target signatures aware algorithm attack class nemean honeypots generates connectionand msg clustering general sessionlevel signatures automata learning autograph dmz generates copp partitioning worm byte-level signatures content blocks earlybird dmz generates measuring worm byte-level signatures packet-content prevalence honeycomb honeypots generates pairwise lcs general byte-level signatures connections figure comparison nemean signature-generation systems nections honeycomb protocol semantics pairwise lcs algorithm outputs large number signatures frequently distracted long irrelevant byte sequences packet payloads reducing capability identifying attacks small exploit strings exemplified protocols netbios discuss greater detail section kim karp autograph system automated generation signatures detect worms unlike honeycomb nemean autograph input packet traces dmz includes benign traffic content blocks match suspicious flows input copp algorithm based rabin fingerprints searches repeated byte sequences partitioning payload content blocks honeycomb autograph protocol semantics argue approaches attractive principle viable limited spectrum observed attacks prone false positives makes autograph susceptible mutation attacks finally unlike byte-level signatures produced autograph nemean produce connection-level session-level signatures system developed generate signatures worms earlybird measured packet-content prevalence single monitoring point network dmz counting number distinct sources destinations strings repeat payload earlybird distinguished benign repetitions epidemic content autograph earlybird produced byte-level signatures aware protocol semantics earlybird disadvantages compared nemean autograph pouget dacier analyzed honeypot traffic identify root frequent processes observed honeypot environment organized observed traffic based port sequence data clustered association-rules mining resulting clusters refined phrase distance pouget dacier technique semantics aware julisch clustered alarms 
purpose discovering root-cause alarm clustering alarms julisch technique generated generalized alarm cluster intuitively generation generalized alarms similar automata-learning step algorithm goals techniques work julisch christodorescu presented semanticsaware methodology detect malicious traits binaries approach semantics aware algorithm incorporates semantics instructions executed contrast nemean incorporates semantics protocols parsing application level packet content malware-detection algorithm presented signature-generation algorithm nemean semantics levels anomaly detection alternative approach malicious traffic identification nids anomaly detectors construct model acceptable behavior flag deviations model suspicious anomalydetection techniques detecting port scans explored balancing specificity generality proven extraordinarily difficult anomaly-detection systems systems high false-alarm rate paper focuses misuse-detection discuss anomaly-detecting techniques nemean architecture shown figure nemean architecture divided components data abstraction component signature generation component input nemean packet trace collected honeynet deployed small address space addresses honeynet provide large volume data significant privacy false positives concerns data abstraction component data abstraction component dac aggregates transforms packet trace well-defined data structure suitable clustering generic clustering module specific knowledge transport protocol application-level semantics call aggregation units semi-structured session trees ssts connection clusters session clusters automata learning service specification servicenormalization normalization transport session trees flow aggregation generalization rules packet trace sessions semi structured connection clusteringpackets signatures connection session session clustering data abstraction component signature generation component figure components data flow description nemean architecture components dac thought terms data flow module shown figure built dac module principle implemented extension standard nids bro policy script transport normalization disambiguates obfuscations network transport layers protocol stack dac reads packet traces libpcap library run online offline tcpdump traces step considers transport-specific obfuscations fragmentation reassembly duplicate suppression checksums describe greater detail section aggregation step groups packet data hosts sessions normalized packet data composed stored flows periodically dac expires flows converts connections flow expired reasons connection initiated pair hosts ports flow inactive time period greater user defined timeout hour experimental setup flows composed packets connections composed request-response elements connection stored part session session sequence connections host pairs service-specific information sessions normalized clustering reasons classification sessions robust clustering algorithms independent type service space ambiguities large produce signature encoding attacks decoding service-specific information canonical form normalization enables generation compact signature set detection system decode attack payloads signature matching strategy consistent employed popular nids describe normalizations performed greater detail section dac finally transforms normalized sessions xml-encoded ssts suitable input clustering module step assigns weights elements sst highlight important attributes url http request deemphasize important attributes encrypted fields proxy-cache headers http packets nemean current weight assignment simply based expert knowledge protocols prevalent attacks noted weights tuned reflect specific attack meant sufficiently general reflect high level behavior drawn large class attacks expect periodically adjusted accommodate significant exploit patterns signature-generation component clustering module groups sessions connections similar attack profiles similarity metric assume sessions grouped correspond single attack type variants well-known attack disparate clusters represent distinct attacks attack variants differ significantly original attack effective clustering requires properties attack data data correspond attack variants measurably similar clustering algorithm classify data belonging attack data attacks measurably dissimilar clustering algorithm separate data required properties hold data sets include significant quantities nonmalicious normal traffic properties normal traffic vary greatly make effective clustering difficult additional discrimination metrics conversely malicious data identifiable structure presence obfuscation limited polymorphism nemean honeynet data enables reasonable number meaningful clusters produced cluster ideally set sessions connections attack presume data minor obfuscations sequential structure data correspond attacker attempts evade detection variations provide basis signature generation component automata learning module constructs attack signature cluster sessions generator implemented target intrusion detection system produces signatures suitable system component ability generate highly expressive signatures advanced systems regular expression signatures session-level context suitable bro clusters nonuniform sessions interest differences obfuscation transformations modify attack change made existing attack produce variant signature generation component generalizes transformations produce signature resilient evasion attempts generalizations enable signatures match malicious sequences observed training set current limitations worms viruses variants existing malware internet everyday standard collections signatures pace goal nemean address gap automating signature generation nemean address automating real-time deployment signatures emphasis accurate efficient signatures timeliness current nemean design includes simple manual selection process selecting generated session connection-level signatures cluster multistep attacks welchia benign connection request precedes attack sequence case operator simply chooses connection signatures steps welchia session signature whitelists signature benign step provide results connection session-level signatures attack evaluation remove benign connection welchia issue attacks sanity check ensure signature corresponds attack cluster misconfiguration intentional data pollution issue evaluation dataset operational deployment interesting aspects semantics-aware approach results signatures semantic context easily parsed misconfiguration separated picking clusters large number sources large number destinations fully-automating nemean making immune data pollution remains area future work reason requirement unlike systems earlybird autograph target attacks seek address broader flash worms includes everyday targeted attacks viruses spreading network shares botnet sweeps occur noise thresholds similar misconfiguration expect intentional data pollution large botnets issue aforementioned systems dac implementation implemented prototypes nemean component nemean design flexibility handle protocol focus discussion specific protocol implementations http port netbios smb ports services exhibit great diversity number types exploits transport-level normalization transport-level normalization resolves ambiguities introduced network transport tcp layers protocol stack check message integrity reorder packets needed discard invalid duplicate packets importance transport layer normalizers addressed literature building normalizer perfectly resolves ambiguities complicated endeavor ambiguities operating system dependent constrain set normalization functions reasons traffic honeynets perfect knowledge host environment environment remains constant worry ambiguities introduced due dhcp network address translation nat nemean current implementation analyzes network traces off-line relaxes state holding requirements makes vulnerable resource-consumption attacks attacks attempt evade nids introducing ambiguities packets examples attacks include simple insertion attacks dropped real systems evaluated nids evasion attacks reverse nemean obtains traffic promiscuously packet sniffer real nids ambiguities resolved focus common techniques attackers elude detection invalid field protocol header nids handle packet differently destination machine handling invalid protocol fields packets involves steps recognizing presence invalid fields understanding operating system handle implementation performs validations build multiset normalized connections cluster exclusive partitions produce connection-level signature cluster generalizing cluster data build multiset sessions session sequence identifiers denoting connection clusters connection session cluster partitions produce session-level signature cluster generalizing observed connection orderings produce nids signature signature hierarchical automaton transition 
session-level signature requires connection-level signature identified connection cluster accepts figure multi-level signature generalization msg algorithm section complete details drop packets invalid checksum length field attacker fragmentation present data nids destination fragmentation introduces problems correctly reordering shuffled packets resolving overlapping segments operating systems address problems ways adopt alwaysfavor-old-data method microsoft windows live deployment periodically perform activemapping match rules passive operating system fingerprinting logic applies fragmented overlapping tcp segments incorrect understanding tcp control block tcb tear-down timer nids improperly maintain state closes connection early lose state likewise retaining connections long prevent detection legitimate connections implementation maintains connection state hour session closed sessions closed reset replaced earlier connection setup observed host port pairs service-level normalization provide discussion implementation service normalizers popular protocols http netbios smb ambiguities http sessions primarily introduced due invalid protocol parsing invalid decoding protocol fields improper url decoding point vulnerability intrusion detection systems modern web servers substitution encoded characters ascii characters url exploited means evasion common nids signatures dac correctly decodes observed encodings hex encoding variants utfencoding bare-byte encoding microsoft unicode encoding encoding dac presents canonical url ascii format clustering module implementation handle obvious http obfuscations process pipelined http requests requests broken multiple connections analysis plan incorporate functionality system future netbios session-layer service enables machines exchange messages names addresses port numbers smb server message block transport-independent protocol file directory services microsoft windows machines netbios exchange smb file requests netbios smb signature evasion techniques studied possibly due lack good nids rules detection full treatment netbios smb ambiguities exceeds scope paper multi-level signature generalization designed multi-level signature generalization msg algorithm automatically produce signatures normalized session data signatures balance specificity exploits observed data generality ability detect attack variants previously observed machine-learning algorithms including clustering finite state machine generalization produce signatures well-balanced due hierarchical nature session data construct signatures connections sessions separately cluster connections irrespective sessions generalize cluster produce signature connection cluster cluster sessions based constituent connections generalize clusters finally combine session connection signatures produce hierarchical automaton signature connection session signature match connection signature figure presents high-level overview algorithm steps generating connection clusters multiset normalized sessions produced data abstraction component denote session ordered list connections cns conn multiset connections unionmultitexts sconn multiset connections normalized data denotes multiset union exclusive clustering clusters clustering inserts element partition sounionmultitextmi exclusive clustering requires partitions overlap forinegationslash immediately exists welldefined function defined returns cluster section presents implementation clustering algorithm step building connection-level signatures learning algorithms generalize data cluster produce signatures match previously unseen connections alphabet network events comprising connection data learning algorithm function learn takes set strings hatwider uniontextc returns regular language hatwider section presents generalization algorithms work recognize regular automaton connection-level signature cluster steps generating session clusters rewrite existing sessions produce set unionmultidisplay cns bracketleftbigs cns bracketrightbig implementation perspective rewritten session simply integer index indicating connection cluster original connection intuitively connection comprising part session replaced connection identified clustering similar clustering steps building session-level signatures connection-level generalization construct regular language cluster accepts sessions variants sessions recognize language finite automaton connection cluster identifiers label transitions session-level automata resulting signature hierarchical traversing transition session signature requires connection data matching signature connection cluster star clustering implementation cluster connections sessions algorithm implemented on-line star clustering algorithm clusters documents based similarity metric algorithm advantages commonly-known techniques k-means family algorithms star clustering robust data ordering conversely k-means produces clusters depending order data read priori start search end search aaaaaaaaaaaaa search aaaaaaaaaaaaa search search aaaaaaaaaaaaa search aaaaaaaaaaaaa figure welchia session level signature brevity label single transition request reply clusters expected suitable make claims star optimal clustering algorithm purposes expect algorithms future work star clustering builds star cover partiallyconnected graph nodes graph represent items semantically equivalent data arbitrarily choose item node representative item link exists nodes similarity representative items designated threshold star cluster collection nodes graph node connects cluster center node edge star cover collection star clusters covering graph cluster centers connecting edge original algorithm non-center node edges multiple center nodes multiple clusters implemented modified algorithm inserts node cluster strongest similarity produce exclusive clustering item similarity determines edges graph implemented similarity metrics test sensitivity cosine similarity hierarchical edit distance cosine similarity metric lower computational complexity hierarchical edit distance experiments section cosine similarity computes angle vectors representing items comparison connection build vector giving distribution bytes request types response codes appeared network data sessions vector distribution connection cluster identifiers angle vectors representing items cos dbbardbld abardblbardbldbbardbl represents product bardblvbardbl vector start winnt system cmd exe dir end start post scripts nsiislog dll end start session request session response negotiate request negotiate response session setup andx request tree connect andx request admin ipc session setup andx reply tree connect andx reply session setup andx reply tree connect andx reply tree connect andx request create andx request end system psexesvc exe figure nimda windows media player exploit deloder connection level signatures transitions nimda signature match norm vector values non-negative cos similarity items cos cos indicating equality hierarchical-edit distance variation traditional edit-distance metric measures cost transforming string insert delete replace operations contrast traditional editdistance metric hierarchical-edit distance metric preserves connection ordering information session differentiates data fields connection believed properties hierarchical-edit distance metric make similarity metric clustering cosine metric experiments revealed distance metrics work cosine sensitive threshold parameters partitioning clusters cosine distance paper experiments describe hierarchical edit distance metric expanded technical report similarity metric construct partiallyconnected similarity graph edge connects pair nodes similarity representative sessions threshold build star cover similarity graph star cluster group similar sessions variants exploit cluster set passed generalization module produce automaton signature cluster generalization signature generation signature generation devises nids signature cluster similar connections sessions generalize variations observed cluster data assuming effective clustering variations correspond obfuscation attempts differences variants attack generalizing differences produce resilient signature accepts data necessarily observed training period signature finite state automaton construct probabilistic finite state automaton pfsa accepting event sequences contained cluster edge weights number times edge traversed accepting cluster data pfsa learning algorithms stochastic measures generalize data variations observed cluster work generalized http connection-level signatures sk-strings method algorithm merges states probabilistically indistinguishable session-level clusters generalized beam search algorithm sk-strings simulated beam annealing generalize netbios 
signatures generalizations add transitions state machine accommodate variations data reordering alteration characters attack string likewise repeated strings generalized number repeats generalize signatures points high data variability subsequence creation converts signature matches sequence session data signature matches subsequence data inserting gaps accept sequence arbitrary symbols insert gaps observing patterns common prefix common suffix dissimilar data element signature accepts avb awb axb ayb replace sequences regular expression intuitively identified portion signature exhibiting large variation vary arbitrarily final signature nemean generalized signatures detect variations observed attacks figure shows session-level signature welchia worm exploits buffer overflow nemean generalization produced signature matches wide class welchia scans losing essential buffer overflow information characteristic worm figure shows connection-level signatures nimda windows media player exploit deloder netbios worm connection-level nimda signature signature exploit high diversity note subsequence creation generalization signature match wide class nimda attacks windows media player exploit representative http exploit size exploit url small previous signature generation techniques honeycomb fail small urls deloder signature demonstrates capability nemean generate signatures exploits complex protocols netbios smb data collection data evaluation sources honeypot packet traces collected unused address space build signatures evaluate detection capability nemean packet traces collected departmental border router test resilience signatures false positives production traffic obtaining packet traces live network traffic challenge due privacy concerns network operators amenable sharing flow level summaries anonymizing payloads remains unsolvable problem hard obtain packet traces application payloads obtain access data department border router network sparsely allocated managed network approximately web servers clients passively monitor outgoing incoming http packets network hour period table summary dataset honeypot traffic traffic unused address blocks totaling addresses address ranges allocated routed honeynet monitoring environment normalize traffic received infrastructure simple sourcefiltering rule employed destination address source connections additional destination addresses dropped filter filtered packets subsequently routed systems based type-of-service http requests forwarded fully patched windows server running vmware netbios smb traffic routed virtual honeypot system similar honeyd routed netbios smb packets active responder masquerading end host offering netbios services windows server reasons fully patched windows server rejected disconnected session information classify attack vector accurately due invalid netbios names user password combinations active responder accepted netbios names user password combinations windows servers limit number simultaneous network share accesses inhibit connection requests succeeding collected sets traces short term training set days longer testing set days evaluate nemean detection capability summarized table reduction volume port traffic moving -day -day dataset uncommon honeynets due bursty nature traffic botnet activity evaluation tested effectiveness nemean http netbios signatures examined session clusters produce signatures section reveals major classes attacks recorded data quantitatively measures clusters produced clustering module performed evaluation detection false positive rates nemean signatures compare results snort http capabilities finally provide qualitative discussion experience honeycomb evaluating clusters http clusters figure overview major http clusters learning data set webdav scans account majority attacks data set webdav collection http extensions users collaboratively edit mandata flow clients servers sessions connections internal clients external servers external clients internal servers table production data summary http hours learning data days test data days port packets sources connections sessions packets sources connections sessions table honeypot data summary age documents remote web servers popular webdav methods exploits include options search propfind supported microsoft iis web servers scans exploits webdav vulnerabilities gaining popularity worms welchia nimda attacks provide great diversity number attack variants http url obfuscation techniques attacks exploit directory traversal vulnerabilities iis servers access cmd exe root exe figure connection-level signature nimda generated nemean details observed exploits frontpage web crawlers open-proxy provided netbios clusters worms typically viruses dominate netbios clusters viruses scan open network shares behavior dominated observed traffic broadly classified types hidden open share exploits includes viruses including lovgate navsvc deloder brute force password attacks open folders deposit virus binaries startup folders ms-rpc query exploits microsoft windows ability remotely access msrpc services named pipes epmapper rpc endpoint mapper srvsvc windows server service samr windows security account manager viruses connect msrpc services guest users proceed query system additional information lead privileged user access connecting samr service attacker obtain enumeration domain users ms-rpc service buffer overflow exploits well-known exploits epmapper service access rpc-dcom exploit blaster recent lsarpc exploit sasser provide details technical report cluster quality quantitatively evaluated quality clusters produced star clustering algorithm common metrics precision recall precision proportion positive matches elements cluster recall fraction positive matches cluster positive matches data set intuitively precision measures relevance cluster recall penalizes redundant clusters manually tagged session conjectures shown figure conjectures identified sessions attack types session marked multiple conjectures important note conjectures clustering served simply evaluation aids estimate quality clusters conjectures compute weighted precision weighted recall clustering sessions tagged multiple conjectures weight measurements based total number conjectures cluster sessions compute values set clusters set conjectures set elements clusterclabeled conjecture count number elements cluster conjecture cluster unique client ips sessions identified options cluster unique client ips sessions identified nimda identified code blue cluster unique client ips sessions identified welchia identified search cluster unique client ips sessions identified search identified web crawler cluster unique client ips sessions identified nimda cluster unique client ips sessions identified propfind identified options cluster unique client ips sessions identified nimda cluster unique client ips sessions identified windows media exploit cluster unique client ips sessions identified search cluster unique client ips sessions identified code red retina identified search cluster unique client ips sessions identified propfind identified options cluster unique client ips sessions identified propfind identified options cluster unique client ips sessions identified propfind identified options cluster unique client ips sessions identified frontpage exploit cluster unique client ips sessions identified kazaa cluster unique client ips sessions identified web crawler cluster unique client ips session identified real media player cluster unique client ips session identified propfind identified options cluster unique client ips session identified open proxy figure http port cluster report formulas summationtextk andsummationtext sessions multiple conjectures figure presents graphs indicating precision recall vary clustering similarity threshold recall star clustering algorithm edge added sessions graph sessions similarity threshold true netbios data similarity threshold significant impact quality resulting clustering clustering precision drops threshold nears star graph fully connected algorithm select suitable cluster centers recall cluster 
centers share edge clusters merge low threshold values clustering threshold experiments precision scores perfect perfect signature effectiveness intrusion detection signatures satisfy basic properties high detection rate miss real attacks generate false alarms results show nemean detection rate false alarms additional metrics evaluate quality alarms raised ids precision empirically evaluates alarms specificity attack producing alarm noise level counts number alarms incident penalizes redundant alarms tests snort baseline comparison simply widely adopted intrusion detection system latest version snort time snortwith http pre-processor enabled complete ruleset sense snort strawman well-known susceptibility false-positives inability compare honeycomb section source code publicly earlybird autograph detection rate evaluated detection rate nemean signatures leave-out testing common technique machine learning honeynet data set table automatically create connection-level session-level signatures clusters identified training data set measured detection rate signatures running signature matching data trace collected network table connection-level http signatures detected attacks present restrictive session-level signatures detected evaluate session-level signatures nimda extreme variability nimda attacks made signatures inappropriate table shows number occurrences http attacks number detected nemean signatures comparison provide detection counts snort running up-to-date signature set snort detected attacks detection rate netbios attacks similarly high detected attacks present table detection rates netbios smb signatures snort limited detection capability netbios attacks comparison infeasible signatures connection-level defining characteristic attack string contained single connection structure connections session irrelevant attacks misdiagnoses false alarms qualify incorrect alerts honeynet data misdiagnoses shown table nemean http signatures generated misdiagnoses honeynet trace misdiagnosis counts netbios smb honeynet data shown table measured false alarm counts nemean http signatures packet-level traces collected department border router hour time period traces contained inbound outbound http traffic evaluated nemean snort dataset similarity threshold port precision recall similarity threshold port precision recall similarity threshold port precision recall figure effect clustering similarity threshold weighted precision weighted recall note y-axis begins nemean signature present conn sess snort options nimda propfind welchia win media player code red retina kazaa table session-level http signature detection counts nemean signatures snort signatures show exploits occurring training test data signature present detected misdiagnoses srvsvc samr epmapper nvcpldmn deloder lovegate table detection misdiagnosis counts connection-level nemean netbios signatures data includes port port traffic nemean results highly encouraging false alarms snort generated alarms dataset false alarms snort false alarms produced collection overly general signatures fairness note snort larger signature set made prone false positives snort signature set included signatures nemean database http netbios signatures contained connection-level session-level signatures snort high signature count meant detect classes attacks besignature alerts non-rfc http delimiter bare byte unicode encoding apache whitespace tab web-misc doc access non-rfc defined character double-decoding attack iis unicode codepoint encoding table snort false alarm summary http sessions collected department border router alert category signatures alerts web-misc web-cgi web-iis web-attacks web-php web-frontpage crawlers table summary remaining snort alerts yond honeynets table summary snort alarms generated hour trace overwhelmingly benign http traffic collected department border router reducing snort alarm rate require reengineering signatures additionally overly general signature specific information type exploit occurring assume real network deployment snort noisy signatures table disabled reasonable estimate expected false alarm rates obtained remaining alerts shown table remaining alerts signatures responsible alerts excluding inspect individually true positives due privacy concerns dataset sampling revealed false alarms traffic classified legitimate alerts fired benign traffic traffic web crawlers filters netbios traffic campus border unable obtain netbios data experiment highly specific alarms decision ultimately subjective signatures generate alerts empirically alerts produced packet-level systems snort typical snort alerts bare byte unicode encoding non-rfc http delimiter highly revealing report underlying symptom triggered alert high-level reason symptom present problem netbios alerts popular worms viruses generate virtually set alerts call weak alerts describe detail technical report nemean connection-level session-level signatures larger perspective host intentions result generate alerts specific worms exploits low noise due session-level signatures nemean control level noise alarms packet-level detection systems snort raise alerts multiple packets comprising attack security administrator flurry alerts incident nimda attack encoded url generate url decoding alarms snort alerts web-iis cmd exe access sophisticated url decoding attacks misdiagnosed nimda alerts filtered administrators normalizer converts url canonical form accurately detect nimda attacks nemean aggregates information connections sessions generates alerts aggregated data number alerts incident reduced summation results demonstrate strength nemean achieves detection rates similar snort dramatically fewer false alarms alerts produced nemean exhibit high quality attack detected keeping detection noise small signature generation efficiency current implementation operates offline collected data sets intend nemean online signature generation online systems efficient signatures rapidly constructed attacks begin system operate network speeds low computational demands figure shows nemean overheads -day training data set http packets netbios packets total data processing time divided stages data abstraction clustering automaton generalization additional preprocessing step translated ssts produced dal input format clustering module http connectionlevel automaton generalization step sk-strings algorithm session-level generalization beam search cost arising cluster nimda sessions packets cost session-level generalization seconds netbios signature generalization simulated beam annealing connection-level construction session-level signatures nemean efficient generate signatures days worth netbios data totaling million packets seconds expensive operation session-level generalization http data required minutes computation design system helps costs low processing data collected honeynet volume data significantly reduced deploying nemean online signature generator require limited system resources easily operate speeds incoming data honeycomb comparison honeycomb efforts address problem automatic signature generation honeypot traces performed comparison nemean honeycomb identical traces means understand benefits semantics awareness automated signature generators evaluation complicated issues transformed honeycomb honeyd plug-in implementation standalone application feeding input traffic pcap loop honeycomb developed proof-ofconcept tool turned incapable processing large traces experience honeycomb processing time grows quadratically connection performs pairwise comparison connections running small trace packets hours high performance workstation result evaluation qualitative comparison honeycomb signatures performance small trace http connections honeycomb produced signatures input trace perfectly functional signatures surprisingly large number benign strings identified lcs algorithm small strings number packets thousands seconds data abstraction preprocessing clustering generalizationconnection http sessiongeneralization number packets millions seconds netbios data abstraction preprocessing clustering generalizationconnection figure time construct signatures http netbios data based number packets data set note scales differ graphs preprocessing data file translation step converting ssts input format clustering module http session-level signature 
generalization required seconds packets honeycomb signature exploit deficiency msadc root exe dir http nimda redundant host connection close root exe dir http host connection close search http host webdav restrictive connection keep-alive benign http table signatures produced honeycomb http trace connections http impractical happened longest common substring unrelated sessions communication honeycomb author revealed part normal operation typical suppress whitelist signatures smaller length longer strings signature set proxy-headers represent real attack signatures avoid kinds problems manual grooming signatures expert protocol knowledge noted nemean requires sanity check process affects honeycomb greater extent tendency generate large number signatures summary comparison signatures produced honeycomb versus produced nemean honeycomb produces large number signatures lack specificity due pairwise connection comparison nemean algorithm generalizes cluster includes connections resulting smaller balanced signature set pairwise lcs employed honeycomb leads redundant non-identical signatures generate multiple alarms attack nemean algorithm generalizes clusters semantics awareness makes prone redundant signature production honeycomb signatures restrictive result require restrictive signatures capture instances attack lead false negatives nemean generation balanced signatures make susceptible false negatives honeycomb lack semantics awareness leads signatures consisting benign substrings lead false positives explains honeycomb unable produce precise signatures protocols netbios ms-sql http attacks nimda exploit content small portion entire attack string nemean semantics awareness addresses issue benign substrings present examples signatures obtained honeycomb demonstrate weaknesses table discussion potential vulnerability nemean honeynets data source attackers aware attempt evade monitor pollute irrelevant traffic resulting unnecessary signatures evasion complicated periodic rotation monitored address space intentional pollution problem automated signature generation method intend address future work issues arise deploying nemean live network live networks real traffic assume observed sessions malicious produce signatures live traffic traces mixed malicious normal traffic separate normal traffic malicious flow-level anomaly detection packet prevalence techniques identify anomalous flows complete traffic traces simple techniques flag sources horizontally sweep address space vertically scan ports machine count number rejected connection attempts nemean generate meaningful signatures snort bro nids snort utilizes http preprocessor detect http attacks provide support regular expressions converting nemean signatures bro signatures straightforward bro creation policy scripts support regular expressions focus current implementation limited manual selection required suggests automating deployment nemean signatures realizable resiliency nemean signatures false positives makes attractive means automate defense flash worms propagate rapidly data abstraction component modules work live traces star clustering algorithm designed perform incremental clustering work online fashion anomaly detection techniques employed parallel nemean flag compelling clusters worm outbreaks automatically generated nemean signatures clusters rapidly propagated nids defend emergent worms conclusions design implementation nemean system automated generation balanced nids signatures primary objectives system reduce false alarm rates creating signatures semantics aware nemean architecture comprised major components data-abstraction component signature-generation component modular design supports encourages independent enhancement piece architecture nemean packet traces collected honeynets input provide unfettered view wide range attack traffic evaluated prototype implementation nemean data collected unused subnets collected packet traces services developed service normalizers http netbios smb running nemean data resulted clusters wide variety worms exploits evaluation suggests simple similarity metrics cosine metric provide clusters high degree precision demonstrated signature generation capability system discussed optimizations automata learning module structure abstraction subsequence creation showed nemean generated accurate signatures extremely low false alarm rates wide range attack types including buffer overflows welchia attacks large diversity nimda attacks complicated protocols netbios smb future work intend hone on-line capabilities nemean assess performance longer periods time live deployments continue evaluate methods clustering learning objective fine tuning resulting signature sets acknowledgements work supported part army research office grant daad office naval research grant national science foundation grant cnsthe author supported part lawrence landweber ncr graduate fellowship distributed systems author supported part cisco systems distinguished graduate fellowship government authorized reproduce distribute reprints governmental purposes notwithstanding copyright notices affixed thereon views conclusions contained authors interpreted necessarily representing official policies endorsements expressed implied government agencies government grateful csl providing access traces dave plonka geoff horne bill jensen michael hare support isink project thankful honeycomb publicly release software finally vern paxson shepherd fabian monrose anonymous reviewers insightful comments greatly improved presentation paper agrawal imielinski swami mining association rules sets items large databases acm sigmod international conference management data aslam pelekhov rus practical clustering algorithm static dynamic information organization acmsiam symposium discrete algorithms soda baltimore maryland january caswell roesch snort network intrusion detection system http snort april christodorescu seshia jha song bryant semantics-aware malware detection ieee symposium security privacy oakland california conneff hllw lovgate removal tool http securityresponse symantec avcenter venc data hllw lovgate removal tool html april handley paxson kreibich network intrusion detection evasion traffic normalization end-to-end protocol semantics usenix security symposium washington august honeynet project http project honeynet april julisch clustering intrusion detection alarms support root analysis acm transactions information system security tissec november jung paxson berger balakrishnan fast portscan detection sequential hypothesis testing ieee symposium security privacy oakland california kim karp autograph automated distributed worm signature detection usenix security symposium san diego california august kreibich crowcroft honeycomb creating intrusion detection signatures honeypots workshop hot topics networks hotnets-ii cambridge massachusetts november lai deloder worm trojan analysis http wwwklcconsulting net deloder worm htm april levine labella owen contis culver honeynets detect exploited systems large enterprise networks ieee workshop information assurance west point york june lloyd squares quantization pcm ieee transactions information theory itmicrosoft security bulletin http microsoft technet security bulletin asp april pang yegneswaran barford paxson peterson characteristics internet background radiation acm sigcomm usenix internet measurement conference patrick raman andreae beam search algorithm pfsa inference pages springer-verlag london edition paxson bro system detecting network intruders real time usenix security symposium san antonio texas january pouget dacier honeypot-based forensics auscert asia pacific information technology security conference auscert brisbane australia provos virtual honeypot framework usenix security symposium san diego august ptacek newsham insertion evasion denial service eluding network intrusion detection technical report secure networks january puppy whisker anti-ids tactics http wiretrip net rfp txt whiskerids html april raman patrick beam search simulated beam annealing technical report department information systems massey palmerston north zealand raman patrick sk-strings method inferring pfsa international conference machine learning icml nashville tennessee july sasser worm http securityresponse symantec avcenter venc data sasser 
worm html shankar paxson active mapping resisting nids evasion altering traffic ieee symposium security privacy oakland california singh estan varghese savage automated worm fingerprinting symposium operating systems design implementation osdi december sommer paxson enhancing byte-level network intrusion detection signatures context acm conference computer communication security ccs washington october staniford hoagland mcalerney practical automated detection stealthy portscans journal computer security staniford paxson weaver internet spare time usenix security symposium aug vigna kemmerer netstat network-based intrusion detection system journal computer security vigna robertson balzarotti testing networkbased intrusion detection signatures mutant exploits acm conference computer communication security acm ccs washington october yegneswaran barford plonka design internet sinks network abuse monitoring recent advances intrusion detection sophia antipolis france sept yegneswaran barford ullrich internet intrusions global characteristics prevalence acm sigmetrics san diego california june yegneswaran giffin barford jha architecture generating semantic-aware signatures technical report wiscsonsin http wisc vinod nemean-tr pdf notes labor greek hero heracles rid nemean plain fierce creature nemean lion slaying beast heracles wore pelt impenetrable armor future labors honeynet network high-interaction honeypots negligible amount non-malicious traffic honeynet caused misconfigurations easily separated malicious traffic honeyd popular open-source low-interaction honeypot tool simulates virtual machines unused address space check destinations avoids hotspot misconfiguration observation confirmed personal communication kreibich authors honeycomb signature general version signature redundant host field signature miss attacks sources prefixes 
self-configuring network traffic generation joel sommers wisconsin madison jsommers wisc paul barford wisconsin madison wisc abstract ability generate repeatable realistic network traffic critical simulation testbed environments traffic generation capabilities date limited simple sequenced packet streams typically aimed throughput testing application-specific tools focused recreating representative http requests paper describe harpoon application-independent tool generating representative packet traffic flow level harpoon generates tcp udp packet flows byte packet temporal spatial characteristics measured routers live environments harpoon distinguished tools generate statistically representative traffic self-configure automatically extracting parameters standard netflow logs packet traces provide details harpoon architecture implementation validate capabilities controlled laboratory experiments configurations derived flow packet traces gathered live environments demonstrate harpoon capabilities router benchmarking experiment compares harpoon commonly throughput test methods results show router subsystem load generated harpoon significantly suggesting kind test provide important insights routers behave actual operating conditions categories subject descriptors computercommunication networks internetworking routers performance systems measurement techniques modeling techniques performance attributes general terms measurement performance keywords traffic generation network flows introduction network research community persistent evaluate algorithms systems protocols tools create range test conditions similar experienced live deployment ensure reproducible permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee imc october taormina sicily italy copyright acm results tools generating scalable tunable representative network traffic fundamental importance tools critical laboratory test environments evaluate behavior performance systems real networking hardware critical emulation environments simulation environments representative background traffic needed capability consistently create realistic network test conditions systems run risk unpredictable behavior unacceptable performance deployed live environments current practices traffic generation focused simple packet streams recreation single packet streamingmethods tools iperf consist sequences packets separated constant interval methods form basis standard router performance tests recommended rfc rfc infinite ftp source commonly traffic generation simulations approaches provide insight network system capabilities lack richness diversity packet streams observed live internet number successful application-specific workload generators developed including tools typically focus generating application-level request sequences result network traffic statistical properties live traffic modeled application evaluating behavior performance host systems servers caches tools cumbersome router switch tests recreate kind application traffic diversity traffic observed internet observations motivate tool capable generating range network traffic observed edges core internet contribution paper description evaluation network traffic generator capable recreating traffic flows flow defined series packets port pair specific transport protocol section detail representative observed routers internet aware tools target representative traffic generation flow level approach abstract flow-level traffic generation series application-independent file transfers tcp udp transport model includes temporal diurnal effects traffic volume spatial visa-vis address space coverage components resulting constructive model manually parameterized selfparameterized netflow packet trace data components traffic generation tool selfparameterizing capability simplifies distinguishes system tools attempt generate statistically representative traffic realized model tool call harpoon router testbed environment emulation scalable representativenetwork traffic harpoon components client threads thatmake file transferrequests server threads thattransfer requested files tcp udp result byte packet flow traffic hop router perspective server qualitatively traffic produce input parameters evaluated harpoon capabilities ways conducted experiments controlled laboratory environment data sets show qualitatively recreate traffic harpoon week data set netflow records collected border router wisconsin-madison series packet traces constructed flow records standard tool collected border auckland experiments demonstrate harpoon capability generate representative flow level traffic laboratory environment conduct throughput evaluation cisco switch rfc show throughputs achieved standard packet streaming methods compared harpoon similar loads router subsystems substantially implication result tool harpoon augment standard test suites give router designers network operators insight system behavior actual operating conditions paper organized discussing related work describe design requirements architecture flow-level workload model present details harpoon implementation results validation tests results throughput evaluation harpoon conclude outline future work related work large literature general topics internet traffic characterization modeling successful models traffic focus correlation structure self-similarity appears large time scales local area wide area traffic crovella bestavros extend work showing evidence self-similarity web traffic arises multiplexing sources proposed heavy-tailed file sizes transferred observation forms basis constructive model generation flows flow-level network traffic models proposed including models study fairness response times queue lengths loss probabilities assumptions variety mathematical techniques work differs focus building flow-level model based combining empirical distributions characteristics measured router live network model realized tool generating representative packet traffic live emulated network environment creating traffic simulation environment approach similar number application-specific workload generators authors describe surge web workload generator built combining distributional properties web similar approach developing web polygraph gismo generate scalable representative web cache streaming workloads harpoon differs tools application independent empirical distributions generates udp tcp traffic includes spatial temporal characteristics noted thereare specific workload generation including model closely related introduced feldmann model generalizes surge model web traffic purpose general background traffic generation nssimulator similar model based connection-rate superposition developed cleveland model general web-specific parameters includes capability transfer files udp incorporates temporal spatial request characteristics uhlig presents flow level traffic model similar model parameters compared rely underlying transport protocol transfer individual files work distinct models create evaluate tool harpoon traffic generation real systems automatically parameterized flow records requiring additional modeling steps contrast workload generators based models designed synthesize distributional characteristics tools replay traffic based raw packet traces tcpreplay flowreplay low-level approach attempting generate packets optionally rewriting addresses mirror specific timings recorded packet trace monkey-see monkey-do takes slightly higher-level approach extracting features estimated bottleneck bandwidth delayed ack behavior receiver window raw packet traces order replay http transactions test environment emulating original client protocol network conditions approach harpoon differs significantly traffic generators harpoon designed generate representative background traffic scalability flexibility fundamental objectives tools mimicking network behavior low level scale high-speed links harpoon source-level traffic descriptions make assumptions transport layer packet-level descriptions based prior network state embedded low-level timings generating packet traffic based network-induced timings problematic closed-loop protocols tcp transient context-dependent network conditions substantially alter individual packet timings architecture design objectives harpoon scalably generate application-independent network traffic flow level easily parameterized create traffic statistically identical traffic measured vantage point internet figure depicts high-level process flow objectives start basic definition flow create constructive model network traffic generation 
describe harpoon harpoon processing flow record capture emulation testbed operational network configuration figure flow records collected vantage point operational network standard software flow-tools key aspects live flows extracted self-configuration step parameters generate traffic testbed statistically matches temporal diurnal volume characteristics spatial source destination address frequency characteristics live flows flow defined unidirectional series packets protocol traveling source destination port pair period time final condition statement ambiguous tie definition tools gather analyze network flow data flow-tools flowscan netflow data includes source destination port pairs packet byte counts flow start end times protocol information bitwise tcp flags packets flow addition fields data exported timer deadlines events occur tcp fin rst cache full whichever pragmatically resolves ambiguity definition flow specific expiration-related timing behaviors vary discuss variation affect parameterization section single transaction ftp transfer flow records shown figure transaction represented multiple data flows hosts direction control data connections reported resulting flow records tcp flags packet byte counts accumulate duration connection operational definition flow harpoon architecture begins notion unicast file transfers tcp udp harpoon address packet level dynamics tcp file transfers relies version tcp running end hosts transfer requested file modeling udp traffic complicated fact packet emission behaviors largely applicationspecific present harpoon models udp packet transfer simple parameterized constant packet rate fixed-interval periodic ping-pong exponentially distributed ping-pong source type similar audio video streams types intended mimic standard network time protocol ntp domain service dns udp traffic today internet made wider variety application level traffic including voice sql worms behavior captured source types development model diverse set udp traffic sources left future work time pkts bytes pkts bytes pkts bytes pkts bytes server ftp client syn ack push fin client server ftp syn ack push fin client server ftp data syn ack push fin server ftp data client syn ack fin figure flow level decomposition simple ftp transaction line logged separate entry netflow harpoon flow model level architecture depicted figure refer lower level harpoon model connection level made components measurable distributional properties component size file transferred component time interval consecutive file transfer requests inter-connection time harpoon makes requests files sizes drawn empirical distribution pfilesize connection initiations separated time intervals drawn empirical distribution pinterconnection upper level harpoon model referred session level harpoon sessions divided tcp udp types conduct data transfers protocol time active session level components number active sessions spatial distribution modulating number sessions active point time harpoon match byte packet flow volumes original data realize temporal diurnal traffic volumes common characteristic internet average number sessions type tcp udp active point day derived flow data time series consecutive non-overlapping intervals length intervalduration seconds create empirical model pactivesessions scalability naturally achieved dividing number active sessions number hosts comprising testbed session harpoon picks source destination addresses ranges addresses make series file transfer requests address selection made preferentially weights drawn empirical distributions piprangesrc piprangedest series file transfer requests takes place source destination intervalduration seconds harpoon started begins average number sessions interval proceeds consecutive intervals duration test summary harpoon model made combination distributional models tcp sessions file size inter-connection time source destination ranges number active sessions parameters summarized table distributional models udp sessions constant bit-rate periodic ping-pong modulated achieve number active sessions source destination addressesare assigned active sessions obtain desired spatial distribution desired volumes source dest protocol canonical tuple flows connections analogous sessions analogous tocanonical tuples source dest protocol inter connection times individual filessource port dest port blocks represent session level connection level figure harpoon flow-based two-level hierarchical traffic model sessions comprised series connections separated durations drawn inter-connection time distribution source destination address selection figure weighted match frequency distribution original flow data number active sessions determines average load offered harpoon heavy-tailed empirical file size distribution transfer model generate self-similar packet-level behavior exponential ping-pong distributions manually extracted packet traces netflow data collected live router models enable workload generated harpoon application independent tuned specific application models combined constructive manner create series file transfer requests results representative flow-level network traffic implementation key feature harpoon self-configuring netflow logs packet traces parameterization intermediate modeling step obviating harpoon users experts distribution parametric estimation section discuss relevant implementation issues limitations transforming flow records suitable configuration harpoon follow description implementation traffic generation component harpoon self-configuration self-configuration phase harpoon takes flow records input generates parameters traffic generation key parameters distributional estimates file sizes inter-connection times source destination addresses number active sessions divide input flow records series intervals equal duration generate number active sessions order match average byte packet flow volumes original data interval discuss interval duration configurable parameter set parameter empirical distribution derived original flow packet data attempt fitting distribution harpoon trivially enhanced generate variates distributions file sizes flow records packet byte counts approximation file sizes flow payload sizes extracted bytecount packetcount assuming tcp options calculation make refinements due flow record timeouts single flow split multiple flow records counter effect perform flow surgery raw flow records coalescing records addresses ports protocol timestamps tcp flags records refer flow perform calculation start end markers present tcp flags syn flag rst fin flag check ensures underestimate application payloads missing beginning end flow discard flows ack flows flows small request direction http transfer practical complications calculating file sizes flow records routers record tcp flags flow records implementation harpoon assume flags common practice high-bandwidth links perform packet sampling recording nth packet recording packet probability reduce storage processing requirements maintaining flow records duffield describe methods recovering distribution flow sizes sampled flow records application methods self-configuration step harpoon relaxing assumptions presence tcp flags areas future work inter-connection times distribution make tcp flags flow records source destination address pair encountered create ordered list start times flows syn flag collection differences consecutive syns address pair constitutes inter-connection time empirical distribution practice impose bound maximum inter-connection time seconds discuss implications bound source destination addresses emulate spatial characteristics present flow records captured live environment extract empirical frequency distributions source destination addresses map resulting rank-frequency distributions source destination address pools perspective harpoon client testbed source address pool testbed host class network map frequency distribution top addresses live flows harpoon configuration parameters number active sessions calculate number sessions active series intervals start observation source 
destination address pair analog session harpoon contributes load intervals host pair find earliest flow start time latest end time spread proportional lifetime session intervals technique appears direct calculating number active sessions fails end timestamp flow records frequently reflect precise time final packet flow inaccurate timestamps extend flow durations number sessions active series time intervals overestimated inflation addresses full class minus host address minus broadcast address equals usable addresses table summary harpoon configuration parameters tcp sources parameter description pfilesize empirical distribution file sizes transferred pinterconnection empirical distribution time consecutive tcp connections initiated source-destination pair piprangesrc ranges addresses preferential weights set match empirical frequency piprangedest distributions original data pactivesessions distribution average number sessions source-destination pairs active consecutive intervals measured data modulating distribution harpoon match temporal byte packet flow volumes original data intervalduration time granularity harpoon matches average byte packet flow volumes table summary statistics differences milliseconds netflow timestamps cisco flow records generated dag packet trace timestamp median standard deviation flow begin flow end byte packet flow volumes generated harpoon exceed original volumes inaccuracy end timestamp caused delays waiting flow export packet cache fills lingering out-of-order packets contrast flow start timestamps accurately reflect packet flow allowing calculating inter-connection times quantify timing inaccuracies introduced netflow generated traffic cisco capturing netflow records router simultaneously taking packet trace high precision dag capture card table shows sample median standard deviation begin end timestamp differences milliseconds differences begin timestamp note median small differences end timestamp average significantly larger end timestamp differences compounded thousand flows minute figure initial algorithm fail hand flow records constructed raw packet traces accurate timestamps leads good match results auckland trace section generated revised approach tuning number active sessions outlined pseudocode shown figure make assumption overwhelming majority cases file request made interval completed interval assumption reasonable based large values intervalduration seconds reasonable bound roundtrip times determine sessions required generate required byte volume duration inaccuracies related coarsegrained nature flow records subtract contributions headers including connection setup teardown packets latency file sizes start end timestamps reflect final payload packets flow dag capture point situated hop differences timestamps due propagation forwarding delays assumed negligible interval mimicking action harpoon sessions alternate waiting amount time drawn pinterconnection distribution requesting files sizes drawn pfilesize distribution successively increment number sessions imitating action session noting surpass requisite byte volume interval practice run algorithm interval times number sessions required generate volume shown validation experiments harpoon tuning number active sessions required byte volume technique outline leads accurate match original byte packet flow volumes coarse intervals bytesgenerated total bytes generated mimicked sessions sessionsrequired sessions required create intended volume bytesgenerated intendedbytevolume generate bytes originally sessionsrequired session required elapsedtime elapsedtime holds amount time current session active interval elapsedtime intervalduration loop mimics action single session elapsedtime interconnectiontimes inter-connection time empirical distribution bytesgenerated filesizes file size empirical distribution assume file transferred current interval end end number sessions needed generate required byte volume stored variable sessionsrequired figure pseudocode algorithm determine number sessions active interval produce byte volume intended byte volume intervalduration pfilesize pinterconnection distributions inputs algorithm interval duration intervalduration time granularity match byte packet flow volumes originally measured flow data harpoon duration selected arbitrarily practical constraints choose source destination address active session start interval tradeoff note connection initiation schedule defined pinterconnection distribution made independent network feedback length interval spatial distribution approximated full test longer intervals opportunity sampling spatial distribution shorter intervals increased internal overhead managing sessions timers experience intervals minutes work minutes common interval flow records aggregated implemented widely flow-tools practical consideration intervalduration long maximum inter-connection time reason session randomly inter-connection time idle entire interval reason end interval sessions waiting inter-connection time expire initiating connection prematurely halt sessions end interval ensure sampling longest inter-connection times sessions waiting connection time end interval technically active engaged file transfers count target number active sessions interval effect temporarily frozen sessions harpoon generate intended volumes interval setting intervalduration large setting cap maximum inter-connection time processing original flow data resolves potential problem intervalduration parameterization determining pactivesessions distribution control traffic generation values phase decoupling enables time compression expansion relative original data traffic generation harpoon set match aggregate volume original intervals match bitrate tcp sessions measured flow logs interval tcp sessions measured interval harpoon configured initiate sessions test interval realize similar aggregate volume match original bitrate traffic generation intervalduration simply set smaller duration parameterization potential pitfall matching bitrates shorter traffic generation intervalduration interval short insufficient sampling pinterconnection pfilesize distributions configured number active sessions result byte packet volumes generated interval vary expected true coarse intervals matching original volumes ignore issues packet arrivals short sub-rtt time scales intentional harpoon setup distribution round-trip times link capacities mtus match parameters derived live trace point configurations creating volumes longer time scales produce self-similarity diurnal patterns real application traffic generated intent domain harpoon preferable burstiness short time scales arise endogenously tcp closed-loop control network state exogenously attempt force state introducing random packet dropping element path effect loss rate demonstrate limitations harpoon respect short time scales section traffic generation harpoon implemented client-server application figure illustrates conceptual aspects implementation harpoon client process consists threads generate file requests hierarchical session connection model realized individual threads distribution active sessions maps number threads actively making file requests thread connections initiated inter-connection time distribution duration file transfer dictated dynamics transport protocol underlying testbed configuration inter-connection times hand independently transport layer active session multiplexing multiple concurrent connections harpoon server process consists threads service harpoon client requests server controls sizes files transferred input distribution emulation testbed support functions additional logging statistics pluginsbitrate generatorudp constantgeneratortcp traffic management remote xml rpc thread session manager harpoon software architecture configuration figure harpoon software architecture core session manager controls dynamically loadable traffic generator plugin modules xml rpc interface indirectly handles remote requests stop start plugins load configurations retrieve plugin statistics tcp file transfers controlled protocol dynamics udp dictates control packet emissions harpoon send udp datagrams roughly constant bit rates configurable default kbps fixed intervals exponentially distributed intervals parameters traffic sources tests summarized table unlike constant bit rate source type udp source types notion multipacket files inter-connection times files consist single datagram size depends file size distributions source type 
fixed interval exponentially distributed interval sources require control messages coordinate packets true constant bit rate sources ensure file requests place file size inter-connection request distributions client maintains tcp control connection target server duration active udp session file requests made channel udp data server client sends port number locally bound udp socket order server set proper destination udp traffic client additionally sends datagram size rate server sending data unique request identifier server finishes sending requested file sends completion indication client original request identifier addition distributional input parameters table summary harpoon configuration parameters udp sources validation tests source type key parameter constant packet rate rate kbps fixed-interval periodic ping-pong interval seconds exponentially distributed ping-pong milliseconds harpoon client range local ipv addresses source address pool range ipv addresses ports target harpoon servers address ranges cidr prefixes harpoon source addresses bound physical interfaces client host address aliases assigned interface starting user thread picks source address destination address pool address pools constructed random selection addresses generates required spatial frequency distribution harpoon designed modular fashion enable easy addition traffic models traffic generation modules tcp udp constant bit-rate stream fixed exponential interval udp datagram sources implemented plugin modules dynamically loaded controlled core harpoon thread manager harpoon reads xml parameter files produced selfconfiguration components loading starting plugin modules management resources tools large-scale testbed environments challenging counter problem implemented http server harpoon withanxml parser enable remote managementvia xmlrpc users remotely reset stop gather statistics running harpoon processes traffic module object files disseminated remote harpoon processes configured distributing xml parameter files central location single harpoon process produce hundreds megabits network traffic provisioned commodity workstations performance largely dependent nature inter-connection time distribution timer management number active sessions memory footprint harpoon client server small modestly sized input distributions code written compiles runs freebsd linux macos solaris porting platforms limited support posix threads capability dynamic loading objects dlopen friends standard template library expat xml library validation section validate ability harpoon generate traffic qualitatively exhibits statistical signatures distributional models input data sets self-parameterize harpoon validation tests data set consisted week netflow records collected july august data set series packet traces auckland june constructed flow records modified crl flow tool coralreef software suite produce wire-format netflow version records packet traces refer data sets wisconsin auckland summarized table table summary data sets validation experiments data set total flows tcp flows wisconsin july august auckland june tests validation test environment consisted workstations running freebsd operating system machine ghz intel pentium processors gigabyte ram kernel defaults tcp parameters meant newreno congestion control algorithm time stamping window scaling tcp options enabled default receive window size default ethernet mtu bytes machine dual-homed separate intel pro interface solely experiments machines connected cisco router gbps ethernet freebsd machine harpoon data server harpoon clients generating requests receiving resulting data packets monitored host tests ensure systems exhaust cpu memory resources client machines configured generate requests ipv class address space addresses likewise server machine configured handle requests ipv class address space case address creation accomplished creating aliases loopback interface creating static routes harpoon clients server intermediate switch aliases loopback adapter created avoid arp overhead switch results figures examine harpoon capability generate desired temporal characteristics wisconsin auckland data sets figure compares bitrate period hours original wisconsin data harpoon figure compares bitrate period days original auckland data bitrates produced harpoon emulating time period level traffic determined input distribution number active users pactivesessions test harpoon traffic exhibits burstiness due distribution file sizes inter-connection times closed-loop nature tcp nonetheless duration test hourly pattern emerges due control number active sessions harpoon client process variability introduced harpoon immediately truncate active session emulation interval lets final connection finish naturally avoiding abrupt shifts interval figure compares inter-connection time file size destination frequency empirical distributions derived wisconsin data set distributions generated harpoon inter-connection times shown figure good match shortest mbps mbps mbps july throughput bits emulated hour measured dataharpoon figure emulation temporal volume characteristics wisconsin data inter-connection times visible bumps harpoon tests inter-connection times effect coarse-grained operating system scheduler interacting shortest durations distribution freebsd linux default time slices milliseconds steps figure multiples time slice tests operating systems scheduling mechanisms macos artifacts results auckland data set qualitatively similar figure compares file sizes extracted wisconsin data set file sizes transferred harpoon close qualitative match results auckland data set similar figure plots frequency rank log-log scale destination addresses wisconsin data set observe close match original data harpoon data results source addresses qualitatively similar results auckland data set final validation test compare traffic volumes generated harpoon original flow traces generate parameters data set figure compare distributions packets bytes flows measurement interval derived wisconsin data set make comparisons auckland data set figure shown plots harpoon accurately approximates number bytes flows interval data set packets original trace harpoon reason testbed homogeneous respect link-layer maximum transmission unit sizes resulting average packet sizes larger original trace figure shows time series packet size intervals hour segment pmpm june auckland data set similar time series harpoon harpoon packet sizes average large original trace shown figures scale harpoon volumes ratio average packet sizes harpoon measured data observe close match limitations limitations harpoon traffic model designed match byte packet flow volumes coarse intervals seconds match shorter intervals packet-level dynamics traffic produced harpoon match metrics interest scaling characteristics queue length distribution first-hop router packet loss process flow durations packet-level dynamics created harpoon arise file size distribution inter-connection time distribution tcp implementations end hosts testbed parameters round-trip time distribution link capacities mtu sizes round-trip time key parameter affects flow durations tcp sources consequence nature process correlation structure packet arrivals short long time scales affected shown dynamics short time scales differ lan wan environments short time scale effects arise due tcp feedback loop network environment variability characteristic wans effects short long time scales interest testbed traffic generation performance measurements differ substantially lan wan settings figure compare time series bytes transferred intervals segment auckland trace harpoon intervalduration seconds propagation delay emulated testbed round-trip time harpoon sources order millisecond greater variability evident testbed configuration part tight tcp feedback loop resulting higher throughput shorter flow durations auckland trace dominant roundtrip times milliseconds 
roughly rtt north america lead longer flow durations greater degree flow concurrency observable variability utilization standard method characterizing behavior traffic dynamics range time scales log-scale diagram log-scale diagram developed means identifying self-similar scaling network traffic estimating hurst parameter evidence self-similar scaling range scales exists linear relationship scale log normalized measure energy variability scaling regime shown exist measured wan traffic separated linear selfsimilar region pronounced dip energy time scale dominant round-trip times figure compare log-scale diagrams based wavelet decompositions time series byte volumes microsecond intervals hour segment auckland data set pmpm june harpoon values intervalduration seconds emulated round-trip times milliseconds plot confidence intervals clarity note difference harpoon configurations round-trip times comparing harpoon rtt milliseconds original trace common range time scales indicative self-similar scaling scales clear dip millisecond time scale scale dominant roundtrip times original trace singular round-trip time harpoon harpoon configurations emulated propagation delay energy time scales common original trace finally note sub-rtt time scales harpoon match auckland trace configucdf inter-connection time seconds log measured dataharpoon inter-connection time distribution cdf file size bytes log measured dataharpoon file size distribution relative frequency log destination popularity rank log measured dataharpoon destination address frequency distribution figure comparison empirical distributions extracted wisconsin data distributions produced harpoon emulation results shown day wisconsin data july results days auckland data qualitatively similar cdf bytes transferred minute interval billions measured dataharpoon byte volumes cdf packets transferred minute interval millions measured dataharpoonharpoon scaled packet volumes harpoon data shown scaled ratio average packet size harpoon measured data cdf flow arrivals minute interval measured dataharpoon flow volumes figure comparison byte packet flow volumes extracted wisconsin data volumes produced harpoon emulation results shown day wisconsin data july results days qualitatively similar mbps mbps mbps mbps mbps mbps june june throughput bits emulated hour measured dataharpoon figure emulation temporal volume characteristics auckland data cdf bytes transferred hour interval billions measured dataharpoon byte volumes cdf packet transferred hour interval millions measured dataharpoonharpoon scaled packet volumes harpoon data shown scaled ratio average packet size harpoon measured data cdf flow arrivals hour interval measured dataharpoon flow volumes figure comparison byte packet flow volumes extracted original auckland data volumes produced harpoon emulation ration testbed lacks diversity round-trip times mtus link capacities expect match time scales harpoon accurately approximates original volumes intervals round-trip time values shown vast differences original correlation structure produced harpoon comparing configurations intervalduration slightly energy intervals byte volumes produced harpoon original volumes reason interval small compared default maximum inter-connection time seconds session randomly inter-connection time idle length entire interval end effect harpoon produces traffic intended section differences important implications harpoon configuring laboratory testbed interpretation results clear queuing dynamics depending configured round-trip times resulting delay jitter loss characteristics measured live environment differences affect transport application performance requiring careful interpretation measurements characterization applicability laboratory feel harpoon represents step forward testbed traffic generation goal predicting performance live environment based laboratory experiments remains reach ingredients produce realistic packet dynamics time scales simulation laboratory testbeds general open problem comparison packet-oriented traffic generators obvious application harpoon scalable background traffic generation testbed environments emulab wail section investigate application harpoon router benchmarking environment compare router performance workloads generated harpoon workloads generated standard packet level traffic generator motivation comparing harpoon standard traffic generation system demonstrate differences approaches standard tools tuned exercise routers comprehensively environment methodology hardware environment series experiments harpoon source machines harpoon sink machine configured validation tests host connected cisco router gbps ethernet links link connected separate physical line cards standard packet generation tool range free software tools iperf large-scale feature-rich hardware platforms spirent cisco series devices configured run cisco catos cisco ios hybrid choice depends anticipated traffic customer requirements modules installed configured run native ios version forcing traffic cross internal switching fabric router tests connected traffic generation machines management network polled specific mib variables snmp traffic traversed router system generate standard packet traffic spirent generated traffic gbps ethernet links traffic returned gbps link tests contrast harpoon model traffic generation representative tools generate packets constant spacing term constant spacing packet generator discussion graphs results experiments based series tests lightreading benchmarking terminology methods rfcs tests designed evaluate packet forwarding performance internet backbone routers variety conditions including minimum-sized packets forwarding tables comparable size found internet backbone lightreading tests investigated performance capabilities routers bgp table capacity packet filtering forwarding performance unstable path conditions tests focused packet forwarding performance impact workloads router subsystems basic metric comparison packet forwarding rate rfc points problematic report forwarding rates absence packet losses earlier rfc defined packet loss rates depend offered load router switch implementation artifacts challenge determine match offered loads fundamentally packet generation methods attempting compare forwarding rates broad range offered loads chose regimes low load high load offered load polled seconds snmp obtain forwarding rate packet loss counts system utilization variables snmp interface snmp variables updated internally seconds polling period seconds chosen minimize additional load ensuring snmp request obtain updated counters low high offered load regimes roughly tuned mbps egress bandwidth mbps egress bandwidth harpoon pfilesize pinterconnection distributions extracted wisconsin data algorithm figure determine session threads active generate intended load levels calculated average offered load snmp measurements ingress interfaces average configure packet-level generator tuning approach including application-level generators evaluation required imprecise trial-anderror tests tune level chose compare harpoon constant load generator tests section harpoon initialized random number generator seed ensure deterministic packet generation tool tuning offered load straightforward harpoon load tuned adjusting number client server threads average packet size bytes sec intervals time seconds auckland packet sizeharpoon packet size average packet sizes hour segment auckland data equivalent harpoon trace auckland data sample standard deviation harpoon sample standard deviation bytes transferred interval millions time seconds measured data harpoon time series bytes transferred segment auckland trace harpoon rtt configured testbed log energy scale fine coarse measured data harpoon sec msec rtt harpoon sec msec rtt harpoon sec msec rtt harpoon sec msec rtt log-scale diagrams hour segment auckland data set pmpm june harpoon intervalduration values round-trip times figure limitations harpoon related packet volumes generated matching original volumes range time scales identical sequences input distributions compared forwarding rates series tests run minutes offered loads 
separately changing traffic source burstiness traffic source packet size forwarding table size note traffic source burstiness packet size applicable constant spacing generator harpoon intentionally dictate parameters packet-level burstiness harpoon arises distributional parameters configured harpoon closed-loop dynamics tcp constant spacing generator burst sizes uniformly spaced packets burst size defined rfc sequence frames emitted minimum legal inter-frame gap maximum recommended burst size range burst sizes covers maximum burst size packet sizes number bytes excluding link-layer framing constant spacing generator trimodal distribution configured generated packets bytes bytes bytes empirical basis mix packet sizes roughly approximates values lightreading tests measurements merit networks august september sizes forwarding tables entries traffic sources server workstations harpoon configuration separate cards configured single address traffic sink client workstation harpoon single card configured entire ipv class address range addresses simply parameter configuring generated packets harpoon created interface aliases address space reached installing static routes traffic source workstations forwarding tables aliased loopback adapter change mtu interface physical alias harpoon indirectly allowing harpoon generate packet sizes modify default ethernet mtu bytes freebsd hosts running harpoon physical ethernet adapter avoid arp overhead client host force destination address lookup forwarding tables results begin showing qualitative comparison time series bit forwarding rates harpoon constant spacing generator shown figure test harpoon configured generate roughly mbps traffic minute test period constant spacing generator configured match average offered load harpoon emitted byte packets uniform spacing harpoon maintains high level offered load presence variable file sizes transferred inter-connection times generating burstiness packet traffic expected constant spacing generator presents virtually unwavering load router tests explore fundamental differences packet emission processes affect performance router examine effects burst sizes forwarding rate results shown figure vertical bars data point range standard deviation average router configured forwarding table size high regime offered load tests harpoon results forwarding table size high offered load shown comparison drop bit forwarding rate constant spacing generator burst size accompanies increase number packets dropped egress line card router drop forwarding rate burst size burst size roughly mbps increase stress router increase forwarding rate variability noted low variation height vertical bars drawn constant spacing generator tests figure shows effects packet sizes forwarding performance constant spacing generator configured emit packet sizes trimodal distribution burst tests router configured forwarding table size high regime offered load tests harpoon results forwarding table size high offered load plotted comparison minimum sized ipv packets forwarding rate test router offered load drops roughly mbps exhibiting low variability packet loss measured byte case packet loss measured byte trimodal case figure shows affect forwarding table sizes forwarding rates results low offered load test shown figure results high offered load test shown figure obvious features figures near-perfect matching average bit forwarding rates harpoon constant packet spacing generator low loads poor match test high offered load recall offered load constant packet spacing tool configured average offered load generated harpoon high load test shown figure difference forwarding rate direct result packet loss occurred harpoon tests tests constant spacing generator average load offered router traffic generator forwarding rate lower harpoon test important feature graphs trend variance harpoon tests forwarding table size increases variance bit forwarding rate constant packet spacing generator variance remains low tests harpoon configured test sequence input parameters conclude burstiness traffic presented harpoon results distinctly potentially highly variable forwarding performance router figure shows time series packet loss selected tests tests shown -entry forwarding table router high offered load clear figure constant spacing generator emits bursts packets loss rate measured router remains basically constant true constant spacing generator test byte packets observation surprising packetlevel generator operates open-loop making adjustment offered load response packet loss closed-loop nature tcp harpoon generate packet loss configured offered load losses correlated bursty finally note packet losses measured tests occurred output buffer drops line card connected harpoon client machine module packet-level generator acting data sink effect test configurations switch fabric utilization shown figure surprisingly results constant spacing generator uniformly spaced byte packets exhibits wider range fabric utilization levels generator uniformly spaced byte packets fluctuation utilization measured byte test due limited precision utilization calculation internal simply integer highest level switch fabric utilization measured constant packet spacing generator switch fabric utilization reported input output channels module installed chassis show results output channel module traffic multiplexed path harpoon client machine packet-level generator data sink module test byte packets interesting note sending larger packets average lower packet loss rate figure utilization harpoon test percent highest measured fabric utilization fabric utilization harpoon test exhibits greater variability constant spacing generator tests shown ran experiments constant spacing generator limited cross-product parameters explored burst size packet size forwarding table size offered load expect loss rates sending byte packets bursts greater sending uniformly spaced byte packets key observation tests variability bit forwarding rate loss rate switch fabric utilization remains low constant spacing generator implications clear precisely controlled traffic streams internet rfc conformance testing subjecting network systems extreme conditions dimensions experiments demonstrate workload based measured characteristics real internet traffic generates fundamentally variable load routers results suggest ranges behaviors expected average loads ranges tune constant bit rate streams explore operational space finally subsystem load variability imposed harpoon provide insights system designers stresses systems subjected real operating conditions inform allocation resources future system designs conclusions future work harpoon tool generating representative traffic based distributional characteristics tcp udp flows parameters distributions automatically extracted netflow data collected live router characteristics enable harpoon generate statistically representative traffic workloads independent specific application aware workload generation tool capability implemented harpoon client-server application testbed environments parameterized harpoon data collected netflow trace set packet traces verified controlled laboratory tests harpoon generates traffic qualitatively input data demonstrated harpoon utility simple background traffic generation series throughput tests conducted cisco router compared contrasted workload generated harpoon constant bit rate workloads recommended standard tests found harpoon generated similar results throughput stresses router subsystems harpoon tests significantly results suggest addition background traffic generation harpoon tool providing network hardware designers network operators insight systems behave realistic traffic conditions area future work extend parameterization tools model accommodate sampled flow records absence tcp flags intend augment mbps mbps mbps avg bits bps time seconds harpoonconstant spacing 
generator packet forwarding rate time series harpoon constant spacing packet generator gbps mbps mbps forwarding rate bits burst size packets harpoonconstant spacing generator average forwarding rates burst sizes constant spacing traffic generator configuration entries forwarding table high offered load harpoon results forwarding table entries high offered load shown comparison vertical bars span standard deviation gbps mbps mbps bytemultiple byte forwarding rate bits generated packet sizes harpoonconstant spacing generator average forwarding rates packet sizes constant spacing packet generator configuration entries forwarding table high offered load harpoon results forwarding table entries high offered load shown comparison vertical bars span standard deviation figure qualitative contrast forwarding rates harpoon constant spacing traffic generator comparisons forwarding rates harpoon constant spacing traffic generator burst lengths packet sizes gbps mbps mbps forwarding rate bits routing table size harpoonconstant spacing generator low offered load gbps mbps mbps forwarding rate bits routing table size harpoonconstant spacing generator high offered load figure average forwarding rates harpoon constant spacing traffic generator router forwarding table sizes vertical bars span standard deviation udp traffic model enable broader set udp traffic characteristics finally harpoon assumes sources behaved case internet intend pursue creation traffic anomaly models incorporated harpoon framework acknowledgments dave plonka wisconsin helpful discussions netflow spirent communications system anonymous reviewers shepherd anja feldmann constructive criticism material based work supported national science foundation grant support cisco systems opinions findings conclusions recommendations expressed material authors necessarily reflect views national science foundation cisco systems catalyst series switches http cisco univercd doc product lan cat index htm accessed august cisco ios netflow feature http cisco warp public netflow accessed august coralreef passive network traffic monitoring statistics collection http caida tools measurement coralreef accessed august endace measurement systems http endace accessed august expat xml parser http expat sourceforge net accessed august iperf tcp udp bandwidth measurement tool http dast nlanr net projects iperf accessed august netflow services solutions guide netflow white paper http cisco univercd doc cisintwk intsolns netflsol nfwhite htm accessed august spirent communications adtech broadband test system http spirentcom analysis product line cfm accessed august ssfnet network simulator http ssfnet accessed august hampshire interoperability laboratory http iol unh accessed august wisconsin advanced internet laboratory http wail wisc accessed august ucb lbnl vint network simulator version http isi nsnam accessed august web polygraph http web-polygraph accessed august xml-rpc home page http xmlrpc accessed august workshop models methods tools reproducible network research http acm sigs sigcomm sigcomm workshop mometools abry veitch wavelet analysis long range packet loss rate time seconds harpoonconstant spacing generator byte packets constant spacing generator pkt bursts constant spacing generator byte packets packet loss rate switch fabric utilization time seconds harpoonconstant spacing generator byte packets constant spacing generator pkt bursts constant spacing generator byte packets output channel fabric utilization figure packet loss rates switch fabric utilization forwarding table entries high offered load results shown harpoon constant spacing generator uniformly spaced packets bytes bursts packets bytes uniformly spaced packets bytes dependent traffic ieee transactions information theory barakat thiran iannaccone diot owezarski modeling internet backbone traffic flow level ieee transactions signal processing special issue networking august barford crovella generating representative workloads network server performance evaluation proceedings acm sigmetrics pages madison june barford crovella performance evaluation hyper text transfer protocols proceedings acm sigmetrics atlanta bradner benchmarking terminology network interconnect devices ietf rfc july bradner mcquaid benchmarking methodology network interconnect devices ietf rfc march towsley fixed point approximation tcp behavior aqm network proceedings acm sigmetrics san diego june cheng olzle cardwell savage voelker monkey monkey tool tcp tracing replaying proceedings usenix conference june claffy polyzos braun internet traffic flow profiling technical report tr-cs california san diego november cleveland lin sun packet generation statistical models tcp start times based connection rate superposition proceedings acm sigmetrics santa clara june crovella bestavros self-similarity world wide web traffic evidence ieee acm transactions networking december duffield lund thorup estimating flow distributions sampled flow statistics proceedings acm sigcomm karlsruhe germany august feldmann gilbert huang willinger dynamics traffic study role variability impact control proceedings acm sigcomm boston august feldmann gilbert willinger data networks cascades investigating multifractal nature internet wan traffic proceedings acm sigcomm august floyd kohler internet research models hotnets-i princeton october floyd paxson difficulties simulating internet ieee acm transactions networking august fomenkov keys moore claffy longitudinal study internet traffic view high performance sites technical report cooperative association internet data analysis caida applied network research http moat nlanr net datacube accessed august fraleigh moon lyles cotton khan moll rockell seely diot packet-level traffic measurements sprint backbone ieee network fredj bonald proutiere regnie roberts statistical bandwidth sharing study congestion flow level proceedings acm sigcomm san diego august fullmer romig osu flow-tools package cisco netflow logs proceedings usenix fourteenth system administration conference lisa xiv orleans december jin bestavros gismo generator streaming media objects workloads performance evaluation review leland taqqu willinger wilson self-similar nature ethernet traffic extended version ieee acm transactions networking pages mandeville benchmarking terminology lan switching devices ietf rfc february mandeville perser benchmarking methodology lan switching devices ietf rfc august newman chagnot perser internet core router test http lightreading document asp site testing doc march accessed august park willinger self-similar network traffic performance evaluation wiley interscience paxson measurements analysis end-to-end internet dynamics phd thesis california berkeley paxson floyd wide-area traffic failure poisson modeling ieee acm transactions networking june plonka flowscan network traffic flow reporting visualization tool proceedings usenix fourteenth system administration conference lisa xiv orleans december turner tcpreplay http tcpreplay sourceforge net accessed august uhlig simulating interdomain traffic flow level technical report infonet-tr- namur institut informatique vahdat yocum walsh mahadevan kostic chase becker scalability accuracy large-scale network emulator proceedings symposium operating systems design implementation osdi boston december white lepreau stoller ricci guruprasad newbold hibler barb joglekar integrated experimental environment distributed systems networks proceedings symposium operating systems design implementation osdi boston december willinger taqqu sherman wilson self-similarity high-variability statistical analysis ethernet lan traffic source level ieee acm transactions networking february yajnik moon kurose towsley measurement modeling temporal dependence packet loss proceedings ieee infocom york march 
internet intrusions global characteristics prevalence vinod yegneswaran paul barford johannes ullrich fvinod pbg wisc jullrich sans abstract network intrusions fact life internet years case types internet-wide phenomena gaining insight global characteristics intrusions challenging paper address problem systematically analyzing set firewall logs collected months networks world wide part study general analysis focused issues distribution categorization prevalence intrusions data shows large quantity wide variety intrusion attempts daily basis find worms codered nimda sql snake persist long original release projecting intrusion activity data sets entire internet determine typically order intrusion attempts day increasing trend measurement period find sources intrusions uniformly spread autonomous system space deeper investigation reveals small collection sources responsible significant fraction intrusion attempts month patterns exhibit cliques correlated behavior show distribution source addresses non-worm intrusions function number attempts zipf law find daily timescales intrusion targets depict significant spatial trends blur patterns observed individual telescopes underscores necessity global approach intrusion detection finally investigate benefits shared information potential foundation automated global intrusion detection framework identify isolate intrusions greater precision robustness systems limited perspective categories subject descriptors computer communication networks security permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee sigmetrics june san diego california usa copyright acm protection computer communication networks network monitoring performance systems measurement techniques modeling techniques performance attributes general terms security measurement performance keywords network security wide area measurement internet performance monitoring introduction defending wide area networks intrusion form port scans attacks poses significant on-going challenge network operators backscatter analysis characterize denial-of-service dos activity internet moore show intrusions numerous rise widely reported internet worms code red nimda infected hundreds thousands nodes day required countless hours eradicate systems recent work staniford suggests intrusion activity date tip large iceberg significant steps counter risks methods technology securing networks intrusions continue evolve basic problems extremely challenging number reasons blackhats perpetrate intrusions continue find ingenious ways compromise remote hosts frequently make tools publicly size complexity internet including end host operating systems make continue vulnerabilities long time sharing information intrusion activity networks complicated privacy issues anecdotal reports specific port scanning methods attacks broad understanding intrusion activity global basis challenges current practices internet security rely heavily word-of-mouth reports intrusions security holes entities cert dshield focus paper development quantitative characterization intrusion activity global internet knowledge study broadly address problem intrusion logs firewalls sites distributed internet specifically data collected networks world wide month period dshield entries logs consist packets rejected firewalls portscan logs recorded network intrusion detections systems nids -primarily snort data set unique perspective global intrusion activity investigated range fundamental features intrusion activity evaluating data number dimensions specifically assess daily volume intrusion attempts sources destinations intrusion attempts specific types intrusion attempts results show volume daily intrusion attempts place massive scale million scans logs single day bursty fashion distribution sources destinations intrusions autonomous system perspective uniformly distributed internet distribution number scans source versus rank power law zipf law types worm activity intrusion attempts port varies approximately intrusion attempts worm signatures code red nimda remain prominent today year original release non-port intrusion attempts make surprisingly large percentage daily volume decomposition common scanning methods vertical horizontal prevalent methods coordinated stealthy scans widely step results project intrusion activity entire internet multiple perspectives addition perspective global intrusion activity assess extent intrusion activity single network representative intrusion internet projection method consists data data networks data networks resulting projections roughly order magnitude difference decreasing projection entire data set shows internet wide intrusion attempts order day ports simple squares fit data shows increasing trend projections finally investigate utility sharing information networks basis distributed intrusion detection infrastructure interested assessing number logs required establish source ips worst offenders information theoretic approach outlined assess marginal utility intrusion information collected multiple sites addition worst offenders assess utility additional logs understanding intrusion prevalence respect port targets find small random collections intrusion logs sufficient gaining consistent view worst offenders port targets result combined zipf result worst offenders potential figure global distribution provider autonomous systems dark light squares correspond ases represented represented grey lines shading direct connectivity ases sharing information networks means improving security thoughtful approach log aggregation required paper organized describe studies related work section section describe details data methods analysis section background material worms scans present results characterizations fundamental features intrusions section extend results entire internet section discussion shared information distributed intrusion detection system presented section summarize conclude section related work work moore motivated question prevalent denial-of-service attacks internet today work similar spirit address general question intrusions specifically focused dos activity staniford report recent worm activity code red nimda project possibilities worm threats future cowie present perspective work examining hour long periods widespread instabilities global bgp system july september describe idea worm induced traffic diversity unlike normal traffic experienced routers primary bgp instabilities work implications development configuration network intrusion detection systems systems developed deployed standard approach recognizing intrusion create table sample log entries dshield portscan logs date time hash scans src src port target target port tcp flags provider provider provider provider rule-based description configure nids task accurately identifying types intrusions remains challenging studies related darpa intrusion data sets data sets typically training sets test nids suffer synthetically generated relevance intrusion attempts today questioned data set serve benchmark creating validating training sets future honeynet infrastructure unique network dedicated understanding tools activities blackhat community network consists machines depolyed internet nids virtually unused lack network significantly reduces possibility false positives data generate packet received considered suspect project publishes weekly reports recorded attack traffic successful exploits finally number recent papers routerbased techniques traceback techniques face considerable challenges gaining operational deployment offer interesting possibilities identifying sources intrusions intrusion data set firewall logs portscans collected month period firewall adminstrators distributed globe basis study logs provide condensed summary lowest common denominator portscan activity obtained firewall ids platforms platforms supported include blackice defender cisco pix firewalls zonealarm linux ipchains portsentry snort approach significantly increases coverage reduces reliance individual ids interpretation events table illustrates format typical lowest common denominator log entry date time 
fields standardized gmt provider hash aggregation destination addresses belong administrative network table high level summary data study dataset obtained dshield research effort funded sans institute part internet storm center dshield objectives include detection analysis worms vulnerabilities notification isps exploited systems publishing blacklists worst offenders feedback submitters improve firewall configuration data comprised logs submitted diverse set networks includes full class networks full class sized networks smaller table monthly summary studied dshield logs month number scans number dest ips aug million million june million july million subnetworks highlights data source utility contribution detection early analysis codered figure skitter-based level graph shows global distribution providers submit dshield skitter graph unique visualizing autonomous systems ases based connectivity geography compromising provider identities distinct regions graph correspond autonomous systems based europe north america asia pacific clockwise order grey lines shading ases directly connected dark light squares correspond ases representative participants non-participant ases ases closer center constitute larger backbone providers telecommunication companies maximum connectivity stub ases populate periphery lowest common denominator approach dshield unique globally diverse stable data source simplicity generality approach makes analysis straightforward pitfalls considered logs provide information packet headers active connections degree vulnerability flooding malicious users misconfigured firewalls local broadcast traffic network games half-life result false positives instances filtered dataset analysis finally nids systems capture packets denial service attack spikes attack recorded finally portscans spoofed sources benefit individual spoofed portscan source response specialized situations spoofed portscan prove beneficial portscanner spoof-bounce documented motivation spoofing portscans create spurious background noise hide real sources correlating reports multiple sources effect spoofed sources marginalized real sources rise top works reality spoofed portscans form small fraction recorded portscans analyzing source ips portscans provide valuable insight geographic distribution malicious host subnets stepping stones background worms section provide background information major internet worms released years describe major port worms codered nimda important port scans form single dominant group scans accounting scans day port scans observed month period -june attributed codered nimda release date nimda sep port scans august dataset exclusively codered describe sql-snake worm affects microsoft sql servers codered codered exploited windows internet information server iis buffer overflow vulnerability released july worm named defaced web pages words hacked chinese worm operates distinct phases phase worm random generator search vulnerable targets phase month worm stops propogation launches denial service attacks http whitehouse gov website codered superficial similarities codered completely worm iis vulnerability codered derived string worm source code unlike codered worm memory resident reboot disinfect machine codered propogation mechanism generates random address mask size determines similarity infected probed time codered probes time codered probes random remainder time finally codered installs root level backdoor code remotely executed nimda nimda stands admin spelled backwards algorithm target detection follow rough probabilities address octets address matching octet completely random address figure shows number distinct sources scanning port months dataset graph shows predictable nature port scans strong day month characteristics sharp drop month confirms codered alive codered supposed destruct figure daily number distinct sources port scans -july end month hypothesis machines sufficient clock offset vulnerable machines reinfected producing slow start growth days sql-snake sql-snake detected worm scans open ms-sql servers run port default exploits machines default admin account password worm scans ips form randomly ranges random number equal primary function worm passwords related system information ixltd postone scan types broadly categorize scans types vertical scan defined sequential random scan multiple ports single address source hour period attempt survey vulnerabilities applies host strobe scans based original script-kiddie tools horizontal scan scan single source machines subnet aimed target port vulnerability case attacker searching machine running specific service care single machine paricular attacker recruiting peers launching larger distributed attacks coordinated scans scans multiple sources aimed port destinations subnet hour window confused sql slammer worm released jan avoiding class a-s byte weighted networks scanned frequently figure source distribution nimda codered left sql-snake middle non-worm scans called distributed scans scans aggressive active sources comprise collaborative peers working tandem stealth scans horizontal vertical scans initiated low frequency avoid detection key parameters definition include maximum threshold hour minimum threshold average interscan distance average interscan distance minimum threshold scan stealthy intended evade nids systems successive scans source seperated maximum interscan distance considered unrelated parts scanning episodes intrusion characteristics section provide high level summary intrusion distribution terms destination ports attack sources illustrate instances top sources depict striking correlated behavior project observed scan rates entire space identify temporal trends identify predictable perisistant behavior port sources finally investigate prevalence spatial trends scanning behavior port distribution monitoring destination port intrusion attempts internet proves effective method detecting exploits vulnerabilities dissemination worms cases codered nimda recent opaserv port instances heightened scanning rates observed days identified daily scanning volume top destination categories months july shown figure signicant component graphs port scans nimda coderedi linux slapper worm released summer part data visible spike port scans week directly attributable release sql-snake worm entry comprises scans gnutella kazaa edonkey peers port figure scan rates top destination port categories may-july figure persistance port scans may-july aggregates scans dominated windows netbios misconfiguration non-worm scans ssh ftp rpc dns icmp tend dominate scans subseven trojan leaves worm scans port misconfigured proxy servers redirect hide surfing behavior figure top ports months source distribution challenges study sources intrusions account disparities scanning behavior propogating non-worm traffic simplify classify scans categories port remaining worm traffic filtered traffic subfigure log-log plot source rank versus number monthly scans months figure daily scan rate top non-worm sources compared sources figure cluster top sources august similar on-off behavior figure cluster top sources june similar on-off behavior figure cluster top sources similar on-off patterns noise due windows netbios peer-to-peer scans future non-worm scans filtered dataset figure shows global distribution autonomous system level sources port port non-worm scans month june snapshot oregon route views table convert source addresses numbers graphs serve illustrate global reach uniformity attack sources victims cases category apparent distribution sql snake victims peak dense comparison port non-worm traffic responsible significant portion recorded scans persistence worm activity interesting aspect worm behavior persistence attacks wanted understand long subnet remained infected compute duration port scans month period based aggregates 
motivation matches codered nimda affinity local targets half lives categories days matches hours match matches biased individual sources send single portscan quick disinfection graph figure reveals linear relationship duration number infected subnets small slope majority subnets nimda codered free days significant number subnets continue infected extended periods top sources isolating understanding behavior worst offenders terms source crucial defending networks focus primarily non-worm intrusions section selfpropogating nature local affinity worm traffic makes similar analysis meaningful complicated figure plots rank source number scans popularity log-log scale decreasing linear slope plot power-law distribution leads conclude worst offender ips follow zipf law phenomenon internet similar characteristic sources fact responsible generating significant fraction non-worm scans observed figure plots daily figure distribution coordinated horizontal vertical scans month june figure distribution coordinated horizontal vertical scan episodes month june scan volume top sources total scans supports results graph shows top sources responsible rougly half non-worm scans account variability exhibited worst offender behavior focus scans emanating top sources month observing daily patterns top sources month reveals clusters correlated behavior clusters observed prominently top sources months consideration figures show clusters top sources august june sources days month similar levels activity bear locality space figure captures set ips display similar staggering behavior days similarity actual number scans periods striking points identical attack attack tool lauched disparate sources days results lead conclude attacks fact fairly common blacklisting worst offenders effective mechanism defending non-port intrusions conclude instances collaborative clusters effectively isolated investigated greater vigor identification scan types figures show daily distribution scan types month june horizontal scans account non-worm scans figure distribution stealth scans june minimum interscan thresholds seconds surpising revelation large proportion daily scans coordinated distributed sources coordinated scan rate tightly tied number coordinated scan episodes ratio scans epsode common ports scanned included port rpc port dns scans alternate webserver ports horizontal scans common vertical scans fewer horizontal scan episodes vertical scan episodes figure shows daily distribution observed stealth scans minimum thresholds seconds stealthy scans uncommon makeup small percentage vertical horizontal scans vertical scans exhibit stealthy behavior horizontal scans network telescopes network telescopes defined large chunks unused globally routable space passive monitoring telescopes serve mechanism measuring understanding internet attack behavior worms codered nimda examine potential characterizing patterns non-worm scans larger internet figures show observed daily scan rates entire class respect scan rates non-worm port scans reconfirm modeling port scans single class telescope works non-worm traffic modeled telescope exhibits significant variability unlike global rates suggests non-worm traffic inherent spatial components captured effectively globally distributed set telescopes global prevalence projection scanning patterns internet highly dynamic couple years emergence sophisticated worms intriguing questions answer volume scans changed year address question project daily scans observed dataset larger internet simply taking average scans set destination ips multias definition section figure daily scan rate non-worm scans observed class telescope respect rate june -august figure daily scan rate port scans observed class telescope respect rate june august plying number ips entire space assume uniformity test assume set provider networks distributed geographically space perspective reflects larger internet projection daily scan rates high day perform similar projections aggregates discern trends linear fits aggregates provide conservative estimates observed scan rates due sparse network representations motivation account ips receive scans entire day figures show results port non-worm scans port scan rates show decreasing trend due high levels codered incidences aug rates august shown explicitly figure steady small upward slope non-worm scan rates show increasing trend average daily number scans space jumps scans increase implications shared information number recent papers proposals address conalternately obtained portion routable space bgp table gross volume scans slightly reduced expect trends preserved figure projection port scans aug -july aggregates figure projection non-worm scans aug -july aggregates cept developing infrastructure pool resources order rapidly effectively respond attacks intrusions issues involved creation infrastructure understanding potential success fact synchronization timestamps daily firewall logs data set attempt evaluate rapidly attacks intrusions identified data collected central repository real time sites distributed internet leave future work data lend evaluating aspects developing composite views intrusion activity explore examples section information theoretic approach exploring extent refinement perspective provided additional data standard notion information theory relative entropy measure distributional similarity variables measure commonly estimated kullback-leibler distance metric extended measure marginal utility adding additional experimental results aggregate data set network topology measurements interest understanding addition intrusion logs aggregate data set improves resolution identifying worst offenders prevalence scans ports marginal utility metric quantitatively express information gained additional logs framework marginal utility evaluation presented figure utility additional subnets detecting worst offenders framework considers set identical aimed discovering common property experiments case experiments intrusion logs submitted distinct sites marginal utility defined reduction uncertainty resulting experiment added aggregate set alternatives calculating marginal utility presented considers reduction uncertainty online manner offline manner essential difference offline metric considers marginal utility perspective set experiments select offline metric analysis stated issues related order individual logs submitted formal definition marginal utility experiment defined equation smi log sni ranges outcomes sji probability outcome conclusion experiments total number experiments conducted identification worst offenders andprevalence target ports experiments evaluate marginal utility intrusion log sharing focuses issues identification worst offenders identification ports non-port frequently scanned intent examine issue general sense end conducted experiments selecting single day random data set select logs random random determine logs required consistent perspective offenders intrusion targets analysis network telescopes section intuition aggregation logs non-trivial number sources required gain representative perspective issues graph figure shows marginal utility additional logs identifying worst offenders analysis analysis port targets ordered logs number scan entries distribution information logs stable ordering provide sequence marginal utility measures follow decreasing figure utility additional subnets detecting top target ports trend figure larger networks case aggregation intrusion logs additional information added plot networks tells story non-negligible marginal utility metrics exist great deal graph indicating aggregations clear view worst offender distributions results marginal utility identifying target ports figure good deal variability marginal utility metrics log aggregations exhibit fairly small marginal utility metrics indicating stable perspectives port targets achieved small numbers logs summary conclusion paper present broad empirical analysis internet intrusion activity large set nids firewall logs collected month 
period found daily intrusion activity data highly variable ranging scans day examination source ips scans shows widely disbursed autonomous system space distribution attempts source power law breakdown scan types shows predictably large amount worm activity large amount scanning directed ports find non-worm scans horizontal scans daily number horizontal scan episodes typically lower vertical scan episodes gain insight global nature intrusions data project activity internet methods regard entire set data networks networks find total intrusion activity high day non-port scans increased approximately measurement period presented high level information theoretic evaluation potential data shared networks foundation distributed intrusion detection infrastructure analysis small collections logs smaller networks sufficient identify worst offenders popular port targets attacks analysis number implications intrusion activity takes place massive scale internet rise network admininstrators beware worst offenders typically depict coordinated behavior responsible significant fraction scanning activity strong argument developing blacklists employing ingress filtering current firewall nids systems provide clues attack patterns views limited vantage points significant benefit acheived collaboration benefit sensitive size peering group diversity steps work attempt refine means intrusion data distributed coordinated infrastructure interested effectively intrusion data collected real time positively identify intrusion exploits internet acknowledgements authors acknowledge claffy brad huffaker caida providing access otter graphing tool jim gast scripts converting numbers grateful helpful comments steve bellovin vern paxson stefan savage anonymous reviewers finally dshield providers contributions made analysis george bakos sqlsnake code analysis http incidents diary diary php paul barford azer bestavros john byers mark crovella marginal utility network topology measurements proceedings acm sigcomm internet measurement workshop san francisco november caida codered worms global threat http caida analysis security code red cert coordination center http cert james cowie andy ogielski premore yougu yuan global routing instabilities triggered codered nimda worm attacks http renesys projects bgp instability frederic cuppens alexandre miege alert correlation cooperative intrusion detection framework proceedings ieee symposium security privacy kevin van dixon spoof bounce http sans intrusion spoof php michalis faloutsos petros faloutsos christos faloutsos power-law relationships internet topology proceedings acm sigcomm robert gray entrophy information theory springer-verlag honeynet project enemy honeynets http project honeynet brad huffaker andre broido kim claffy marina fomenkov sean mccreary david moore oliver jakubiec visualizing internet topology macrosocopic scale http caida analysis topology core network xml eeye security microsoft iis buffer overflow advisory http eeye html research advisories html richard lippmann david fried isaac graf joshua haines kristopher kendall david mcclung dan weber seth webster dan wyschogrod robert cunningham marc zissman evaluating intrusion detection systems darpa off-line intrusion detection evaluation proceedings ieee security symposium mcafee virus alert http vil nai vil content htm david meyer oregon route views project http antc uoregon route views david moore network telescopes observing small distant security events http caida outreach presentations usenix sec david moore goeffrey voelker stefan savage inferring internet denial-of-service activity proceedings usenix security symposium vern paxson bro system detecting network intruders real time proceedings usenix security symposium marty roesch snort network intrusion detection system http snort stefan savage david wetherall anna karlin tom anderson practical network support traceback proceedings acm sigcomm alex snoeren craig partridge luis sanchez christine jones fabrice tchakountio stephen kent hash based traceback proceedings acm sigcomm stuart staniford james hoagland joseph mcalerney practical automated detection stealthy portscans journal computer security stuart staniford vern paxson nicholas weaver internet spare time proceedings usenix security symposium johannes ullrich dshield http dshield johannes ullrich mssql worm sqlsnake rise http incidents diary diary php yin zhang vern paxson detecting stepping stones proceedings usenix security symposium zipf human behavior principle least-effort addison-wesley cambridge 
roof paul wisconsin detailed services intractable purpose understanding topology application resource placement algorithms present method clustering generates forest trees ases branches tree form progressively smaller clusters branch consists ases author computer networks compnw pages dtd february disk article press e-mailaddress jgast wisc gast research supported anthony klug fellowship rrected deploying services broadly internet provide additional capabilities improve response times reduce network congestion reduce load speci crowded links ective placement resources performance measurement nodes proxy caches application layer multicast distribution points anomaly detecin paper address problem ective resource deployment client clustering autonomous system level argue deployment level cient services routing ases typically cient consideration problem router level makes ective placement resources support distributed services internet depends accurate representation internet topology routing representations autonomous system topology derived solely routing tables show subset connections cases missing connections discovered simple traceroutes addition erences customer-to-provider links peerto-peer links sibling-to-sibling links distinctions rst apply clustering algorithm simplify graph forest complementary mechanisms improve accuracy forest predictor packet paths mechanism recent insights packets unidirectionally customer provider interas links annotations added forest links peering versus customer provider links mechanism links trees remembering recently similar traceroute published elsevier keywords internet topology autonomous system clustering traceroute internet routing autonomous system relationships border gateway protocol introduction tion engines provide accurate representing internet jim gast computersciences universityof abstract unco computer science research supported nsf ani- front matter published elsevier doi comnet succinct forest barford ofwisconsin platteville usa madison usa elsevier locate comnet topologically packets roof routed building ning forest consisted steps step attheaslevel step construct initial forest based border gateway protocol bgp data felt important treat highly inter-connected core internet erently small isps edges core isps connections downhill packet takes unexpected hop trees opportunity compare depths step adding missing links alternate parent traceroute data shows links present bgp table data consistent observations jamin co-authors bgp sparse tree alternate parent gast barford computernetworks compnw pages dtd february disk article press rrected hundreds lower-tier isps core isps model clique call theforest oor oor extremely stable routing professionally managed fault tolerance high bandwidth forest oor centroid analogous strongly connected portion internet reported broido cla nodes grow tree consisting regional local leaf isps served core isp presumed path long distance packets leaf forest oor heavily connected oor destination tree destination leaf fig step assign accurately depth branch tree needed mechanism comparing trees traceroutes collected public traceroute servers adjust depth packet ows actual traceroutes adhere pattern noticed gao packets uphill laterally unco fig global internet viewed breakthrough dramatically improve forest ironically additions make longer forest trees add extra link customer alternate provider based preponderance traceroutes training set tier-n nodes parents trees minigraphs links connect mini-graphs mini-graphs depend unidirectional notation avoid cycles result graph correctly classi traceroutes test set relatedwork separate internet erent regions highly inter-connected core information non-local links applied gaoc observations case traceroute results erentiated customer-toprovider links sibling-to-sibling links allowed add extra link node clique trees neighbors finally found gap networks compnw pages dtd february disk article press rrected versus periphery hierarchical trees stated broido cla call core portion giant component include inside large number nodes as-level view internet detail retain operational tool as-level view obtained publicly bgp tables oregon route-views early researchers assumed ases linked numbers adjacent path jamin co-authors showed actual links show bgp gao rexford made substantial improvement as-graph accuracy noticed customer-to-provider links create hierarchy gao identify peerto-peer sibling-to-sibling relationships autonomous systems proposed mechanism inferring relationships paths bgp tables subramanian propose level classi cation asc apply inter-as relationships discover asc dense core transit core outer core regional customer classi cations helpful understanding tra internet expand insights constructing topology depend routing data ect traceroutes simulate vantage points initial work clustering clients proxy placement nha work process traceroute generate tree graph client accesses addresses collected web serverc logs proxies tree erent algorithms ects reduction server load network tra evaluated recent work krishnamurthy wang provide mechanisms clustering clients router level number recent papers addressed issue proxy placement based assumptions underlying topological structure internet describe optimal dynamic programming algorithm placing multiple proxies tree-based topology jamin examine number proxy gast barford computer unco placement algorithms assumption hop list ases ases visualize trees single screenful information declared ases arbitrary backbone broido cla study ip-level as-level found giantcomponent nodes chose backbone small service placement algorithm detail applications forest representation broido cla characterization nitions clustering algorithm neighbor sets roof underlying topological structure tree results show quickly diminishing bene placing additional mirrors ned proxies service client requests directed sophisticated computationally intensive techniques qiu evaluate ectiveness number graph theoretic proxy placement techniques proxy placement considers distance request load performs factor random proxy placement greedy algorithm mirror placement simply iteratively chooses node site mirror performs treebased algorithm findingthecentroid determine strongly connected component composite bgp table oregon route-views computed portion list reachable hops varying ases reach bulk internet ases hops -hop results helpful nodes high -hop list gained height solely virtue well-connected distance function acts length link nitions rest section depth shortest distance centroid node measured hops neighbor immediately precedes path setofneighbors denoted outdegree candidate parent depth depth set candidate parcloser backbone uphill edges eliminate uphill edges nearest candidate parent links nodes depth initially assumed siblings links hop farther backbone initially assume customers initial annotations inaccurate inaccuracies stem bgpc inability links mistaken inferences side link customer versus provider gao gast barford computernetworks compnw pages dtd february disk article press rrected initialannotations remaining neighbors consist nodes hop farther backbone depth hop closer explicitly assume edges packet depth depth depth depth distances original graph node rst compute depth variation primc algorithm nodes directly connected backbone node depth nodes depth depth chooses nearest parent nearest min fdist ents denoted hammingdistance number neighbors exclusive dist unco fig walk-through roof downhill links comparing outdegree parent child outdegree parent ratio bigger child labeled link customer-to-provider link traceroute data discover peering demonstration algorithm clarify fig shows numbered designated belonging backbone declared depth links labeled nodes newly discovered nodes labeled depth moved unlabeled set labeled set nodes labeled found hops backbone remove redundant uphill links candidate parents hamming distance neighbors linked neighbors linked closest 
candidate parent -toas link labeled link removed ects assumption -to-as true link -to-as backup link similarly assigned final trees clustering algorithm customer link sibling peer link depth link packets closer backbone included tree subsequent evidence section tells important link added back annotatingtheasforest test forest ran traceroutes list traceroute servers route servers uphill customer provider laterally sibling sibling reaches highest point needed reach sibling peer upstream destination packet downhill provider customer reaches destination fig shows phenomenon gao customer cust pay money isp receive packets destined isp annotated graph link cust cust completely unknown nodes assume isp send packet gast barford computernetworks compnw pages dtd february disk article press rrected glass sites traceroute chose servers erent hops centroid traceroute destinations chose representative address hop fails reach working address prior hop shows desired usable trace case traceroutes end intended week march performed traceroutes number comparable studies smaller study study repetitions routes pattern hoping identi gao packet unco fig customers provide roof isp cust advertised willingness packet cust paying isp isp transit packet start end cust accept gaoc distinction peer sibling makes terms accurate precise ases peering relationship transits tra transits tra ases provider transits tra transit tra ases sibling relationship transits tra transits tra purpose peering relationship cust cust save cost latency passing packets isp cust advertise cust addresses important isp unaware link isp gave packets addressed cust cust transit providers paying delivery cost cust free ride link cust cust illustrates sibling relationship case cust advertises gladly accept packets isp wanted send packet cust addresses packet correctly researchers previously noted signi number connections hidden bgp tables fig shows results unique complete traceroutes applied forest derived solely bgp information majority paths gast barford computernetworks compnw pages dtd february disk article press rrected path cust mechanisms tracing route packets distinguish sibling relationships peering relationships treat connections depth sibling relationships line traceroute translated router link address number centralized bgp table results skip packets lost response router routerc interface address belongs end link route aggregation practical limitations bgp translation address wrong finally ispc globally routable addresses links inside domain miss ingress completely miss translated path understate length true path folded trace traceroute result appeared uphill downhill hop point forest provisional labels categorize link customer provider link sibling link traceroute opportunity improve annotations forest fig shows evidence fold node uphill node path started downhill unco fig seemingly folded path implies roof hops long small number paths long hops small number addresses found routing loops inter-as level folded traces paths appeared uphill downhill hop traces annotations hops incorrect folded traces paths violate uphillto-downhill laws contained links forest opportunity adjust depth annotations hop compare depth depth cases forest link finally predicted traces paths contained hops forest fig shows paths depth values ned case pause learning time traceroute shows uphill hop packet reached pinnacle current hypothesis algorithm test hop traceroute imagine trace thought downhill thought uphill folded trace violates annotations made links annotated link choose closest instance link evidence traceroute false positive alternatively preventing downhill side false negative special case easily handled choose generalization specialization select link refuted depths incorrect gast barford computernetworks compnw pages dtd february disk article press path accuracy bgp data unco rrected evidence track failure count success count annotation total evidence exceeds learning rate threshold assume cases render judgment link paths hops fig early forest predicted tiny portion paths hops learning depths siblings traceroutes fig adjusting annotations graph reduced number folded folded predicted roof error proportion err iferr err change setting depth depth alternatively downhill link incorrect set depth depth changed non-folded routes traceroute folded folded predicted folded implausible paths improved prediction roof depth correct annotations links traceroute results showed links found bgp tables local bgp speakers routeviews choose bgp speakers private peerings exchange points nancial arrangements provide transit discovered links give opportunity compare depths trees algorithm found exchange points russian universities federal network quickly depth hops backbone milan interconnection point rose times depth links fig shows results learning depths datapoint shows average runs traceroutes -fold cross-validation higher values require larger data set xed mistakenly labeled customer provider paths previously folded paths non-folded surprised number correctly predicted paths improved explain improvement algorithm reversed customer provider pairs improvements unidirectional customer provider links upgraded bidirectional sibling links future work compare gaoc static bgp-based annotations dynamic annotations based traceroutes addinglearnedrelatives cases traced routes showed links present bgp-based forest fig traceroute results showed links bgp hops gast barford computernetworks compnw pages dtd february disk article press rrected paths keeping recent alternate parent unco fig results folded folded predicted nal forest number learned siblings depth graphs tech rep caida http caida outreach papers topologylocal subramanian agarwal rexford katz characterizing internet hierarchy multiple vantage networks compnw pages dtd february disk article press rrected fig shows results allowing node forest list siblings single alternate uphill link considered sophisticated techniques discovering discovered links satis simplest technique saving recent ective reacted dynamically results average -fold cross validation training sets traces test sets traces links hops noticeably higher error rates shorter paths test set traces correctly uphill-then-downhill pattern composed links contained graph conclusions paper methods creating forest based bgp routing data ned paths learned traceroutes mechanism starts algorithm nding centroid highly connected nodes backbone internet grows tree nodes based bgp information depend subtle clues inside bgp table learn relationships links mechanism learns links traceroute results entire mechanism suitable operationally depend proprietary bgp-based graph decided add recent alternate parent trace showed unexpected uphill hop fig traceroute showed immediately uphill common case exchange points felt compelled incorporate representation limited learning identifying single alternate parent saved alternate parents program eventually learned routes number correct paths grow fast made subsequent service placement algorithm ine ective limit gast barford computer unco information large collections route data points proceedings ieee infocom http ieee-infocom papers pdf nha trace analysis applications performance enhancements distributed information systems thesis boston krishnamurthy wang network aware clustering web clients proceedings acm sigcomm stockholm sweden gao inferring autonomous system relationships internet ieee global internet symposium http www-unix ecs umass gao ton chang govindan jamin shenker willinger capturing representative as-level internet 
topologies acm sigmetrics http topology eecs umich archive views oregon http antc uoregon routeviews gao rexford stable internet routing global coordination proceedings acm sigmetrics roof resulting forest computationally tractable service placement found mechanism learned accurate forest gleaned bgp tables improving prediction accuracy tested traced routes acknowledgements authors winfred byrd work asroute discussions limitations traceroute results thomas hangelbroek initial implementation approximate centroid algorithm matlab amos ron insight adjacency matrices compute authors grateful anonymous reviewers helping improve paper broido cla internet topology connectivity roof golin italiano deng sohraby optimal placement web proxies internet proceedings ieee infocom york jamin jin kurc raz shavitt constrained mirror placement internet proceedings ieee infocom anchorage alaska qiu padmanabhan voelker placement web server replicas proceedings ieee infocom anchorage alaska prim shortest connection networks generalizations bell system technical journal paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france govindan tangmunarunkit heuristics internet map discovery proceedings ieee infocom ieee tel aviv israel paul barford received electrical engineering illinois champaign urbana computer science boston assistant professor computer science wisconsin madison founder director wisconsin advanced internet laboratory research interests design measurement modeling wide area networked systems network protocols gast barford computernetworks compnw pages dtd february disk article press rrected http icsi berkeley ramesh papers html mill system logic ratiocinative inductive connected view principles evidence methods scienti investigation parker london jim gast received computer science illinois champaign urbana masters computer science wisconsin madison assistant professor computer science software engineering wisconsin platteville research interests internet topology storage networking active wireless networking security unco 
evaluating modeling window synchronization highly multiplexed flows jim gast paul barford wisconsin madison computer science west dayton street madison fjgast pbg wisc abstract paper investigate issues synchronization highly aggregated flows found internet backbone understanding phenomenon important leads reduced network utilization hypothesis regularly spaced loss events lead window synchronization long lived flows argue window synchronization common internet previously reported support argument evidence existence evaluation characteristics periodic discrete congestion events active probe data gathered surveyor infrastructure connections experience loss events periodic aggregate offered load neighboring links rises falls cadence loss events connections cwnd values grow approximately rate loss event period synchronize cwnd additive increases multiplicative decreases find window synchronization scale large numbers connections depending diversity roundtrip times individual flows simulation investigate conditions window synchronization occurs model presented predicts important characteristics loss events window synchronized flows including quantity intensity duration model effectively explains prevalence discrete loss events fast links high multiplexing factors queue buildup queue draining phases congestion show model scales common traffic engineering tasks multi-hop level introduction research network congestion control focused ways transport protocols react packet losses prior analyses frequently conducted simulation environments small numbers competing flows paths single low bandwidth bottleneck contrast modern routers deployed internet easily handle thousands simultaneous connections hops capacities billion bits packet loss major mechanism communicating congestion interior network characteristics losses bursts losses remain important poisson models rejected fractals selfsimilarity exploited ability research supported anthony klug fellowship computer science research supported nsf aniexplain internet traffic statistics models show large timescale traffic variability arise exogenous forces composition network traffic arrives endogenous forces reaction senders feedback interior traffic engineering tradition size links accommodate load factor large variability problem estimating large variability cao ways estimate variability suggests models scale number-of-activeconnections nac large nac increases packet interarrival times tend independence study divides time equal-length consecutive intervals watches packet counts interval study coefficient variation standard deviation divided pnac lrd unchanging sense autocorrelation unchanging nac increases variability smaller relative practical terms links utilization average measured minute period considered links average nac cao datasets include link ocmbps average nac traffic engineering models implicitly assume nac values inappropriate fast links model presented paper purely endogenous view simplicity explores oscillations caused reactions sources packet marking dropping time packet dropped marked sender packet cuts sending rate congestion window cwnd multiplicative decrease inherent delay feedback transit congested link give drops marks senders congestion successfully eliminated connections enjoy long loss-free period grow cwnd additive increase connections grow shrink cwnd synchrony global synchronization referred window synchronization significant effort reduce oscillations caused synchronization random early detection red red break deterministic cycle detecting incipient congestion dropping marking packets probabilistically slow links effectively eliminates global synchronization comprehensive study window synchronization fast links made key understanding window synchronization understanding congestion events objective paper develop mechanism investigating duration intensity periodicity congestion events model based identifying distinct portions congestion event predicting shape congestion events gap congestion model developed perspective queue sizes congestion events shape call shark fin packets pass congested link packet dropping episode dropped end full queue shape familiar analytical simulation studies congestion characteristics measurement studies robustly reported data collected surveyor infrastructure shows evidence shark fins exist internet distinct spikes specific queue delay values paths pass links validation required highly accurate one-way delay measurements month test period wide geographic scope explore implications congestion events regularly spaced connections shrink congestion windows cwnd cadence congestion events cwnd slowly grow back events effect well-known saw-tooth graphs cwnd individual long-lived connections brought phase forming flock set connections windows synchronized viewpoint neighboring link flock offer aggregate load rises reaches ceiling original hop entire flock lower cwnd flocking explain synchronization larger collections connections prior study synchronization phenomena explicit congestion notification ecn promises significantly reduce delay caused congestion feedback paper assume marking packet equivalent dropping packet case sender packet respond slowing refer dropping packet marking packet preferable investigate spectrum congestion issues related model series simulations explore accuracy model broad range offered loads mixtures rtt multiplexing factors congestion event statistics simulation compared output model demonstrate improved understanding duration congestion events model easily scaled paths multiple congested hops interactions traffic distinct congestion areas extending model large networks promises give answers variety traffic engineering problems capacity planning performance analysis latency tuning rest paper organized section describe related work section present surveyor data enabled evaluation queue behavior insitu section introduces notion aggregate window group connections shows aggregate reacts single congestion event section presents simulations show window synchronization bond connections flocks flock behaves aggregate modeled single entity section present model accurately predicts interactions multiple flocks congested link outputs include queue delays congestion intensities congestion durations sample applications traffic engineering enumerated finally section presents conclusions suggests future work related work packet delay loss behavior internet widely studied examples include established basic properties end-to-end packet delay loss based analysis active probe measurements internet hosts work similar terms evaluating aspects packet delay distributions paxson provided studies packet dynamics wide area work treats broad range end-to-end behaviors sections relevant work statistical characterizations delays loss important aspects scaling correlation structures local wide area packet traces established feldmann investigate multifractal behavior packet traffic simulation-based work identifies important scaling characteristics packet traffic short long timescales yajnik evaluated correlation structures loss events developed markov models temporal dependence structures recent work zhang assesses aspects constancy delay loss rates number widely deployed measurement infrastructures actively measure wide area network characteristics infrastructures variety active probe tools measure loss delay connectivity routing end-to-end perspective recent work pasztor veitch identifies limitations active measurements proposes infrastructure global positioning system gps means improving accuracy active probes infrastructure similar surveyor gather data study internet topology routing characteristics widely studied examples include studies inform work respect structural characteristics end-to-end internet paths variety methods employed model network packet traffic including queuing auto-regressive techniques models parameterized recreate observed packet traffic time series parameters models relate network properties models tcp throughput developed models rtt packet loss rates predict throughput based characteristics tcp operating regimes work simpler parameters directly tuned traffic engineering fluid-based analysis determining capacity network multiple congested links complex problem misra proposed fluidbased analysis employing stochastic differential equations model flows water pressure water pipes fixed-point 
approach focuses predicting router average queue lengths methods fast scenarios capacity planning performance analysis methods input parameters set link capacities buffer capacities set sessions session takes path includes ordered list links model essentially input parameters expect results models complementary results suggest traffic engineers fluid-based analysis compare window synchronization model expectation fluidbased analyses overstate capacity model understate forms global synchronization tendency traffic synchronize reported floyd jacobson study found resonance packet level packets arrived gateways equal senders deterministic queue management algorithms drop-tail systematically discriminate connections paper formed earliest arguments favor red form global synchronization synchronization losses router drops consecutive packets short period time fast geometric approach improving active packet loss measurement joel sommers paul barford nick duffield amos ron abstract measurement estimation packet loss characteristics challenging due rare occurrence typically short duration packet loss episodes active probe tools commonly measure packet loss end-toend paths analysis accuracy tools impact network objective study understand measure packet loss episodes accurately end-to-end probes begin testing capability standard poisson-modulated end-to-end measurements loss controlled laboratory environment routers commodity end hosts tests show loss characteristics retransmit reported added poisson-modulated tcp probe tools mitigate inaccurate effects range form traffic global conditions motivated synchronization observations synchronization introduce retransmissions algorithm packet tcp loss senders measurement retransmit dropped packets designed virtually overcome deficiencies unison standard contrast window poisson-based tools synchronization specifically alignment method entails congestion probe window experiments saw-tooth behavior follow packet geometric level distribution resonance enable shown explicit extend trade-off accuracy impact connections qui zhang network enable keshav found accurate global measurements synchronization standard poisson result probing small number rate connections evaluate share capabilities bottleneck slow methodology link experimentally large developing buffer implementing independent prototype mixture tool called rtts badabing increasing experiments number demonstrate connections prevents trade-offs impact resonance window network synchronization measurement opposite accuracy window show synchronization badabing scales reports large loss numbers characteristics connections accurately broad mixture traditional loss rtts measurement prevents tools index resonance terms iii active surveyor measurement data badabing network characteristics congestion queuing network empirical probes data study collected surveyor infrastructure surveyor consists nodes world support work ietf performance metrics working group data set active one-way delay measurements period -juneto -septeach surveyor nodes maintains measurement session node session consists initial handshake agree parameters long stream byte probes random intervals poisson distribution interval pdf queuing delay microseconds probes wisc -augto -augcolo utah ncsa bcnet wash fig probability density queuing delays paths packets milliseconds packets typep udp packets bytes sender emits packets gps-derived timestamp sequence number rfc destination node gps records one-way delay time packet probe time day reported precise microseconds probe delay accurate microseconds data gathered sessions longer hours delay data supplemented traceroute data separate mechanism traceroutes full mesh approximately minutes study traceroute data find sequence days fewest route deriving propagation delay surveyor database entire delay probes begin compare delay times paths subtract propagation delay fundamental path session assume smallest delay session propagation delay source destination route remaining delay assumed queuing delay sessions discarded traceroutes changed set contiguous packet loss introduction measuring analyzing network traffic dynamics end hosts provided foundation development network protocols systems importance understanding packet loss behavior loss significant impact performance tcpand udp-based applications efforts network engineers operators limit loss eliminated due intrinsic dynamics scaling properties traffic packet switched network network operators ability passively monitor nodes network packet loss routers snmp end-to-end active measurements probes provide equally valuable perspective conditions application traffic experiencing paths commonly tools probing end-to-end paths measure packet loss resemble ubiquitous ping utility ping-like tools send probe packets icmp echo packets target host fixed intervals loss inferred sender response packets expected target host received time period generally speaking active measurement approach problematic discrete sampling nature probe process accuracy resulting measurements depends characteristics interpretation sampling process characteristics underlying loss process widespread mention literature tune calibrate active measurements packet loss improve accuracy interpret resulting measurements approach suggested well-known pasta principle networking context tells poisson-modulated probes provide unbiased time average measurements router queue state idea suggested foundation active measurement end-to-end delay loss asymptotic nature pasta means applied practice higher moments measurements considered determine validity reported results closely related issue fact loss typically rare event internet reality implies measurements long time period average rates poisson-modulated probes high order report accurate estimates timely fashion increasing probe rate lead situation probes skew results trade-offsin packet loss measurementsbetween probe rate measurement accuracy impact path timeliness results goal study understand accurately measure loss characteristics end-to-end paths probes interested specific characteristics packet loss loss episode frequency loss episode duration study consists parts empirical evaluation prevailing approach development estimation techniques based experimental design probing techniques simple validation tests iii empirical evaluation methodology begin testing standard poisson-modulated probing controlled carefully instrumented laboratory environment consisting commodity workstations separated series routers background traffic end hosts levels intensity generate loss episodes enabling repeatable tests range conditions setting ideal testing loss measurement tools combines advantages traditional simulation environments tests wide area simulation high level control ability compare results ground truth tests wide area ability loss processes actual router buffers queues behavior implementations tools commodity end hosts tests reveal important deficiencies simple poisson probing individual probes incorrectly report absence loss episode successfully transferred loss episode underway suited measure loss episode duration limited measurement periods observations weaknesses standard poisson probing motivate part study development approach end-to-end loss measurement includes key elements design probe process geometrically distributed assesses likelihood loss experienced flows path reporting packet losses probe process assumes fifo queues path droptail policy design experimental framework estimation techniques directly estimate duration loss episodes estimating duration individual loss episode estimators proved consistent mild assumptions probing process provide simple validation tests require additional experimentation data collection statistical assumptions underly analysis finally discuss variance characteristics estimators show frequency estimate variance depends total number probes emitted loss duration variance depends frequency estimate number probes part study involves empirical evaluation loss measurement methodology end developed one-way active measurement tool called badabing badabing sends fixed-size probes intervals measurement host collaborating target host target system collects probe packets reports loss characteristics period time compare badabing standard tool loss measurement emits probe packets poisson intervals results show tool reports loss episode estimates accurately number probes show badabing estimates converge underlying loss episode frequency duration characteristics important implication results methodology tool wide-area studies packet loss characteristics enables researchers understand trade-offs accuracy impact tool self-calibrating sense report estimates poor practical applications include path selection peerto-peer overlay networks tool network operators monitor specific segments infrastructures related work studies packet loss behavior internet bolot paxson evaluated end-to-end probe measurements reported characteristics packet loss selection paths wide area yajnik evaluated packet loss correlations longer time scales developed markov models temporal dependence structures zhang characterized aspects packet loss behavior work reported measures constancy loss episode rate loss episode duration loss free period duration loss rates papagiannaki sophisticated passive monitoring infrastructure inside sprint backbone gather packet traces analyze characteristics delay congestion finally sommers barford pointed limitations standard end-to-end poisson probing tools comparing loss rates measured tools loss rates measured passive means fully instrumented wide area infrastructure foundation notion poisson arrivals time averages pasta developed brumelle formalized wolff adaptation queuing theory ideas network probe context measure loss delay characteristic began bolot study extended paxson recent work baccelli analyze usefulness pasta networking context relevance work paxson recommendation poisson-modulated active probe streams reduce bias delay loss measurements studies include loss measurements estimate network properties bottleneck buffer size cross traffic intensity internet performance measurement analysis efforts resulted series rfcs packet loss measurements conducted rfcs devoid details tune probe processes interpret resulting measurements guided paxson recent work advocates rigorous calibration network measurement tools zing tool measuring end-to-end packet loss direction participating end hosts zing sends udp packets poisson-modulated intervals fixed rate savage developed sting tool measure loss rates forward reverse directions single host sting clever scheme manipulating tcp stream measure loss allman demonstrated estimate tcp loss rates passive packet traces tcp transfers close sender related study examined passive packet traces middle network network tomography based multicast unicast probes demonstrated effective inferring loss rates internal links end-to-end paths iii definitions loss characteristics factors contribute packet loss internet describe issues detail foundation understanding active measurement objectives environment modeled set flows 
pass router compete single output link bandwidth bout depicted figure aggregateinput bandwidth bin greater shared outputlink bout order loss place round trip time flows seconds router configured bytes packet buffers accommodate traffic bursts typically sized order inb outbn simple system model flows input links aggregate bandwidth bin compete single output link router bandwidth bout bin bout output link seconds buffer capacity time capacitybuffer lengthqueue dba evolution length queue time queue length grows aggregate demand exceeds capacity output link loss episodes begin points maximum buffer size exceeded loss episodes end points aggregate demand falls capacity output link queue drains simple system model loss characteristics consideration assume queue operates fifo manner traffic includes mixture shortand long-lived tcp flows common today internet fluctuate time figure illustration occupancy buffer router evolve aggregate sending rate flows exceeds capacity shared output link output buffer begins fill effect positive slope queue length graph rate increase queue length depends number sending rate source loss episode begins aggregate sending rate exceeded bout period time sufficient load bytes output buffer router times figure loss episode ends aggregate sending rate drops bout buffer begins consistent drain times figure typically tcp sources sense packet loss halve sending rate simply number competing flows drops sufficient level case duration loss episode related depending loss sensed timeout fast retransmit signal define loss episode duration difference start end times definition model loss episodes simplistic dependent behaved tcp flows important measurement method robust flows react congestion tcp-friendly fashion definition loss episodes considered routercentric view end-toend flow including probe stream loses packet senses lost packet contrasts prior work discussed losses individual groups probe packets words methodology loss episode begins probability packet loss positive episode transient periods packet loss ceases occur resumption packet loss episode ends probability packet loss stays sufficient period time longer typical rtt offer definitions packet loss rate router-centric loss rate number dropped packets output link router period time number successfully transmitted packets link period time define router-centric loss rate end-to-end loss rate define end-to-end loss rate manner router-centric loss-rate caveat count packets belong specific flow interest traffic generator traffic generatorhosts hosts dag monitor host probe sender hop identifier propagation delayemulator millisecondseach direction gegeoc cisco cisco cisco adtech cisco cisco laboratory testbed cross traffic scenarios consisted constant bit-rate traffic long-lived tcp flows web-like bursty traffic cross traffic flowed routers hop probe traffic flowed optical splitters connected endace dag passive packet capture cards testbed hops hops probe traffic flowed left loss episodes occurred hop important distinguish notions loss rate packets transmitted maximum rate bout loss episodes result period router-centric loss rate non-zero flows lose packets end-toend loss rates observation central study bears directly design implementation active measurement methods packet loss consequence important consideration probe process deal instances individual probes accurately report loss distinguish true loss episode state probe-measured observed state refers router-centric end-to-end congestion state intimate knowledge buffer occupancy queueing delays packet drops information implicit queue length graph figure ideally probe-measured state reflects true state network probe accurately report braceleftbigg loss episode encountered loss episode encountered satisfying requirement problematic noted packets successfully transmitted loss episodes address issue probe process heuristically vii finally define probe consist closely spaced back-to-back packets vii reason multi-packet probes packets passing congested link subject loss constructing probes multiple packets enables accurate determination made laboratory testbed laboratory testbed experiments shown figure consisted commodity end hosts connected dumbbell-like topology comprised cisco gsr routers probe background traffic generated received end hosts traffic flowed sending hosts separate paths gigabit ethernet separate cisco gsrs hop figure transitioned links configuration created order accommodate measurement system probe background traffic multiplexed single link hop figure formed bottleneck loss episodes place hardware-based propagationdelay emulator link add milliseconds delay direction experiments configured bottleneck queue hold approximately milliseconds packets packets exited link cisco gsr hop figure passed receiving hosts gigabit ethernet probe traffic generator hosts consisted identically configured workstations running linux workstations ghz intel pentium processors ram intel pro network cards dual-homed management traffic separate network depicted figure important aspects testbed measurement system establish true loss episode state ground truth experiments optical splitters attached ingress egress links hop endace dag passive monitoring cards capture traces packets entering leaving bottleneck node dag cards extensively studies capture high fidelity packet traces live environments deployed sprint backbone nlanr infrastructure comparing packet header information identify packets lost congested output queue experiments fact measurements packets entering leaving hop time-synchronized order single microsecond enabled easily infer queue length queue affected probe traffic tests environment ideally suited understanding calibrating end-to-end loss measurement tools laboratory environments weaknesses typically ns-type simulation abstractions measurement tools protocols systems weaknesses wide area situ experiments lack control repeatability complete high fidelity end-to-end instrumentation address important issue testing tool representative traffic conditions combination harpoon traffic generator iperf evaluate tool range cross traffic loss conditions evaluation simple poisson probing packet loss begin laboratory testbed evaluate capabilities simple poisson-modulated loss probe measurements zing tool zing measures packet delay loss direction end-to-end path zing sender emits udp probe packets poisson-modulated intervals timestamps unique sequence numbers receiver logs probe packet arrivals users probe rate probe packet size number packets flight evaluate simple poisson probing configured zing parameters ran tests byte payloads byte payloads determine duration experiments selected period time limit variance loss rate estimator var loss rate number probes conducted separate experiments evaluation simple poisson probing test measured frequency duration packet loss episodes definition loss episode series consecutive packets possibly length lost experiment infinite tcp sources receive windows set full size bytes packets figure shows time series queue occupancy portion experiment expected synchronization behavior tcp sources congestion avoidance samples local minimum larger propagation delay peaks queuing delay distribution figure shows variety paths common source share ocinterface mbps beginning common y-axis graph represents number probes experienced oneway delay adjusted propagation delay counts normalized size curves easily compared histogram bin microseconds delay wide conjecture full queue out-bound link leaving site milliseconds long probes empty queues congestion events full queues congestion events figure included put pdf context cumulative distribution function cdf shows heads distributions differ paths travel cdf queuing delay microseconds probes wisc -augto -augcolo utah ncsa bcnet wash fig cumulative distribution queuing delays experienced paths pdf queuing delay microseconds probes argonne -junto -separl colo oregon penn utah fig probability density queuing delays paths share long prefix numbers queues routers average queue depths link speeds queue delay values cdf suspected pdf showed peaks tail similar width height figure shows distinctive peak pdf tail phenomenon unique rare paths traverse congested hops peak queuing delay distribution path argonne arl shows diverges paths pass congested link signature lies note paths argonne show evidence peak shown figure share congested hop characteristic signature potential peaks peaks pdf caused measurement anomalies congestion events proposed paper hidden non-queuing source destination path path hidden caused load balancing layer load-balancing paths propagation delays difference peak isps introducing intentional delays rate limiting traffic shaping delays involved link cards busy task routing probability congestion window size congestion duration rtt drop loss loss loss fig showing probability losing packet single congestion event function cwnd table updates called coffee break effect data rule possibility measuring phenomenon queuing delay intuition phenomenon manifest slopes plateaus delay distribution peaks hidden source destination caused user level processes sudden gps reported time time takes write record disk milliseconds surveyor software designed non-blocking mechanisms long delays occasionally processes out-of-range delays surveyor infrastructure safeguards discard packets hidden delay information window size model construct cwnd feedback model predicts reaction group connections congestion event model simplifies aggregate connections single flock predicts reaction clear experiment run period minutes enabled zing measure loss rate standard deviation results experiment infinite tcp sources shown table table shows zing performs poorly measuring loss frequency duration scenario probe rates instances consecutive lost packets explains inability estimate loss episode duration set experiments iperf create series approximately constant duration milliseconds loss episodes spaced randomly exponential intervals seconds minute period time series queue length portion test period shown figure results experiment randomly spaced constant duration loss episodes shown table table shows zing measures loss frequencies 
durations closer true values final set experiments harpoon create series loss episodes approximate loss resulting web-like traffic harpoon configured briefly increase load order induce packet loss average seconds variability traffic produced harpoon complicates delineation loss episodes establish baseline loss episodes compare found trace segments events packet losses queuing delays packets losses milliseconds milliseconds maximum ran test minutes portion time series queue length shown figure results experiment harpoon web-like traffic shown table iii measuring loss frequency probe rate results close match true frequency loss episode duration results poor probe rate consecutive losses measured probe rate instances consecutive losses lost packets results zing experiments infinite tcp sources frequency duration std dev seconds true values zing zing results zing experiments randomly spaced constant duration loss episodes frequency duration std dev seconds true values zing zing iii results zing experiments harpoon web-like traffic frequency duration std dev seconds true values zing zing probe process model results experiments previous section show simple poisson probing generally poor measuring loss episode frequency loss episode duration results deeper investigation reasons deficiencies loss episode duration measurement form foundation measurement process general setup methodology involves dispatching sequence probes consisting closely spaced packets aim probe obtain snapshot state network instant probing record probe encountered time seconds queue length seconds queue length time series portion experiment infinite tcp sources time seconds queue length seconds queue length time series portion experiment randomly spaced constant duration loss episodes time seconds queue length seconds queue length time series portion experiment harpoon web-like traffic time segments grey loss episodes queue length time series plots background traffic scenarios loss episode evidenced loss sufficient delay packets probe vii probes organized term basic experiments comprises number probes rapid succession aim basic experiment determine dynamics transitions congested uncongested state network beginnings endings loss episodes show enables estimate duration loss episodes full experiment comprises sequence basic experiments generated rule sequence terminated number basic experiments duration open-ended adaptive fashion estimates desired accuracy loss characteristic obtained accuracy determined impossible formulate probe process discrete-time process decision fundamental limitation concerned measuring loss episode dynamics ensure interval discrete time slots smaller time scales loss episodes steps explanation loss measurement method experimental design subsequent estimation present basic algorithm version model designed provide estimators frequency time slots loss episodes present duration loss episodes frequency estimator unbiased weak statistical assumptions estimators consistent sense converge respective true values number measurements grows describe improved algorithm version design loss episode estimators weaker assumptions requires employ sophisticated experimental design version model insert mechanism estimate correct bias estimators basic design describe simple aggregate passes congestion assume packet dropped time sender unaware loss reaction time capacity link sender react losses packets depart period packets arriving rate consistently exceeds departure rate important note arrival rate trained prior congestion events arrival rate grew slowly reached level slightly higher departure rate packet dropped subsequent packets queue room hold packet condition persists difference arrival rate departure rate drop figure shows probability connection losses single congestion event graph shows probabilities passing packets congestion event loss rate assumed rtt connection congestion window send packets rtt congestion event compute post-event congestion window probability noloss connection lose packets packets increasing delays queue buildup stable delays congestion event ending rtt observation contrasts analytic models queuing assume packets lost queue full probability oneloss connection experience loss back typical deceleration makes probability connection loss connection cwnd loss connections react simple multiplicative decrease halving congestion window tcp reno connections losses separate round trip times cut volume fourth connections connections slow start completely stop sending coarse timeout model simply assume aggregate connections characterized single cwnd reaction time single rtt aggregate emerge congestion event cwnd noloss rrtt oneloss change cwnd predicts senders learn congestion occurred section incorporate simple heuristic include factor represents quiet period losses heavy coarse timeouts simulations series simulations understand congestion behavior details made public download hop simulation begin simulation widely dumbbell topology highlight basic features model relevant queuing delay occurs single hop connections competing mbps link infinitely long ftp sessions packet size bytes dedicated mbps link give ceiling mbps avoid initial synchronization stagger ftp starting times end-to-end propagation delay set queue monitored packet droptail queue feeding dumbbell link portions shark fin figure shows half complete cycles shark fins model based distinct sections fin clear incoming volume lower capacity link figure shows cleared queue small queuing delays graph grass compared delays congestion volume mbps time seconds total volume incoming packets onehop tcl volume capacity fig mbps traffic arriving ingress router hop simulation queue depth packets time seconds onehop tcl mbps flows queue depth losses fig probability density queue depths packets hop simulation refer queuing delays grassy situation persists 
total incoming volumes paths reaches outbound link capacity rising clients experience increasing queuing delays rising portion figure shape portion curve close straight line assuming acceleration small compared volume rising portion graph slope depends acceleration height depends queue size queue management policy router congested drop-tail routers drop packets congested state portion figure duration heavily influenced average reaction time flows congested state long connections time receive negative feedback packet dropping congested state constant duration amount negative feedback connection receives independent multiplexing factor outbound link speed queue depth major factor determining number packets connection lose congestion window size falling senders react queue drains aggregate flow connections initial slow pdf queuing delay pdf hop onehop tcl fig mbps traffic destined congested link ingress egresscore mbps source source ftp source source sink sink sink leg engineered unique rtt ftp ftp ftp mbps mbps mbps sink fig simulation layout two-hop traffic start phase connections aggregate show quiet period congestion event quiet period connections slowed significant number connections completely silent waiting timeout pdf queuing delay hop simulation figure shows pdf queue depths hop simulation graph shows distinct sections grassy portion approximately sum rising falling portions histogram bars equi-probable values point mass delay full packets bytes packet feeding mbps link adding subtracting connections changing ceiling traffic introducing short-term connections change length period shark fins slope line rising congestion event slope falling line queue empties basic shape shark fin remains surprisingly large range values duration intense packet dropping congestion event remains heavily influenced average round trip time traffic hop simulation refine model understand empirical data detail extend simulation environment include queue depth time seconds twohop tcl cross traffic total delay ingress delay drop ingress validation drop techniques core fig assign signatures level queues confidence loss size episode estimates enables open-ended -hop experimentation stopping criterion based estimators reaching requisite level path pdf confidence queue depth basic algorithm hop simulation twohop time tcl slot fig decide distinctive signature commence basic queue experiment shows decision peak made independently pdf additional slot core router fixed probability ingress egress slots shown figure sequence links basic experiments mbps geometric queues distribution drop-tail parameter make easy practice distinguish make restriction shark fins queue start ingress basic core experiment holds packets queue progress core implies egress holds reality packets random test variables traffic controlling set long-term probe connections passing time slot ingress egress independent added cross traffic composed series web traffic decisions longer random connections variables web traffic simulated basic pagepool experiment application started webtraf slot cross traffic introduced link dispatch exits immediately probes measure link figure shows sum queue depths solid line shark fins present easy pick fins related congestion core router queue depth distinct fins reach plateau queue depth stars bottom graph dropped packets drops sources congestion event maintains duration strongly related reaction time flows fin time occurred ingress core routers rising delay regime dashed mid-delay line shows queue depth ingress router places mid-delay sum ingress core delays figure shows pdf queue delays peaks present queue depths packets packets diagram shows higher incidence delays range packet times due cross traffic effect adding hop terms model portion pdf completely dictated packets grassy behavior routers short flat section includes influences rising regime ingress rising regime core falling edges shark fins sharp influence negligible peak queue size sharp hop simulation part falling edge includes clear delays core router delay spent ingress router spent core flat area primarily packets rising regime core router significant number packets delay packet times unlucky rising regime ingress congestion core rising regime core congestion egress flocking absence congestion shared link individual connections saw-tooth graph cwnd connection cwnd combination rtt dictate amount load offers link path saw-tooth graphs ceiling floor period assuming mixture rtt periods mixed assuming independence connection phase saw-tooth moment connections meet uncongested link saw-tooth graphs sum comparatively flat graph larger assuming connections independent sum flatter congestion event connections pass link receive negative feedback essentially time suggested paper congestion events periodic entire group connections tend reset lower cwnd cadence periodic congestion events connections saw-tooth graphs resonate congestion events drawn phase contrast form global synchronization reported keshav connections passing common congestion point rtt synchronize keshav study depends buffer packets resident link large hold packets connection form increasing number connections eliminate synchronization window synchronization theory depend large buffers slow links depends mixture rtts close compatible flock formation demonstrate common situation cwnd sawtooth graphs fall phase construct dumbbell environment shown figure legs feeding leg engineered unique rtt dumbbell mbps sources sinks mbps mbps ingress egress fig simulation environment foster window synchronization mbps time seconds aggregate offered load rtt rtt rtt total capacity fig connections started random times synchronize cwnd decline buildup seconds dumbbell runs mbps dumbbell mbps link gave leg entering ingress router propagation delay traffic leg round trip time leg traffic rtt final leg traffic rtt figure shows number packets coming legs total number packets arriving ingress congestion events happen sec sec sec result congestion events connections rtt starting low cwnd seconds dumbbell congestion event milliseconds traffic presents subsequent links rises falls cadence shown packets excess mbps spread delayed queuing pass flock rtt slow join flock falls cadence time effectively load dumbbell passes subsequent links flock connections broader range rtt range rtt values flock investigate rtt values affect flocking experimental layout shown figure congestion slots random variable records reports obtained probes -digit binary number means probes observe loss episode means probe observed loss episode methodology based fundamental assumptions view probe reporting design vii valid assumptions required algorithmic versions basic algorithm requires stronger version assumptions detail assumptions assume probes accurately report loss episodes true loss episode present time slot observed probe packets slot assume specific structure inaccuracy true loss episode state slots means loss episode present loss episode present iii true means congestion observed knowledge router buffer occupancy queueing delays packet drops practice unknown specific assumption correct equals probability independent depends number -digits incorrect explicitly loss episode occuring congestion reported probability loss episode begins loss episode ends independent fails match necessarily loss episode on-going independentof fails match necessarily justification assumptions note highly probe spuriously measure loss assuming well-provisioned measurement hosts loss episode present probe register loss assumptions negationslash assumption appeal one-way delay heuristics developed vii negationslash hold hand probe reported loss comparing delay characteristics probe characteristics probe assuming report loss deduce assign probe actual networking assumption delay characteristics measured path stationary relative time discretization estimation basic algorithm assumes consistent duration estimation consistent unbiased frequency estimation estimators loss episode frequency estimation denote true frequency slots loss episode present define random variable digit estimate hatwidef index running basic experiments conducted total number experiments estimator unbiased hatwidef expected congestion frequency mild conditions estimator consistent durations loss episodes loss-free episodes independent finite proportion lossy slots experiment slots converges surely grows loss episode frequency stated property loss episode duration estimation sophisticated recall loss episode consecutive occurrence lossy time slots preceded loss binary representation written suppose access true loss episode state time slots discretization count loss episodes durations find loss episodes length loss occurred total kjk slots total number loss episodes average duration loss episode defined order estimate observe structure loss episodes hand time slots time slots time slots negationslash define total number time slots similarly denoting parenleftbigge parenrightbigg basic algorithm assume estimator hatwided obtained substituting measured values means hatwided note estimator unbiased finite due appearance quotient consistent conditions stated hatwidef congestion fourth leg added rtt long participate flock formed dumbbell losses alternating renewal process finite lifetimes ergodic theorem tells grows converge expected values note independent hatwided converges surely improved algorithm improved algorithm based weaker assumptions basic algorithm longer assume view details provided estimation duration ratio modify basic experiments decide independently time slot conduct experiment probability basic experiment conduct extended experiment comprising probes dispatched slots redefine digit number returned probes means loss observed records true states ith experiment attempts identify make additional assumptions additional assumptions assume probability misses true state records string depend length number string address states claim additional assumptions realistic defer discussion describe reporting mechanism loss episodes additional assumptions hand denote combined number states full time series combined number states form estimating employ obtain hatwided parenleftbiggr parenrightbigg validation running experiment assumptions require quantities validate assumptions checking means basic algorithm probability assumed design stopping criterion on-going experiments based ratio number measurements number measurements large discrepancy numbers bridged increasing indication assumptions invalid note validation check important assumptions basic design improved design expect similar occurrence rate expect similar occurrence rate check rates stop close invalidate experiment 
events coincide eventually occurrence considered violation assumptions large number events reason reject resulted estimations experimental investigation stopping criteria future work modifications straightforward modifications design address detail time improved algorithm tripleprobe experiments estimation parameter include actual estimation duration decreasing total number probes required order achieve level confidence obvious modification unequal weighing basic extended experiments view expression obtain hatwided clear motivation miss estimating bad miss average duration small basic experiments incur cost terms network probing load hand reports triple probes estimating increase proportion note formulation reported events estimating failure rate reporting state assumed unknown estimate similar techniques estimating ratio require utilization experiments probes topic research quantify tradeoffs probe load estimation accuracy involved extended experiments probes estimator variance section determine variance estimating probe loss rate loss episode duration arises sampling action probes important emphasize variation stems randomness probing randomness underlying congestion periods study view congestion study single fixed sample path assumptions underlying congestion relax point view sample path congestion drawn underlying probability distribution turns weak assumptions result holds surely sample path formalize recall measurement slots congested slots distributed congestion intervals concerned asymptotics estimators hatwidef hatwided large end assume behavior large positive write denote limiting average duration congestion episode wide class statistical models congestion properties obeyed surely uniform satisfy strong law large numbers examples models possess property include markov processes alternating renewal processes finite lifetimes congested uncongested states asymptotic variance hatwidef hatwided write estimators hatwidef hatwided equivalent slots total state pairs denote set slots true loss episode state basic experiment commenced slot number basic experiments encountered true congestion state note fixed sets mutually independent restrict attention basic algorithm ideal case comparing vi-b hatwidef hatwided determine asymptotic variances covariance hatwidef hatwided grows -method supposes sequence vector valued random variables fixed vector converges distribution multivariate gaussian random variable covariance matrix cij vector function differentiable asymptotically gaussian asymptotic covariance matrix cij current application set limn limn independent covariance matrix diagonal matrix entries var yvar derivatives -method shown hatwidef hatwided asymptotically gaussian covariance parenleftbigg parenrightbigg parenleftbigg parenrightbigg note positive correlation hatwidef hatwided expected higher loss episode frequency loss episodes tender longer variance estimation finite estimate variance directly data plugging estimated values parameters scaling specifically estimate variances hatwidef hatwided hatwidevf hatwidef hatwidef hatwidevd hatwided hatwided nhatwidefp simple estimates relative standard deviations hatwidef hatwided pnhatwidef pnhatwideb hatwideb hatwidef hatwided estimated frequency congestion periods estimated confidence intervals hatwidef hatwided follow obvious manner vii probe tool implementation evaluation evaluate capabilities loss probe measurement process built tool called badabing implements basic algorithm conducted series experiments badabing laboratory testbed background traffic scenarios objective lab-based experiments validate modeling method evaluate capability badabing range loss conditions report results experiments focused areas probe process assume receive true indications loss probes accuracy reported measurements improve probes reliably loss mind set experiments designed understand ability individual probe consisting tightly-spaced packets accurately report encounter loss episode examine accuracy badabing reporting loss episode frequency duration range probe rates traffic scenarios final set experiments compare capabilities badabing simple poisson-modulated probing accurate reporting loss episodes probes noted iii ideally probe provide accurate indication true loss episode state case primary issue loss episode packets continue successfully transmitted hypothesized increase probability probes correctly reporting loss episode increasing number packets individual probe hypothesized assuming fifo queueing one-way delay information improve accuracy individual probe measurements investigated hypothesis series experiments infinite tcp source background traffic constant-bit rate traffic infinite tcp traffic loss event durations approximately milliseconds constant-bit rate traffic loss episodes approximately milliseconds duration named spirit past tools measure loss including ping zing sting tool approximately lines community testing evaluation modified version badabing generate probes fixed intervals milliseconds number probes encounter loss episodes experimented probes consisting packets packets individual probe back back capabilities measurement hosts approximately microseconds packets probe packet sizes set bytes bunch length packets empirical probability probe bunch experiences loss loss episode infinite tcp traffic constant bit rate traffic results tests ability probes consisting packets report loss episode encountered figure shows results tests constant-bit rate traffic longer probes clear impact ability detect loss half singlepacket probes experience loss loss episode probes couple packets reliable indicators true dumbbell phase range accommodated connection millisecond rtt packets number ftp connections packets delivered seconds dumb rtt offer rtt offer rtt offer rtt offer fig connections rtt slightly long join flock figure shows result simulation experiments run added connection round-robin fashion legs contention dumbbell connection goodput limited mbps leg graph plots total goodput goodput rtt result number packets delivered rtt connections half group definitions fair distribution bandwidth connection delivered number packets rtt phenomenon similar tcp bias connections long rtt reported floyd encompasses entire flock connections noted turbulence aggregation point dumbbell incoming links busy based extent traffic leg harmonizes flock formed dumbbell figure link carrying millisecond rtt traffic capacity mbps experiments connections leg connections total link achieved mbps increasing number connections increase leg share dumbbell capacity formation congestion events nature congestion events easily watching amount time spent queuing regimes dumbbell examine proportion time spent portion shark fin simulation configuration prior section figure shows proportion time spent clear significant queuing delay rising increasing queue queuing delay congested queuing delay essentially equal full queue falling decreasing queue queuing delay fewer connections aggregate offered load reaching dumbbell mbps packets queued fascinating anomaly connections simulations 
transient wild situation offered load coming dumbbell reduced reaction time amount matches acceleration tcp window growth reaction time results state number ticks state number ftp connections sim results rtts clear rise cong fall fig proportion time spent queue regime seconds number ftp connections congestion event duration maxce avgce mince fig congestion event duration approaches reaction time continuous congestion low loss rate anomaly result rigidly controlled experimental layout study number connections builds queue bottleneck oscillates congested grassy experiment dumbbell spent significant portion time grassy area shark fin connections vying bandwidth duration congestion event figure shows duration congestion event dumbbell number connections increases shark fins increasingly uniform average duration congestion event comparatively stable approximately milliseconds chronic congestion discussion tcp connections running smoothly spite demand spanned connections searched point tcp well-known difficulties connection congestion window drops point single dropped packet discovered triple duplicate ack sender wait timeout re-transmitting figure shows happened increased number connections spread rtt values cwnd number ftp connections nrtt congestion window rtt cwnd cwnd cwnd cwnd cwnd cwnd cwnd cwnd fig flocks rtt drop cwnd lose share bandwidth average congestion window leg dropped legs quickly absorb bandwidth released legs millisecond rtt millisecond rtt stayed cwnd gain higher proportion total dumbbell bandwidth leg connections total leg average cwnd compared nearest competitor rtt subsequent runs values leg winning leg coming case tcp connections rtt fared connections shorter rtt directly contradicts adage tcp hates long rtt speculate sawtooth graph cwnd connections long slow loss risk low consecutive congestion events adage tcp hates cwnd short-lived flows non-responsive flows considered simulations added variety shortlived connections common majority connections internet link short-lived majority packets long-lived flows purposes connection short-lived lifetime shorter period congestion events short-lived connections memory prior congestion event add subtract long-range variance traffic number active short-lived connections increases bandwidth added traffic high bandwidth high number active connections short-lived flows non-responsive flows typically sub-class udp flows slow response drops simply add traffic congestion model simulation experiments section provide foundation modeling queue behavior backbone router section present model initial validation experiment input parameters fixed size time tick capacity dumbbell link packets tick maximum depth link output queue hold loss episode state infinite tcp traffic improvement probes longer improvement small examination details queue behavior tests demonstrates packet probes greatly improveloss reporting ability infinite source traffic shown figure longer probes begin impact queuing dynamics loss episodes observation hypothesis oneway packet delays led development alternative approach identifying loss events method considers individual packet loss probes one-way packet delay probes packet lost one-way delay recent successfully transmitted packet estimate maximum queue depth owdmax loss episode delimited probes seconds indication lost packet missing probe sequence number one-way delay greater owdmax parameters mark probes form estimates loss episode frequency duration eqs note packets probe lost probe considered experienced loss episode due thresholds packet size chosen exploit architectural feature cisco gsr probe packets impact internal buffer occupancy maximum-sized frames investigating impact packet size estimation accuracy subject future work probe traffic time seconds queue length seconds cross traffic packet cross traffic loss probe train packets time seconds queue length seconds ooo ooo ooo ooo xxx cross traffic packet cross traffic loss probe probe loss probe train packets time seconds queue length seconds xxx xxx xxxx xxxxxx ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo ooo cross traffic packet cross traffic loss probe probe loss queue length portion loss episode size loss probes top plot shows infinite source tcp traffic loss probes middle plot shows infinite source tcp traffic loss probes packets bottom plots shows loss probes packets plot annotated tcp packet loss events probe packet loss events formulation probe-measured loss assumes queuing intermediate routers fifo number estimates owdmax taking determining set flocks members round trip time ticks rttf number connections ceiling ceilf floor floorf values ceilf floorf measured packets tick chosen represent bandwidth flock achieve unconstrained dumbbell reacts worst bottleneck operational parameters number packets buffered queue tick number packets dropped tick loss ratio volume packets tick offered link time reaction time average time lag flock react feedback acceleration rate packets tick tick flow increases volume absence negative feedback average congestion window initially floorf rttfn rttf computeaccel tick availabletosendt sentt min availabletosendt unsentt availabletosendt sentt min unsentt unsentt dtd sentt rememberfutureloss flock prepare tick reacttopastlosses computeaccel rememberfutureloss retains loss rates future flock adjustments reacttopastlosses loss rate occurred time adjusts congestion window congested falling false rising clear rising false falling fig finite state machine tracking duration congestion based queue occupancy loss rate increased rttf representing normal additive increase window growth loss rate unchanged modeling equilibrium state window growth connections offset window shrinkage factor arbitrarily chosen future work justify constant replace formula loss rate higher decreased rttf ceilingf reached adjusted floorf represent limited receive window limited min constant packets bytes fill byte receive window early implementations linux byte receive windows memory cheap window scaling receive windows limited bytes computeaccel acceleration set packets adjusted ticks computeaccel returns rttf notice computation acceleration differs formula section compromise deployed model failed accurately predict quiet time congestion event quiet time primarily caused connections suffer coarse timeout reaction time depend rttf triple duplicate ack simplification taking rttf model complexities ack compression effect clocking packets sender outputs model model totals number ticks spent queue regimes clear rising congested falling finite state machine shown figure queue clear rises rising reaches falling drops clear false rising leads clear rising queue drops false falling leads congested falling queue grows number ticks state number ftp connections model output rtts clear rise cong fall fig queue regimes predicted congestion model calibration figure shows model predicts simulation figure improvements needed model accurately predict onset flocking results moderate cwnd sizes traffic engineering models model correctly approximated mixture congested clear ticks broad range connection loads model simple algorithms aggregate reaction losses shed light large flocks interact based unique rtts extending model multi-hop networks ultimate model ability scale traffic engineering tasks typically found internet service provider extending model network involves associating flock sequence hops hoph links link link links capacity clink buffer queue length qlink headroom analysis model predicts number duration intensity loss events link link easy iteratively reduce modeled capacity link clink number loss events increases ratio actual capacity needed capacity link ability accommodate traffic capacity planning increasing modeled capacity individual links adding links adjusting hop sequences hoph traffic engineers measure improvement expectation similarly adding flocks model anticipated growth demand traffic engineers monitor increased capacity per-link basis important note links high utilization stress sense increasing capacity minimal impact network capacity latency control model realistically reflects impact finite queue depths hop sensitivity analyses link physical queue qlink configured red act smaller queue model predict benefits shorter latency lower jitter smaller queues strategic points network backup sizing gathering statistics normal baseline flocks model run variety failure simulations backup routes test backup route flocks passing failed route assigned set hops hoph automatic rerouting scope current model add multiple outages needed modeled vii summary study congestion events crucial understanding packet loss delay multi-hop internet fast interior links high multiplexing propose model based flocking improved means explaining periodic traffic variations primary conclusion work congestion event successful unsuccessful successful congestion event discourages future traffic drain queue congested link evolution transport protocols sought make congestion events success innovation congestion control widened portion design space congestion events successful protocols work long rtts broad range link capacities multiplexing factors thousands connections innovation narrowed gaps design space successful congestion events unsuccessful result substantial fraction congestion events internet reaction time quickly abate queue drain depending intensity traffic traffic ability remember prior congestion congestion event sooner shape congestion event tells crucial parameters link protected maximum buffer probe owd threshold effectively filters loss end host operating system buffers network interface card buffers losses correlated end-to-end network congestion delays conducted series experiments constant-bit rate traffic assess sensitivity loss threshold parameters range values probe send probability explored cross product values selected effectively setting high-water level queue milliseconds selected values milliseconds figure shows results loss frequency range fixed milliseconds varying equivalent milliseconds figure fixes milliseconds probe probability 
loss frequency true loss frequency alpha millisec alpha millisec alpha millisec estimated loss frequency range values holding fixed milliseconds probe probability loss frequency true loss frequency tau millisec tau millisec tau millisec estimated loss frequency range values holding fixed equivalent milliseconds comparison sensitivity loss frequency estimation range values letting vary milliseconds expected larger values threshold estimated frequency increases similar trends loss duration shown trade-off selecting higher probe rate permissive thresholds appears setting expected time probes standard deviations appears depend probe rate traffic process level multiplexing determines quickly queue fill drain issues discuss parameterizing badabing general internet settings viii measuring frequency duration formulation loss probe process calls user parameters probability initiating basic experiment interval set experiments explore effectiveness badabing report loss episode frequency duration fixed values implying probe traffic consumed bottleneck link time discretization set milliseconds fixed experiments yielding experiment duration seconds examine loss frequency duration estimates fixed hour-long experiment experiments background traffic scenarios scenario iperf generate random loss episodes constant duration modified iperf supply rtt 
traffic present compared hope study helps isps engineer links maximize success congestion events identification named regimes surrounding congestion event lead improvements active queue management address impact local congestion events neighbors result significant improvement fairness productivity bandwidth achieved flocks applicability traffic engineering model applied multi-hop networks capacity planning backup sizing headroom analysis expect networks link configured utilization grossly over-engineered treated multi-hop network clear utilization links high link significant bottleneck flows links appreciable benefit increased bandwidth flocks constrained future work plan extend model cover portion design space congestion events unsuccessful exploring limits multiplexing rtt mixtures window sizes model find regimes active queue management transport protocols improved expand model accurately predicts onset chronic congestion traffic engineering applications model interesting improvements needed automate gathering baseline statistics input model script commonly traffic engineering tasks outputs model displayed real time validation model scalability accuracy important interesting paxson floyd wide-area traffic failure poisson modeling ieee acm transactions networking vol june floyd paxson don simulate internet proceedings winter simulation conference december leland taqqu willinger wilson self-similar nature ethernet traffic extended version ieee acm transactions networking feldmann gilbert willinger kurtz changing nature network traffic scaling phenomena computer communications review vol april feldmann huang gilbert willinger dynamics traffic study role variability impact control proceedings acm sigcomm boston september cao cleveland lin sun internet traffic statistical multiplexing gains dimacs workshop internet measurement mapping modeling cao cleveland lin sun effect statistical multiplexing long range dependence internet packet traffic bell labs tech report zhang shenkar clark observations dynamics congestion control algorithm effects two-way traffic proceedings acm sigcomm floyd jacobson random early detection gateways congestion avoidance ieee acm transactions networking vol august bonald j-c bolot analytic evaluation red performance proceedings ieee infocom tel aviv isreal march surveyor project http advanced surveyor stevens tcp illustrated volume protocols addisonwesley ramakrishnan floyd proposal add explicit congestion notification ecn ietf rfc january ucb lbnl vint network simulator version http isi nsnam bolot end-to-end packet delay loss behavior internet proceedings acm sigcomm san francisco setpember paxson measurements analysis end-to-end internet dynamics thesis california berkeley yajnik moon kurose towsley measurement modeling temporal dependence packet loss proceedings ieee infocom york march qiu zhang keshav understanding performance tcp flows computer networks amsterdam netherlands vol nlanr acitve measurement program amp http moat nlanr net amp matthews cottrell pinger project active internet performance monitoring henp community ieee communications magazine pasztor veitch precision infrastructure active probing pam workshop passive active networking amsterdam holland april allman paxson estimating end-to-end network path properties proceedings acm sigcomm boston september govindan reddy analysis internet inter-domain topology route stability proceedings ieee infocom kobe japan april paxson end-to-end routing behavior internet proceedings acm sigcomm palo alto august jagerman melamed willinger stochastic modeling traffic processes frontiers queuing models methods problems crc press mathis semke mahdavi ott macroscopic behavior tcp congestion avoidance algorithm computer communications review vol july padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation proceedings acm sigcomm vancouver canada setpember cardwell savage anderson modeling tcp latency proceedings ieee infocom tel-aviv israel march misra gong towsley fluid-based analysis network aqm routers supporting tcp flows application red sigcomm towsley fixed point approximations tcp behavior aqm network proceedings acm sigmetrics floyd jacobson traffic phase effects packet-switched gateways journal internetworking practice experience vol september internet protocol performance metrics http ietf html charters ippm-charter html almes kalidindi zekauskas one-way delay metric ippm rfc september papagiannaki moon fraleigh thiran tobagi diot analysis measured single-hop delay operational backbone network proceedings ieee infocom march kalidindi owdp implementation http telesto advanced kalidindi wisconsin advanced internet lab http wail wisc floyd connections multiple congested gateways packetswitched networks part one-way traffic acm computer communications review vol oct 
create loss episodes durations milliseconds average seconds loss episodes final traffic scenario harpoon generate selfsimilar web-like workloads traffic scenarios badabing configured probe sizes packets packet sizes fixed bytes packets probe back-to-back capabilities end hosts approximately microseconds packets probe rate set expected time probes standard deviation radicalbig time slots probe probability probe probabilities probe probabilities loss episode duration results experiments confirm validity assumption made vi-d probability close probability equally measure practice beginning loss episode measure end estimates derived values table shows results constant bit rate traffic loss episodes uniform duration values loss frequency estimates close true values estimated loss episode duration actual table shows results constant bit rate traffic loss episodes randomly chosen milliseconds result similar constant bit rate setup loss episodes uniform duration values loss frequency estimates close true values estimated loss episode durations true table displays results setup harpoon weblike traffic create loss episodes harpoon designed generate average traffic volumes long time scales actual loss episode characteristics experiments vary loss frequency constant bit rate traffic scenarios estimates close case loss episode durations estimates fall range actual estimate falls range tables range values increasing trend loss frequency estimated badabing effect arises primarily problem selecting parameters similar nature trends figures important note trends peculiar well-behaved cbr traffic sources increasing trend loss frequency estimation exist significantly bursty harpoon weblike traffic table note trend exists loss episode duration estimates empirically complex relationships choice selection estimation accuracy considered range traffic conditions limited realistic setting explore relationships complex multi-hop scenarios wider range cross traffic conditions intend establish rigorous criteria badabing parameter selection ongoing work finally table vii shows results experiment designed understand trade-off increased increased chose show results values milliseconds background traffic experiments simple constant bit rate traffic uniform loss episode durations slight improvement frequency duration estimates improvement coming larger empirically understanding convergence estimates loss characteristics low probe rates grows larger subject future experiments badabing loss estimates constant bit rate traffic loss episodes uniform duration loss frequency loss duration seconds true badabing true badabing badabing loss estimates constant bit rate traffic loss episodes milliseconds loss frequency loss duration seconds true badabing true badabing badabing loss estimates harpoon web-like traffic harpoon configured variability true frequency duration due inherent variability background traffic source loss frequency loss duration seconds true badabing true badabing vii comparison loss estimates values values threshold parameter loss frequency loss duration seconds true badabing true badabing dynamic characteristics estimators shown estimates low probe rate significantly improve large modest increase probe rate substantially improves accuracy convergence time frequency duration estimates figure shows results experiment harpoon generate self-similar web-like tcp traffic loss episodes experiment set top plot shows dynamic characteristics true estimated loss episode frequency entire minute-long experiment badabing estimates produced seconds experiment error bars badabing estimate confidence interval estimates minutes badabing estimates converged close true values badabing tracks true frequency bottom plot figure compares true estimated characteristics loss episode duration experiment short period badabing estimates confidence intervals converged close true loss episode duration dynamic behavior generally low probe rate results experiments exhibit similar qualities comparing loss measurement tools final set experiments compares badabing zing constant-bit rate harpoon web-like traffic scenarios set probe rate zing match link utilization badabing packet size bytes capacity bottleneck experiment run minutes table viii summarizes results experiments similar results included table badabing results row tables cbr traffic loss frequency measured zing close true loss episode durations web-like traffic loss frequency loss episode durations measured zing good matches true values comparing zing results badabing traffic conditions probe rate badabing reports loss frequency duration estimates significantly closer true values viii badabing practice number important practical issues considered badabing wide area time seconds loss episode frequency estimated loss frequency true loss frequency time seconds loss episode duration seconds estimated loss episode duration true loss episode duration comparison loss frequency duration estimates true values minutes harpoon web-like cross traffic probe rate badabing estimates produced minute error bars estimate confidence interval top plot shows results loss episode frequency bottom plot shows results loss episode duration viii comparison results badabing zing constant-bit rate cbr harpoon web-like traffic probe rates matched badabing probe packet sizes bytes badabing results copied row tables variability true frequency duration harpoon traffic scenarios due inherent variability background traffic source traffic tool loss frequency loss duration scenario true measured true sec measured sec cbr badabing zing harpoon badabing web-like zing tool requires user select values assume number loss events stationary time note duration loss events vary arbitrary change time mind current formulation estimate average duration distribution durations number loss events occur unit period time average loss events occur minute discretization unit milliseconds estimate true stationarity assumption expect accuracy estimators depend product pnb individual values vi-f reliable approximation relative standard deviation estimation duration relstddev duration pnb individual choice trade timeliness results impact user link prior empirical studies provide initial estimates alternate design measurements continuously report estimate validation techniques confirm estimation robust situations set low level case measurement stream expected impact traffic run time reliable estimate obtained estimation duration critically based correct estimation ratio estimate ratio counting occurrencerate occurrence rate high throughput data transfers tornado transport protocol vijayan prabhakaran joseph stanley paul barford abstract transfer extremely large files high bandwidth network paths common current windowbased transport protocols limit throughput level achievable paper describe evaluate tornado transport protocol ttp designed reliable achieve high throughput maintain adjustable level tcp-friendliness reliability achieved efficient forward error correction high throughput achieved eliminating acknowledgment-based pacing receiver tcp-friendliness achieved setting threshold react loss compare ttp out-of-the-box configuration tcp newreno tcp-based methods high throughput file transfers variety traffic conditions simulations show large file transfers long delay large bandwidth environments ttp achieves throughput order magnitude higher out-of-the-box tcp newreno higher high performance transport protocol case assess tcp-friendliness find ttp effectively competing tcp flows fair share bandwidth introduction internet technology evolved point network bandwidth greatly exceed end hosts capacity transmit packets coupled growing demand transfer large data sets order terabyte scientific applications links large propagation delays reasonable assume end hosts configured gigabit ethernet cards connected network higher capacity gbps backbone links uncommon today transfer file prabhakaran stanley barford members computer science department wisconsin madison e-mail vijayan jass wisc hours uncongested path case fact common today send hard disks mail data sets terabyte wide area systems provide performance required transfers magnitude dedicated highly engineered networks basic reasons ineffective utilization network bandwidth window-based transport protocols tcp place hard limits amount data flight instant time basic feature flow control problem out-of-the-box configurations tcp optimized low bandwidth links limit potential throughput large bandwidth environments observation jacobson braden proposed tcp extensions improve performance transfers long delay paths work resulted series rfc targeted improving tcp performance high bandwidth paths recently floyd proposed extensions tcp target congestion control mechanism enable high per-connection throughput low loss environments results initial tests capabilities promising standard alternatives outof-the-box tcp large data transfers open number parallel tcp connections proposed hacker evaluate performance parallel tcp connections show select number sockets maximize throughput approach scale send receive windows buffers tcp match delay bandwidth product end hosts number projects adopted approach including approach udp-based transport methods requires additional functionality facilitate capabilities inherent tcp reliability methods proposed principally context reliable multicast application unicast examples include research focused question maximize throughput sacrificing reliability congestion control common case large data transfers approach differs aforementioned high throughput protocols rely tcp basis method udp foundation achieve high throughput expense guaranteed reliability strict interpretations congestion control tcp-friendliness contribution paper description evaluation tornado transport protocol ttp protocol developed provide high performance reliable delivery data large bandwidth long delay low loss networks ttp forward error correction fec recover lost data manner similar lundqvist karlsson incorporation fec tcp ttp differs significantly work approach objectives demonstrate performance benefits fec large bandwidth long delay environments ttp incorporates variable initial send rate limited acknowledgment mechanism modulate sending speed data transfers ttp design includes adjustable level tcp-friendliness ttp flows comfortably coexist tcp flows range network conditions evaluate performance impact ttp series simulations simulations compare throughput ttp default tcp newreno implementation parallel tcp implementation window right-sized tcp implementation set experiments show ttp achieves higher throughput alternatives range transfer sizes network configurations congestion levels set experiments evaluates tcpfriendliness ttp show adapts congestion conditions negligible impact tcp flows sharing bottleneck link results suggest ttp effective transferring large data files high performance networks combination ttp mechanisms emphasize high utilization bandwidth potential cost failed transfers potential rapidly introduce congestion tuning ttp optimal performance minimal cost based knowledge small amount end-to-end network state tuned operate appropriately today commodity networks performance benefits lost issues propose ttp mechanism suited large data transfers specialized high performance networks abilene esnet teragrid rest paper organized ttp architecture section evaluate performance impact ttp section iii summarize results conclude section tornado transport protocol tornado transport protocol extends user datagram protocol udp facilitate high throughput data transfers reliability tcpfriendliness section describe ttp architecture implementation details reliability ttp reliability transport layer provided methods common acknowledgments acks generated receiver forward error correction generated sender approach correctly receiving data packets receiver return ack packets sender approach tcp acks play additional role tcp means indicating congestion network expiration timeout period receiving ack receipt ack-based signal duplicate acks implicit indications network congestion send rate throttled advantages ackbased reliability minimal redundant data network minimal overhead incurred end hosts forward error correction specialized codes standard means achieving reliability approach redundant informasee good description ack-based reliability tcp tion added data receiver recover original data receiving percentage total number encoded packets examples encoding facilitating reliable data delivery include important advantage approach reliability flow control decoupled significant implications large bandwidth environments adjusting send rates based ack streams significant limitation achieving desired level performance number disadvantages fec redundant data original data total number packets transmitted sender receiver increase closely related disadvantage spite aggressive encoding receiver recover data loss rates encoding threshold careful selection encoding threshold required balance efficiency number packets versus ability fully recover data lossy environments encoding decoding overhead sender receiver encoding decoding data traditional reed-solomon codes thousands seconds fortunately recent developments coding theory development tornado codes reduce encoding decoding time seconds tornado code algorithm calls source wishing transmit data packets generate additional check packets packets transmitted sender receiver successfully receives packets decoding algorithm enables complete recovery original data packets parameterization tornado encoding decoding requires specification number data packets reception overhead error rate link determines number check packets required tornado codes build sparse xor-based equations enable high encoding decoding speeds encoding process partitions file equal sized fragments called data nodes generates set check nodes size bytes data nodes series bipartite graphs check nodes assigned neighbors calculated bit-wise xor neighbors decoding iterative process consists series xor operations neighbor fragments recover original data achieve reliability ttp imparting high encoding decoding packet transmission overhead tornado codes conjunction projected loss rate threshold threshold set encoding level send sufficient number packets successful recovery high probability loss rate projection derived knowledge characteristics endto-end channel initial threshold derived measurement environments surveyor idmaps case specialized networks routes static abilene historical accounting data transfers section ttp ability adapt loss characteristics specific path capability facilitated chunked encoding large files experiments encode chunks amount padding check packets added encoding chunks depends loss rate 
measured prior chunk flow control ttp ttp flow control mechanism designed provide high throughput networks large bandwidths short-lived loss events idea begin sending high rate reduce sending rate congestion exceeds thresholds flow control enabled limited acknowledgment mechanism form control packets set encoding levels chunks file transfer mechanism designed tunable allowing ttp optimized performance control packets receiver sender simple bitmaps status packets received packet successfully received packet lost sequence numbers ttp data packets provide ordering control packet bitmap relate specific pieces chunk projected loss rate abilene network characteristics original data ordering required tornado codes packet losses control packet transmitted receiver data packets receipt control packet showing loss sender increase send rate receipt control packet showing losses occurred sender reduces send rate increases padding encoding chunk depending losses exceeded thresholds losses exceed thresholds receiver react increasing feedback rate sending control packets packets attempt increase sensitivity loss conditions similarly loss measured packets receiver decrease feedback rate constant factor control packets mechanism infer network conditions loss control packet result diminished response sender possibly inaccurate calculation link loss rate view minor importance issue perceived loss rate link loss rate increased significantly control packet information lost focus networks low loss rates view low probability event challenge designing ttp decide establish congestion thresholds unlike tcp reduces send rate loss sensed ttp designed ability ignore shortlived loss events enables send rate maintained higher level risk contributing congestion network implement ttp congestion thresholds ways method ttp sensitive persistent short lived congestion specifically perceived loss rate short term loss rate receiver ratio number packets missing number packets received packets calculated sender information control packet bitmap perceived loss rate greater link loss rate long term loss rate sender ratio total number packets lost total number packets transmitted ttp reacts reducing sending rate congestion threshold considers length individual loss events consecutive packets lost time link considered unstable state ttp reacts reducing sending rate fig ttp state transition diagram state transition diagram ttp shown figure sender starts steady state transmitting sufficiently high initial speed loss rate threshold meant aggressively set based bottleneck bandwidth determined inspection high performance networks static paths measurements sender continues transmit rate control packet received congestion threshold exceeded transition steady state loss state occurs packet send rate halved multiplicative decrease data encoding rate adjusted chunk bitmap loss transition steady state loss state occurs packet send rate increased constant factor additive increase data encoding rate adjusted chunk bitmap loss congestion threshold exceeded transition occurs prevent drastic send rates maximum minimum transmission rates fixed transmission rate increased decreased values multiplicative decrease congestion imparts tcp-friendliness setting consecutive loss threshold enables reaction loss tunable implementation details link loss rate initial send rate play major roles behavior ttp loss rate dictates behavior encoding algorithm amount data transmitted ability recover loss issues implement calculation loss rate dynamically weighted moving average current link loss rate perceived loss rate ensures loss rate adapts actual loss rate link affected drastically due transient high losses initial send rate dictates typical bottleneck bandwidth ttp flow found experiments reported section significant impact performance ttp chosen aggressively send rates receipt control packet determined congestion conditions min max transmission thresholds ttp aimed large data transfers task encoding data chunks pipelined data transmission data transfers divided phases encoding phase transmission phase figure data split chunks chunk encoded calculated link loss rate chunk data transmitted data chunk encoded similar manner decoding overlapped data reception parallel execution encoding decoding transmission reception overhead encoding decoding effectively hidden fig parallelized encoding transmission decoding ttp iii ttp evaluation simulation environment analysis ttp began implementing tornado code algorithm measure encoding decoding overheads implementation tested ghz piii machine ram operating system linux timing encoding decoding range file sizes ttp chunks shown figure figure shows data chunks time encoding seconds decoding times negligible instances results show encoding decoding overhead easily amortized time transmit large data chunks high bandwidth environments encoding decoding time tornado data size encoding decoding time seconds decoding time encoding time fig encoding decoding overhead tornado codes network simulator performance evaluation ttp simple dumbbell topology shown figure high speed test source ttp listed tcp source sends size file test protocol assess tcp-friendliness tcp pareto source default parameters file sizes time parameter set background traffic constant bit rate cbr source cbr default packet size transmitting mbps additional background traffic evaluate performance network configurations shortslim configuration shown figure bottleneck bandwidth mbps propagation delay end links mbps propagation delay long-fat configuration bottleneck bandwidth mbps propagation delay end links mbps propagation delay topologies bottleneck queue size set packets ttp performance improves bottleneck queue size increases results reported section small buffer pessimistic ttp loss rate experiment link error model provided compared ttp performance implementation tcp-newreno tcp based high speed transfer protocols newreno configured receive window set packets choices high speed implementations parallel sockets dynamic sizing simulating parallel sockets parallel tcp newreno connections transmitting data based work dynamic sizing tcp calculates effective window ewnd ewnd min fwnd cwnd congestion window cwnd varies dynamically network state flow window fwnd vary bandwidth-delay product network simulation experiments set flow window equal bandwidth-delay product fig simulation network topology ttp number tunable features including initial send rate set bottleneck bandwidth congestion indicator set initial link loss rate set control packet size set bits coding chunk size set min max moving average method quickly reduces track actual loss rate subsequent data chunks transmission rates set mbps mbps mbps mbps short-slim long-fat configurations simulations encode decode data chunks ttp encode decode times figure chunks transferred include latency transfer times measure setting congestion indicator means control packet received consecutive packets lost sender multiplicatively decrease send rate larger values enable ttp perform expense tcpfriendliness investigation sensitivity ttp performance parameterization scope paper left future work throughput evaluation evaluate effectiveness ttp exploiting bandwidth transfered size files congestion levels short-slim long fat simulation environments similar network conditions measured transmission latencies tcp newreno tcp parallel sockets psock dynamic sizing drs time file transfers loss rates short-slim configuration show figures note tests ttp transferred packets successfully recover data cases ttp higher throughput tcp drs low loss rates low transmission latency environment 
psock outperforms ttp link loss rate increases ttp higher throughput alternative psock fact loss rates increase ttp performance improvements protocols continues increase smaller file sizes ttp performance approximately equal tcp variants encoding overhead file sizes increase encoding overhead easily amortized larger transmission times ttp significantly outperforms tcp noted ttp overhead opening multiple tcp connections psock requires larger buffering capacity transmitter receiver overhead considered experiments results psock considered optimistic results show short-slim low loss environments ttp viable alternative high performance transport protocols ttp benefits clear set results transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives short-slim network topology transmission latencies lossy link data time seconds ttp psock drs tcp fig number throughput comparisons estimated loss average 
rates validation measuring difference rates difference directly proportional expected standard deviation estimation similar remarks apply validation tests mention estimation algorithms recent study packet loss passive measurement reported loss episodes backbone links short-lived order microseconds condition tool successfully detect estimate short durations discretization time finer order duration attempt estimate requirement imply commodity workstations accurate active measurement end-to-end loss characteristics circumstances corollary active measurements loss high bandwidth networks require high-performance specialized systems support small time discretizations classification probe traversed congested path concerns probe lost long delayed parameter appears dictated primarily clear set arbitrary path characteristics level statistical multiplexing physical path configuration unknown examination sensitivity complex environments subject future work accurately calculate end-to-end delay inferring congestion requires time synchronization end hosts trivially eliminate offset clock skew concern on-line synchronization techniques note estimators average individual estimations duration loss episode perform low values reported line methods effectively address issue summary conclusions future work purpose study understand measure end-to-end packet loss characteristics accurately probes enables impact bottleneck queue began evaluating capabilities simple poisson-modulated probing controlled laboratory environmentconsisting commodityend hosts routers testbed ideal loss measurement tool evaluation enables repeatability establishment ground truth range traffic conditions subject tool initial tests simple poisson probing ineffective measuring loss episode frequency measuring loss episode duration subjected tcp reactive cross traffic experimental results led development geometrically distributed probe process accurate estimation loss characteristics simple poisson probing experimental design constructed performance accompanying estimators relies total number probes sending rate simple techniques users validate measurement output introduced implemented method tool badabing tested laboratory tests demonstrate badabing cases accurately estimates loss frequencies durations range cross traffic conditions packet rate results show badabing significantly accurate poisson probing measuring loss episode characteristics badabing enables superior accuracy understanding link impact versus timeliness measurement room improvement intend investigate work increases plan examine issue parameterization badabing including packet sizes parameters range realistic operational settings including complex multihop paths finally considered adding adaptivity probe process model limited sense alternative parametric methods inferring loss characteristics probe process task estimate variability estimates congestion frequency duration directly measured data minimal set statistical assumptions congestion process acknowledgments anonymous reviewers constructive comments work supported part nsf grant numbers cnsani- ccrand cisco systems opinions findings conclusions recommendations expressed material authors necessarily reflect views nsf cisco systems leland taqqu willinger wilson self-similar nature ethernet traffic extended version ieee acm transactions networking paxson strategies sound internet measurement proceedings acm sigcomm internet measurement conference taormina italy november wolff poisson arrivals time averages operations research vol march-april almes kalidindi zekauskas packet loss metric ippm ietf rfc september zhang duffield paxson shenker constancy internet path properties proceedings acm sigcomm internet measurement workshop san francisco november bolot end-to-end packet delay loss behavior internet proceedings acm sigcomm san francisco september paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france september yajnik moon kurose towsley measurement modeling temporal dependence packet loss proceedings ieee infocom york march papagiannaki cruz diot network performance monitoring small time scales proceedings acm sigcomm internet measurement conference miami october barford sommers comparing probeand router-based packet loss measurements ieee internet computing september october brumelle relationship customer time averages queues journal applied probability vol baccelli machiraju veitch bolot role pasta network measurement proceedings acm sigcomm pisa italy september alouf nain towsley inferring network characteristics moment-based estimators proceedings ieee infocom anchorage alaska april salamatian baynat bugnazet cross traffic estimation loss process analysis proceedings itc specialist seminar internet traffic engineering traffic management wurzburg germany july rate transport alternatives shortslim network topology evaluated throughput long-fat topology results shown figures ttp performance benefits obvious environment cases ttp performs protocols experiment ordering ttp psock drs largest file transferred ttp outperforms tcp order magnitude transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives short-slim network topology transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives short-slim network topology transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives short-slim network topology graphs show ttp typically out-performs drs order magnitude psock transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives long-fat network topology transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives long-fat network topology tcp friendliness evaluation tcp-friendliness ability adapt congestion conditions approximately tcp important feature transport protocols figure shows behavior ttp congestion conditions point marked arrow instance congestion detected consecutive packets lost ttp reduced transmission rate half ttp specifically designed tcp-friendly strict sense designed sensitive congestion transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives long-fat network topology transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives long-fat network topology transmission latencies lossy link data time seconds ttp psock drs tcp fig throughput comparisons loss rate transport alternatives long-fat network topology number parameters increase decrease ttp reaction congestion intention designing ttp enable tuned specific channel typical congestion characteristics conducted number experiments consecutive loss threshold altered short-slim environment found loss case number instances loss events consisting consecutive packets limited conjecture fact ttp sensitive parameter low loss environments loss rates increase sensitivity parameter increase time seconds transfer rate kbps sensitivity congestion point congestion fig ttp backoff behavior congested network order evaluate impact ttp tcp flows studied transmission latencies tcp flows ttp flows long-fat environment measured transmission latencies tcp flow tcp flow competing network bandwidth measured tcp flow transmission latencies ttp flow competing network bandwidth measurements file sizes link loss rates comparison transmission time tcp flow tcp-tcp environment tcp-ttp environment shown figures transmission time tcp flow differ significantly tcp-tcp tcpttp flows non-lossy environment difference loss rates tcp friendliness lossy link data time seconds ttp tcp tcp tcp fig tcp friendliness ttp loss level long-fat topology tcp friendliness lossy link data time seconds ttp tcp tcp tcp fig tcp friendliness ttp loss level long-fat topology tcp friendliness lossy link data time seconds ttp tcp tcp tcp fig tcp friendliness ttp loss level long-fat topology tcp friendliness lossy link data time seconds ttp tcp tcp tcp fig tcp friendliness ttp loss level long-fat topology tcp friendliness lossy link data time seconds ttp tcp tcp tcp fig tcp friendliness ttp loss level long-fat topology adaptation loss rate ttp design includes capability adapt loss conditions based link loss rates calculated sender measure determines amount encoding chunk important ttp accurate estimation study question adjusted link loss rate duration large file transfer short-slim topology selected high loss rate assess ttp scenario higher variability set ttp initially encode loss figure shows ttp adapts link loss rate total transfer time minor transients time based bursts losses individual chunks time seconds loss rate adaptation link loss rate tornado adaptation inherent loss rate link fig speed ttp stabilizes encoding level based link loss rate conclusions future work paper describe tornado transport protocol designed facilitate high speed transfers large bandwidth environments low loss characteristics achieves reliability forward error correction evaluation tornado codes encoding methods ttp tunably tcp-friendly sense multiplicatively decrease face loss evaluate performance ttp simple simulation environment evaluation compares ttp out-of-the-box tcp newreno high speed tcp implementations psockets dynamic rightsizing network topologies show long delay large bandwidth environments ttp outperforms tcp newreno order magnitude low loss conditions outperforms high performance tcp simulations ttp good candidate increasing number applications demand extremely high performance wide area networks steps work include development actual implementation ttp controlled laboratory testing protocol tests include wide area evaluation high performance networks abilene acknowledgements authors andrea arpacidusseau input support work larry landweber fruitful discussions jacobson braden tcp extensions long delay paths ietf rfc october jacobson braden zhang tcp extensions high speed paths ietf rfc october jacobson braden borman tcp extensions high performance ietf rfc floyd highspeed tcp large congestion windows ietf internet draft june dunigan fowler rao wing net project http csm ornl gov dunigan net index html gevros risso kirstein analysis method differential tcp service proceedings ieee globecom rio janeiro brazil december sivkumar bailey grossman psockets case application level network striping data intensive applications high speed wide area networks high performance network computing conference dallas texas november hacker athey noble end end performance effects parallel tcp sockets lossy wide-area network proceedings ieee acm international parallel distributed processing symposium ipdps san francisco april web project http web weigle chun feng dynamic sizing simulation study proceedings ieee conference computer communications networks october byers luby mitzenmacher rege digital fountain approach reliable distribution bulk data proceedings acm sigcomm vancouver canada september rizzo pgmcc tcp-friendly single-rate multicast congestion control scheme proceedings acm sigcomm stockholm sweden september byers considine mitzenmacher rost informed content delivery adaptive overlay networks proceedings acm sigcomm 
pittsburgh august mahdavi floyd tcp-friendly unicast rate-based flow control technical note end end mailing list january lundqvist karlsson tcp forward error correction unpublished manuscript ucb lbnl vint network simulator version http isi nsnam stevens tcp illustrated volume protocols addison-wesley bestavros kim tcp boston fragmentationtolerant tcp protocol atm networks proceedings ieee infocom kobe japan april bakin joa-ng anda mcauley quantifying tcp performance improvements noisy environments protocol boosters proceedings ieee symposium computer communications plank tutorial reed-solomon coding fault tolerance raid-like systems http utk plank february surveyor project http advanced csgippm francis jamin jin jin raz shavitt zhang idmaps global internet host distance estimation service ieee acm transactions networking vol october zhang duffield paxson shenker constancy internet path properties proceedings acm sigcomm internet measurement workshop san francisco november 
merit internet performance measurement analysis project http nic merit ipma internet protocol performance metrics http advanced ippm index html adams mahdavi mathis paxson creating scalable architecture internet measurement ieee network mahdavi paxson adams mathis creating scalable architecture internet measurement proceedings inet geneva switzerland july savage sting tool measuring packet loss proceedings ieee infocom tel aviv israel april allman eddy ostermann estimating loss rates tcp acm performance evaluation review vol december benko veres passive method estimating end-to-end tcp packet loss proceedings ieee globecom taipei taiwan november coates nowak network loss inference unicast endto-end measurement proceedings itc conference traffic measurement modeling september duffield presti paxson towsley inferring link loss striped unicast probes proceedings ieee infocom anchorage alaska april appenzeller keslassy mckeown sizing router buffers proceedings acm sigcomm portland villamizar song high performance tcp asnet computer communications review vol december fraleigh diot lyles moon owezarski papagiannaki tobagi design deployment passive monitoring infrastructure proceedings passive active measurement workshop amsterdam holland april nlanr passive measurement analysis pma http pma nlanr net floyd paxson difficulties simulating internet ieee acm transactions networking vol sommers barford self-configuring network traffic generation proceedings acm sigcomm internet measurement conference tirumala qin dugan ferguson gibbs iperf tcp udp bandwidth measurement tool http dast nlanr net projects iperf schervish theory statistics york springer pasztor veitch based precision timing gps proceedings acm sigmetrics marina del ray june zhang liu xia clock synchronization algorithms network measurements proceedings ieee infocom york june joel sommers received degrees mathematics computer science atlantic union college degree computer science worcester polytechnic institute candidate computer science wisconsin madison paul barford received electrical engineering illinois champaignurbana computer science boston december assistant professor computer science wisconsin madison founder director wisconsin advanced internet laboratory research interests measurement analysis security wide area networked systems network protocols nick duffield senior technical consultant network management performance department labs-research florham park jersey previously held postdoctoral faculty positions dublin ireland heidelberg germany received london current research focuses measurement inference network traffic charter chair ietf working group packet sampling co-inventor smart sampling technologies lie heart scalable traffic analysis service amos ron received mathematics tel-aviv professor computer science mathematics vilas associate wisconsin main research area approximation theory serves editor-in-chief journal approximation theory research interests include data representation wavelets gabor convex geometry applications areas internet measurements nmr spectroscopy medical mri cell biology 
characteristics network delays wide area file transfers paul barford david donoho ana georgina flesia vinod yegneswaran abstract paper present analysis file transfers widely distributed internet hosts goal work broaden understanding network path congestion properties contribute delays tcp file transfers part analysis investigates end-to-end path properties physical distance router hops autonomous system hops bottleneck bandwidth relate file transfer latency variability evaluate end-to-end path properties predictor file transfer latency employ dimensionality-reducing techniques identify clustering path space find expected transfer latency effectively predicted number path properties relationship paths latency strongly linear intense outliers part analysis employs critical path techniques break network component file transfer latency categories propagation queuing loss compare contribution components delays paths effect variability total delay find propagation delay dominant aspect expected total delay paths queuing loss substantial effects typically minority paths paths queuing contributes significantly periodicity total delays loss contributes significantly variability total delay introduction aspects current internet infrastructure protocols developed enhanced direct result careful analysis network measurement data examples include application-level protocols http transport protocols tcp tfrc distributed caching mechanisms body measurement-based work developments founded significant complexities internet interactions understood lead future improvements remain unstudied general objective study broaden understanding factors contribute delays wide barford yegneswaran members computer science department wisconsin madison mail vinod wisc donoho flesia members statistics department stanford e-mail donoho flesia stat stanford area tcp file transfers large data set collected distributed internet measurement infrastructure data set consists measurements file transfers period days distinct internet paths wawm infrastructure analysis data focused understanding details end end delays caused network address question network component delay wide area tcp transfers break subcomponents propagation queuing loss consideration question led influence properties network paths end hosts network delays break subcomponents paths end collected traceroute measurements set paths time data transfer measurements challenges work arose principal areas addition typical difficulties wide area measurement-based study task breaking data transfer delays subcomponents addressed developing robust kernel-level implementation critical path analysis tcp transfers kernel-level implementation important benefits enables calculation subcomponents data transfer delays real time expands number sub-components delays details subcomponents section iii combination path property measurements detailed data transfer delay measurements paths days led large highly dimensional data set challenge organizing reducing data set extract key results addressed initially visualizations time series data transfer delays path enabled focus important behaviors make key results paper out-lier data points represented pathological behaviors required closer attention systematically employed number multivariate analysis techniques understand details behavior paths identify path properend hosts primary component delay ties predictive transfer delay sub-components analysis paths typically operate define efficient frontier data transfer rate principally limited round trip times speed light delay aggregate switching time routers network congestion effects operation efficient frontier common size transfers decreases number paths normal operating behavior efficient frontier common feature paths commodity internet links links maintained commercial internet service providers variability paths dominated packet loss periodicity dominated queuing find large files queuing loss significant effects transfer times evaluate predictive capability path properties versus delay subcomponent delay find linear combinations path properties good predictors features findings implications analytic models tcp throughput models provide simple mechanism estimating expected throughput based rtt average packet loss rate inputs related network conditions acknowledge merits simplicity models insights tcp behavior provide show data models poor predicting throughput attribute factors variability rtt caused queuing delays complex loss processes assumed model results suggest additional factors throughput models account broader range network conditions results implications network operations domain obvious network managers focus traffic engineering efforts paths networks operate efficient frontier efforts estimate distances nodes means directing clients mirror servers findings static path properties physical distance accurate dynamic features rtt terms predicting expected throughput paths find static dynamic features inaccurate throughput predictors minority paths related area routing overlay networks results select overlay path client server combines paths efficient frontier direct shorter path operate efficient frontier related work growing number measurement-based studies wide area network behavior shed considerable light factors including performance stability growth examples relate work include studies investigate basic characteristics packet dynamics studies assess internet routing path characteristics work similar zhang study authors large measurement data set define characteristics network path constancy related packet loss packet delay tcp throughput specifically treat issues path constancy work results study applied problems tcp performance modeling distance estimation systems estimations distance evaluated extensively caching literature techniques placing content clients improve performance considered including geographical distance topological distance latency end-to-end distance metrics topic on-going study recent work huffaker finds geographical distance reasonable indicator round trip time important aspect measurement-based study attempt establish invariant behavioral characteristics successful work regard establishment self-similarity fundamental characteristic network packet traffic attempt establish advocate invariant properties characteristics treat paper path properties understand network state investigated allman paxson work considers path state inferred tcp traces means refining rto bandwidth estimates variety tools developed assess path properties bandwidth loss characteristics examples include work differs investigation static notions path properties route characteristics predictors tcp data transfer latency iii data measurement environment data collected wawm infrastructure environment comprises dedicated pcs end end paths spanning distinct autonomous systems continents systems fig deployment wawm nodes systems boston included abbreviations identify hosts canarie verio att alternet qwest nasa jnic cnuce startap netusacom wash dante wiscnet sprint cwusa bacom gigapopne abilene genuity madison purdue cleveland tokyo san jose bologna harvard boston saskatoon denver fig autonomous systems connecting wawm nodes reside universities research institutions commercial companies providing mix paths commodity commercial service providers non-commodity internet abilene administrative domains figures depict maps deployed wawm nodes ass span systems connected networks mbps ethernet cards path data assess relationship data transfer latency path path underlying physical properties focused measurable path characteristics administrative domain admin differentiate general categories administrative domains paths path commodity isp designate commodity path commodity made carriers internet abilene nasa ripe apan canarie bottleneck bandwidth bottleneck bandwidth static path capacities measured tools pathrate nettimer measured bottleneck bandwidths ranged mbps router hops rhops traceroute measure number router hops path router hop counts ranged round trip time rtt considered alternatives measure rtt traceroute data estimates packet traces packet traces file downloads experience queuing delays interested minimum delays due propagation decided 
rtts traceroutes average median rtts hourly traceroutewas obtain typical round trip time estimates paths varied transcontinental paths transoceanic paths autonomous system hops ashops asroute tool built top traceroute summarizes traceroute data autonomous system level estimating as-hops asroute helps distinguish interas intraas route fluctuations as-hop counts data set ranged physical distance dist corresponds road air distances cities values obtained popular on-line mileage calculators ranged miles boston univ harvard univ miles boston univ tokyo summary statistics values organized administrative domain table data collection method measurements hourly full mesh systems period days december january measurement consisted traceroute server client file transfers wget distinct files unbiased measurements exponentially distributed delay seconds introduced individual file downloads order randomized file sizes downloads intention choosing file sizes attempt exercise tcp variety operating regimes considered typical lesser extent file transfers dominated tcp congestion avoidance regime connection set tear significant impact file transfers summary data collected study table slight variations total number files transferred due outages censoring significant out-lier samples caused variety problems including measurement misconfigurations delay spikes measurement period tools tools assess static bottleneck bandwidths path measurement entable variance values physical properties paths commodity non-commodity adm domains admin num paths hops router hops distance rtt mbps vironment pathrate nettimer decision based fact limited wide-spread deployment experience tools important issue tools exert significant load network study limited approach daily measurements paths week average results tool assessment data revealed high variability values returned nettimer number noticeable discrepancies path madison italy bottlneck mbps nettimer consistently produced mbps decided restrict analysis based values obtained pathrate values shown table reflect summary statistics commodity non-commodity paths order magnitude difference path groups important factor prevelance commodity links efficient frontier route measured ranging individual paths entire study potentially lead possibly significant differences individual paths measurements returned pathrate paths fact stable measurement period attribute fluctuations minor intra-as route fluctuations happening endpoints effect bottlenecks extracting components transfer delay original algorithm applying critical path analysis cpa tcp transaction algorithm enabled total delay tcp data transfers decomposed distinct sub-components server delay client delay aspects network delay algorithm based observation packets tcp data transfers contribute total delay multiple data packets round trip time sequence packets responsible total delay critical path identified table summary measurement data study data type total transfers transfers loss file file file traceroute components delay established step identifying critical path tcp transfers associate sets data packets ack packet triggered emission transfer packet traces collected end host refer description handling connection set-up teardown essentially simulating tcp algorithm based observed ack sequence inferred packet loss critical path established tracing back data packet ack triggered data packet triggered ack etcetera back data packet resulting sequence data ack packets form critical path transfer establishing critical path components delay identified profiling process process results division total delay data transfer latency categories category server delay sum differences receipt acks critical path emission data triggered acks category client delay sum differences receipt data critical path emission acks critical path analysis enables delays caused end hosts isolated study focus delays caused network divided sub-components propagation delay minimum packet transit time direction multiplied number packets transferred direction critical path queuing delay sum differences propagation delay actual delay packets critical wawm hosts work purposes end host delays minimal path network variation delay simple detect route fluctuations ttl field header suffers weaknesses detect route fluctuations number hops don change contend effects possibility minimal methodology tend detect route fluctuations significant impact delay fast retransmit delay sum delays packet losses recognized tcp fast retransmit mechanism coarse timeout delay sum delays packet losses recognized tcp coarse-grained timeout mechanism exponential back-off delay sum delays packet losses recognized tcp coarse-grained timeout mechanism loss packet resulting tcp exponential back-off mechanism dns delay total delay caused resolution process study made enhancements original algorithm applying cpa tcp transactions ability monitor critical path single end point establish critical path delay breakdowns real time relaxed requirement tightly synchronized clocks separation queuing network variation delays explained separation coarse timeout delay exponential backoff delay facilitate enhancements instrumented linuxkernels running measurement hosts add extra tcp option cpa disabled sack modifications sender receiver timers minor additional benefit kernel-level implementation cpa details transfer latency evaluated application tcp transport implementation specific http transactions general task critical path profiling complicated fact end hosts synchronized clocks handled gps clocks requirement significantly restricts wide spread deployment cpa capabilities treated problem cpa implementation calculating latencies round opposed packet account clock synchronization problems assumption clock treatment clock synchronization problems wide area measurements offset non-zero clock skew negligible single download clock synchronization pathology affect implementation reduce dimensionality data sub-components total delay propagation queuing loss observe network variation delay occurs observed ttl values transfers loss delay study sum fast retransmit coarse timeout exponential back-off delays measured transfer results consideration transfer delay properties path properties resulted highly dimensional data set systematically employed statistical tests evaluate characteristics network delays relate path properties section describe specific focus areas study analysis methods results evaluations section refer individual paths abbreviations consist letters client server abbreviations host shown figure investigate distributional characteristics features measured dimensionality data significantly complicates approach limit breadth results report result analysis focuses variance values property consideration path path properties simple qualitative assessment total network delay data showed distinctly characteristics paths examples time series commodity paths figures figure top illustrates typical behavior path efficient frontier highly predictable delays dominated propogation contrast path bottom experiences significant variability queuing loss step attempting evaluate network delay characteristics assess similarities path properties establishing similarities based path properties explain variability data transfer measurements serve basis operational application results difficulty assessing similarities path properties features considered dist rtt rhops ashops admin fig network delay time series transfers paths week period top boston-san jose bottom saskatoon-denver delay y-axis ranges secs top figure secs bottom needed reduce dimensionality determine natural groupings paths solution apply principal components analysis pca values path property data pca standard method combining features evaluate groups pca constructs linear combinations features order project high dimensional data lower dimensional component space application pca showed principal components sufficient explain variability path property data agglomerative hierarchical method suggested cluster paths principle components qualitative 
assessment reveals distinct clusters shown figure closer evaluation clusters shows generally separate based administrative domain type distance client server measure distance works discriminator data transfer latency path properties considered transfer times begin process characterizing relationships path properties data transfer delays additional objective analysis understand predictive capability path properties vis vis data transfer delay number path properties complicating factor approach analysis robust regression analysis values path properties rhops ashops dist rtt versus total delay fig clustering results components pca omit consideration due limited size data set robust regression estimator performs high breakdown point high efficiency regression test bias method proposed algorithm results estimates strongly consistent asymptotically normal assessing results robust regression analysis find strong linear relationship path properties total delay find number significant outliers paths commodity networks fit comparison total delay rtt shown figure refer details residuals regression note interesting findings path properties lead virtually identical relationship static property physical distance good indicator typical transfer time paths figure shortest harvard boston 
longest paths japan italy fall extremes linear fits absence similar linear fit respect apparant figure artifact tcp window size limitations default installations prevent connections exercising full bandwidth end end path considered increasing buffer size conflict desire measure latencies experienced typical file transfers lack correlation critical reexamination existing window sizes illustrates opportunities dynamic window scaling algorithms plots highlight fact paths typrtt meantd abac bfbi fafb ifih jbjc pfph rbrc rfrhri fig robust regression results comparing total delay data transfers meantd secs rtt dist meantd abac bibj didj fafb hjhp ifihij pfph rbrc rfrh fig robust regression results comparing total delay transfers meantd secs physical dist miles ically operate close maximum performance capability data transfer latency limited speed light delays router switching delays receive window size call regime efficient frontier smaller files demonstrate property strongly shortly paths large files typically transferred great difficulty typical behavior efficient frontier observations suggest paths repeated probing determine distance unnecessary likewise paths operate efficient frontier results suggest path property good indicator data transfer delay robust regressions transfer times files versus path properties reveal stronger linear relationship fewer intense outliers files path properties good indicators transfer delay fewer distinct outliers show results comparing delay smaller file rtt figures results meantd arba bibjbp cicj didj fafb hjhp ibic ihijip jbjc rbrc rhri fig scatter plot comparing total delay data transfers meantd secs b-bw mbps rtt meantd abac ahai dhdi hfhi ifih jbjc pfph rbrc rfrh fig robust regression results comparing total delay transfers meantd secs rtt predictive capability throughput increases file size decreases broader aspects distributions transfer times files figure show cumulative distribution function cdf graphs paths furthest efficient frontier paths approximately rtt measurements contrasts distributional characteristics obvious paths furthest efficient frontier showing greater variability variability figure compares standard deviation transfer times includes robust regression line figure shows linear relationship paths indicating distributional shape paths similar scaled physical distance paths property paths typically operate efficient frontier rtt meantd ifih rbrc fig robust regression results comparing total delay transfers meantd secs rtt fig cumulative distributions transfer times files paths operate efficient frontier furthest efficient frontier effects propagation queuing loss transfer latency characterize contributions propagation delay queuing delay loss delay total data transfer latency create triangle plots file sizes shown figures triangle plots represent contribution component normalized total transfer delay path point vertex diagrams means transfer delays path strongly influenced components likewise path point middle triangle means equal contribution component total transfer delay triangle plots show propagation delay significant component total delay paths file sizes reinforces observations operation efficient frontier data transfers typically limited speed light considerations paths closer examination data transfers effects queuing loss roughly equivalent fact biased meantd stdtd abac babc bfbi cacb cicj didj hahbhc iaibic ipir jajb pfph rarbrc rhrirj fig robust regression standard deviation stdtd secs meantd secs transfers meanpd meanqd kmeanld abacad ajap arbabc bfbi bjbp cdcfch dadb djdp fifjfp hchd hjhp iaibic jajbjc jijp pbpcpdpf prra rbrc fig triangle plot comparing relative contribution total transfer delay propagation meanpd queuing meanqd loss meanld file queuing paths dominated propagation paths largest queuing loss components commodity paths significant loss queuing components files commodity characteristics data transfers smaller files loss appears important component total delay files typically unaffected queuing delay consideration effect queuing loss variability total delay evaluate question assessing plots standard deviation total delay data transfers versus loss queuing delays figures figures include robust regressions standard deviation total delay versus loss queuing delays surprisingly paths higher loss queuing higher variability delays meanpd meanqd kmeanld abac aparbabc crdadb drfa fpfrha hdhf ibic irja jdjf papbpc phpipj rbrc fig triangle plot comparing relative contribution total transfer delay propagation meanpd queuing meanqd loss meanld file meanpd meanqd mbmeanld abac ajap arbabc bjbp brcacb cpcrdadb djdpdr fdfh fpfr hphr ibic irjajb jdjf jijp papbpc pdpf prra rbrc rfrh fig triangle plot comparing relative contribution total transfer delay propagation meanpd queuing meanqd loss meanld file periodicity network delays phenomenon network traffic characteristic diurnal behavior expected similar effects data transfer delays components specifically delays tend increase day subside efficient frontier night qualitative assessment time series delays paths showed instances case investigate developed sum squares method evaluating periodicity data transfer delays path average queuing hour std dev queuing hour ssdiurnal meanld stdtd abac babc bfbibj cacb cicj didj hahbhc hihj hriaibic ijipir jajb jijp pbpc rarbrc rhrirjrp fig robust regression std dev total delay file stdtd secs loss delay meanld secs meanqd stdtd abac babc bfbibj cacb cicj didj hahbhc hihj hriaibic ijipir jajb pbpc pfph rarbrc rhrirjrp fig robust regression std dev total delay file stdtd secs queuing delay meanqd secs ssresidual ssdiurnal ssresidual ssdiurnal case measure periodicity accuracy greater indication periodicity data makes sense values low paths operate efficient frontier paths exhibit diurnal behavior purpose identify levels individual delay components affected periodicity results running algorithm transfer data table iii summary statistics lower periodicity total delay commodity paths interestingly show strongest periodic component queuing delay commodity paths loss delay commodity paths table iii variance values periodicity delays administrative domains admin total delay prop delay q-ing delay loss delay commodity non-commodity non-efficient efficient discussion 
critical aspect measurement study relevance important network design questions section discuss implications results areas analytic modeling tcp throughput operational aspects wide area networking implications tcp throughput modeling series models developed attempt predict throughput tcp reno beginning culminating recent application throughput model proposed means modulating send rate transport level congestion control scheme accuracy model context important models average rtt average packet loss rate input related network conditions extracted average rtt average packet loss rates file transfers plug model cardwell compare predicted values expected average throughput measured values plotted results paths motivation undertaking understand properties paths operating efficient frontier expected model predict delays accurately paths efficient frontier accurate paths figure correlation predicted measured values throughput examination reveals distinct groups paths deviate significantly predicted throughput throughput lower predicted cluster throughput higher predicted cluster set paths average throughput lower predicted cardwell model cluster transfer times include significantly larger queuing component figure queuing delay considfig scatter plots predicted versus measured throughput files paths ered current throughput models delays paths cluster paths efficient frontier tend underpredicted model reason results suggest means addressing add queuing delay factor models proportional file size depends transfer path operates efficient frontier set paths average throughput higher predicted cardwell model cluster difficult understand figure shows paths typically greater loss delays studies packet loss behavior show losses typically bursty loss episodes modeled iid process current throughput models assume uniform loss process conjecture uniform loss process leads smaller average congestion window sizes lower throughput bursty process intend investigate future work conjecture correct suggest accurate loss model greatly benefit existing throughput models fig comparison network delays path clusters arise comparing measured throughput modeled throughput files implications network operations results related operation efficient frontier implications engineers responsible daily operations wide area networks tomographic techniques employed isolate specific parts paths responsible poor performance upgraded avoided altogether application findings operational domain area distance measurement idmaps system potential kind measurement mapping customer requests caches content delivery networks fact static path properties physical distance accurate dynamic features predicting expected throughput greatly simplify task final domain utilize results area routing overlay networks networks conceived provide application level routing capability hosts improve robustness availability network results select overlay path client server combines paths efficient frontier direct shorter path operate efficient frontier conclusions future work present analysis large set tcp file transfers traceroute measurements internet hosts measured period days objective expand understanding delays end end data transfers delays relate underlying path properties developed kernel level implementation critical path analysis tcp transactions enabled establishment profiling critical path real time implementation expanded prior work enabling additional properties network delays packet loss resulting exponential back-off recognized gathering data employed multivariate analysis techniques evaluate path delay properties analysis insight details network data transfer delays number ways show linear combinations path properties sufficient group paths similar clustering based principal components resulted groups differentiable backbone provider physical distance evaluate end end path properties predictor total file transfer latency find expected transfer latency effectively predicted number path properties present notion efficient frontier performance network paths paths typical behavior threshold break network component file transfer latency categories propagation queuing loss compare contribution components distinct file sizes find propagation delay dominant aspect expected total delay paths find effects queuing loss depend file size evident typically minority paths paths queuing contributes significantly periodicity total delays loss contributes significantly variability total delay results implications area protocol throughput performance modeling operational system deployments distinct regimes path behavior close efficient frontier additional considerations made throughput models operational system deployments distributed caching routing overlay infrastructures distance metrics associate clients mirror servers justified employing simple distance metrics physical distance majority systems steps include additional analysis dimensions data aspect critical path analysis capture evolution delays progress transaction potential application capability dynamic routing mirror selection transactions plan investigate entire data set signal analysis methods focus delay values overlooks important signals data finally plan investigate variants tcp techniques established paper measuring evaluating tcp traffic padmanabhan mogul improving http latency computer networks isdn systems vol december frystyk-nielsen gettys baird-smith prud hommeaux wium-lie lilley network performance effects http css png proceedings acm sigcomm cannes france setpember hoe improving start-up behavior congestion control scheme tcp proceedings acm sigcomm palo alto august padmanabhan katz tcp fast start technique speeding web transfers proceedings ieee globecom november floyd handley padhye widmer equation-based congestion control unicast applications proceedings acm sigcomm stockholm sweden september breslau cao fan phillips shenker web caching zipf-like distributions evidence implications proceedings ieee infocom york march michel nguyen rosenstein floyd jacobson adaptive web caching global caching architecture proceedings web caching workshop manchester england june barford crovella measuring web performance wide area performance evaluation review august jacobson traceroute ftp ftp lbl gov traceroute tar paxson invited talk workshop networkrelated data management barford crovella critical path analysis tcp transactions proceedings acm sigcomm stockholm sweden september cardwell savage anderson modeling tcp latency proceedings ieee infocom tel-aviv israel march mathis semke mahdavi ott macroscopic behavior tcp congestion avoidance algorithm computer communications review vol july padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation proceedings acm sigcomm vancouver canada setpember francis jamin jin jin raz shavitt zhang idmaps global internet host distance estimation service ieee acm transactions networking vol october andersen balakrishnan kaashoek morris resilient overlay networks proceedings acm sosp baniff canada october aceres danzig jamin mitzel characteristics wide-area tcp conversations proceedings acm sigcomm september bolot end-to-end packet delay loss behavior internet proceedings acm sigcomm san francisco setpember paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france september yajnik moon kurose towsley measurement modeling temporal dependence packet loss proceedings ieee infocom york march zhang duffield paxson shenker constancy internet path properties proceedings acm sigcomm internet measurement workshop san francisco november paxson end-to-end routing behavior internet proceedings acm sigcomm palo alto august govindan reddy analysis internet inter-domain topology route stability proceedings ieee infocom kobe japan april savage collins hoffman snell anderson endtoend effects internet path selection proceedings acm sigcomm boston september gwertzman seltzer case geographical push caching proceedings workshop hot topics operating systems nha trace analysis applications performance enhancements distributed information systems thesis boston carter crovella dynamic server 
selection internet proceedings ieee workshop architecture implementation high performance communications subsystems june huffaker comparison end end distance metrics isma routing topology analysis workshop december floyd paxson difficulties simulating internet ieee acm transactions networking vol august leland taqqu willinger wilson selfsimilar nature ethernet traffic extended version ieee acm transactions networking paxson floyd wide-area traffic failure poisson modeling ieee acm transactions networking vol june crovella bestavros self-similarity world wide web traffic evidence ieee acm transactions networking vol december allman paxson estimating endtoend network path properties proceedings acm sigcomm boston september dovrolis ramanathan moore packet dispersion techniques measure proceedings ieee infocom anchorage alaska april savage sting tool measuring packet loss proceedings ieee infocom tel aviv israel april lai baker nettimer tool measuring bottleneck link bandwidth proceedings usenix symposium internet technologies systems march gast barford resource deployment based autonomous system clustering submitted wget http wget paxson measurements analysis end-to-end internet dynamics thesis california berkeley barford bestavros bradley crovella web client access patterns special issue world wide web characterization performance evaluation world wide web journal december paxson calibrating measurements packet transit times proceedings acm sigmetrics madison june venables ripley modern applied statistics splus springer verlag york edition yohai stahel zamar procedure robust estimation inference linear regression chapter directions robust statistics diagnostics part springer-verlag barford donoho flesia yegneswaran characteristics network delays wide area file transfers tech rep wisconsin madison march weigle chun feng dynamic sizing simulatino study proceedings ieee conference computer communications networks october duffield presti towsley network tomography general topologies proceedings acm sigmetrics marina del rey june 

design internet sinks network abuse monitoring vinod yegneswaran paul barford dave plonka dept computer science wisconsin madison dept information technology wisconsin madison abstract monitoring unused dark addresses offers opportunities significantly improve expand knowledge abuse activity problems typical network intrusion detection firewall systems paper address problem designing deploying system monitoring large unused address spaces class telescopes addresses describe architecture implementation internet sink isink system measures packet traffic unused addresses efficient extensible scalable fashion contrast traditional intrusion detection systems firewalls isink includes active component generates response packets incoming traffic isink important advantage discriminating types attacks examination response payloads key feature isink design distinguishes unused address space monitors active response component stateless highly scalable report performance results isink implementation controlled laboratory experiments case study live deployment results demonstrate efficiency scalability implementation important perspective abuse activity afforded key words intrusion detection honeypots deception systems introduction network abuse form intrusions port scanning propagating worms significant on-going threat internet clever scanning methods constantly developed thwart identification standard firewalls network intrusion detection systems nids work staniford moore project evaluate magnitude threat classes worms difficulty worms conclusions papers addressing threats presents research operational communities challenges important step protecting networks malicious intrusions improve measurement detection capabilities means improving perspective effectiveness detection tools monitor unused address space network monitoring unused addresses typically packets destined addresses dropped network gateway border router tracking packets unused addresses offers important advantages misconfigurations packets destined unused addresses malicious false positives significant problem nids minimized unlike nids monitor traffic passively detection tool monitors unused addresses actively respond connection requests enabling capture data packets attack-specific information possibility unused address space monitoring significant class class networks number unused addresses substantial idea monitoring unused address space adopted number studies on-going projects including domino project honeynet project labrea tarpits backscatter analysis conducted moore paper makes contributions description system architecture implementation measuring traffic internet sink isink system developed monitoring abuse traffic active passive means key design requirements isink extensibility features scalability performance meant monitor potentially large amounts address space design isink includes capabilities trace packets actively respond connection requests masquerade application types fingerprint source hosts sample packets increased scalability passive component implementation call passive monitor based argus freely flow measurement tool active component implementation call active sink based click modular router platform click open-source toolkit building high performance network systems commodity hardware focus active sink development build set stateless responder elements generate series application level response packets connections target network services including http netbios smb dcerpc windows rpc service contribution paper measurement evaluation case study isink implementation results case study demonstrate scale diversity traffic characteristics exposed isink-based monitoring results provide validation architectural requirements rationale subsequent evaluation criteria deployed isink situ monitor class address spaces campus network period months entire class address space access data sets report results demonstrate isink capabilities unique information extracted measurement tool traffic characteristics class monitor substantially class monitor conclude location isink address space important strong evidence periodic probing class monitor isolate lovgate worm uncovered smtp hot-spot class network unreported prior study attribute anomaly misconfigured wireless routers major vendor finally assess basic performance isink controlled laboratory experiments show implementation highly scalable response capability results demonstrate isink architecture support range capabilities providing scalable performance results demonstrate active isinks simple extend basic intrusion monitoring capabilities individual networks internet related work notion monitoring unused addresses source information intrusions forms time coin terms internet sink isink monitors variously referred internet sink-holes blackhole routers network telescopes traditional honeypots defined systems authorized activity deployed sole purpose monitoring intrusions honeynets network honeypots typically set vmware hosts deployment significant management scalability challenges moore raises challenges deploying honeypots class network telescope systems similar active sink developed honeyd labrea tarpit projects active sink design differs significant ways systems active sink honeyd designed simulate virtual honeypots unused addresses potential diverse set interactive response capabilities honeyd stateful active responder design significant scalability constraints make inappropriate monitoring large address ranges isinks primary objectives labrea primary design objective slow propagation internet worms sticky honeypot lacks richness interaction capabilities required gather important response information addition richer response set active sink performance greatly exceeds labrea section number empirical studies intrusion attack activity motivate inform work authors explore statistical characteristics internet intrusion activity global perspective study based intrusion logs nids firewalls located broadly internet moore examined global prevalence denial-of-service attacks backscatter analysis work conducted gathering packet traces quiescent class network characteristics code red worm analyzed number studies authors investigate details code red outbreak provide important perspective speed worm propagation moore provide insights speed countermeasures installed inhibit worms propagation prospects successful containment grim clear rapid detection key component quarantine strategy intrusion detection systems standard component network security architectures tools typically monitor packet traffic network ingress egress points identify potential intrusions variety techniques standard methods intrusion identification include misuse detection statistical anomaly detection information retrieval data mining inductive learning work distinguished general nids operate active addresses deal problem identifying nefarious traffic mixed legitimate traffic expect isinks nids complement future operational environment high performance packet monitors collecting packet traces internet years systems relate directly isink design scale reliably log packets high speed links examples include systems developed variety commodity special purpose hardware isink differs significantly systems nids mentioned passively monitors logs packets actively responds incoming tcp connection requests application level response capability internet sink architecture section describe isink requirements architecture implementation implementation context deployments sets address spaces design requirements general requirements isink system possess scalable capability passive active monitoring secure discuss issues security detail passive monitoring capability capture packet header payload information accurately standard tools method packet capture tools employed flexible efficient ways data captured logged active response capability included isink design means gather detailed information abuse activity capability enabled generating response packets transport application levels wide range intrusion traffic active responses potential interfere malicious traffic beneficial ways tarpitting focus isink design expect internet sinks measure abuse activity potentially vast unused address spaces experimental setup needed ability scale entire class network million addresses continued growth malicious internet traffic transition ipv expect scalability grow significantly active passive components system basic approach scalability maintain state active responders means increasing scalability 
sampling techniques active passive components system sampling employed measurement results substantially altered finally intent develop isink open platform systems foundational components open source active response design space section explore architectural alternatives sink-hole response systems choices labrea honeyd honeynets active sink isink active response system shown table compare systems based characteristics table design space sink-hole responders configurability modularity flexibility interactivity scalability active sink high high high low-medium high honeyd high low-medium high low-medium low-medium honeynet low medium medium high low-medium labrea low low low limited high configurability describes ability configuration language define layout components response networks honeyd strengths fine-grained control virtual network topologies network protocol stacks honeyd language provide support assigning large blocks addresses templates default template active sink configuration language inherited click bpf language excellent support fine-grained coarse-grained control virtual network topology active sink design stateless replicate network stack retransmission timers labrea honeynets limited configurability flexibility relates ability mix match services operating systems ability define types windows servers telnet service ftp service netbios service web server design honeyd active sink provide high degree flexibility harder honeynets labrea flexibility regard limited designed objective modularity describes ability compose layer services top layering server message block smb service netbios layering web services ssl active sink design inherently modular directly facilitates service composition contrast honeyd design monolithic straightforward layer services interactivity refers scope response capability levels interactivity honeyd active sink comparable honeynets provide complete response capabilities mitigate risk honeynets stepping-stone additional attacks data controls required limit interactivity practical configuration issues limit interactivity active sink netbios responder grants session requests netbios names user password combinations honeynet windows monitor netbios session requests matches list valid names realized degree interaction active sinks higher honeynets feature large network sinks scalability refers number connections handled time period monitoring environment typically hundreds thousands connection attempts minute active sink stateless kernel module design high degree scalability eliminating unnecessary system calls interrupt handling overheads labrea stateless design reasonable scaling properties user level implementation makes inferior active sink weakness honeyd design inherent statefulness limits scalability experience suggests honeyd works environments tens connection attempts minute scalability honeynet systems vary low medium depending service licensing issues implementation objective monitoring infrastructure implementation create highly scalable backplane sufficient interactivity filter worms attacks misconfiguration accomplish isink design includes passive monitor active sink honeynet component unsolicited traffic directed components provide unique measurement capabilities components addition mrtg flowscan run linux-based commodity pcs details implementation illustrated figure include passive monitor component based argus generic libpcap based network auditing tool flow level monitoring sink traffic interfaced flowscan flow level network traffic visualization tool active sink standard collection elements provided click enabled basic capabilities required building active responses isink figure illustrates isink configuration based click modular design fundamental elements include poll device constantly polls interface packets classifier routes arp packets arp responder icmp ping packets ping responder tcp packets windows responder packets discarded iii windows responder responds connection attempts open ports forwards http requests web responder smb data packets netbios responder application responders developed specifically isink shaded non-commercial honeypot system provide emulation capabilities windows networking netbios smb cifs dcerpc current suite responders includes http responder smtp responder irc responder dameware responder responder backdoor ports mydoom beagle stateless responders enabled observations click flexibility run userlevel module greatly simplifies debugging development honeyd forks process connection attempt recent version honeyd includes support python threads scalability improvements limited overhead python interpreter isp router snmp capable passive monitor active sink vmware honeynet ethernet switchwith port monitoring nexthop nids isp backbone core monitorport nat filter networks prefixes ibgpadvertises dark fig internet sink implementation current implementation nids run offline setipchecksum arp responder smb responderround robin scheduler queue todevice markipheader windows responderip classifier settcpchecksum http respondericmp ping responder netbios responder poll device classifier fig active sink configuration based click modular design shaded elements isink extensions concoct suitable response contents request packet client complex protocols smb knowledge prior state compulsory continue packet exchange point reliably identify worm virus nat filter motivation filtering reduce volume traffic generated active responders module serves purposes routes requests responders active sink honeynets network address translation filters requests attempt exploit vulnerabilities misconfiguration makes mapping isinks difficult increases scalability analysis daemons process large volumes data experimented filtering strategies source connections connections destination port connections destinations ips targeted source strategies option destination ips source attractive performance options comparable provided orders reduction volume packets bytes significantly option chose option additional advantage providing consistent view network scan sources allowing isink subnet live hosts vmware honeynets simply commodity operating systems running vmware route packets services don complete responders fully patched windows systems nids system evaluate packet logs collected filter plan implement support nids rules communicate filter implement real time filtering decisions decision route packets migrate connection vmware honeynet triggered absence signature nids ruleset connection set destination hosts varies source depending order source scans address space study built deployed separate isinks campus-enterprise isink service-provider isink assess isink design demonstrate capabilities deployment campus-enterprise sink campus isink received unsolicited traffic destined approximately unused ipv addresses sparsely-to-moderately utilized class-b networks campus essentially unused addresses holes active subnets typically contiguous host addresses -bit netmasks called black-hole intra-campus router configured advertise class aggregate routes intra-campus ospf result persistent less-specific bit netmask routes campus address unsolicited traffic campus sources destined unused campus addresses falls less-specific routes routed isink measured occasionally traffic destined campus addresses fall isink subnet specific route disappears typically network outages making isink potential warning system problems passively detect routing failures traffic destined campus address reaches isink operators problem important environment isink machine capable actively participating intra-campus routing respond arp nexthop transit link isink ospf router destination static route limits damage caused isink system compromised attempted maliciously deployment service-provider sink service-provider isink received unsolicited traffic destined million ipv addresses class network isp router located campus service-provider served gateway service-provider isink service-provider responsible advertising class network bgp service provider commercial transit providers internet abilene network peers snmp-based measurements ethernet switch ports compute packet loss libpcap-based argus software experiences internet sink section demonstrates isink capabilities illustrates complementary roles passive monitor active sink results isink deployments discuss issues perspective comparing passive-monitoring 
results observed campus-enterprise sink service-provider sink demonstrate utility active sink investigating network phenomenon revealed passive monitor including periodic probing smtp hot-spots tue wed thu fri sat sun mon inbound bits tcp udp ms-sql-m excluded inbound bits protocol campus network sink addresses tue wed thu fri sat sun mon inbound packets tcp udp ms-sql-m excluded inbound packets protocol campus network sink addresses fig inbound traffic typical week campus-enterprise sink bits pkts sat sun mon tue wed thu fri inbound bits tcp udp inbound bits protocol class-a network sink addresses sat sun mon tue wed thu fri inbound packets tcp udp inbound packets protocol class-a network sink addresses fig inbound traffic typical week service provider sink bits pkts campus enterprise isink case study campus isink located inside autonomous system advertised local interior routing protocol system sees traffic local sources addition traffic sources remote networks traffic observed local sources included enterprise network management traffic attempting discover network topology address utilization ping sweeps snmp query attempts traffic misconfigured hosts instance hosts continually send domain queries unused campus address operational dns server address traffic misconfigured afs clients netbios registration requests local windows hosts incorrect wins address malicious probes worm traffic affinity hosts classful network figure shows traffic observed remote sources typical week campus-enterprise isink notable features dominant protocol tcp campus border routers filter scans port ms-sql-m exploited sql-slammer worm peak rate traffic packets obvious periodicity dataset finally tcp dominant protocol packet sizes constant number bytes packets follow predictable ratio graphs bit packet rate show similar trends table top services service provider sink service inbound flows udp netbios-ns dst udp ms-sql-m dst http dst netbios-ssn dst microsoft-ds dst smtp dst http src https dst ms-sql-s dst telnet dst table backscatter sources victims service provider sink hrs min avg type num ips ips tcp rst tcp syn rst tcp ack tcp ack rst icmp intrans time exceeded icmp port unreach icmp pkt filtered unreach tcp syn ack icmp host unreach service provider isink case study volume unsolicited inbound traffic class network varied average rates packets-per-second pps brought system line pps months end study consequence relayed experienced network operators effectively operate quiescent class network end megabit-per-second link link completely saturated unsolicited traffic operate service-provider isink continuously originally assumed safely introduce class least-specific route isink operators occasionally introduce more-specific routes draw network traffic internet need-be sound theory cidr classful routing didn work practice today internet bifurcated commercial commodity networks research education networks internet abilene institutions connected types employ creative routing policies found sites prefer less-specific routes more-specific less-specific route higher-performance fixed cost service internet figure depicts traffic observed typical week service-provider isink unlike campus-enterprise network dominant protocol udp attribute windows netbios scans port ms-sql-m traffic worm attempting exploit vulnerable ms-sql monitor udp traffic payloads varying sizes dominates strong correspondence graphs bytes packets interesting feature striking periodic behavior tcp flows discussed detail section table summary inbound flow rate top services packers tcp ack rst tcp syn ack tcp syn ack rst tcp syn rst icmp intrans time exceeded inbound backscatter packets class-a network sink addresses hours fig time-volume graph backscatter packet types service-provider sink typical hour period sat sun mon tue wed thu fri inbound flows microsoft-ds destination tcp port netbios-ssn destination tcp port periodic service probing period hours class-a network sink addresses fig inbound flows observed service-provider sink ports typical week time day day volume minute interval sources scans time day day sources minute interval fig left volume count typeport scanners hours dec sources peak total sources volume typeport scanners analysis backscatter packets backscatter packets responses spoofed dos attacks effectively project internet wide attack behavior figure time series graph backscatter packet volume observed service-provider sink noteworthy features include tcp packets ack rst dominate expected common response syn flood forged sources vertical lines correspond common short duration spikes syn ack syn ack rst icmp ttl exceeded packets attributed routing loops dos floods low initial ttl table summary number active sources backscatter traffic estimated count victims spoofed source attacks numbers average hours shown figure number sources minute sample terms distribution volumes backscatter scan types results consistent published backscatter made small percentage traffic service-provider sink investigating unique periodic probes periodicity observed service provider isink data excellent perspective intrusion traffic afforded isink step analysis periodicity understand services contributed phenomenon found periodicity observed tcp flows isolated sources scanning services port simultaneously port smb server message block protocol netbios port direct smb isolate attack vector fairly common netbios scanners probe services passive logs provided additional clues scans typically involve successive addresses span boundary probes period roughly hours small timescale periodicity super imposed diurnal periodic behavior larger timescales figure shows number flows scanning services week simplify analysis focused single day data classified scanners services based scan footprints defined scanners match profile successive addresses spanning boundary typesources defined sources scan subnets simultaneously typesources includes processes pick destination addresses randomly highly aggressive figure shows time-volume graph typeand typescan- ners interesting aspect figure number sources peak order magnitude smaller total number participants observed day diurnal behavior attributed type typesources mystery motivated development netbios smb responders observing packet logs generated active response system concluded scanning process lovgate worm creates file netservices exe proceeded setup controlled experiment began infect windows host running vmware lovgate lovgate dictionary attack expected machine blank administrative password easily infected netbios sessions continually rejected due netbios mismatches modified lmhosts file accept smbserver enabling capture worm verified lovgate netbios scanning process matched profile typescanners date disassemble binary compressed self-extracting executable monitored scans infected host relevant characteristics provide insight periodicity scanning process deterministic reboot repeats scanning order day minute intervals stops scanning conjecture gaps occur due approximately synchronized clocks wide area producing observed periodicity smtp hot-spot analysis smtp simple mail transfer protocol scans service provider sink important demonstration active sink capabilities netbios scanning lovgate smtp probes negprot reply negprot request createx reply createx lsarpc tree conn reply tree conn ipc sess setup reply sess setup request syn ack syn bind ack rpc bind lsads request fig rbot timeline lsarpc exploit port syn ack syn systemse exe systemse exe tftp 
fig rbot follow-up commands port passive measurements identified smtp hot-spot address attracting disproportionately large number smtp scans scans hot-spots unused address space typically good indicators misconfiguration day period december observed million scans unique addresses bound destination monitor cursory analysis suggested scans cable-modem dsl subscribers finally scans uncommon tcp syn fingerprint win mss possibility spam software source anomaly ruled due non-standard tcp fingerprint hypothesized specific cable-modem dsl device set smtp responder target address captured incoming revealed source misconfigured wireless-router firewall systems major vendor emails actual firewall logs understand reasons smtp hot-spot examined firewall system firmware unarj utility extract compressed binary searching hot-spot address string binary proved fruitless examination firmware application revealed entry smtp server left blank default led conjecture target address result uninitialized garbage converted network ordered address turns byte hot-spot address printable ascii character searched byte ascii string found match versions firmware device string occurred extracted compressed versions firmware sanity check looked similar ascii strings find kind hot-spots ramifications network operations authors discovered similar problem netgear routers inadvertently flood campus ntp servers experiences recent worms isink deployment proved detecting advent recent worms sasser active response capability provided active sink impossible distinguish existing worm traffic commonly exploited ports port worm process notifying manufacturer plan reveal vendor completed number inbound packets number outbound packets labrea click number packets number packets received labrea click fig scalability click-based internet sink labrea tcp left udp flows activity detection worms modifications responder case lsarpc exploit sasser active response system enabled accurate detection sasser fine-grained classification variants prior release sasser observe early exploits lsarpc service attributed strains agobot figures illustrate interaction rbot recent virus exploits 
lsarpc vulnerability active sink basic performance primary objectives isink design scalability performed scalability tests active sink implementation tcp udp packet streams experimental setup involved ghz pentium pcs connected common local area network pcs designated load generators fourth isink system promiscuously responded arp requests destined address class network figures demonstrates scalability labrea active sink tcp udp stress tests primary difference tcp udp tests tcp connection requests isink machine respond acknowledgments udp packets elicit response ideally expect number outbound packets equal number inbound packets click-based active sink scales tcp load virtually loss packets connection attempts labrea performance starts degrade packets udp test byte udp packets sql-slammer worm case labrea active sink perform admirably labrea starts experience loss rate packets sec sampling reasons connection sampling greatly benefit isink architecture reduced bandwidth requirements improved scalability iii simplified data compare active sink labrea unlike labrea honeyd stateful forks process connection scalable honeyd relies packet filter labrea scalability bounds affect honeyd sampled hash table size percent error true sampled blacklists hour hour hour hour sampled hash table size percent error true sampled blacklists hour hour hour hour fig error rates hash table sizes x-axis log scale sample hold method rates left management analysis isink architecture envision building packet-level sampling strategies passive monitor source-level sampling nat filter considered resource constraint problems passive portion isink evaluated sampling means addressing constraints considered problem fixed resource isink estan varghese describe sampling methods aimed monitoring heavy hitters flows routers limited amount memory adapted methods isink considered problem bandwidth limited resource case idea reduce total amount traffic routed isink selecting subnets total address space monitoring methods combination filtering methods section memory constrained isink sampling method forms basis sampling approach memory constrained isink called sample hold method accurately identifies flows larger threshold heavy hitters sample hold based simple random sampling conjunction hash table maintain flow byte counts specifically incoming packets randomly sampled entries hash table created flow entry created subsequent packets belonging flow counted approach result false positives false negatives accuracy shown high workloads varied characteristics apply sample hold isink problem identifying heavy hitters worst offending source addresses based observed number scans adapting sample hold method isink required define size hash table maintains data sampling rate based empirical observation traffic isink objective identifying accurately flows link capacity oversampling factor selected reduce possibility false negatives results parameters result allocating htlen locations hash table packet sampling rate set htlen maximum packet transmission capacity incoming link measurement period end hash table sorted results produced bandwidth constrained isink sampling bandwidth constrained scenario sampling design problem select set subnets total address space monitoring isink selection number subnets monitor based bandwidth constraints case assume variance traffic volume typical class class address space divide bandwidth number subnets monitored step select specific subnets entire space minimize error introduced estimates probe populations analysis paper based random sampling means subnet selection rationale approach based observation traffic volumes service-provider class address space monitor uniform strengths approach simple method subnet selection unbiased estimates lends directly analysis drawback sampling designs advantage additional information clustered adaptive sampling provide accurate population estimates leave exploration sampling methods future work selecting sampling design analysis focused problem detectability specifically interested understanding accuracy estimates total probe populations randomly selected subsets unbiased estimator population total estimated variance var parenrightbig parenleftbig parenrightbig bracketrightbig total number units case subnets sampled number units population case number occurrences specific type probe population variance probability detection type probe analysis presented section evaluate error population estimates range detection probabilities size samples samples dividing class address space component class probabilities relate directly detection worst offenders top sources unsolicited traffic prior sampling analysis results provide means judging population estimation error rates function network bandwidth consumption sampling evaluation evaluation impact sampling isink offline analysis traces gathered day selected random service-provider isink objective empirically assess accuracy sampling memory constrained bandwidth constrained conditions memory constrained evaluation compare ability accurately generate top heavy hitter source list consecutive hour periods hash table sizes sampling rates hour data set compare percentage difference number scans generated true top blacklist sampled top blacklist sources bandwidth constrained evaluation accuracy dimensions estimating worst offender population partial visibility estimating black lists lengths estimating backscatter population sampled number networks estimated error sampled number networks estimated error top top top fig estimated error number randomly selected included error estimates total probes worst offending source range detection probabilities left estimates total probes worst offender lists sizes memory constrained evaluation considers hash table sizes varying entries entry consists 
source access attempt count note hash table required maintain complete list data order entries arbitrarily chosen sampling rates uniform probability case source address entered table subsequent packets counted tables full hour entries lowest counts evicted make room entries end hour top true sampled lists compared lists started hour results shown figure results coarse sampling rates small hash tables enable fairly accurate black lists error factor improvement sampling benefit increasing hash table size perspective heavy hitter analysis memory constrained system sampling effectively employed isinks discussed prior section bandwidth constrained evaluation error introduced population estimates simple random sampling portion address space argue simple random sampling analysis uniform distribution traffic class monitor cumulative distribution traffic hour period half subnets class monitor shown figure figure shows traffic subnets uniform rate packets minute specific traffic subpopulations tcp backscatter show significant non-uniformity significant impact sampling normalized standard deviation estimate error analysis case data collected typical hour empirically assess estimated error function randomly selected sample subnets results approach shown figure graph left shows ability accurately estimate number probes single worst offending source range detection probabilities probability detecting source selected graph worst offenders detectable small sample size error-prone incomplete measurements graph shows ability accurately estimate black lists selected sample sampled number networks estimated error networks order volume percent total traffic tcp backscatter fig estimated error tcp backscatter traffic left cumulative distribution traffic tcp backscatter traffic half class address space monitor hour period average number probes packets minute graph easier estimate larger smaller black lists sampling attribute variability black list ordering finally figure left shows ability accurately estimate tcp backscatter traffic range detection probabilities graph suggests backscatter estimates robust face error-prone incomplete measurements estimated error total backscatter high large number attributed non-uniformity backscatter traffic class monitor shown figure suggests alternative sampling methods backscatter traffic explored broader scale traditional backscatter methodologies assumes uniformity error prone summary future work paper describe architecture implementation internet sink tool general network security architecture isinks general design objectives including scalability ability passively monitor network traffic unused addresses actively respond incoming connection requests features enable large scale monitoring scanning activity attack payload monitoring implementation isink based application click modular router nat filter argus flow monitor platform extensible scalable foundation system enables deployment commodity hardware initial implementation includes basic monitoring active response capability test laboratory live environments report results isink deployment live environment comprising class networks entire class network objectives case studies evaluate isink design choices demonstrate breadth information isink assess differences perspective based isink location address space show amount traffic delivered isinks large variable clear evidence documented worm traffic easily explained traffic aggregate considered internet background noise expected volumes traffic class monitors class monitor differ found characteristics scans networks demonstrate capability isinks provide insights interesting network phenomenon periodic probing smtp hot-spots ability gather information sources abuse sampling techniques discussion operational issues security passive fingerprinting techniques provided evaluation isink implementation demonstrates performance capabilities expectations live deployment laboratory tests show isinks based commodity hardware ability monitor respond connection requests approximately peak traffic volume observed class monitor exceeds current version labrea performance show sampling techniques effectively isink reduce system overhead providing accurate data scanning activity intend pursue future work number directions plan expand amount address space monitor deploying isinks networks intend supplement isink developing tools datamining automatic signature generation acknowledgements authors jeff bartig geoff horne bill jensen jim martin exploration filtering techniques grew fruitful discussions vinod internship vern paxson acknowledge contributions ruoming pang development dcerpc responder finally anonymous reviewers insightful comments diego zamboni excellent shepherding anderson khattak information retrieval techniques intrusion detection proceedings raid september network associates lovgate virus summary http vil nai vil content print htm bullard argus open project http qosient argus cranor gao johnson shkapenyuk spatscheck gigascope high performance network monitoring sql interface e-eye analysis sasser worm http eeye html research advisories html estan varghese directions traffic measurement accounting proceedings acm sigcomm pittsburgh august feldmann greenberg lund reingold rexford netscope traffic engineering networks ieee network magazine special issue internet traffic engineering greene bgpv security risk assessment june greene remote triggering black hole filtering august honeyd network rhapsody http citi umich provos honeyd iannaccone diot graham mckeown monitoring high speed links sigcomm internet measurement workshop november kohler morris chen jannotti kaashoek click modular router acm transactions computer systems august lee stolfo mok data mining framework building intrusion detection models ieee symposium security privacy liston labrea tarpit homepage http hackbusters net labrea moore network telescopes http caida outreach presentations dimacs moore paxson savage shannon staniford weaver spread sapphire slammer worm technical report caida moore shannon claffy code red case study spread victims internet worm proceedings acm sigcomm internet measurement workshop marseilles france november moore shannon voelker savage internet quarantine requirements self-propagating code proceedings ieee infocom april moore voelker savage inferring internet denial service activity proceedings usenix security symposium washington august oetiker multi router traffic grapher proceedings usenix twelvth system administration conference lisa xii december paxson bro system detecting network intruders real time proceedings usenix security symposium plonka flawed routers flood wisconsin internet time server http wisc plonka netgear-sntp plonka flowscan network traffic flow reporting visualization tool proceedings usenix fourteenth system administration conference lisa xiv december rekhter rfc cidr classful routing august roesch snort network intrusion detection system http snort staniford hoagland mcalerney practical automated detection stealthy portscans proceedings acm ccs ids workshop november staniford paxson weaver internet spare time proceedings usenix security symposium san francisco august teng chen c-y adaptive real-time anomaly detection inductively generated sequential patterns ieee symposium security privacy honeynet project http project honeynet trend micro worm rbot http trendmicro-europe enterprise security info detail php vname worm rbot yegneswaran barford jha global intrusion detection domino overlay system proceedings ndss san diego yegneswaran barford plonka design internet sinks network abuse monitoring wisconsin technical report yegneswaran barford ullrich internet intrusions global characteristics prevalence proceedings acm sigmetrics san diego june 
comparison probe-based router-based methods measuring packet loss paul barford joel sommers abstract probe-based active measurements packet loss formed basis empirical understanding loss behavior wide area networks routerbased passive loss measurements snmp widely offer potential detailed perspective paper present case study quantitatively assesses compares viewpoints provided methods measuring packet loss hypothesis probe-based router-based loss measurements correlate investigated comparing snmp loss measurements router interfaces extracted packet traces series laboratory experiments found passive measures loss highly correlated evaluated packet loss data gathered weeks widely deployed infrastructure backbone router interfaces passive measurements co-located hosts active probes full mesh found correlation time series passive router-based measures loss active loss probes paths measurement infrastructure compared distributional characteristics loss measurements including lengths loss free periods loss rates lossy periods measures loss constancy found level agreement passive measures active measures characteristics low deeper evaluation data current methods active probing packet loss suffer high variance inherent standard sampling techniques effects end-host interface loss characterize work introduction packet loss due congestion fundamental problem wide area packet switched networks great effort spent characterize model phenomenon design protocols networks effectively avoid control recover packet loss progress made packet loss effects performance remain significant issue network researchers system designers operators evolution network protocols network systems influenced basic empirical studies packet loss behavior number studies sigp barford sommers members computer science department wisconsin madison e-mail jsommers wisc nificant effects regard examples protocols benefited directly empirical observations packet loss behavior newreno sack versions tcp internet constantly changing environment requires continued evaluation important phenomena packet loss basic methods measuring packet loss set challenges passive monitors attached network links network nodes standard means passive monitoring set management information base mib counters network nodes simple network management protocol snmp counters track wide range activity including packet losses due congestion benefit passive monitoring systems capture important details local traffic behavior identifying subsystem router overloaded cost detail high terms data storage requirements access links routers frequently administrative domains means measuring packet loss active end-to-end probing simplest active probe measure packet loss ping utility active probe tools ping sends series packets aimed target system network measures response packets returned sending system lost packets tracked sender sequence numbers benefits active probes run virtually network give end-to-end perspective network behavior difficulty discrete nature active probing limits resolution measurements standard problem measurement methodology based sampling frequent probes network resolution increase frequency high probes skew results analogous voltmeter loading effect difficulties active probing remains important methods gathering packet loss data active probe tools one-way separate sender receiver paper address question probe-based router-based measurements packet loss correlate end paper makes contributions quantitative assessment accuracy snmp measurements loss widely deployed backbone router controlled laboratory environment case study passive loss measurements snmp abilene internet backbone knowledge broad characterization packet loss passive measurements live environment comparison active loss probes passive loss measurements snmp live environment examined accuracy snmp loss measurements order address common perceptions inaccuracy snmp loss measurements series controlled laboratory experiments found snmp accurate reporting loss router-based measurements packet loss snmp collection periods backbone routers abilene internet infrastructure aggregated loss data interfaces path full mesh paths obtain end-to-end perspectives loss behavior treated measurements baseline compared set active probes loss simultaneously infrastructure active probing tool measure loss zing utility sends probe packets exponentially modulated intervals probing method provide unbiased time-averaged data loss conditions end-to-end path one-way measurements packet loss running zing nodes gps-enabled surveyor infrastructure directly connected abilene backbone routers enabled probe paths full mesh backbone risk unable account packet loss intermediate routers measurement periods set average probe rate aggregated measured loss rates compare snmp data attempting develop single metric comparison evaluated degree agreement active measurements snmp measurements number ways compared correlation coefficients time series loss rates endto-end path results show correlation loss rates measured active probes loss rates measured snmp compared distributional characteristics loss measurements loss properties including lengths loss-free periods loss rates lossy periods measures loss constancy case found low level agreement distributions led conclusion probe-based router-based measures loss provide perspectives number explanations lack agreement types measurements deeper investigation regard left future work possibility active probing process affect results experimented probe process comparing poisson modulated zing probes simple ping probes rates zing found negligible difference types probe processes attribute lack difference probe types low loss rates observe data reason poor correlation artifacts measurements bias results artifact interface loss active probe systems examples interface loss data loss measured active probe loss measured snmp attribute losses end-host network interface found occurrence losses rare censoring data find low correlation measurement methods plausible explanation lack correlation sampling rates employ active measurements coarse enable typical loss episodes infrastructure measured accurately probe rates study found correlation significantly improve faster probe rates due fact loss rates measured snmp low required sampling active probes long periods time correlations established section iii-b detailed discussion issue work number implications active probe methods loss accurate picture loss behavior low loss environments short periods time infrastructures active probes loss monitoring means collecting data finally study suggests characterizations models packet loss based active measurements reevaluated data probing methodologies passive measurements rest paper organized section discuss work related study section iii presents details data collected evaluated work section present passive loss characteristics compare active probe loss measurements snmp loss measurements assess degree agreement summarize study discuss future work section related work knowledge prior work attempts compare probe-based router-based measurements packet loss study pasztor veitch identifies limitations active measurements proposed infrastructure global positioning system gps similar surveyor means improving accuracy active probes work validated comparing passive measurements packet delays end-hosts delay measured active probes address precision loss measurements perspective nodes network studies packet loss behavior internet knowledge based passive measurements number passive measurement projects wide area including conducted sprint work bolot paxson active probe measurements establish baseline understanding packet loss characteristics wide area characteristics include correlation structures fine time scales typical loss rates yajnik evaluated correlation structure longer timescales developed markov models temporal dependence structures study zhang assesses aspects constancy loss rates infrastructure similarities links traversed active probes internet abilene work important notion loss process called change free period period time loss 
rate appears well-modeled steady evaluated change free periods data methods outlined paper zing measure packet loss direction study rfc description methods tool zing relies coordinated endhosts taking active measurements savage developed sting tool means solving problem sting clever scheme manipulating tcp stream measure packet loss forward reverse direction single end host approach active measurement packet loss tomography infer link-level loss rates duffield discussed difficulty acquiring passive link-level measurements series packets active loss probes number widely deployed measurement infrastructures actively measure wide area network characteristics infrastructures variety active probe tools measure loss delay connectivity routing end-to-end perspective systems surveyor monitor individual nodes network iii data measurement infrastructure measurement infrastructure unique consists widely dispersed end-host measurement stations typical internet measurement projects includes production routers abilene backbone internet send active probes full mesh end hosts co-located routers collect loss measurements host periodically query backbone routers snmp collect router interface counters figure depicts topology infrastructure cases york measurement hosts directly connected backbone router cases sunnyvale cleveland washington measurement hosts case york backbone router hops measurement host router total end-to-end probe measurements hosts comprising distinct paths collect snmp interface data eleven routers roughly interfaces routermeasurement host fig map abilene backbone nodes sources routerbased data co-located surveyor nodes active probe measurements end hosts run bsd version hosts atm ocmbps interfaces directly connected backbone routers fore marconi atm network interface cards remaining hosts york houston connected backbone routers mbps ethernet reason distinthe abilene backbone router absent picture chicago exclude study guishing types connections routers study process incoming packets differently case data arriving atm interface fast path router data arriving ethernet interface takes slow path cases difference discussed routers cisco gigabit switch routers gsrs gsrs run variant ios version backbone links ocgbps link seattle sunnyvale ocmbps link utilizations period study averaged measurement periods standard deviations periods representativeness data collected environment ascribe argument made zhang states abilene performance representative commercial internet plausibly argue observations apply fairly connected commercial internet not-too-distant future today data collection data present analyze paper collected periods april probes july july probes august august probes due immense amount data generated measurements data collected days section describe specifics data collection active measurements routers snmp router interface data router interface data collected process queried backbone link interface mibs seconds ingress egress packet counts interface drop counts error counts collected counters mib-ii iftable ifxtable addition cisco enterprise mib complete information interface drop counts polled measurement noted interface change time stamp mib-ii iftable operational administrative statuses prevent collection invalid data aid detection counter wrap-around reason poll cisco-specific mib ifindiscards entry mib-ii iftable specific versions ios gsrs mix build revisions subversion primary difference revisions subversion support mpls counts type packet discard happen input inexplicably output counts limitation detailed categorization dropped packets obtained ios show interface command complete identification packets dropped router interface appendix details mib loss counters gsr polling mibs seconds yields diminishing returns increasing router cpu load mibs updated real time individual interfaces propagate local counters main processor module approximately seconds decided seconds compromise increased load routers sufficiently detailed data snmp-based loss rates measured router calculated loss rates paths multiple hops union loss probabilities specifically calculated loss rate multi-hop path length interfaces period qni sum packets lost period interface sum packets transmitted packets lost interface period combination physical interface layout abilene periodic traceroutes enabled easily establish input output interfaces full mesh paths calculation assumes independence loss events hop path simple solution proving independence argue reasonable assumption highly engineered network abilene appeal intuition single flow small group flows correlated congestion losses points path calculated correlation coefficients loss periods loss rates multi-hop paths found coefficients tightly bunched result prove independence consistent assumption independence evaluation snmp data order effectively compare probe-based routerbased measurements packet loss experimentally evaluated packet loss counters implemented cisco ios running gsr platform important question precision counters obtained opaque source backbone-class internet ifindiscards counter mib-ii counts input drops due lack buffers distinctly lack input queue space consult cisco interface table order obtain input queue drops router common lore supported literature networking community holds mib counters dubious quality depending vendor unit hardware configuration shown figure performed experiments test accuracy mib variables wide-area measurements generate traffic spirent traffic generator ocinterface octerminates cisco gsr traffic routed back octhe constraint octo ocforms bottleneck packet loss generated links packet-over-sonet internet direction optical splitters connect image light stream endace dag capture card tuning packet emission parameters generate varying degrees packet loss router compare loss counters router packet traces captured dag cards essence validate passive measurement key clear visibility traces produced capture cards wide-area measurements aggregate measurements sample intervals experiments consist loss regimes created generate approximately packet loss uniformly byte packets link-layer framing generate packet bursts varying sizes combination average inter-burst time average burst length create desired loss rate experiment hours long table correlation coefficients obtained comparing time series snmp loss measurements measurements obtained dag cards experiments note loss rate decreases correlation increases lower correlation higher loss rates primarily artifact edge conditions due sampling interval figure qualitatively shows dag snmp measurement correlation loss experiment experiment snmp dag measures aligned experiments conclude counters implemented high degree accuracy active probe data active measurement data collected modified version zing utility installed end hosts abilene byte probes exponentially disthe difference cisco gsr model internet number interface cards chassis accommodate tributed intervals means probes analysis refer traces zing traces parallel byte probes uniform spacing uniform probing methodology essentially ubiquitous tool ping case probe packets flow direction probes continuously data collection period modify zing unable packet filter capability utility due practical limitations kernels installed measurement hosts atm interface cards modified zing facilitate data storage files reasonable size addition running probes packet loss traceroute measurements full mesh end hosts minutes data enabled determine sets router interfaces encountered end-to-end path mesh loss data specific sets interfaces compared active measurement traces end hosts traceroute reports ingress interface router packet exits link knowledge physical internet backbone layout end link snmp loss calculation study conducted backbone internet routes extremely stable data set unique paths observed yielding route confined day period happened utc denver router regularity specificity led standard 
maintenance activity denver router packet filters end hosts determine measured loss due events internal network uncounted router measurements endpoint differentiate end host buffer overruns network interface drops transmission loss loss due network congestion detect interface errors periodically running netstat end hosts return issue data analysis compare zing ping traces snmp data aggregated probe traces intervals seconds match snmp query frequency result packet filters in-kernel mechanisms applications receiving typically sending packets link-layer avoiding higher-layer protocol processing pertinent study application find packets dropped kernel due buffer limits packet filtering capability compiled kernel commonly requires executive root privileges information static physical interface layout openly abilene noc dag capture card capture carddag optical splitters spirent cisco experimental configuration cumulative loss packets time sec snmpdag cumulative loss duration loss experiment measured dag cards snmp fig laboratory evaluation accuracy snmp router-based loss measurements table correlation snmp dag loss measurements experiment loss loss loss coefficient correlation comparable time series cost insight events smaller time scales probebased measurements aggregation analysis conservative reporting loss events sense measured snmp active probe interval appears active probe detected congestion loss event statistical issues probe-based measurements packet loss fundamental statistical technique obtaining unbiased estimate average state random process sample exponentially distributed intervals extension approach queueing systems resulted well-known poisson arrivals time averages pasta theorem theorem essence states exponentially distributed arrivals queue average state system theorem basis technique active measurement packet loss method employed binary process states describing packet lost due congestion interested estimating sampling times poisson intervals obtain average samples expected number samples note estimate large variance var standard deviation approximately average loss rates order samples simple analysis number important practical implications lower loss rates uncommon highly engineered network abilene fast probe rate send probes months accurate projection loss rates simply decide increase probe rate order reduce time required inevitably forced make trade-offs increasing bandwidth consumption probe traffic potential skewing loss measurements finally probe packet size play role probe measurement accuracy routers implement queuing buffering ways stated introduction issue sampling rate versus loss process primary conjecture poor correlation results reported section attempt offer set guidelines managing tradeoffs sampling rate sample volume accuracy active measurements packet loss paper results step analysis qualitative comparison loss rates snmp probe measures follow assessment comparing distributional characteristics data loss rates lengths loss-free periods loss rates lossy periods loss constancy based notion change free periods analyses explore characteristics packet loss measured routers paths provide understanding baseline probe data compared knowledge discussion wide area loss based snmp measurements distributional characteristic loss measures snmp zing ping canonical path finally quantify degree distributional agreement zing router counters ping router counters goodness-of-fit test degrees freedom chose path indianapolis los angeles canonical path choice completely arbitrary qualitatively representative paths study note end points canonical path direct atm interfaces routers choice arbitrary fundamental differences loss measurements hosts connected atm ethernet qualitative comparison figures show time series graphs router zing ping data canonical path note y-axis log scale qualitatively zing ping largely overestimate lost packets counted router interfaces important note graphs lower bound loss rate measured active probes group measurements sample intervals purpose time series analysis lower bound defined measuring single loss event time interval bound function probe rate time interval considered probe rate average packets sample interval set effective lower bound loss rate probe rate bound reduced order magnitude effective lower bound snmp lower assuming arbitrarily chose degrees freedom level conservatively favors finding agreement distributions measures agreement distributions relative entropy employed objective make straightforward quantitative comparisons time demonstrating details distributional characteristics average packet size bytes minimum loss rate period ocbps roughly substantially lower measured active probes estimate effect transmission loss due network interface drops compared raw data filtered set created data set raw data removing losses reported zing ping reported router interfaces sample interval filtered results path shown figures filtered data notice active probes miss loss events recorded router time scale active probes effectively overestimated loss rate intervals loss apparent periodicity loss events occurring hour present traces shown figures significant background tasks running measurement hosts periodicity traces lower probe frequencies due tremendous amount data generated initiate download experiments conclude figures starkly reveal effect transmission loss due interface drops reflect congestion router rows table quantify effects transmission loss due interface drops loss rate low raw filtered data sets loss rate filtered data order-ofmagnitude lower occasionally highlights shortcomings active probing loss interface drops completely avoided loss rates analysis follow compare snmp data raw zing ping traces data set reason continued analysis raw data active probing studies suffered restriction inability packet filters measure interface operating system buffer drops active probe measurements remote sites volunteered assist study grant executive privileges required packet filters minimum loss rates measured snmp order measurements consistent average packet sizes computed mib variables collected sample intervals case congestion loss occurred router measured active probe router counters significant possibility based experiments inxiii-b canonical path loss rate log zingping snmp probes raw data canonical path loss rate log zingping snmp probes filtered data canonical path loss rate log zingping snmp probes raw data canonical path loss rate log zingping snmp probes filtered data canonical path loss rate log zingping snmp probes raw data canonical path loss rate log zingping snmp probes filtered data fig qualitative comparison loss rates indianapolis los angeles canonical path raw data sets filtered data sets show active probe events loss event measured router sample interval difference raw filtered data effects transmission loss due interface drops table summary statistics canonical path data set loss rate raw snmp zing ping loss rate filtered snmp zing ping loss-free periods raw snmp seconds zing ping loss periods raw snmp zing ping change-free period snmp duration raw zing seconds ping number change-free snmp periods raw zing ping considered loss rate distributions measurement including intervals loss occurred figure shows distributions loss paths snmp data figure shows distribution loss rates snmp zing ping raw data canonical path complementary cumulative distribution function highlight upper tail note loss rates reported table rows minimum discussed loss rates sample intervals pushing average practical minimum sample interval calculated correlation coefficients path router-based measures probe traces 
constructed cumulative distribution functions figure shows raw filtered traces correlation generally poor traces responsible positive correlation suffered loss feature note zing ping distinct correlational advantages loss-free periods loss-free period defined maximum number consecutive sample intervals loss measured understanding measure terms loss event interarrival times figure shows cumulative distributions lossfree periods paths measured snmp paths appears losses occurred frequently apparent regularity paths losses oc- cdf correlation coefficient snmp active probe loss rate zing raw dataping raw data zing filtered dataping filtered data fig cumulative distribution correlation coefficients router-based probe-based measures loss rates paths probe period curred infrequently wide variety loss interarrival times poses challenge determining conduct active network measurements loss introducing minimum level probe traffic network figure shows cumulative distributions lossfree periods measurement method canonical path key feature notice losses closely spaced time measured routers zing ping figure shows cumulative distributions goodness-of-fit statistic zing snmp ping snmp plotted vertical lines indicate- complementary cdf log loss rate log paths snmp complementary cdf log loss rate log zingping snmp canonical path probe snmp fig complementary cumulative distributions loss rates sample intervals router-based measurements probe-based measurements canonical path probe period cdf length loss-free run seconds paths snmp cdf length loss-free run seconds zingping snmp canonical path fig cumulative distributions number consecutive sample intervals loss free paths snmp router-based measurements probe-based measurements canonical path probe period ing acceptance levels note x-axis plotted log scale immediately clear acceptance level zingandpingwere good fits distribution loss-free periods measured snmp loss periods assessed loss rates measured intervals packet loss detected figure plots cumulative distributions goodness-of-fit test hypothesis testing procedure fit hypothesis accepted confidence level metric distribution degrees freedom loss rates loss periods paths snmp router-based traces figure observe wide range loss rates measured snmp range poses challenge designing actively measure packet loss canonical path figure shows zing ping experienced loss rates measured routers snmp lower bound loss rate measurable probes sampling rate obvious curves path zing ping measured similar loss rates loss period average shown table row note cdf zing-snmpping-snmp chi-sq acceptchi-sq accept fig cumulative distribution correlation coefficients router-based probe-based measures loss-free periods paths probe period plot results test loss period distributions reason test falsely loss periods measured zing ping good fits snmp measurement reason simple effect binning computing statistic bins maximum loss rate measured measured values data sets fall lowest bins recall figure table giving false positive indication goodness fit high confidence change free periods finally compared loss constancy measured probes versus loss constancy measured path router interfaces notion change free periods work time series defined series piece-wise steady regions delineated change points parameterized family models poisson processes rate time series change free period cfp modeled parameter task identifying cfp reduced identify change points bootstrapping method generating change points noted method conservative sense miss actual change points overestimate duration steady regions area future work explore methods finding change points router-based data figure shows cumulative distributions duration change free periods paths measured router-based snmp traces analogous figure wide range durations low average loss rate implies average packet size approximately bytes path loss steady number paths conditions change days number paths loss conditions changed higher frequency figure showing cumulative distributions duration change free periods canonical path zing ping experienced high proportions short durations steady loss rates view constancy router interfaces path loss rate steady entire collection period figure plots cumulative distribution statistic comparing change free periods zing snmp ping snmp paths vertical lines plotted indicating acceptance levels zing ping good fits router measurements finally plotted cumulative distribution number change free periods snmp traces zing traces ping traces figure immediately notice fewer change points measured router interfaces paths comparing figure figure infer fewer numbers change free regions short duration recorded routers long regions constancy data zing ping contrast routers tended measure change free periods short durations conclusions future work paper present comparison active passive measurements packet loss study based measurements laboratory wide area total weeks surveyor infrastructure internet abilene backbone gathered passive packet loss data abilene backbone routers snmp intervals zing actively probe loss rates aggregated values intervals assess measures correlate comparison considers degree correlation loss rate time series degree agreement distributions loss characteristics including lengths loss free periods loss rates loss periods duration change free regions laboratory results demonstrate accuracy passive snmp measurements equipment study wide area snmp measurements kind reported show loss rates measured active probes correlated measured snmp show distributions cdf loss rate log paths snmp cdf loss rate log zingping snmp canonical path probe snmp fig cumulative distributions loss rates sample intervals loss paths snmp router-based measurements probe-based measurements canonical path probe period cdf duration cfp seconds paths snmp cdf duration cfp seconds zingping snmp canonical path probe snmp fig cumulative distributions change free periods paths snmp router-based measurements probe-based measurements canonical path probe period values loss free periods loss rates loss periods duration change free regions active probes align closely distributions values snmp evaluated differences loss rates measured poisson modulated zing tool simple ping utility sends probes constant intervals low loss rates measurement infrastructure ping qualitatively level accuracy zing conjecture lack correlation passive active loss measurements due difficulties sampling low loss rates step investigate conjecture controlled laboratory setting theory prove true plan investigate methods probing lightweight ability detect loss shorter time frames acknowledgements matt zekauskas guy almes chris robb people internet abilene data collection hard efforts study larry landweber fruitful discussions dave donoho statistical insights jay rosenbloom cisco demystifying ios gratefully acknowledge generous donation equipment cdf zing-snmpping-snmp chi-sq acceptchi-sq accept cdf number cfps zingping snmp fig cumulative distribution correlation coefficients router-based probe-based measures change free period duration paths probe period fig cumulative distribution change free periods durations paths probe period cisco systems spirent communications traffic generator finally nevil brownlee mark crovella sue moon yin zhang excellent input advice work abilene http abilene internet almes kalidindi zekauskas packet loss metric ippm ietf rfc september nlanr active measurement program amp http moat nlanr net amp bolot end-to-end packet delay loss behavior internet proceedings acm sigcomm san francisco setpember case fedor schoffstall davin simple network management protocol snmp ietf 
rfc cisco systems cisco series internet router architecture http cisco public technotes arch toc html requires registration coates nowak network loss inference unicast end-to-end measurement proceedings itc conference traffic measurement modeling september cranor gao johnson shkapenyuk spatscheck gigascope high performance network monitoring sql interfact proceedings sigmod madison june duffield presti paxson towsley inferring link loss striped unicast probes proceedings ieee infocom anchorage alaska april fraleigh moon lyles cotton khan moll rockwell seely diot packet-level traffic measurements sprint backbone ieee network hoe improving start-up behavior congestion control scheme tcp proceedings acm sigcomm palo alto august mahdavi paxson adams mathis creating scalable architecture internet measurement proceedings inet geneva switzerland july mathis mahdavi floyd romanow tcp selective acknowledgement options ietf rfc matthews cottrell pinger project active internet performance monitoring henp community ieee communications magazine pasztor veitch precision infrastructure active probing pam workshop passive active networking amsterdam holland april paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france september surveyor project http advanced csgippm savage sting tool measuring packet loss proceedings ieee infocom tel aviv israel april william stallings snmp snmpv snmpv rmon addison wesley longman edition wolff poisson arrivals time averages operations research march-april yajnik moon kurose towsley measurement modeling temporal dependence packet loss proceedings ieee infocom york march zhang duffield paxson shenker constancy internet path properties proceedings acm sigcomm internet measurement workshop san francisco november appendix packet loss cisco gsr appendix provide detail packets lost inside gsrs operational perspective understanding meaning limitations router-based measurements tracing lifetime packet gsr packet dropped areas burst buffer arrival interface packet copied burst buffer size mtu awaits input buffer allocation primary type drop inability physical interface module allocate buffer space timely manner situation occur extremely heavy volume small packets actual buffer space exist acquired fast input queue drop deciding output interface packet gsr attempts make routing decision interface interrupt handler cached exact match fast path routing decision common path packets cisco gsr packets routed fast path logic queued input awaiting slower processing main router processing module input queue exceeds configured size packets dropped packets bound router slow path additionally packets arriving interfaces invariably slow path notably slow path packets arriving mbps ethernet interfaces interfaces slow line rates cisco gsr employs virtual output queueing avoid head-of-line blocking fast-path decision made packet queued virtual output queue awaiting transmission internal switching fabric drops occur virtual output queue full losses distinguished types input queue drops input buffers lack properly sized input buffer packet dropped drop occur slow path fast path routing decision switching fabric internal switching fabric congestion result packet loss internal router output queue drop type loss archetypal situation congestion statistically multiplexed packet switched network output line rate aggregated input source rates packets queued awaiting transmission dropped output queue full algorithm drop-tail red type drop measure snmp loss due congestion internal router switching fabric type loss detection requires debugging capability router gathered snmp losses type thought rare find means quantifying phenomenon 
measuring web performance wide area paul barford mark crovella computer science department boston cummington boston fbarford crovellag bu-cs- april abstract vexing questions facing researchers interested world wide web users experience long delays document retrieval internet size complexity continued growth make cult question answer describe wide area web measurement project wawm infrastructure distributed internet study web performance infrastructure enables simultaneous measurements web client performance network performance web server performance infrastructure web tra generator create representative workloads servers active passive tools measure performance characteristics initial results based prototype installation infrastructure presented paper introduction world wide web fascinating distributed system immense scale large scale increasingly important role society make important object study evaluation time web centrally planned con gured basic questions nature open question motivates work basic web slow precisely root long response times web goal answer question precisely recognizing admit single simple answer attempting answer question immediately exposes gaps research date internet measurement answer question research addressed integrated server network measurement related research date focused measuring servers networks isolation interactions wide-area setting understood understand relationship active passive measurements internet active measurements easily understood predict actual web performance passive web measurements ect actual performance hard interpret paper describes project framework called wide area web measurement wawm intended meet project employs network server measurement passive active measurement approaches goal paper describe project explain place context internet measurement research demonstrate utility approach samples early measurements measurement architecture based measuring server state network state simultaneously taking concurrent measurements client server ends sample connections varying server load controlled exploration wide range server network interactions varying server load running experiments times day explore cases server wide-area network independently heavily lightly loaded qualitative terms test apparatus decribed paper small-scale prototype intended expose design issues act platform developing test infrastructure expertise consists web server runningat site number local clients capable generating varying load server overloaded condition single -site client located internet hops generates test connections server passive packet trace measurements -site client server active measurements connection path collected transfer poisson ping poip sends udp packets path connection measures time-averaged network state packet delay loss rate apparatus reduced version full-scale system eventually deploy section cient yield surprising informative results results present section samples represent assessment wide-area web performance nonetheless yield insights bene integrated server network measurement relationship active passive network measurement ndthat server load distinctivee ects pattern packet network show experimental setup noticeable ects high server load generate signi gap transmission connection setup packets rst data packet owing server gap understood consequence socket operations notable typical short transfers gap generally dominates transfer time addition show surprising ect server load network heavily loaded packet loss rates high uncommon heavily loaded server show response time lightly loaded server measurements suggest heavily loaded servers show lower packet loss rates packet losses dramatic ects transfer latency reduce response time finally explore relationship active passive measurements show poip measurements packet delay generally lower experienced packets tcp connections thise ect due fact tcp packets burstierpattern poip packets show poip measurements packet loss strongly predictive packet loss experienced tcp connections due feedback nature tcp presence loss results demonstrate utility integrated network server measurement conclude answers hand approach appears show promise addressing motivating question web slow related work wawm project based large diverse body prior work rely results web characterization studies passive active network measurement studies time calibration studies wide area network performance studies section present selections studies areas served basis work contrast work goals wawm project web performance characterization large body work developed past years presents measurements characterizations web work typically focused speci aspects behavior performance client behavior server behavior proxy behavior network behavior client studies client proxy studies provide information behavior users servers access browsing sessions work critical building tools simulate user activity wawm project signi erence prior web studies wawm project monitor client server activity time prior studies access client proxy server web server behavior studied extensively studies provide insight server behavior loads versions http focused analysis http logs detailed measurements server performance studies provide methodologies measuring performance user space system space tools developed generating workloads web servers synthetic workload generators based making repeated requests quickly predetermined rate workload generators replay web server logs summary server logs surge workload generator generate representative local loads server surge synthetic workload generator unlike previous workload generators incorporates wide range workload characteristics important erent aspects server performance studies network ects web tra include studies show performance ects http protocol interaction tcp packet level interactions shortfall studies analyzing latency measurements place end point http transaction provide insight packet delays directions transaction passive active network measurements task assessing general network performance studied good source general information current measurement tools projects found general techniques studying network performance split passive monitoring techniques active techniques passive techniques typically consist gathering packet level data tap point network examples passive monitors include coral tcpdump great deal information extracted passive monitoring single point early packet trace studies application level interactions characterization self-similar nature tra developed packet traces passive measurement platform proposed system called windmill online analysis data collected passively bene passive techniques perturb system measured passive monitoring limitations terms amount data gathered tests typically large culty real time analysis data active measurement tools inject kind stimulus packet series packets network measure response stimulus active measurement tools measure bulk throughput path characteristics packet delay packet loss bandwidth characteristics hosts number tools measure end-to-end delay packet loss poisson ping poip wawm project poip injects udp packets network poisson process motivation method sampling intervals determined poisson process result observations match time-averaged state system assuming stationary state number studies similar active measurements study packet loss including drive models tcp behavior including studies provide background guides active measurement approach number active measurement tools developed measure bandwidth end-to-end path including pathchar bprobe nettimer traceroute active measurement tool gathers simple path characteristics treno traceroute reno tool measure bulk tcp throughput capacity internet path active measurements give insight network conditions depending data inject network perturb network performance wawm project compare active passive measurements order understand active measurements network conditions correlate performance client server extensive work passive 
active measurement techniques paxson series studies reported studies starting point wawm project measurement analysis perspectives time calibration measurements end-to-end delay architecture based synchronized clocks client server culties synchronizing clocks widely distributed environment studied mills work led development network time protocol ntp daemon wawm synchronize clocks clients servers ntp assures clocks synchronized order tens milliseconds additional studies clock synchronization problems include paxson points ntp close synchronization clocks checks skew made analyzing data results reported paper strongly sensitive clock skew future work plan correct clock skew synchronized external time source gps wide area network performance measurement number wide area measurement projects proposed underway present time propose type work proposed wawm similarities projects closely related wawm cooperative association internet data analysis caida caida mission address problems internet tra measurement performance inter-provider communication cooperation internet service industry national internet measurement infrastructure nimi project nimi project mission create architecture facilitating measurement infrastructure internet ietf internet protocol performance metrics ippm working group ippm working group mission develop set standard metrics applied quality performance reliability internet data delivery services nlanr measurement operations analysis team moats project moat mission create network analysis infrastructure derive understanding systemic service models metrics internet internet performance measurement analysis project ipma ipma mission study performance networks networking protocols local widearea networks keynote systems keynote perspective billed global real-time service continually measure performance popular web sites internet backbone providers regularly publish results form performance index surveyor project orts surveyor project center poisson ping-like measurements one-way delay loss paths number remote sites projects attempts measure analyze aspect internet performance wawm project similar projects wide area measurement infrastructure signi data management analysis tasks wawm project erent number reasons wawm project focuses user level application web projects listed focus general network measurement monitoring analysis wawm proposes network level measurements tests measurements user level characteristics made time wawm proposes install systems act servers infrastructure approach facilitates ease consistency software installation control environment security ease management systems acting servers wawm tests performance monitoring tools enable detailed system measurements tests wawm project overview section describe tools methods wawm project break categories measurement architecture tools management tools testing protocol analysis methods category rst describe long-term project goals describe speci implementations results reported measurement architecture general architecture general architecture wawm hardware components shown figure left components located site rst system con gured web server serve documents clients servers con gured performance monitoring tools detailed measurements cpu memory network characteristics made lan test load generator active passive measurement server distributed clients active passive measurement figure general architecture wawm hardware components tests systems con gured local load generators run surge workload generator adjust amount load server duration test important expect remote systems generate load saturate server run tests heavy server load fourth system passive measurements packet traces active measurements network probe packets tools expect measure minimum packet delays packet losses path routes path characteristics bottleneck link speed system shown control system initiates tests gathers data infrastructure systems server cluster connected local internet service provider isp server cluster network tra bottleneck side gure systems located remotely site goal distribute systems widely internet attempt explore wide range path types remote systems make requests les server tests con gured passive active network measurement tools requests generated clients modi version surge modi version con gured run standard mode make repeated requests single webstone uenced paxson network probe daemon study terms number remote sites complete wawm study utilized sites enabled measurement distinct internet paths selection additional sites based geographic location internet connection type heterogeneity goal additional server site included diversify measurements initial prototype implemented prototype architecture order expose measurement design issues act platform developing test infrastructure expertise results paper prototype system prototype single server cluster located boston consisted pcs connected switched mbps ethernet connected isp mbps bridge pcs con gured mhz pentium pro cpus ram system ran linux server con gured apache traceroute tcpdump measure route characteristics gather packet traces xntpd synchronize time stamps server cluster remote system pcs server cluster set time server tests xntpd update interval set seconds poip con gured run server cluster measurement interval set packet size bytes system set web server con gured webmonitor measure detailed server performance characteristics cpu memory network components server local load generating systems server cluster con gured surge set make requests set consisted distinct les total size data set entire data set cached server ram experiments run low high local load levels load levels surge ned terms user equivalents ues characterizations load range ues systems presented http ues low load ues high load prototype installation single remote site located denver system con gured mhz pentium pro cpu ram ran linux connected local area switched mbps ethernet isp mbps bridge system set network measurement time synchronization tools systems server cluster modi version surge set make repeated requests les server sizes selected sizes chosen demonstrate range behavior network les measure essentially connection setup time les typical-sized web transfers typically involve round trips dominated tcp slow-start behavior les observe mode packets web tcp congestion avoidance mode management architecture order run tests download data manage systems part wawm infrastructure secure management platform required wawm systems evaluating third-party management platforms includingthe nimi platform insoft vitalagent provide essential management features exibility wawm built-in network performance measurement tools management platform area system practical matters dictate design choices order gain insight relevant issues developed management tool prototype study tool written perl based secure shell ssh prototype tests tool proved cient prototype tests data collected cataloged maintained facilitate analysis reuse researchers wawm data repository maintained central site wawm tests run point time simple structure adequate store data test run prototype study single client resulted compressed results data testing protocol general architecture wawm test period time speci set client systems make requests speci server speci cation tests requires determining server cluster test local load server set remote clients make requests test uence distance server internet connection type number clients participating test uence outcome measurements time day test run due diurnal cycle internet tra north america tests run day typically experience pronounced uence cross tra run late night duration test 
test run long collect representative sample data network server conditions schedule active network measurements tests active measurements perturb http performance schedule selected resulting data clear picture network state uencing http tests initial prototype testing protocol prototype ran set tests duringthe day set tests night ten days initiating tests times provided variety network conditions data test began running traceroute server gave indication current end-to-end routes tests test run minutes observed duration cient transfer les heavy network load conditions les light network load conditions poip run server simultaneously http requests duration test separate tests run test set consisted making repeated requests single low high server loads analysis protocol general architecture test data collected reduced analyzed automation analysis process due large amount data gathered test begun development tool called tcpeval perform tasks packet trace data model based tcpanaly addition statistical approaches intend develop methods detailed analysis individual transfers detailed analysis require visual coordination tool tool developed natalie analyze poip traces intend develop methods correlate data gathered active passive measurements initial prototype highest level tabulate summary statistics distributional statistics transfer delays packet delays packet loss server performance tcpeval generates number graphical aids interpretation including timeline diagrams illustrate individual packet exchanges client server single http transaction paper focus timeline diagrams figures represent timing events ends connection table file transfer latency statistics light network load file server files std dev tcpdump tcpdump poip poip sizes load trnsfd latency latency pkt loss delay pkt loss delay low low low high high high sample results section report initial results obtained prototype apparatus section testing protocol called traceroute run test measurements showed route remote site asymmetric fairly stable tests hops hops occasional route sets test measured route change tests measurements transfer latency present performance measurements transfers combinations server load network load sizes tests measurements week period present results data sets typical data collected performance light network load details transfer latency light network load les table table shows busy server adds approximately average transfer latency les seconds average transfer latency packet delay loss characteristics light network load measured poip tcpdump table delay loss measurements outbound path server client network measurements show network conditions fairly stable measurement period light network load light server load transfer latency low variability sizes heavy server load variability increases slightly principal ect server load network load low increase average transfer time constant amount size ects cumulative distribution function cdf diagram figure diagram shows small percentage transfers latency increase times server load high analyze transfers ects varying server load lightly loaded network measurements tcp time lineplots time linesfor typical transfers figure plots rest time line plots section client left hand side server time line plots highlight delay incurred transfers server busy tcp latency seconds low server load high server load figure cdf transfer latency light network load latency seconds latency seconds low server load high server load figure time line diagram typical transfers light network load connection set sequence roughly delay rst data packet server delay due request client user space response back network lightly loaded case instantaneous server lightly loaded data combined information cdf transfer latency leads conclude network lightly loaded maximum additional delay transfers experience accessing busy server performance heavy network load packet delays losses increase transfer characteristics change details transfer latency heavy network load les table network measurements poip network conditions fairly stable measurement period measurements correlate closely delay loss values extracted tcpdump traces explore greater detail section packet transfer delays extracted tcpdump traces increase light network load heavy network load increase packet delays indication level congestion network table shows light server loads transfer latency increases range times latency network lightly loaded shows heavy server loads transfer latency increases range table file transfer latency statistics heavy network load file server files std dev tcpdump tcpdump poip poip sizes load trnsfd latency latency pkt loss delay pkt loss delay low low low high high high latency seconds low server load high server load figure cdf transfer latency heavy network load times latency network lightly loaded interesting statistic note transfer latency heavy network loads decreases server load high versus low ect explored detail section file transfer delays strongly uenced congestion packet loss measurements day time periods data sets showed higher packet loss delay characteristics expected heavy network load transfer latency generally higher delay higher variability sizes server load ects comparing figure gure heavy network load figure figure knee cdf occured percentile figure knee lower indicating larger fraction transfers experienced severe delays time lines typical transfers network heavily loaded figure lightly loaded network case delay sending rst data packet server evident diagrams show general elongation packet transfer times versus lightly loaded network time lines indication level congestion network measurement ects packet loss measurements made high network load show ects network congestion packet loss section speci cally examine ects packet loss transfer latency latency seconds latency seconds low server load high server load figure time line diagram typical transfers heavy network load table file transfer statistics heavy network load les dropped packets dropped packet file server files std dev files std dev sizes load pkt loss latency latency pkt loss latency latency low low low high high high details ects packet loss heavy network load high server load table table shows erences les transferred packet loss file transfers les lose packet times slower les transferred packet loss expected variability les transferred loss lower les transferred loss figure compares impact packet loss transfer latency gure packet loss signi cantly increase variability transfer delay comparing gure figure long transfer delays due packet drops notable feature gure cusp level due lost syn packets timeout period re-sending lost syn packet linux tcp implementation time lines transfers typical packet loss figure gure shows ect single lost packet data transfer phase http transaction light server load heavy network load packet loss tcp restart slow start order transfer remaining packets ect loss addition seconds transfer latency latency seconds drops drops drops drops figure cdf transfer latency heavy network load heavy server load les packet loss latency seconds latency seconds packet loss packet loss figure time 
line diagram transfers heavy network load low server load latency seconds high server load low server load figure file transfer latency transfers heavy network load ects server load initial ects server load transfer latencies shown preceding sections closer examination data ten data sets shows interesting phenomenon transfers ten data sets packet loss server load increased tests cases latency decreases server load increased ect figure cases data table result possibly attributed things experiments transfer run approximately minutes network activity change time performance improve active measurements network fairly consistent tests explanation heavy load server prevents producing bursts packets lightly loaded intend investigate ect wider range conditions conclusively determine active versus passive measurements network conditions previous section values delay loss poip measurements tcp streams disagree erence important suggests measurements derived poip indicative expected performance tcp connections section explore erences implications rst observation poip measurements packet delay typically lower tcp streams figure show cdfs packet delay experienced sets tcp ows poip time intervals plot left corresponds lightly loaded network conditions plot corresponds heavily loaded network conditions typical erences values reported poip experienced tcp packets order note poip measurements made concurrently tcp connections measuring network state higher delay experienced tcp packets compared packets arriving poisson process consistent notion tcp packet stream burstier interarrivals higher coe cient variation poisson process clear tcp transmits packets bursts order congestion window size waits acknowledgments start burst determined round trip time generally occurs time current burst leading high coe cient variation latency seconds poip high poip low pkts high pkts low latency seconds poip high poip low pkts high pkts low figure cdf packet delay server client tests left lightly loaded network heavily loaded network server load packet loss poip packet loss tcpdump figure scatter plot packet loss rate tcp poip interpacket spacing observation packet loss experienced tcp poip strongly related figure shows scatter plot loss rate experienced tcp axis versus experienced poip time frame axis experiments measurements strongly related points tend occur line plotted general poip sees higher packet loss rate tcp universally true reason lack correlation unlike case packet delays packet losses trigger feedback behavior tcp encountering packet loss tcp enters state packets time recovers packets begin reduced rate figure side behavior means tcp view network independent packet loss events result tcp observe fewer loss events poisson process independent packet loss events clear case tcp feedback behavior means view network losses strongly correlated time-average view observations implications poip similar tools measure network state poip limited predicting nature network conditions experienced tcp packet delays bursty nature tcp ows fair important note poip designed assess tcp view network means packets typically larger queues time-averaged conditions respect packet loss feedback nature tcp congestion avoidance makes hard predict tcp actual packet losses open-loop tool poip conclusion paper wawm project argued represents approach novelty arises treatment server network integrated system utility ability explore interaction server behavior network behavior identify cases interoperate small-scale implementation project architecture shown yield informative measurements shown server main ect server load typical transfers delay rst data packet addition shown experiments servers high load ered signi cantly packet loss low load comparing packet delay losses tcp connections measurements obtained poip considerable understandable erences results initial data require con rmation wider range settings suggestive interesting ects motivating question project web slow wawm infrastructure address question require progress dimensions expand measurement apparatus assess representative behavior web means add remote clients locations wider range server platforms iis running windows dimension analytic methods intend develop characterization methods operate traces individual transfers assess relative impact server delay network delay packet loss transfer latency detailed analyses hope obtain precise understand transfer latency web acknowledgements authors david martin denver access system remote client tests presented paper authors vern paxson providing poisson ping study providing input project design authors lars kellogg-stedman setting systems project webbench http zdnet zdbop webbench webbench html abdulla fox abrams shared user behavior world wide web webnet toronto canada october adams mahdavi mathis paxson creating scalable architecture internet measurement http psc mahdavi nimi paper nimi html almeida almeida yates measuring behavior world wide web server proceedings seventh ifip conference high performance networking hpn white plains april almeida bestavros crovella oliveira characterizing locality proceedings international conference parallel distributed information systems pdis pages december arlitt williamson internet web servers workload characterization performance implications ieee acm transactions networking october balakrishnan padmanabhan seshan stemm katz tcp behavior busy internet server analysis improvements proceedings ieee infocom san francisco march balakrishnan seshan stemm katz analyzing stability wide-area network performance proceedings acm sigmetrics seattle june banga druschel measuring capacity web server proceedings usenix annual technical conference monterey december barford crovella generating representative workloads network server performance evaluation proceedings acm sigmetrics pages madison june barford crovella performance evaluation hyper text transfer protocols proceedings acm sigmetrics atlanta bolot end-to-end packet delay loss behavior internet proceedings acm sigcomm san francisco setpember brakmo malley peterson tcp vegas techniques congestion detection avoidance proceedings acm sigmetrics philadelphia braun cla web tra characterization assessment impact caching documents ncsa web server proceedings international conference chicago october bray measuring web international world wide web conference paris france breslau cao fan phillips shenker web caching zipf-like distributions evidence implications proceedings ieee infocom york march caceres measurements wide area internet tra technical report ucb csd computer science department california berkeley caceres danzig jamin mitzel characteristics wide-area tcp conversations proceedings acm sigcomm september carter crovella measuring bottleneck link speed packet-switched networks proceedings performance lausanne switzerland october catledge pitkow characterizing browsing strategies world wide web computer networks isdn systems cheng lai baker analysis http wireless network technical report stanford http client http innovation java httpclient standard performance evaluation corporation specweb http specbench web crovella bestavros self-similarity world wide web tra evidence proceedings acm sigmetrics international conference measurement modeling computer systems philadelphia cunha bestavros crovella characteristics client-based traces technical report tr- boston department computer science april feldmann caceres douglas rabinovich performance web proxy caching hetrogeneous bandwidth environments proceedings ieee infocom york march national laboratory applied network research http nlanr net cooperative association internet data analysis http caida frystyk-nielsen libwww http library frystyk-nielsen gettys baird-smith prud 
hommeaux wium-lie lilley network performance ects http css png proceedings acm sigcomm cannes france setpember glassman caching relay world wide web computer networks isdn systems gribble brewer system design issues internet middleware services deductions large client trace proceedings usenix symposium internet technologies systems usits monterey december huberman pirolli pitkow lukose strong regularities world wide web sur science keynote systems http keynote insoft http vitalsigns jacobson traceroute ftp ftp lbl gov traceroute tar jacobson pathchar ftp ftp lbl gov pathchar msri-talk khaunte limb statistical characterization world wide web browsing session technical report git-cc- college computing georgia institute technology kwan mcgrath reed user access patterns ncsa server technical report uiucdcsr- illinois department computer science february lai baker measuring bandwidth proceedings ieee infocom york march leland taqqu willinger wilson self-similar nature ethernet tra extended version ieee acm transactions networking pages liu fox web tra latency characteristics implications webnet orlando november mah empirical model http network tra proceedings infocom kobe japan april malan jahanian extensible probe architecture network protocol performance measurement proceedings acm sigcomm vancouver canada september maltzahn richardson grunwald performance issues enterprise level web proxies proceedings acm sigmetrics seattle june manley courage seltzer self-scaling self-con guring benchmark web servers harvard manley seltzer web facts fantasy proceedings usenix symposium internet technologies systems monterey december mathis empirical bulk transfer capacity ftp ftp advanced pub ippm treno txt july mathis semke mahdavi ott macroscopic behavior tcp congestion avoidance algorithm computer communications review july internet performance measurement analysis projecct http nic merit ipma internet protocol performance metrics http advanced ippm index html mills network time protocol version speci cation implementation analysis technical report rfc network information center sri international menlo park mills improved algorithms synchronizing computer network clocks ieee acm transactions networking june mogul case persistent-connection http technical report wrl dec western research laboratory palo alto mogul network behavior busy web server clients technical report wrl dec western research laboratory palo alto mogul douglis feldmann krishnamurthy potential bene delta encoding data compression http proceedings acm sigcomm cannes france setpember moon skelley towsley estimation removal clock skew network delay measurements proceedings ieee infocom york march coral passive network tra monitoring statistics collection http caida tools coral minnesota gstone version http web coled umn gstone info html padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation proceedings acm sigcomm vancouver canada setpember paxon fast approximate synthesis fractional gaussian noise generating self-similar network tra computer communications review october paxson empirically-derived analytic models wide-area tcp connections ieee acm transactions networking pages august paxson end-to-end routing behavior internet proceedings acm sigcomm palo alto august paxson automated packet trace analysis tcp implementations proceedings acm sigcomm cannes france september paxson end-to-end internet packet dynamics proceedings acm sigcomm cannes france september paxson calibrating measurements packet transit times proceedings acm sigmetrics pages madison june paxson almes mahdavi mathis framework performance metrics rfc ftp ftp isi in-notes rfc txt apache http server project http apache surveyor project http advanced csgbnzrippm ssh communications security http ssh smith archives world wide web international world wide web conference geneva switzerland tauscher evaluating history mechanisms empirical study reuse patterns world wide web navigation master thesis department computer science calgary alberta canada caida measurement tool taxonomy http caida tools taxonomy tcpdump http ftp lbl gov tcpdump tar trent sake webstone rst generation http server benchmarking february silicon graphics white paper webcompare http webcompare iworld webjamma http chitra webjamma html wooster optimizing response time hit rates proxy caches master thesis virginia polytechnic institute state blacksbury virginia wooster abrams proxy caching estimates page load delays sixth international world wide web conference santa clara california yajnik moon kurose towsley measurement modeling temporal dependence packet loss proceedings ieee infocom york march 
ctd ctd ctd cud cpd crct csctd cxd cvbm cccwct cbd cpd cwct btd cpd cwct ccd cwct bvctd cpd bvd dactd bvcwd cxd cxd csctd cpd cpd cxd cactcxd ctd bud cdd cxdactd cxd ddb bwctd cpd ctd bvd ctd cbcrcxctd crctb bdbdbd bvd cxd cvd cbd bab bud bcbebdbdbhb cdcbbtb ctb cpcxd crd dactd cpbscrd bacqd bactcsd cdd cxdactd cxd bwd csb bwctd cpd ctd bvd ctd cbcrcxctd crctb btd cvd cbcrcwd cxcsd cbd bdbeb bgbgbebebj bwd csb bzctd cpd ddb ctb cpcxd crd bscrd bad cxb csd csbacsct bzc bwb cxd cud ctcscxcp bvd cxcrcpd cxd cbcrcwd bucxd cxd cvcwd dactd bhbfbjbhbg cbd btd cvd cxd bzctd cpd ddb ctb cpcxd cpd cxd bad ctcxd ctd bscvd csbacsct btcqd cpcrd cbctctd cxd cvd dactd cxcvcwd cwct ctd ctd cwcpd cvd cud cpd cpcrcpcsctd cxcr ctdcd ctd cxd ctd cpdbd csb dbcxcsct cxd cud cpd cxd cpd cxdcba btd cwct dbcpddb crd ctd crcxctd cxd cwcpdact crd ctcpd cxdect cwcpd csctd cpd cscxd cwct ctd cud cpd crct cwct ctd ctd cxd ctd cpd czcpcqd crcwcpd ctd cvcxd cpd cqd cqd ctd cccwcxd crcwcpd ctd cvct cxd cpd cwct cxd cpd cqctcrcpd cwct cxd crd ctcpd cxd cvd cxcvd cxaccrcpd cwct ctd ctd cwcpd crd cpddcxd crcxctd ddba ccd cpczct crcz cwct acctd ctd ctd ctd cud cpd crct csctd cxd cvb cwct cpd cwd cvcpd cxdectcs dbd czd cwd cpd cbcrcwd bwcpcvd cwd cccwcxd cpd ctd cpd cxdectd cwct ctd cscxd crd cxd cqd ctd cpd cpd cxd cpd cvd cwcpd cpcrct csd cxd cwct cud cscpdddbd czd cwd cxcsctd cxacctd crcrctd ctd cxd cpd ctcpd dbcwctd dbd cxd ctctcsctcsb cpd ctd ckbzd cpd bvcwcpd ctd cvctd cud cwct ctd cud cpd crct ctdacpd cpd cxd crd cxd dbcxd ctd ctcrd cwct ctd ctd cfd czd cwd cvcpd cxd cpd cxd cccwct cpd ctd ddctcpd cwcpdact ctctd ctd ctcpd crcwctd cxd ctd cud cpd crct ctdacpd cpd cxd cqctcvcxd cwctcxd cpd ctd cxd dbcpd cwct ctd ctd cpd cpd cqcyctcrd csddbabtd cpd cud cwcxd crctd cxd crd cqctd bdblblblb bebd ctd ctcpd crcwctd ctd cpd cbcrcwd bwcpcvd cwd bzctd cpd cwd bmbbbbdbdbdbbacscpcvd cwd bacsctb ctdccpd cxd cwct crd ctd cpd cpabcpcxd dbcxd ctd ctcrd ctd cud cpd crct ctdacpd cpd cxd cwct ctd ctd dbcpd cpczct crcz cwct acctd ctd ctd ctd cud cpd crct csctd cxd cvb cpd dbct cud crd ctcs crd ctd cwd ctct ctd cxd cfcwcpd cwcpd cqctctd cpcrcwcxctdactcs cscpd cxd csctd cxd cwct ctd ctd cfcwcpd cpd cwct cxd cpd ctd ctcpd crcw ctd cxd cxd cwct ctcpd cpd ctd ctd cxd cqd cxd ctcs bxd ctdacxctd ctd cxd bebcbcbc btd cwctd cpd ctcpcsdd cpd crcrctd cxctd ctcpd cxd cpcrd cud dbd cscpd cxd ctd ctd ctd cud cpd crct csctd cxd cvbr cccwct cpd cwd dbctd cvcpd cxdectd cwct bwcpcvd cwd dbd czd cwd cfd czd cwd cpd cxcrcxb cpd dbctd ctbm cecxd cvcxd cxd btd ctcxcscpb byctcsctd cpd cdd cxdactd cxd cxd cpd bzctd cpcxd bud cpdecxd cpd cxd btd cxd ctdbd ctd cpcrczcpd cpcqd cpd cxctd cdcbbtbn cpd bucpd cud csb bud cdbab cdcbbtbn btd cxcp bxd cxb bxccc cib cbdbcxd dectd cpd csbn btd cycp byctd csd cpd btccb cactb ctcpd crcwb cdcbbtbn bzdjd ctd cpd cxd cvb cdba cecxctd cpb btd cxcpbn bud csctdbcxcyd cpdactd czd cdba btcpcrcwctd bzctd cpd ddbn cbd cvcxcw cpd cxd cdba cxcrcwcxcvcpd cdcbbtbn cicwctd cxd cac btb byd cpd crctbn btd ctcxcscwcpd csd ccctd crd cscxcp cactd ctcpd crcwb cdcbbtbn bwcpdacxcs cxcrd bwcpd bvd ctcvctb cdcbbtbn cxcwd cpd czb csd cdbab cdcbbtbm cectd cpdcd btbvc cac cdcbbtbn cxd cwcp cacpcqcxd dacxcrcwb btccb cactd ctcpd crcwb cdcbbtbn ctd cxcuctd cactdcb cud btccb cactd ctcpd crcwb cdcbbtbn cpd cbd cxd cpd ctb buc ccbac cfcpd cpcqd cdcbbtbn bvcpd ctdd cfcxd cxcpd cdba cbcpd czcpd crcwctdbcpd bvcpd cpcscpbn cpd cfcpd ctd cfcxd cxd cvctd btccb cactd ctcpd crcwb cdcbbtba cccwct cud cpd cwct dbd czd cwd crd cxd ctcs cxd ctd cxdact cpd cvd cscxd crd cxd csd cxd dbcwcxcrcw cpd ctd ctcrd cxd dbctd csctdactd ctcsb cxd ctd ctd ctcs dbcxd ctctd cxd cvd cxd ctd cpd ctd cxd cpczct crcz cpd crcwcpd cscxd ctcrd cxd btd ctd dbd czd cwd cpd cxcrcxd cpd cscxcs cwcpdact cwct cxd ddd crd cxcqd cpd cpd ctd ctcrd cxd cpd cpd cxcqd cxd cxd cxd cscxcrcpd ctcs csctd cxd cscxdacxcsd cpd ctcrd cxd cwctcpcscxd cvd cfd cxd ctd ctd ctd cud cpd crct csctd cxd cxd cscxdactd cpd crcwctd cpd ctb cpd ctcs cpd ctcrd crd ctd crcxctd crctba cccwct cvcpd cxdecpd cxd cwct cpd ctcp cwcpd ctd ctd cvctcs csd cxd cwct dbd czd cwd dbcpd cpd cwd ctct cscxd ctd cxd cpd cpd dbd ctdactd cccwct cwd ctct cscxd ctd cxd cwct cqd ctd cpd cqacctd csd ctd cud cpd crct ctdacpd cpd cxd cxd cvctd ctd cpd ctcpd ctd ctd btcrcrd cpd ctd crcpd cxd cpd cxd cpd cxdact ctcpd ctd cwct ctd ctd cpd cxd cpcrd cxdacxd ddb cpd dbcxd cwct ctd cpd ctcs cqd ctd dbd czd cpcs csctd cxd cpd crcwcpd cpcrd ctd cxdecpd cxd csctd cxd cvbm cccwct crctd cpd cpcrd cxdacxd ctd cud cpd crct ctdacpd cpd cxd cqd cxd cscxd cud cpd csctd crd cxd cxd cpd cxd cpd cxd cwct ctd ctd cpd cwct crcxctd crcw csctd dacxcsct cxd cxcvcwd cxd ctdcd ctcrd ctcs cqctcwcpdacxd cwct ctd ctd cpd bvd cdd cxd cwct cxd cxcvcwd cvcpcxd ctcs cud ctcpd ctd ctd cpd csctd cxd ctabctcrd cqctd ctd ctd ctd ctd crctd cpd csctd cxd cpcqd ddd ctd cqctcwcpdacxd cfcwcxd cwctd cwd ctct cscxd ctd cxd crcpd ctcs cwct crctd ctd ctd ctd cud cpd crct csctd cxd cvb dbct cud cwcpd crcw crctd ctd ddd cxcrcpd crcrd cpd dbd cscxd cxd crd ctdactd cbddd ctd cpd btd cxcrcpd cxd cwct ctdactd cxd dbcwcxcrcw ctd cpd cpd cxcrcpd cxd cpcrd cxd cpd cwct cqcyctcrd cxd ctd ctd cpd ctd dbd czbm cwct ctdactd cpd dbcwcxcrcw ddd ctd crd ctd cwd cxd czd cpd ctd cpd cwct cqcyctcrd cxd 
ctd ctd bvd ctcpd cwctd dbd ctdactd cpd cwct cwd ctct cscxd ctd cxd csd cpd cqcxcvd crd cpd cxcudd cpd cwct cxd ctd cxd ctd ctd ctd cud cpd crct csctd cxd cvba dbctdactd dbct cud cwctd cscxd cxd crd cxd ctcud cxd cvcpd cxdecxd cscxd crd cxd cpd cxd ctd ctd cxd ctd cpd cwct cud cpd cwcxd cpd ctd ctadctcrd cwcxd cpdcd ddba cbd crcrctd cxdact ctcrd cxd cwcxd cpd ctd ctcpd ctcpcrcw cwct cwd ctct cscxd ctd cxd cwct ctd ctd ctd cud cpd crct ctdacpd cpb cxd cqd ctd cxd csctd cfcxd cwcxd ctcpcrcw ctcrd cxd cscxd crd cxd cxd ctd cpd cpd ctcs cpcrcrd cscxd cwct ctdactd cpcscscxd cxd cwcxd cpdcd cxdectcs ctdacxctdbb dbd czd cwd cpd cxcrcxd cpd cud cxd cwctd cud crd ddd cpd cxdect cwct cpd cwct cpd cqdd csctacd cxd cqctd ckbzd cpd bvcwcpd ctd cvctay cqd ctd cud ctd ctd ctd cud cpd crct ctdacpd cpd cxd cccwctd crcwcpd ctd cvctd cpd ctd cpd cqd ctd dbcwd cxd dbd ctcpcs cpcscxcrcpd cxd dactd ctd cxd cwct cpd czd dbd ctcscvct cpcqd cwct ctd ctd cpcqcxd cxd ctcscxcrd cxd ctd cud cpd crctb ctd cxcpd cxd dact cxd cqctcwcpdacxd cccwd ctcpcrcw ctcrd cxd cwcxd cpd ctd crd ctd cscxd cscxd ctd cxd cwct cqd ctd crd crd csctd dbcxd ctd bzd cpd bvcwcpd ctd cvctd ctcpd ctd ctd ctd cwd csd cccwct ctd ctd cxcpd cud cscpd cxd ctabctcrd cxdact ctd cud cpd crct csctd cxd cxd crd ctcwctd cxdact ctd cpcrcrd cpd ctb dbctd csctd ctcpd ctd ctd ddd ctd cxd cpd ctd cxctd cwcxd ctcrd cxd dbct ctd ctd cpd dactd dacxctdb cwct cpd cwct cpd cxd ctd ctd ctcpd ctd ctd bebabd cbddd ctd ctdactd btd ctcxcscpb btd cxd cpd cxd cvb cxd cbd cxd cpd ctb bud cxd cscxd ctdacxd dbd ctd dbd ctdactd ctcpd ctd ctd cpd cvct cscxctd cwcpdact crd cxcsctd ctcs cwct ctd cxcpd crcpd ctd cwct dactd cqctcwcpdacxd cud cxd ctd ctd ctcpd ctd ctd cccwct cvd cpd cwctd cscxctd dbcpd cvctd cqctd ctd csctd cpd cscxd cpd cwctd ctdcd cpcxd cwct crd ctd cscxd ddd ctd cpd dbd czd cpcs crcwcpd cpcrd ctd cxd cxcrd cbd cwct crcwcpd cpcrd ctd cxd cxcrd csctctd ctcs cqct cxd cpd dbctd ctbm acd cxdect cscxd cxcqd cxd acd cpd cxd cscxd cxcqd cxd ctd cxd cxd cpd cxd cxd cfctcq crb ctcuctd ctd crct crcpd cxd cpd ctd ctd ctd cpd ctd btd cqctd cscxctd cscxabctd ctd cfctcq cxd ctd cud acd cxdectd cwcpdactcwctcpdaddb cpcxd ctcs cscxd cxcqd cxd cpd cqcyctcrd cpd cxd ddd cqct cicxd cub cxczctcxd cpd ctba cwctd cscxctd cpd cud cwcpd ctd ctd ctd cpd cxd ctcuctd ctd crct crcpd cxd cxd cwct cfctcq dbctd ctd cub cxd cxd cpd cccwctd cscxctd cpd crd acd ctcs cwcpd cwct crcpd ctd cub cxd cxd cpd cqctcwcpdacxd cxd cfctcq dbcpd csd cwct ctd cxd cxd cpd bbc byby ctd cxd csd dbcwcxcrcwdbctd cud cud cwctcpdadd cpcxd ctcs cscxd cxcqd cxd cbd cxd cwctd cscxctd cscxabctd ctd cfctcq cxd ctd dacxd ctd csctd cpd ctcs cvb cpd cvct csctd ctd csctd crdd cxd cwct ctd ctd ctd crctd cxd cpd cxd ctd cxd cud crd ctb cpd cxd cxd cwct ctd ctd ctd cccwctd cpd ctd cpd ctdccwcxcqcxd ctcs cqd cxcvcwd cpcxd cpd cwctcpdadd cpcxd cpd cvcxd cpd cscxd cxcqd cxd dbcwcxcrcw cpd ctcpd cqct cxd add ctd crctcs cxd cpd cqdd cvctd cvd cpd cwcxcrcpd cpd crd cpd ctabctcrd cccwctd cpd cqd ctd ctd cscxctd ctd ctcs cxd cwct csctdactd ctd cwcpd dacxcsct cpcrcrd cpd cpd ctd ctd ctd cpd cxdact ctcpd ctd ctd cpd csctd cpd cwct ddd ctd ctdactd cqdd cxd crd cpd cxd cwct cpcqd dact crcwcpd cpcrd ctd cxd cxcrd cpd cpd cxd cxcrcpd cscxd cxcqd cxd cud dbd czd cpcs crcwcpd cpcrd ctd cxdecpd cxd dbd czd cpcs cvctd ctd cpd cxd cqctd crcwd cpd czcxd cvb ctd crba cbd crcw ctd ctcpd crcw dbd czd cpcs crcwcpd cpcrd ctd cxdecpd cxd cwcpd ctcs cqctd ctd csctd cpd cscxd cfctcq ctd dactd cpd ddd ctd ctd cud cpd crctba bvd ctd cpd cud crcwcpd ctd cvctd cxd cwcxd cpd ctcp cxd crd csctbm cpcrczcxd dbd czd cpcs ctdad cxd crcw cwcpd cwct csctd cpd cscxd cwct dbd czd cpcs cud dbd cwct crcwcpd cvctd cxd ctcrcwd cvddb ctd cqctcwcpdacxd cpd ctdad cxd cwct ctd ctd cpd dbcwd ctbn cqd cpcxd cxd ctd ctd ctd cpd cxdact cscpd cpbn cxd cxd crd accsctd cxcpd cxd dbcwctd cpd cpd dddecxd ctd cqctcwcpdacxd ctd cud cxd cpd cpd ddd cxd cpd crcwcpd cpcrd ctd cxdecpd cxd cxd cxd ctd cucpd cwcxd czctctd cpcrct dbcxd cwct cucpd ctdad cxd cwct ctd ctd cpd crcwcpd cpcrd ctd cxdecxd ctd ctd cvcxd cpd cud cfctcqb cqcpd ctcs cpd cxcrcpd cxd crcw cpd ctb crd ctd crctb ctd ctcrd cuctd ctd crcxd cvb ctd crba btd cwctd cpcsdacpd crct ctd cxd ctcs cxd ctd cscpd ctcpd ctd ctd dbd czd cpcs crcwcpd cpcrd ctd cxdecpd cxd ctbacvbab csctacd cxd dbcwcpd cxd ctctcsctcsb cpd cwd cxd cxd cqct crd ctcrd ctcsb bebabe ctd dbd ctdactd bucpd cud csb byctd csd cpd cpd cxd cpdcd cfcxd cxcpd cccwctd cpd cqctd cvd cpd cwcpd csd cxdact ctd dbd ctcpd ctd ctd ctd cud cpd crct ctdacpd cpd cxd cpd csctcqd cvcvcxd cscxd cxcqd ctcs ddd ctd cpd ctd cxd ctd dbd dacxd cxd cxd ctctcsd cpcscpd cxd cwct ctd crctd acd dbcxd crd ctd ctd dbd crcpd cpcrcxd cxctd ctcpd cxd crd cxcpd crct dbcxd ctd dacxcrct cpcvd ctctd ctd cpd cvctd ctd cpd crcxctd cxaccr ctdcd cpd cxd ctd dbd cqctcwcpdacxd crd cpd ctd cxctd ctcpd cpd cwd cxd cxd cxcr cwct ctd dbd czbm cud ctdcb cpd ctb cxd cvddb cxd crcpd cpcrcxd cxctd cpd cpd ctd crcxctd btd cwctd crd cpd ctadctcrd cwct crd ctd cpd cwct ctd dbd czb crcw cpd ctd ctcxd csctd cpddd cxd cxd cxdecpd cxd cpd cxd csddd cpd cxcrd cccwctd cpd dbd cqcpd cxcr cpd cpcrcwctd cpczcxd ctd 
dbd ctcpb ctd ctd cpcrd cxdact ctcrcwd cxd ctd cxd cyctcrd cpcscscxd cxd cpd cxd cwct ctd dbd cpd ctcpd cwct ctd cxd ctabctcrd dbcwcxd cpd cxdact ctcrcwd cxd ctd cxd cwct ctdccxd cxd cpd cwct ctd dbd czb cxcsctcpd cxd crcw dbcpdd cwcpd cwct cxd crd ctd ctd ctd cqctcsba cqctd ctcpd ctd ctd ctcrcwd cxd ctd cwcpdact cqctctd csctdactd ctcs cscpd ctba byd cpcrb cxdact ctcpd ctd ctd ctdccpd ctd cpd cxd ctcpd ctd ctd ctd crd ctcrd cxdab cxd ddb cpcrctd ctd ctd cpd cxd cvb cccactd cqd cpd cuctd crcpd cpcrcxd ddb cpd cpd cwcrcwcpd ctd ctd cxd crcwcpd cpcrd ctd cxd cxcrd ccd cud ctd cud cxd cpd cxdact ctcpd ctb ctd cpd crd cpd cxacctcs cqdd cwct cvd cpd cpd cxd cwctcxd ctcpd ctd ctd ctd cpcrczctd ctd add dbb ctd cpd cxd cxcrd crd ctd ctd crd accvd cpd cxd cxd cud cpd cxd ctbacvbab cud dbcpd cscxd cpcqd ctd cucpd cpd cpd csctd ctcrd csd ctbacvbab cqctd cscxcpd ctcsb cqddd ctd cpd cuctd ctcsb cxd cpcqd ctd bxdccpd ctd cpd cxdact ctcpd ctd ctd cpd cwct crd csd cpcrczctd acd ctd cwct cpcrct cud ctcpd cxd cxcrcpd cxd cvb cwct ctd byd ctd add cpd cxd cxcrd cpd ctd cecxctdb ctd crd ctd cpd cpd cpd cbd ctcpd ctd ctd cucpcrcxd cxd cpd crd cpd cpd ddd cxd cpcrd cxd cpddctd byd ctdccpd ctb cfctcq cwctcpcsctd ctcpd ctd ctd cxcvcwd ctcrd ctd dbd cpcrczctd cpd cwct cpddctd ctcpd ctd cqd cwct ccbvc cscpd ctcpd ctd cqctcscsctcs cxd cwd cpcrczctd cpd cwctd ctdcd cpcrd cwct cxd cscxdacxcsd cpd ccccc cwctcpcsctd cxd ctd crcpd cxctcs cxd cwcpd cscpd ctcpd cvctd ctd cpd cud cpd ctdbd czd cwcpdact cqctctd csctdactd ctcs dbcwd crd cpd ctd crcw ctcpd ctd ctd dgcud ctdccpd ctb cfcxd csd cxd ctct cqctd dbb cbd cxcvd cxaccrcpd ctcpd ctd ctd crcrctd cxctd cxd crd csct cwct ctcpd ddb cqcxd cxd cxd cpd cpcrctd ctd cxd ctcs cpcqd dactb ctcs cxd ctd cscxctd cwct cwcxcvcwb ctd cxd cpcrczctd crd ctcrd csctdactd ctcs cqdd ctd cpd cpd byd dbd ctd cwct buctd czctd ctdd cpcrczctd bycxd ctd cud cwcxcvcwb ctctcs cxd czctd ctd cpcrczctd crcpd ctcsb cud ctdccpd ctb cqdd crd csd cwct ctd dbd cqct bwcpctd cud cpd ctdbd ctcs ctcpd ctd ctd cpd ctd cxctd cqctd dbctctd bfbj cxd ctd cpd cwct cxb cwd ctcpcsctcs cad cxd ccd czcxd ctcs cxd ctd ctd cvcpd cwctd ctcpd ctd ctd cxd cxd cud cpd cxd cccwct cpd cwct cpd cwcpd cvd cqctddd cwct cqcpd cxcr cpd cpcrcwctd cxd ctcs cpcqd dact cqdd cwcxd cwct cxd cxd dbcwcpd crcpd cqct ctcpd ctcs cxd cyd ctd dbd ctd ddd ctd byd ctdccpd ctb cpd cwcrcwcpd ctd cxd ctcs cpcqd dactb cpd cpd dddectd cqd cxd cxd dacpd cxcpd cxd ctdcd cpcrd cwd cqddb cwd ctd dbd ctd cxctd cxd cpd cxd dacxd cxcqd ctd csb ddd ctd ctcpd ctd ctd cpd cxd crcpd ctdcd cpcrd cpcrczctd cxd cud cpd cxd cpd ctd dbd cpd cpd cpcrcrd cpd ctd ctd cpd cpd cwct cxd cwd crcrd cxd cwct cud dbcpd cpd ctdactd cscxd ctcrd cxd cpcrczctd acd ctd cxd cwcpd ctcs cwct cqd ctd cpd cxdact cwcxcvcwb ctctcs cpcrczctd crcpd ctba cccwct bvdcc cxd cpd cxd ctdcd ctd cxdact cpd csb cpd crd ctd cwcpd crcpd cxd dactd cwcxcvcw ctctcs cxcrcpd cxd czd cpd ctdcd cpcrd ctcxd cwctd cwd ctd cpcrczctd ctdactd cpcrctd cvctd ctd add dbb ctdactd ctcpd ctd ctd cpcrczb ctd cbcrd cvb ctd cpcrczctd ctdactd ctcpd ctd ctd cqdd crcpd cxd cwct cpcrczctd ctcpd cwcxcvcwb crcpd cpcrcxd cpd csd cxdact cscxd ctcrd cpd cpcrcwctcs dbd czd cpd cxd dbcxd crcxctd dbctd cpd ddd cxdect cwct cscpd cxd ctcpd cxd cpcscsd ctd cxdacpcrdd crd crctd bycxd cpd ddb bwc btc cpcxd dacxcsct cpd ctd ctd ckcscxd cpd crctay ctd dacxcrct cqcpd ctcs cxd ctcvd cpd cxd dbcxcsctd ctcpcs ctd ddd ctd ctcpd ctd ctd btd cqctd ddd ctcpd ctd ctd cxd cud cpd crd ctd cwcpdactcqctctd csctdactd ctcs cpd csctd ddctcsb cxd crd cscxd cvbm cfbtcfc cud cfctcq ctcpd ctd ctd cbd dactddd cud cpcrd cxdact crd ctcrd cxdacxd ddb csctd cpdd cpd ctcpd ctd ctd cud ctd ctd cpd bxc cud cxd cxd cpd ctcpd ctd ctd cqctd dbctctd crcxctd cxaccr cpcqd cpd cxctd cbc cud cxd ctd cxd ctd ctd cxd cvb cpd dbcwcxcrcw ctd cwcpd cxdectd cvctd ctd cpd cxd ayd ctcpd ctd ctd csd ctd crcw cpd cxcrcpd cpd cxcrcpd csctd cpddb cpd crcpd cpcrcxd cpd cxd ctcpd ctd ctd cpd adctdccxcqd cpcrcrctd crd csctd bycxd cpd ddb cud dbcpd cpd crcwcxd ctcrd ctd cwcpdact cqctctd csctdactd ctcs cucpcrcxd cxd cpd cxd cxcrcpd ddd cwctd cxd cwcxcvcwctd ctdactd cxd cud cpd cxd cud cwctd ctd cvctd ctd ctcpd ctd ctd crctd cfcxd csd cxd cwctb addd crd cxd cxd ctcpd ctd ctd cxd cvb cxd csd ctd cpd ctd cbcrd ctcpd ctd ctd crd cxd cxd cxd cscxd cpd cpd cscpd ctd cxd cxacctcs cscpd csctd cxd crd cscxd cvddb cxd cxd cud cpd cxd cpd cxd czb ctdactd ctcpd ctd ctd czcxd cpd cwct cpd cwct cpd cxd ctd crcpd cpcqcxd cxd cxctd cpd cwctd cwcpd crd cpd ctd ctcpd ctd ctd dbct acd crd cxcsctd cwct cxd ctcpd ctd ctd cpcrcrd cpcrddba byd cxd ctd cxd bzc ctcrctcxdactd abctd ctdcd ctd ctd cpcrcrd cpd cxd ctd cpd cxd cpcrczctd cpd cxdacpd cqd bzc cxd ddctd cqcxd cxd cxd ctcpd ctd ctd cscxctd csd cscx crd cxctd cxd cxd cxd cpd ctd cpct cpd cwct ctctcs crd cxdect ctd cpd cxd ddd ctd czctd ctd cpcrd cpd cpczct cpcsdacpd cpcvct cwct cwcxcvcwd cpcrcrd cpd cxd crctba byd ctcpd ctd ctd cxd ctcvd cxd ddb czctd ctd ctd cxcsctd cpcrczctd acd ctd cvctd ctd cpd cucpcrcxd cxd cpd cud ctct cpcrczctd crcpd cpd bdbcbc ctcvcpcqcxd bbd ctcr ctctcsd crd dbd czd cpd cxd cwcpd csdbcpd dacxcscxd cwcpd cwct dad cxd cxd csctctcs cqctcxd ctcsd crctcs cqdd cwct acd ctd cqd ctctcsd crcw cucpd ctd cwcpd cwcpd ctd cxd crd cxdectcs 
ctcpd ctd ctd cpd cud ctdactd cxcu cwct ctcpd ctd ctd ctd cpcxd crcpd cxd cpcrczctd cwctcpcsctd cccwct cvctd ctd cpd dactd ctd cpdbcpdd cud cqd cpcscrcpd ctcscxcp cpd dbcpd csd cxd cxd ctcscxcpb cpd dbcpd csd cxd crd ctcpd cxd cvd cwcxd cxcrcpd ctcs cpddctd crd csd cpd crd cxcrcpd ctcpd ctd ctd ctabd ctd cxd cxd ctcrcxcpd cxdectcs cwcpd csdbcpd cpd cud dbcpd ctba bycxd cpd ddb cwct cpd cwct cpd cxd ctd cpd cvctb crcpd ctcpd ctd ctd cxd crd ctd cwct csctd cuctdb csd dectd crd cscxd cpd ctcs ctcpd ctd ctd cxd cccwct cpcsd cxd cxd cpb cxdact cscx crd cxctd dbcxd crcpd cxd ctcpd ctd ctd cxd cud cpd crd ctd cwct ctdcd csctd cpcvd cxd csct ctd cpcxd crcwcpd ctd cvcxd ctd ctcpd crcw cqd ctd bebabf bzd cpd bvcwcpd ctd cvctd bebabfbabd bzd cqcpd ctcpd ctd ctd cud cpd crd bucpd cud csb byctd csd cpd cpd cxd cpdcb cfcxd cxcpd cfctd cxcqd ckbzd cpd bvcwcpd ctd cvctay cqd ctd cpd cpd ctdcctd crcxd cxd cwcxd czb cxd cpcqd dbcwctd cxd cxcvcwd dact cud cxd cud cud crd cud ctcpd ctd ctd ctd ctcpd crcwba cxd cxcrcpd ddb ctcpd ctd ctd ctd dbd ddd ctd cwcpd cqctctd csd cpd cpd cpcud ctd cwd cvcwd cpd cwctd cwcpd cxd ctcvd cpd ctcs cxd cwct ddd ctd cqcpd cxcr csctd cxcvd cccwct dacxb cxd csctd ddcxd cwct bzd cqcpd ctcpd ctd ctd cud cpd crd bzc cxd cqcxd cxd ctcpd ctd ctd crcpd cpcqcxd cxd ddba cccwct cxd cud cpd crd dbd crd cxd cqd cpcrd cxdact cpd cpd cxdact ctcpd ctd ctd crcpd cpcqcxd cxd cxctd cbd cxd cud cpd crd ctd ctd ctd dbd cqct ctdcb cxcrcxd cpcscsctcs cwct ctd ctd ctcpd ctd ctd cwctd dbd cqct ctd cqctcscsctcs cxd cwct csctd cxcvd ctd ctd crd ctd cpd crd cfcwcxd cwct cwctcpd cwct bzc cxd csctd ddctcsb cwddd cxcrcpd cxd cud cpd crd ctb czctdd ctd ctd ctd cwcpd cxd cud cpd crd cxd cpd ctd cwcpd cxd btc cud cud ctd cxd csd cpd cxd ddb ctdcd ctd cxcqcxd cxd ddb cpd cwctd ctd cvctd ctcxd cscpd crctd byd ctdccpd ctb cpd btc cxcvcwd cqct csctacd ctcs cud crd cxd ctcpd ctd ctd ctd ctd ctd cpd cpd cwctd crd cwd ctcpd ctd ctd ctd cpd ctd cxctdactcs cscxd ctd cxd cpd ctcsba byd ctd cwcxd cpd cpd cvct crcpd cpd cwct bzc cxcqd crcrctctcsb cxd cxd crd cpd crd cwctd ctd crct cpd crctd cpd cpd crcwcxd ctcrd cpd cxd crcxd ctba cccwcpd cxd bzc crd ctd cqct cpcrcrctd ctcs cxd crd cxd ctd dbcpddbn cwct bzc cpcrcrd cscpd ctdb ddd ctd ctcpd ctd ctd crd ctd ctcpd ctd ddbn cpd ctcpd ctd ctd csd crctcs cqdd cwct bzc cqct ctdcd ctd cxcqd cxd cxcud cscpd csctd crcw cwcpd cscxabctd ctd ddd ctd ctcpd ctd ctd csd crctcs cqdd cscxabctd ctd crctd crcpd cqct crd ctd cpd ctcs cvctd cwctd cxd crd cwctd cxdact dbcwd ctba cccwct bzc cxd crd csct crctd cpcxd cud cpd cpd ddd cxd cqct crcpd cpcqd cpd ctd cxd cwct cpd cxd cpd csd ctd cxd dbd ctcpd ctd ctd crcwcpd cpcrd ctd cxdecxd cwct ctd cxctd cxd crd ctd cwctcxd cxd ctd crd ctcrd cxd cpd cwctcxd cpcrctd ctd dbcxd cwcxd cwct cvctd ctd cpd ctd ctd cvddbn cpd cxd crd csct cwct cpd cpd ddd cxd ctcrctd cpd cud cpcvcvd ctcvcpd cxd ctcpd ctd ctd crcw cwcpd cwctdd ctadctcrd cwcxcvcwctd ctdactd cpcqd cpcrd cxd ctd ctd cqctcwcpdacxd cccwct bzc dbd ctd cpcqd cqctd crctd cpd ctd ctd ctcpd ctd ctd cvd cpd bdb ctd cud cpd crct csctcqd cvcvcxd ctd ctd ddd ctd beb cpd cvctb crcpd ctcpd ctd ctd cuc ctd ctd ctd cxctd crcw cpd cvdd cxd crd dactd cvctd crct bfb ctcpd cxd cvcud ctcpd ctd ctd cxd cwct cucpcrct cwct dacpd cwctd ctd cvctd ctcxd cwct ctd ctd bgb cvcxd cscxd cpd cscxctd cwd cwct ctd ctd ctdad dactd dactd cxd cccwctd cpd ctb cwd dbctdactd cqctd dactd cwcpd cqd ctd cwcpd cqct dactcs cxd csctd ctcpd cxdect cwct bzc btd cud cqd cxcrd cpcrcrctd cxcqd ctcpd ctd ctd cxd ctcscxcpd ctd cpcxd ctd cscx crd cpcrcrctd crd cxd ctd dbcwcxcrcw cqct dactcs cwct bzc cxd csd ctcsba btd cwctd cscx crd cqd ctd cxd csctcpd cxd dbcxd cwct cxd ctd cscxdactd cxd cwct ctcpd ctd ctd crd ctd cxd cud crd cxd cpd cxd ddb cud dbcpd dactd cxd cpd cwct crcwcpd cpcrd ctd cxd cxcrd cwct ctcpd ctd ctd cwctdd csd crct cud ctdccpd ctb cpcrcrd cpcrddb cvd cpd cpd cxd ddb cxd crcpd ctb cpd cpd cxcpd crcpd ctb cpcscscxd cxd cxd cpd ctcpd cxczctd cwcpd cwct crcpd cwct bzc dbcxd cpd cscpd cwcpd cwct bzc crd ctd cqct crcpd cpcqd ctd cub crd accvd cpd cxd cpd cpcscpd cxdact ctcpd ctd ctd cqcpd ctcs cwctcxd ctcpd cxctd ctcpd ctb ctd ctd cpd ctcs cqd ctd cxd cxd ddcxd csctd cpd cwct crcpd cwct bzc cwd dbd czd dbcwctd cxd crd cxd ctd crcxctd ctd ctd ctd ctd crcw cwcpd cxd cxd crcpd cpb cqd ctd cud cxd cpd cxcrd cpd ctcpd ctd ctd csctcvd ctct cwcpd cxd ctd ctd ctd cpd cxdact ctd ctd cqctcwcpdacxd cpd dbcwd ctba bycxd cpd ddb cwct ctabctcrd cxdactd ctd cwct bzc dbcxd cqct cvd ctcpd ctd cwcpd crctcs cxcu ctdb ctd ctd crd cpd ddd ctd cpd ctdcd cxcrcxd csctd cxcvd ctcs crd cxcqd cwct bzc csctd cpd cbd cxd ccctcrcwd cxd ctd bzcxdactd cwct cpdacpcxd cpcqcxd cxd ddd ctcrctd cpd ctcpd ctd ctd cwct crd cpd ctd cud cpd crct csctd cxd cxd cwct crd crd cxd cpd cxcpd csctd cud cpd cxd cpd cxd cpb cxd cpd cwct cxd cwctcxd cxd cvcpcxd cxd cxcvcwd cxd ddd ctd cqctcwcpdacxd cwcxd ctcrd cxd dbct ctdccpd cxd cwct cxd ctd cxd csctdactd cxd csctd cud cwct ctd ctd bfbabd cbddd ctd ctdactd btd ctcxcscpb btd cxd cpd cxd cvb cxd cbd cxd cpd ctb byd cpd csctd cpd ctd cwd 
csd crcpd cpdd cpd cxd cpd cxd cwct cpd cpd ddd cxd ctd ctd dbd czd cpcsd cpd ctd cud cpd crct cpd cwct ddd ctd cpd cpd cxcrcpd cxd ctdactd cccwcxd cxd crd csctd csctd cxd cvb dbd czd cpcs cpd ctd cud cpd crct cud ctcrcpd cxd cvb acd cxd crd ctd cqctcwcpdacxd crcpd cpcrcxd cpd cxd cpd cpd cud cxd dbd czd cpcs ctd ctd ctd cpd cxd cecpd cxd cud cpd cxd cpd ctd cwd csd cpd cpdacpcxd cpcqd ctb crcw cpd cvd cpd csctd ctd ctd cud cpd cvd cpd cpd ctd ctcxd ctd dbd czd add cxcs csctd crcwcpd cxcr cxd cxdecpb cxd cpd crd ctcrcwd cxd ctd cbd cwct cqcpd cxcr cpd ctd ctd ctd cpd ctd cwd csd cxd cwctd cpd ctcpd crcpd cscxd ctcrd cxd crd cpd cwct czctdd cpd ctcrd cpd crd ctdccxd cxctd cwct ctd ctd ctd crctb cqct crcrctd cud cxd cwct cpd cpd ddd cxd ctd ctd dbd czd cpcsd cpd ctd cud cpd crct cpd cwct ddd ctd cpd cpd cxcrcpd cxd ctdactd dbct ctctcs ctd cwd csd cpd cud cscpd ctd cpd ctd ctd dbd czd cpcs cpd ctd cud cpd crct cqd ctd crcxctd ctd ctd ctd cpd cxdact cpcqd cpcrb cxd cwcpd cxd cpd ctd cpcqd cud cpd cpd cpd ddd cxd cfct cpd ctctcs ctd cwd csd cpd cwct crd ctd cscxd cxd cud cud cpd csctd cpd ctd cwd csd cxd cud cwct cxcvcxd cpd ctd ctd cqd ctd cccwcxd cud cwctd ctd cxd ctd cwct ctdcd cxd cpd cxd cpd csctdactd ctd cwcxd cxcrcpd ctcs cpd cwctd cpd cxcrcpd ctd cwd csd dact cwctd cud cpd cpcqd cpcrd cxd cud cscpd ctd cpd ctd ctd cqd ctd cpd cwct ddd ctd cpd cpd cxcrcpd cxd ctdactd crcpd ctd cxd dbcxd cqct ctcrctd cpd cvd cqcpcrcz acd cxd crcxd ctd cwcpd cwct cpd cpd ddd cxd cpd cxd crcxctd ctadctcrd cwct czctdd cpd ctcrd cwct ctcpd ctd ctd cqd ctd cactcrctd ctdccpd ctd cxd crd csct cwct cpd cwctd cpd cxcrcpd cpd cpd ddd cxd ctd ctcxd csctd csctd cwctcpdaddb cpcxd ctcs cscxd cxcqd cxd dbcxd crd ctd cpd cxd cpd cwct cxd cpcrd cwctd ctabctcrd czctdd crcwcpd cpcrd ctd cxd cxcrd cwct ctd ctd ctd ctd cxd cscxd cxcqd cxd ccd cqct crcrctd cud cwct cpd cpd ddd cxd cud cscpd ctd cpd ctd ctd cqd ctd ctd cxd ctd crd crd cpcqd cpd cxd cpcrd cxd cscxd crcxd cxd ctd cccwcxd cxd cwct cqcxcvcvctd crcwcpd ctd cvctd cxd cwct cpd ctcp ddd ctd ctd cud cpd crct csctd cxd cpd cpd cpd ddd cxd cud cwct cfctcqba cccwctd cud cpd csctd cpd ctd cwd csd crcpd cpd cpd dacxcsct cud cscpd cxd cud cwct csctdactd ctd cxd cpd ctd crct cpd cpcvctd ctd cpd crd cpd dbctd cpd cxcrcxd cpd ctcvcxctd bfbabe ctd dbd ctdactd cpdactd czd cpd cxd ctcxcscwcpd csd cxcrd cfcxd cxd cvctd cccwct cpcrd cxdacxd dbb ctdactd ctd dbd csctd cxd cpd cpd cpd ddd cxd cwcpd ctd cyd ddctcs cxd cqctd cpcqd crcrctd ctd cpd ctcpcsddba cccwct ctd cwd cxcpd dbcxd dbcwcxcrcw cpcrczctd ctd dbd czd dbctd csctd ddctcs dbcpd cqcpd ctcs cxd cpd cpd cwct cucpcrd cwcpd cwct csctd ctcscxcrd ctcs cpcsctd cpd ctd cud cpd crctba csctd cxd cvd bvcbc crd ctbacvbab bxd cwctd ctd dacxcsctcs cwct csctd cpd cscxd cwctd ctd cpd cxd ctbacvbab crd cxd cxd cpd ctdcd ctd cxcpd cqcpcrczb abb ctb ctd cxd cxd cwctcxd dbcxcsctb ctcpcs cpcsd cxd ctcrctd ddb cxd cpd cxd cscpd ctd dbd czd cwcpdact ctdactcpd ctcs ctd ctd cvctd cqctcwcpdacxd crcw cpd btbvc crd ctd cxd cpd cwct cxd cpd crct cwcpd ctabctcrd cxd cpcsdactd ctd ddd crcwd cxdecpd cxd cxczctdbcxd ctb cpd cwctd cpd cxcrcpd csctd cxd cwcpd dacxcsctcs ctd ctcrd cxdact cud dbcwcxcrcw csctd cpd ctd cxd cxd cpd cxd cpd cvb cpd cvct csctd ctd csctd crctba cccwct cpcsd cxd cpd ctd cxd cxcrcpd cwctd ctd cvcxcrcpd cpd cpcrcw csctd cxd cwcpd cpd dbctcs cpcrd cxcrcpd ctd cvcxd ctctd cxd crctctcs dbcxd crd accsctd crctb cwd cvcw cpd cwct cxcrct cpcrczcxd cwct cvd ctcpd ctd crd accsctd crct cwcpd csctctd ctd csctd dbd dacxcsctba bwctd cxd cwctd crcrctd ctd cwctd cpd cqctd crd ctd crd crctd dbcxd ctd dbd czb ctdactd csctd cxd cvb dbcwcxcrcw dbct cpd cxdect cxd cwct ctd cwcxd ctcrd cxd bwcx crd cxctd cxd csctd cxd ctd ctd ctd cud cpd crctba ctd dbct ckcsctd cpd csay ctcuctd dbcwcpd cwct ctd ctcpd dbcpd cud cwct ctd dbd czb cpd ctcs ckd abctd ctcs cpcsay dbcwcxcrcw ctcuctd dbcwcpd ctcpd ctd ctd crcpd cqct cpcsct cscxd ctcrd ddba bwctd cpd cpd ctd dacxcrct cpd cxd cpd cqd cpd czctcsba cpcxdactd ddb cxcvcwd cxd cpcvcxd cwcpd ctd cud cpd crct ctd cxd cpd cxd dbd cwcpdact cwct cxd cxd crcpd crd cpd cxd ctd cxd cpd ctd ctd dacxcrct cpd cxd cud cpd cxd cpcqd csctd cpd cpd ctd dbd csctd cxcvd dbcwctd ctb cpd ctcpd cxd cxd crcxd cpd cpcud ctd cwct cucpcrd cqd cwct cpd cxd cpd cwct ctd dacxcrct cpd cxd crcpd cqct crcwctcrczctcs cqdd ctcpd ctd ctd ctcpcsb ctcxd cwctd crcwctcrcz cxd cscxd ctcrd bycxd crd crctd cxd ctd dacxcrct cpd cxd ddb cwct ctcpcrd cxd ctd csb ctd crd crcpd crcwcpd cvct cwct ddd crd cvctd cxd dbcxd cwd ctd cxctdacxd cwct cscpd cpcvct cwct ctd dacxcrctba byd cxd cpd crctb cwct ctcpcrd cxd cxcvcwd ctd cwct cuctdbctd cpcrczctd dbcwcxd csctcvd cpcscxd cwct ctd dacxcrct dbcxd cpd ctd cpd cpcrczctd cpd cxd cxd cfcxd cwd cwct cwctd csctd cwcpd cxd crd csctd cwctd ctcpcrd cxd cwd dbctdactd ctcpd ctd ctd dbcxd cwcxd cwct ctd dbd crcpd cscxd cxd cvd cxd cwcxd czcxd ctd dacxcrct csctcvd cpcscpd cxd cud cpcrcz csctd cpd csba cccwd ctd dacxcrct cpd cxd crcpd cqct csctacd ctcs cxd cxd ctd cpd cxd cxctd cwcpd crcpd cqct ctcpd ctcs dbcxd cwcxd cwct ctd dbd czba cbctcrd csb crd crctd cxd cpd cxd cpcqd csctb cpd csb ctcpd ctd ctd cpd ctd dbd 
cqd ctd ctcrcz crcpd cvcxdact cpcrctd cpd ctcpd cxd cxd crcxd ctb cqd cwcxd cqd ctd dactcs cxd ddd cxcrcpd cwct cwcpd dbd cwcpdact cqctctd cvctd ctd cpd ctcs cqdd cwct ctd cxcu cwct ctd dbd cwcpcs cqctctd crd cvctd ctcsba byd cxd cpd crctb cwct cqd ctd dactcs crd cwcpdact cqctctd csd cpd ctcs cqd cqdd ctdcd cxcrb cxd cpcsdactd cxd ctcs ctcpcrd cxd cqd cxd cxd ctd csb ctd crd cpd cqdd cwct cxd cxcrcxd ctcpcrd cxd ctd cpcqcpd csd cxd ctd cxd cpcud ctd cpcxd cud csctd cpddd cccwcxd ctd cxcpd cud csd cpd cxd cwcpd dbd cxd cxcrcpd cxd cud crd crd cxd csctd cpd csctd cud cqd ctd dacpd cxd bycxd cwct cqd ctd dactcs cxd cxd cwct cpd ctd cpd cxdacpd cwcpd crd ctd dbd cvctd ctd cpd cxcu cwctcxd csctd cpd csd dbctd cpd cxd acctcsba cbctcrd csb csctd cpd cxd cxd cwddd cwctd cxcrcpd cpd cxdacpd crctd cqd cxd ctd cpcqd cpd crd cwcpd cxd crd csctd cpd ctcvdd cud ctcpcrd cxd crd cvctd cxd buctcrcpd csctd cpd cxd cpd ctd cpcqd cpd crd ctb cxd cxd ctd cwcxd cwcpd cwcpd cpd cqdacxd csctacd cxd cxd cxd ctd cpd cxd cxctd cwcpd crcpd cqct ctcpd ctcs dbcxd cwcxd cwct ctd dbd czba cccwd cxd ctcpcs cyd crcpd crd cpd cxd ctd cud cpd crct cud csctd csd dbd cwctd cxd cuctd crct csctd cud cpdb ctcpd ctd ctd cpd cpd cwctd ctd cpd ctd dacxcrct cpd cxd ddd cwctd ctd dbd czb cpdb ctcpd ctd ctd ctd cud cpd crct cxd cscxcrcpd ccctd cpd dad cpd cxcpd dad cpcrd cpddctd ccd cscpd ctb cwct cpcyd cxd dbd crd crctd ctcs dbcxd crcwcpd cpcrd ctd cxdecxd cpd csctd cxd cwct csddd cpd cxcrd cpcrd cpd ctd ctd cwcpd cud crd ctcs cxd ctd cpd cpd cpd cwct cpcrczctd ctdactd dbctdactd cud csctd cpd cwct csddd cpd cxcrd cwct ctd ctd cpd cwct cwcpd cxd crcpd cxctd cxd cxd ctcrctd cpd csdd cxd cqctcwcpdacxd cxd cxd ctb cpcrctb cpd cpcrd cwct cscxabctd ctd cpddctd cxd cwct ctd dbd czcxd cwcxctd cpd crcwddba byd ctdccpd ctb cvcpcxd cqcpd cxcr csctd cpd cscxd cxd cqctcwcpdacxd ctabctcrd cxdactd cpd crcxctd csctd cxcvd ctcrcwd cxd ctd cud cwct cpcrctd ctd cucfctcq dccxctd cxd cxd crd crcxcpd czd cwct csctd ddcxd cvdd cwct ctd dbd czba cbcxd cxd cpd ddb crd dbcxd ctcpd cxd cxcr dbd czd cpcs crcwcpd cpcrd ctd cxdecpd cxd cxd cxd ctcrctd cpd csctd cpd cpd crcpd cwct ctd ctd crct cwct cqd cxd ctd cpcrd cxd cwcpd ctdccxd cxd cscpddb ctd ctd cpd cpd csd cwct cuctctcscqcpcrcz cpd crd ctcrcwb cpd cxd cpcrd cxd cpd cpd cxd ctd cpcrd cxd dbcxd cwct cscxabctd ctd cpddctd cxd cwct ctd dbd czcxd cwcxctd cpd crcwddba btd cwct cpd cxd ctb dbcwctd ddcxd dacxcsct cwddd cxcrcpd ctdcd cpd cpd cxd cud ctcrctd cqd ctd dactcs ctd cpd crcwcpd cpcrd ctd cxd cxcr ctcpd ctcs ctd ctd crb cpd ctd ddb cxd cxb cud cpcrd cpd crcpd cxd cqctcwcpdacxd dactd cpd cxd crcpd ctd cwctd ctdccxd ctd cxd cxcrcpd ctdacxcsctd crct cwcpd cqcpd cxcr csctd cpd cscxd crctd cpcxd crcwcpd cpcrd ctd cxd cxcrd cwct csctd ddcxd ctd dbd cvdd dbcxd cpdd czctdd ctba cfcwcxd cwct cscxd crd dactd cpd crcwcpd cpcrd ctd cxdecpd cxd ctd dbd cvcxctd cwcpd cpd ctcpcsdd cqctcrd dactd cpcrd cxdact cpd ctcp ctd ctcpd crcwb crcw cud dbd crcpd cqct ctdcd ctcrd ctcs cxd cwct cpd ctcpd crcwcpd cpcrd ctd cxdecxd cvb csctd cxd cpd cpd cpd dddecxd cwct cpd cxd ctd cpd cxb cpddctd csddd cpd cxcrd ctd ctd crba btcqd cpcrd cxd cccwct ckd ctd cud cpd crct cwct ctd ctd crcpd cqct csctd ctcs cpd cpd dddectcs cxd cvctd ctd cpd ctd ctb ctdactd cxcu dbct dbd cxczct csd bycxd cpd ckd cwct ctd cud cpd crct cwct ctd ctd cxd cxd csctacd ctcs cxd cxd cxd ctd cuba bud ctdactd cxcu dbct crd crd ctd cxdect cxd cxd cwctd cxd csctd ctd cscxd cwct ctd cud cpd crct ctd cxd cpd cwcpd ckdbcwcpd csd dbcpd ctcpd cud cwct ctd cud cpd crct ctdacpd cpd cxd brayb cpd cvct cpd cwct ctd ctd ctctcs cqct cpcqd cpcrd ctcs cxd csctd crd dbcxd ctd cud cpd crct ctcscxcrb cxd cpd cpd cqct cwctdd csctd cxdactcs cxd cxd cpd cxd cpd cpd ddd cxcrbbd ctd cxcrcpd ctcrcwd cxd ctd ctd crctb cwctd cxd cxd cvd dbcpdd cpd cpcrcwc ctd ctd ctd cud cpd crct csctd cxd cvb cxbactbab cwctd cxd cxd cvd ckcrd ctcrd ctdactd cpcqd cpcrd cxd dbct ctctcs cwcpdact ctdactd cpd ctdactd cpcqd cpcrd cxd cccwct cpcxd cqd ctd cpd crcwcpd ctd cvctb cxd acd cwct cxcvcwd ctdactd cpcqd cpcrd cxd cud cwct ctd cud cpd crct csctd cxd cxd cpd cwcpd csba cwct cpcqd cpcrd cxd cxd ckd cxcvcwd cxd crd dactd cwctd ddd ctd ctd ctd cpd ctcrd cwcpd cpd cxd cpd cud cwct cqcyctcrd cxdact cwct csddb cpd ctcpdactd cpd cwctd crd cxcrcpd cxd cqd dbb ctd ctdacpd cxd ctd cccwct czctdd cxd cwctd cxd dacpd cxcscpd cxd cxd cwct crcwd ctd cpcqd cpcrd cxd cxd csctctcs dacpd cxcsb cxd cwct ctd cwcpd cxd csd ctd ctcsd crct cwct ddd ctd csctd cxdacxcpd cpcvctb cpd cqctcrd ctd ctd cecpd cxcscpd cxd csctd ckcpcvcpcxd cwct ctd ctd ayb ctbacvbab dactd cxcudd cwct crd ctcrd ctd cwct cpd cxd cpcsct dactd cxcudd cwct cxd ctd cxd cxdacxd cwct csctd cud crcwcpd cvctd cxd ctdcd cxcrcxd csctd ctcs ddd ctd cpd cpd ctd ctd cxd cpd ctd cpd ddctd ctd dactcs cxd ctba bdbc cbcxd cxd cpd acd cscxd cwct cxcvcwd ctdactd cpcqd cpcrd cxd cud cwct ddd ctd csctd cwd acd cwct cxcvcwd ctdactd cpcqd cpcrd cxd csctd cxd csctd cpcxd cud cwct ctd cwct ctd ctd cpd cwctdd crd cxd cwct dbd czd cpcs cqct cwcpd csd ctcs cqdd cwct ddd ctd btd cpd ctdccpd cwcxd cwd dbct csctd cxd cvd cpcvcvd ctcvcpd ctd cwd dbct ctdcd cxcrcxd csctd ctd cxd add dbd ctdactd cxd cscxdacxcsd cpd cpcrczctd 
brba cxd ctd cxd cpcqd dbcwctd cwctd cpcscxd cxd cpd ckd cpd cxcray dbd czd cpcs csctd csd crctbn cxd csctctcsb dbctd cxcvcwd ctctcs crd cxcsctd ctdcd cxcrcxd cwct cxd ctd cpdd cqctd dbctctd cwct ctd dbd csddd cpd cxcrd cpd cxd ctd ctbacvbab cwct ctd cxd ctd ctd crctcxdactcs cqdd cwct ctd ctd ctd cwcpd cwctcxd cxd cpcrd cwctcxd cud cqctcwcpdacxd cpd dacxcrct dactd cpb bfbabf bzd cpd bvcwcpd ctd cvctd cccwct cxd ctd cxd crd ctd ctd dbd csctd cxd cvcvctd cqctd ckbzd cpd bvcwcpd ctd cvctay cqd ctd dbcwd cxd dbd ctd ctd ctd cxcvd cxaccrcpd cpcsdacpd crctd cxd dbb ctdactd ctd ctd csctd cxd cvba bfbabfbabd cxb cpddctd cfd czd cpcs bvcwcpd cpcrd ctd cxdecpd cxd btd ctcxcscpb bvd dactd cpb cpd cxd cvb bvcwcpd cpcrd ctd cxdecpd cxd crcpd cqct cpcrcrd cxd cwctcs cpd cpd ctdactd ctd ctdactd cpd cxcrcpd cxd ctdactd crd ctdactd cpd ctd dbd ctdactd dbctdactd cwct ctd cpd cxd cwcxd cqctd dbctctd cwctd ctdactd cpd crd ctd dbctd csctd csba ctcrcwcpd cxd cwcpd cpd cud crcwcpd cpcrd ctd cxdecpd cxd cud ctdactd cpd cwctd cpd cpcrczcxd cvba cccwct ctd ctd crct ctd dbd cuctctcscqcpcrcz cwct ctd crd cxcrcpd ctd cwcxd cqd ctd cxb cpddctd crcwcpd cpcrd ctd cxdecpd cxd cpd dbd cxd cxcvcwd cxd cwd cwcxcvcwctd ctdactd ctd cpd cxcrcpd cxd cqctcwcpdacxd cpabctcrd ctd dbd cqctcwcpdacxd cpcscscxd cxd cxd ctd cpcqd ctd ctd cvcxd ctctd cxd ctcscxcrd cxd cwct cxd cpcrd ctdb cpd cxcrcpd cxd ddd ctd cxb cpddctd crcwcpd cpcrd ctd cxdecpd cxd dacxcsctd ctd cwd cud ctcscxcrd cxd cwct cxd cpcrd csctd cxcvd crcwcpd cvctd cwct ctd dbd cxd cud cpd crd ctba cbd crcw cscxctd dbcxd cscxabd czd dbd ctcscvct cwct cxd cxcrcpd cxd crcwcpd cpcrd ctd cxdecpd cxd cxd cxd csd cxcpd cpcrd cxcrctba crcwcpd ctd cvct cud cpcrcwcxctdacxd cxd cxd crd cxd ctd cud cpd ctdbd cwcpd cpd cud crcwcpd cpcrd ctd cxdecpd cxd cud cwcxcvcwctd ctdactd dbctd ctdactd dacxcrct dactd cpba byd ctdccpd ctb cwct crd cxd ctd cud cpd cxd cpcrd cpddctd dbd cqct cwctd cud cpd ctcpd cqct ctcpd cxctd cvd cud cwct ctd cpddctd cwct dbctd cpddctd cqctcrcpd cwct crcpd cpd cxd ctd cpd cxd cwcxd cqd cvd cxd cud dbctd cpddctd ctd cpddctd cxd ctb cud cpd dbctd cpd ctd ctd ctd cpd cxd cpd crcwcpd ctd cvctba cfd czd cpcs crcwcpd cpcrd ctd cxdecpd cxd cpd cwct ctd ctdactd cwd crd cxcsctd cwct ddd ctd cqctcwcpdacxd byd cxd cpd crctb csctd cwd cqct cpcqd ctd ctd ctd cwct crcwcpd cvctd cxd ctd cqctcwcpdacxd cpcrcrd cscxd cwct dacpd cxd ctdactd ddd ctd ctd cud cpd crctba bdbd bfbabfbabe ctd ctd bxd cxdacpd ctd cfd czd cpcsd byd cxdact bxdcd ctd cxd ctd cpd cxd cpd buctd crcwb cpd czcxd btd ctcxcscpb bvd dactd cpb cpd cxd cvb bvd ctd ddb ctd cxd ctd dactd crd cxctd dcddb cwctd csctdacxcrctbbd ddd ctd csctd cpcqd cpd dbd czd cpcsd cwcpd cxd cxcr crd cscxd cxd cxd cwct cpcrd cpd ctd ctd cxd cpcrd cxcrcpd bzctd ctd cpd cxd ctd csctd cpddd ctd add cqcpd cxd cpcsd cxd cpd ctcs cpcrcwcxd ctd cpd crcpd cxd cpcrcrd cpd cpcs cvctd ctd cpd cxd cwd cpd csd ctd cwd cpd csd add dbd cxd cuctcpd cxcqd ctba cccwct csctdactd ctd ctd ctd ctd cxdacpd ctd dbd czd cpcsd dbd dacxcsct cwct cpcqcxd cxd ctd cvcxd ctctd cqctd ctd ddd ctd dbd cpd cud ctd ddd ctd cscxaccrcpd cxd cqct csd cxd crd ctcs ctd dacxd ctd dbcxd cwd cscxd cqcxd ctcpd ddd ctd byd cwctd ctb cxd dbd cpd cud cpcrcrd cpd cqctd crcwd cpd czcxd ddd ctd ccd cpcrcwcxctdact cwcxd crcpd cpcqcxd cxd ddb cpd csctd cpd cscxd cwd dbdbd czd cpcsd cpd cpabctcrd ctcs cqdd cpd cxcpd crcpd cxd bbd crcpd cxd cud cpd crd ctb crd cpd cqctcwcpdacxd cvcpd cxdecpd cxd cpd ctb cxd cscpddbbdbctctczb cpd cpcvct acd cxd ctctcsctcsba byd ctdccpd ctb cwct cscxd cxcqd cxd ctd ctd cpcrd crd ctd dacxcsctd dacpd cxctd dbcxd crd cpd ctd cxd cpd dbcxd cxd cscpddbbdbctctczb cpd dbcxd cwct cxd ctd cpcrd cxd cqctd dbctctd cwct dbd cpd dbctd bvd ctcpd cxd crd crcxd csctd crd cxd cxd csctd cwd dbd czd cpcsd cpd csctd ctd csctd cwctd cxd ctd cxd crcwcpd ctd cvctba bxd cvcxd ctctd cxd cxd ctd cscxd crcxctd cpcrcrd cpd crd ctcpd cxd ctd cwd cpd csd add dbd cqct dactcsb cpd cwd cqct cxd crd cpd ctcs cxd cvctd ctd cpd dbd czd cpcsd cvctd ctd cpd cxd ddd ctd bfbabfbabf btcrcrctd ccctcrcwd cvcxctd btd ctcxcscpb bvd dactd cpb cpd cxd cvb cdcqcxd cxd crd cxd ctbacvbab bwbtd cpd cpd cxcpd crctd cpd cpcrcwctcs cwct ctd ctd dbcxd cpcscs cpd ctcpd cpd csctd cpcvd cxd csct cwct cqctd crctd cpd dbcxd crcwcpd cvct cwct crcwcpd cpcrd ctd cxd cxcrd crctd cpcscscxd cxd crcpd cpcrcrctd ctcrcwb cvcxctd cxczct cdd cxdactd cpd cqcxd ccctd ctcrd cxcrcpd cxd cbddd ctd cdc cccbb crcpcqd csctd bwcxcvcxd cpd cbd cqd crd cxcqctd cxd ctd bwcbc cpd crcpd cxb cxd bwcxd cxcqd cxd cbctd dacxcrctd bwcbb dbcxd cxd add ctd crct dbd czd cpcsd cpd cxdacxd cud cpcscxd cxd cpd ctd ddd ctd cdd csctd cpd cscxd cwct cxd cpcrd cwctd crcwcpd cvctd cxd ctd dbd czd cpcs crcwcpd cpcrd ctd cxd cxcrd cpd ddd ctd ctd cud cpd crctb cxd crcwcpd ctd cvcxd cvba csctd cxd cwct cpcvcvd ctb cvcpd ctcs cud cxd cxd crcw crctd cxd cpd cwctd cqd ctd cwcpd cqct dactcsba cbcxd crct cxd cpd ctd dbd crcwcpd cpcrd ctd cxd cxcrd cpd ctcpcsdd cpd cxd cud cwct cxd ctd cpcrd cxd cpd cvct cqctd crd ctd cpcscscxd cxd cpd crcpd cxd cwcpd cwct ctd cxcpd cxd csd crct ctdb ctd cud cpd crct cwctd ctd cpba ccd cpd ctd cpdd cwcxcud cxd cxd ctd cxd cpd crcwcpd cpcrd ctd cxd cxcrd cpd cpdd cqctcrd crcpd crcwcpd cvcxd ctd dbd cpcscxd crcwcpd cpcrd ctd cxd cxcrd cbd cxd cwcxd cqd ctd dbcxd cpd dact cqd ctd cxd cpcsdacpd crct csctd ddb ctd 
cpd cxcrcxd cpd cqd ctd dbcxd ctd dbd ctd cud cpd crctba cbc ctd dbd dacxcsctd ctd dbd ctd cxd ctd csctd cxcvd ctd dbcxd ctctcs csctd cpd cxd cpcrd ctdb dbd czb cpcsd ctd csctd cxcvd cpd ctd cpd ctd dbd czd bdbe cccwct acd ctd cxd csctd cpd cwct cvctd ctd cpd ctcs cqdd ctdb crd ctcrd ctcs csctb dacxcrctd cxd cscxdacxcsd cpd ddba crcwcpd ctd cvcxd cxd cwct crcwcpd cpcrd ctd cxdecpd cxd cpcvcvd ctcvcpd cpcub accr ctd cxd cud cwctd ctdb csctdacxcrctd cdd csctd cpd cscxd cwd crcpd cqcpd csdbcxcsd cxd dactd ctd dbcxd crcwcpd cvct ctd cqctcwcpdacxd cpd cpd cxcrcpd cxd cqctcwcpdacxd ccd cpcrd cpcqd csctd ctcxd cwctd cpd cpd ddd cxcr cxd cpd cxd crcpd cpcqd ctd ctd ctd cxd cxd cxd crd ctd cpd ctctcsctcsba btd cpcscscxd cxd cpd cscxd ctd cxd cwcpd crd cxcrcpd ctd cqcxd dbd czb cpcs crcwcpd cpcrd ctd cxdecpd cxd cpd ddd ctd ctd cud cpd crct cxd cwct csctd ctd csctd crct cwct dbd czb cpcs cwddd cxcrcpd crcpd cxd ccd cqd cxcscvct cwct cvcpd cqctd dbctctd cwctd cpd cpcrd cxcrct cpd csctd cxd crctcsd ctd cwcpdact cqct cxd crd cpd ctcs cxd cpd cxcpd cud dbcpd cpcrczcpcvctd cccwct cxd ctd cucpcrctbbcud ctd ddd ctd cwctd cwcpd cqct cpcsctd cpd cud cxd cwct cxd ctcpd ctd ctd ctd cvcxd ctctd cxd cqd ctd bfbabfbabg ctd cwd csd cvcxctd cpdactd czd cpd cxd cxcrd cpd czb cfcxd cxcpd cfcxd cxd cvctd cfct cpd ctct ckbzd cpd bvcwcpd ctd cvctd cxd cwct ctd cwd csd cvdd csctd cpd cpd cpd dddect cwct ctd ctd cccwct crcwcpd ctd cvctd cpd cxd cxd crcxd cpd cud cwct cucpcrd cwcpd cwct ctd ctd cxd cpd cvctb crcpd crd ctdc ddd ctd cccwcxd cucpcrctd cwcpd ctd ctd cwd csd cvcxcrcpd cxd cpcrd cpd cwctd cpd cxcrcpd cpd cxd cxcrcpd cpd cxd cpd cxd ctcrcwd cxd ctd cxd crd cscpddd cpd cpd dddect crd ctd cpd crd cxcrcpd cxd ddd ctd cud ctd ctd cwctcxd cpd cxcrcpb cqcxd cxd dbcwctd cpd cxctcs cwct ctd ctd ccctcrcwd cxd ctd ctcs cxd cwctd cpd cwctd cpd cxcrcpd cscxd crcxd cxd ctd cpdd acd cpd cxcrcpd cxd cwct crcwcpd ctd cvct cxd cpczct ctd ctd csctd cxd cxb cscxd crcxd cxd cpd cpcrd cxdacxd ddb cpd cqd cxd cxd cwctd dacxctdbb cxd cpd cpd cvctd cpcvcvd ctcvcpd czd dbd ctcscvct ctd cxcpd cpd cxcrcpcqd ctd cwd csd cpd ctcrcwd cxd ctd bwctdactd cxd cwct ctd cwd csd cvdd csctcpd dbcxd ctd ctd cvctd cqctcwcpdacxd cqctcwcpdacxd cxd csd crctcs cqdd cpd cvct crcpd cxd ddd ctd cxd crcwcpd ctd cvctba cqd ctd ctdccxd cxd csctdactd cxd cwct csctd cpd cwctd cpd cxcrcpd cpd cxd cpd cxd cwcpd cvcxdact cxd cxd cpd cqd ctd ctdccxd cxd ctcrd cvd cxdecxd cxd cpd cud ctd cwd csd cvcxcrcpd ctd ctcrd cxdact cxd cwct crcwcpd ctd cvct cud cwd cvcwbm cxd cxd ctd cvcw ctcrd cvd cxdect ctd ctd cvctd cqctcwcpdacxd dbcwctd cxd ctdccxd dbct crcpd cpd cwd cvcw csctd cpd cscxd cxd crcpd ctd byd ctd cwd csd cvcxcrcpd ctd ctcrd cxdact cxd cxd cxd cpd cwcpd cwct csctd cxd cud cpd ctb dbd ctcs cqct cpcqd ctdcd cpcxd cxd cyd crd ctcpd cxd cccwd cvcw dacpd cxcscpd cxd csctd cxd cxd cpd cwctd crcwcpd ctd cvctba cqd ctd ctdccxd cwctd cpd cpd ctdactd cud cud cpd dacpd cxcscpd cxd crd crd ctcrd ctd csctdactd ctd cxd cpd cxd cud cpd ctdbd czd crcpd cpcqd ctd cxd cxcrcpd cqctcwcpdacxd cpd dacpd cxcscpd cxd crd dacpd cxcscpd cxd cpd cwctd cpd cxcrcpd csctd dbcxd cxd cpd cxd csctd cpd csdg crd cxd cxcrcpd dddgdacpd cxcscpd cxd cxd cwct ctd ctd cxd ctd cuba cactd ctdacpd crct csctd cxd dbd cxd cqctd csctd cpd ctcs dbcwctd dactd cxd cwct cwcpd cxcvcwd ctcpd cxd ddba bdbf cactd crct cpd cpcvctd ctd cpd bvd cccwct cvd cpd ctabctcrd cxdact ctd cud cpd crct csctd cxd cxd cxd cud ctcs csctdactd ctd cqctd ctd ctd crct cpd cpd cvctd ctd cpd ddd ctd crd cwcxd ctcrd cxd dbct cscxd crd cpd cscxd cxd ctd cpd cpd cvctd ctd cpd crd cxd cwct ctd ctd bgbabd cbddd ctd ctdactd bxd cxb cxd csctd cpd cacpcqcxd dacxcrcwb cactcxd ctd cccwct cpcxd cpd cxcrcpd cxd cwct ctd ctd cxd cwct cfd cfcxcsct cfctcqba cccwct cfctcqb cpd cvct crcpd cpd cxd crd ctcpd cxd cvd cxd cpd cxd crcxctd cpczct cxd cpd cxd cpd cqcyctcrd csdd cpd ctdacpd cpd cxd cccwct cfctcq cxd ctcud cud cpd ctcpd cqd cxd cwcxd cpd csctd cxdactd cxd cxd cud cpd cxd cxd dbcxcsct dacpd cxctd cud crcw cpd ctdcd cvd cpd cwcxcrd cpd cscxd cpd dacxcsctd cfctcq cpd cxcrcpd cxd cpd cpd cvcxd cud acd cud cxd cxd cud cpd cxd cpd csd crd crcpd cpd cvd ctd ctb crd ctd crctb ctd ctd ctcpcrcwcxd cvbbd ctd ctd ctcpd cxd cvb dacxcsctd crd cuctd ctd crcxd cvba ccd ctabctcrd cxdactd cxd ctd ctd cwctd cfctcq cpd cxcrcpd cxd dbctd ctdactd ctd dacxcrctd crcpd ctcs cxd ctd ctcscxcpd cxctd cpd ctd cxd ctcs dbcwcxcrcw cpdd crd cxd cpd cxcrcpd cxd cxd cwctcxd dbd bxdccpd ctd cwct cxd ctd ctcscxcpd cxctd cpd cpcvctd cxczct cwd cqd cqcpd cvcpcxd acd csctd ctd crba cpd dbctd cpd ctcpd crcw ctd cvcxd ctd crcw cpd btd cpcecxd cpd ctd cpbvd cpdbd ctd buctd cxcsct cwct ctcpd crcw cpd cxd csctdccxd cud dbcpd ctb cwct cpcxd cpd cwctd ctcpd crcw ctd cvcxd ctd cxd cfctcq crd cpdbd ctd ccd cscpddb crd cpdbd ctd crcrctd cxdactd dacxd cxd cfctcq cpcvctd dbcxd cwd cpczcxd cxd cpcrcrd cwctcxd cpd cxd ddba cactcrctd csctdactd ctcs ctcpd crcw ctd cvcxd ctd crcw cpd bzd cvd cpd bvd ctdactd crd cpcxd crd cpdbd ctd cwcpd ctdcd cxd cwct cwddd ctd cxd crd cwct cfctcq cud csctd cxdacxd cpd cxd ctcpd ctd cpcvctd btd crd ctd ctd crctb cwct ctcpd crcw ctd cvcxd ctd crcpd cpd dbctd ctd cxctd cpd cxd cucpcrd ctdactd cxcu cwctcxd cscpd cpcqcpd crd cpcxd dactd cpd cxd cwct cwcpd bfbhbc cxd 
cxd cfctcq cpcvctd cbctd ctcrd cxdact cfctcq crd cpdbd cxd cqcpd ctcs csd crd ctd cpd cxd crcpd cqct ctd ddctcs cxd ctcpd crcw ctd cvcxd ctd cqd cpd cxd csctd ctd cxd cxd csd crd ctd cud ctcuctd crcwcxd cqdd dcdd crcpcrcwctd ccd cscpddb cxd ctd ctd cwctcpdacxd ctd cxctd crcpcrcwcxd cpd ctd cxcrcpd cxd ctcsd crct ctd cxd cpd cwct cpcs ctd dactd cpd ctd dbd czba byd cwcxd ctdcd ctd cxdact cwcxctd cpd crcwcxctd dcdd crcpcrcwctd cwcpdact cqctctd csctd ddctcsba cbctdactd cpd crd cud cxd ctd crcpcrcwct crd ctd cpb cxd cwcpdact cqctctd csctdactd ctcs cpd crcrctd cud ctd ddctcs cxd cwctd ctd cvctd ctd ddd ctd crd cxd cxd cfctcq dccxctd cud cxd dactd csd cccwct cxd ctd crcpcrcwct crd bvc cxcvcxd cpd ddd ctcs cxd cpd dactd cpd cbd cxcs cwcpd cqctctd cpd cscpd cscxdectcs cpd cxd dbcxcsctd ctcsba cccwct cpcsdactd cpd cpd ctd dccxctd cwcpd cpd dbctcs cwct ctd cqctd ctacd cud dcdd crcpcrcwcxd dbcxd cwd cqctcxd cpdbcpd cwctcxd ctdccxd ctd crctba cccwctd ctcud ctb ctd dbd dacxcsctd crcpd cxd crd csct dcdd crcpcrcwcxd cpd cpd cwct ctd dbd cxd cud cpd crd ctba cpcscscxd cxd crcpcrcwcxd cvb cfctcq cxd ctd cxcrcpd cxd cwcpd ctd ctd cvctcs cpd cxd cpd ctcrcwd cvdd cud dacxcscxd crcpd cpcqcxd cxd ddba ctcpd cscpddd cwct cfctcqb cwct cqd csctd dbcpd cpcrctcs ctd ctd ctcrd cqctd dbctctd cscxabctd ctd cxd cxd ctd cbcxd cxd cpd cwct cpcsdacpd crctd cxd bdbg crcpcrcwcxd cvb cpd cpd ctd ctcrcwd cvcxctd cud ctd cxcrcpd cxd cwcpdact ctd ctd cvctcsba cbd cpd ctb cub cwctb cpd cpd cvd cxd cwd cud ctd cxcrcp ctd ctcrd cxd cxd crd csct dacpd cxctd ctd cxcrd crcw cpd ctd dbd dccxd cxd ddb ctd dactd cxd cxdecpd cxd cpd cpdacpcxd cpcqcxd cxd ddba cccwct cpd cpd ctd ctcscxd ctcrd cxd ctd ctd cxd ctd cxcrcpd crcpd cqct ctd cud ctcs cpd ctdactd cpd ctdactd btd cwct ctdactd cwct csd cpcxd cpd ctd dacxcrctb bwc cbb cwct bwc ctd dactd crcwd ctd ctd dactd ctd cxcrcp cud crctd cxd cvcxdactd ctd ctd cqdd ctd cxd cxd cpcscsd ctd btd cwct ctdactd crd cxctd cpd cvcxdactd cwct cpcscsd ctd dbcxd crcw ctd dacxd cpd cxd ctdcd cud dbcpd cvcxdactd ctd ctd cwct ctd dactd ctd cxcrcpd cfctcq ctd cxcrcpd cxd crcpd cqctcrd ctd ctcrcxcpd cxd cpd cud cfctcq cwd cxd ctd dacxcrct dacxcsctd cxd crct cxd dbcxd cpd cwctd crcxctd cpd cpcvct cwctcxd ctd crctd cqdd csddd cpd cxcr ctd cxcrcpd cxd cpd cxcvd cpd cxd cccwct cxcvcxd cpd cfctcqb ctd dactd cwct cxcs blbcb ctcs cpd ctd cxctdactcs cpd cxcr ccc csd crd ctd cccwct cxd crd ctcscxcqd cucpd cvd dbd cwct cfctcq cpd cwct cpdacpcxd cpcqcxd cxd ctd cwd csd cud cvctd ctd cpd cxd cpcvctd csddd cpd cxcrcpd crcpd ctcs cwct ctctcs cud cxd ctcvd cpd cxd cscpd cpcqcpd ctd cxd cfctcq ctd dactd buctd cxcsctd cxd cpd cpd cpcvcxd cfctcq csd crd ctd crcw cpd cxd ctcvd cpd ctcs cscpd cpcqcpd cpd dbd cwct csctd ddd ctd cpd ctcpcsdd ctdccxd cxd cxd cud cpd cxd ddd ctd ctcrcwd cvdd cxd cwct cfctcqba bwcpd cpcqcpd ctd crcpd ctcxd cwctd cqct cpcrcrctd ctcs cqdd bvd bzcpd ctdbcpdd ctd cucpcrctb bvbzc crd cxd cpdacp ctd dad ctd cqdd cxd crd cscxd crd csct cxd ccc cpcvctd cactcrctd ddb bvbzc crd cxd cpd cqctcxd cxd crd ctcpd cxd cvd ctd cpcrctcs cqdd cpdacp ctd dad ctd cqctcrcpd ctd cud cpd crct cpd cpcqcxd cxd ctcpd ccccc dbcpd crd crctcxdactcs cpd ckd cpd ctb ctd crd bac ctd cxd cxd cxd cxcrcxd ddb cwd dbctdactd cpcrcwcxctdactcs cpd cwct ctdcd ctd ctd cud cpd crctba ccccc bdbabcb ctdb ccbvc crd ctcrd cxd cxd ctd cpcqd cxd cwctcs cpd ctd ctcpd ctcs cud ctcpcrcw cpd cuctd ccc cpcvct cpd cwct ctd cqctcscsctcs cxd cxd ctd dbcxd cqdacxd dactd cwctcpcs cud crd ctcrd cxd ctd cpcqd cxd cwd ctd cpd ctcpd csd dbd cpcscscxd cxd dbb cpd crd ctd crctd cpd ctdb ctcpcrcw cxd ctb ctdactd cxd cwct dbcxd csd cpcrcwcxctdact cpd cxd cucpcrd cxdectba cccwct cqd ctd cxd cpd ctdacxcpd ctcs cxd ccccc bdbabd dbcwctd cwct ccbvc crd ctcrd cxd cxd czctd cud crctd cpcxd cxd ctb dbcxd csd dbba bxabd cud cwctd cxd dact ccccc crd cxd cxd cwct cyctcrd ccccc cwct cfbfbvba bgbabe ctd dbd ctdactd cpd czb cactdccud csb cfcxd cxcpd cccwct ctd ctd cxd cvd dactd ctcs cqdd crd ctcrd cxd crd cpd cvd cxd cwd cpd ctcrcwcpd cxd cpd cxd cud btbv crd cpd cwct cxd cpddctd ctd ctdactd crd cpd cwct cpd cxcrcpd cxd cpddctd cccwct ctd csb ctd cpd cpcscxcvd dbcwcxcrcw ctd ctd cpd cxd ctcxd ctd cpd ctd dbd csctd cxcvd cpd cwct ctdcd ctd crd ctdc ctd ddd ctd cwcpd cqctctd cxd ctd ctd crcrctd cud cpd cucpcrcxd cxd cpd cxd cwcxcvcwb ctdactd ctd dbd ctd dacxcrctd cpd ctdacxcsctd crctcs cqdd cwctcxd dbcxcsctd ctcpcs cpd cqdd cwct ctdcd ctd cxcpd cvd dbd cwct ctd ctd cpd cxcrb cpd cwct cwd ctct crd dgccbvc cpd cwct cpd cpddctd cpd cwctd ctd dbd cpddctd cpd bvcbc btbbbvbw cpd cwct cscpd cxd cpddctd dgd cvctd cwctd cwcpdact cwd csctd ctcs cwct cqd cwct ctd dbd crd ctd cxcqcxd cxd ddba bxcpd dbd ctd ctcxd cwctd cxd add ctd crctcs cwct cpcrczctd dbcxd crcwcxd cpd cpd cpd ctd cpd cxdact cpcscxd cxd cpd crcxd crd cxd dbcxd crcwcxd cvba cwct cpd bdblbkbcd ccbvc dbcpd ctdcd ctd csctcs ctd cud cpcscpd cxdact crd cvctd cxd crd bdbh cccwct csctd cxcvd crd cvctd cxd cpdad cxcscpd crct cpd ctd cpd ctcs ctcrcwcpd cxd csd ctdb cwctcpdacxd cwddd cxcrcpd cxd cxcvcwd cxd ddd ctd csddd cpd cxcrd cpd crd cpd dbctd cpd cxd cpd cxd cpd ctd cxd cxcrcpd ctdacpd cpd cxd cccwct ctd cxd ctcrcwcpd cxd cwcpdact dactd cqct cqd cwct cpd cxd ctd dacxcrct cbb cud cwct dbd czd cvctd ctd cpd cxdectcs crctd cwcpd cxd bzc cbb cwcpdact dacxcsctcs crcw cxd cxcvcwd cxd cwct csctd cxcvd crcwctcsd cxd cpd ctd ctb cxd cscxd crcxd cxd ctd cud 
cpcrczctd dbcxd crcwctcs ctd dbd czd cccwct crcwctcsd cxd cpd ctcrd bzc cpcsct dbd czctdd crd cxcqd cxd ctd cpcqd cxd cwcxd cwct crd ctd ddb cqctd czd dbd cwctd ctd cxcrcpd cqd cud dbd crcpd ctd csb ctd cpcrczctd cpd cuctd csctd cpdd cpcrd cpd cxb cwd cxd ctd ctd dbd czbn cpd dacxcscxd cxd cxcvcwd cxd cwct crd ctdccxd cwct ctcrcwcpd cxd ctb cxd ctcs cud ctabctcrd cxdact cpd cpcvctd ctd cucsctd cpddb ctd cxd cxdact crba cccwctd cxcsctcpd crd cxd cxd add ctd crct cwct csctd cxcvd cpd cpd cpd ddd cxd ctcrcwcpd cxd cud cwct ctdcd cvctd ctd cpd cxd ctd ctd cxd crd cscxd ctcrctd dbd cscxabctd ctd cxcpd ctcs ctd dacxcrctd cxd cwctd crcrctd ctd cwct ctd ctd cucpcrctd ctdb crcwcpd ctd cvctd cqd cvcwd cpcqd cxd cpd cqdd cwctd dactd crcrctd ctd cccwct csctd cpd csd cwct ctd ctd cvcxd ctd dbd czctcs cxd cud cpd cxd crcxctd dddgd cwct dad ctb cwct cpd cvct ctd cxd ctd ctd cpd cwctcxd crd ctd crcxcpd dacxcpcqcxd cxd dddgcpd cqctcvcxd cxd cpcxd cwct crd ctd cqctd ctabd ctd ctd cbcrcpd cpcqd cbba ccdbd ctcpd cxd cxctd cqd cxd cpd crd cxd cxd cxd dbcxd cwct cxctcsb cpd csb ctd ctcs crd cpd ctcvdd cwd dbcxd cqcpd csdbcxcsd cpd cwct ccbvc bbc bbd dbcxd crcwctcs bxd cwctd ctd cqd cpd ctbm ddd ctd cxdect cpd cwctd ctd cvctd ctd cpddd cpcsba cccwct cpd cscpd cpb cxd cpcvctb dad cxcrctb cpd cscxd cpd dacxcsctd dactd cwct cpd ctd dbd czb cpd cwctcxd cpd crd ctd cxd crd ctd crcxcpd ctd dacxd ctd cwcpd ctb ctcs cxd csctd cpd csd cud dbcwcxcrcw cwct cqctd ctabd ctd ctd dbcpd ctcrcxaccrcpd csctd cxcvd ctcsba btcvcvd cpdacpd cxd cwct cqd ctd cxd cwct ctdcd cxd ddd ctd cxdectbn dbcwctd crd ctcs dbcxd ctd cxd ctd ctd cxd cxd cpd cpd ctdacxcsctd cwd cwctd ctdb ctd dacxcrctd crcpd cqct ctabctcrd cxdactd ctcpd cxdectcs dactd cwct ctdccxd cxd crd cxd cud cpd crd ctba ccd cxd cpd ctd dacxcrctd cxd cvd cpd cpd ctctcs ctd dacxcrctd dacxcp cwct cpcsd cxd cxd crd cpd cwct ctd dbd ctcscvctd cpd dbctcxcvcwd ctcs cucpcxd ctd ctcxd ctd ctd cwd cxd cxd cuctcpd cxcqd csd cxd crcxctd crdd cpd ctd cxd cwcxcqcxd cxdact crd ctd add crd cxd cxcsct cwct ctd dbd cud ctd cxcpd cxd cxd crd crd ctd ctd ctd ddcxd cvd cpd cpd ctctcs ctd dacxcrct ctcrcwcpd cxd cxcvd cxaccrcpd crd cpd cxd cpd cqd csctd ctd cxd crd ctcpd ctd cxcvb cpd cxd cvcrd ctdccxd ddcpd csd dactd cwctcpcsb cpd cxacctd crd crctd cpcqd ctd cxcpcqcxd cxd ddcpd cucpd ctd cpd crct csd cpd ctcud ctd cpd crcpd ctd cxd ctd crct cxd cxdecpd cxd csd cwct ctd cub cxd cxd cpd cqd cxd ctd ctd dbd crba cccwct cxcvd cpd cxd cpcvcvd ctcvcpd ctb add crd cud cpd cqd cwct cxd cvctd crd cpd ctd ctd dacxcrctd cpcscsd ctd ctd cwct ctcrcwcpb cxd cpd ctcrd crcpd cpcqcxd cxd ddb cqd cxd cxd acd ctd dbcpd dacxd cwct ckcwd dbay cpd cvd cxd cwd cxcr cpd ctcrd cwct dacxd cxd cxd cqd ctd dbd crcw crd ctdccxd cxd crd cpd cxd cwct ctd dbd czb cwd crcw cwct ctcscvctd dbcwcpd crd ctd ctd cud cxd crd ctcsb dad ctd cucpd cwcxd dgcsctd cpddb cqcpd csdbcxcsd csd crd cqctcxd cwct btcrcwcxd ctd cwctctd ctcpcrd cxdact crd dgcpd cwct csctd cxcvd csctcrcxd cxd cwcpd dbcxd cxd add ctd crct cwct ctdcd cvctd ctd cpd cxd ctd ctd crd crd ctba cbd cxd cwcpd cpd crcpd cpcqd cpd cxd cxd ctcs cxd cxd ddba bdbi cccxd cbcrcpd ctba ctcrd csb cqd ctd cwcpd cqd ctb ctd dbd crd crcwcpd ctd cvct cxd cxd crcpd ctba bwcxabctd ctd crd dgd cud ctd cqctcrcpd cpddctd cxd cvb cqd ctcrctd cpd cxd dgcpcrd cpd cxd crcpd ctd csctd cpcvd cxd csct cpd cpd cactcpcrd cxdact crd cpd cqd csctcs cqdd cwct csb cxd cxd caccccb ctd cvd cwct cuctctcscqcpcrcz cqd ctdactd ctd cpcrd cxdact crd cpd cpabctcrd ctcs cqdd cwct ctd cvd cwct crd cpd dbcwctd cpd crcpd cxd ctd crctd cqctcwcpd add dbd cwcpd cpd cxd cwct cxd cxd ctcrd ctcrd cpd cvctba btd cwctd dbd ctdcd ctd ctd cpd ctd crct crcpd cpcrcxd cscxd ctd cxd cxd cpd ctd dbd cpd cpcvctd ctd cpd czd cwcpd cpcrd cpd cwct cxd crcpd cxd ctd cwd cvctd cpd btbv crd cwcpd ctd cpd cxd cwct cxcrd ctcrd cpd cvctba cxcrcxd cvdg csddd cpd cxcr cpd cpd cxcrdgcxd ctd dacxd cxd ctcs cpd ddctd cpd cwctd cscxd ctd cxd cxd cwct crd cpd ctb dbcxd crd cvctd cxd csctd ctd csctd cxcrcxd ctdcd ctcrd ctcs ctd cpd cpcrd cpd cvct cxd crcpd ctd cccwct ctd cpd cxd cwcxd cqctd dbctctd crd cpd cxd ctdactd cpd cxd crcpd ctd cxd cud ctd dbctd csctd csb cpd ctd cxcpd ctd cud cpd crct cvcpcxd csd ctd ctcrd cxdact crd cxd cpd crd ctd cpd cxdactd ctd cpd cud ctdcd cxd ctcsba cccwct ctd cxd cxd crd cpcrd cpddctd cpd cxd crcpd ctd cxd ctdcd ctcrd ctcs crd ctd ctd crctd cxd crd cscxd cpcqcxd cxd cqd ctd cud cxb cpddctd ctcs cuctctcscqcpcrcz crd cccwct ctctcs cud cxd crcpd ctd cxd cxdacxd cxd ctd dbd crd csctd cxcvd cxd cpd ctcs cqdd crcwcpd cpcrd ctd cxd cxcrd ctd ctcrcxcpd cud ctd cub cxd cxd cpd crb dbcwctd cqd cxd ctd ctd cxd cpcrd dbcxcsct cpd cvct cxd crcpd ctd cactcpcrd cxdact crd cwcpdact cqctctd cpcscxd cxd cpd csctd cxcvd ctcs ctd cpd cpd cwct cxd crcpd cwct cuctctcscqcpcrcz ddb cqctcxd cxd ctd dacxd cxd cud cpd cxd crcw cpd crd ctd cpd cxd crd cxd ctd dbd cpd cpd cxcvd cxaccrcpd cpd cvctd cxd crcpd ctd dbcwcxcrcw cpdd cqct ctdcd cxd cpcqd cud crd ctd cccwct ctcrctd cpcsb dacpd crctcs cud cpd ctdbd cxd ctb cxd ctb crcpd crd cvctd cxd crd cxd cpd cpdactd ctd ctcpd crcw cwcpd cxctd cpcscsd ctd cwcxd cqd ctd btd ctd ctdacpd crct cpd cucpcrd cud dbd 
czd cpcs crcwcpd cpcrd ctd cxdecpd cxd cwcpd cwd cwcpd crd ctcrd cxd cpd cwd cxdactcs dbcwctd ctcpd cwct cqd cscpd dad cxd crd cxcqd ctcs cqdd ctd cpd cxdactd cuctdb cvb cxdactcs crd ctcrd cxd crd csctd cxcvd cwcpd cxd ctd cxd cxdact cwct cqcpcqd csd cpd cxd crd ctcrd cxd cxd ddctd cpd cwctd cscxd ctd cxd cwcpd cxd cxd cxd cxd cucpd crdd ctdcd cpd cxd ctcvd cpd ctcs bvd cwcxd cpd ctcrd ctd dbd crd cvd dbcxd cxd cpd crct cxd cwct cxd ctcvd cpd cxd dacpd cxd crd cpcrd cxdacxd cxctd crcw cpd cxd cvb crd cvctd cxd crd cpcsd cxd cxd crd ctd ddd ctd crcwctcsd cxd cvb cpd ctd dbd ctcrd cxd ddba cccwct dacxd cxd cxd cpd cvctd ctd csb ctd crcpd cqct cpcrcrd cxd cwctcs cxd cqctd cpd ctd cpd cxdact dbcpddd ctbacvbab cqdd cxd ctd cxcqcxd cxd cxd acd csctd cxd cpcqd cpd cwb cpd cxcvd cxd cwcxcvcwctd cxd cxd add crd dbcsctcsb ctd csctd cxd cpcqd cpd cwb cccwct ctd cpd cxdact crd cpd cpcsctb cqctd dbctctd cscxabctd ctd crd cpcrd cxd crcpd cwcpdact cscxd ctcrd cqctcpd cxd cwct crcxctd crdd ctd crct cpd crcpd cxd cactcpd cxd bvc crcwctcsd cxd cpd ctd ddd ctd cxd ctctcsctcs dacxcsct crcxctd crctd cxd ctd csb ctd crd cpd ctd ctdacpd cpd cxcrcpd cxd crctd ctd cpd cxcu ctcrd cxd ctd dacxcrctd cpd ctd ctd ctcs cwct ctd dbd czb cwctcxd crd cpd cxd cpd dactd cwctcpcs cqct ctadctcrd ctcs cxd cwct dactd cpd ctd crct dacxd cxd cxd csctcrcxd cxd btd cpd ctdcd ctd ctdcb cpd ctb csctd cxcpd cub ctd dacxcrct cpd cpcrczd cwcpd crcpd cxcvd cxaccrcpd cscxd ctd dbd ctd dacxcrctd cpdd cwcpdact cpd cxd cpcrd cwcpd cpd crcwctd ctdccrctctcsd cwcpd cxd crcxctd ctd dbd crd cccwct crd ctcrd cpd crcxctd cud crd cxd cxd ctcpcrcw cqd ddd ctd cxd ctcrctd cpd cqd bdbj crcxctd crd cscxd cxd cpcrcwcxctdacxd ctabctcrd cxdact crd cwcpd cpd cwcpd ctd dbd ctd crctd cpcrcwcxctdact crd cvd cpd cxcscsd ctdbcpd cxd cwct cud cfctcq crcpcrcwcxd cvb cxcrcpd cpd cpcvctd ctd cpd cwd cwctd ctcs cud crd cxd cpd cxd cxctd crcpd ctdcctd cxcvd cxaccrcpd cxd cpcrd ctd dbd ctd cud cpd crctb cpd cpd cpcrd cxdact cxd crd cpd cxd cwctcxd crcpd cpcqcxd cxd cxctd cxd cwct dactd cpd ctd dbd crd crctd cxd csctd cxd cpcqd ctba cccwct cxd ctcvd cpd cxd dbcxd ctd cxd cpd dbcxd ctd ctd ctd dacxcrctd cxd crd cscxd cqcxd cxd crd crctd cxd ddctd cpd cwctd cuctcpd cwcpd ctd cvcpcvctd ctcrd crd cud crd cxd cpd cxd cxctd ctd cxd cxd cxd cxd cpd crd ctd cpd cxd cpcscscxd cxd cwctd crcwcpd ctd cvctd cwct cpcscxd cxd cpd cqctd ctabd ctd ctd cwct ctd cxctd cpd dbd czd cpcsd ctd dbd crd cpd crd cxcrcpb cxd ctcrcwd cvdd cwcpdact cxd cpd cxd cxcrcpd cxd cud ctd crct crd ctcrcwcpd cxd byd dbcxd cpd crd cscxd ctd cxd dgd ctdb cpd csdgd cwcpd cpd ctdcd ctcrd ctcs cxd add ctd crct cud crd csctd cxcvd byd cpcrd cpd crba ccd ctcpd cxd cwct ctd ctd ctdccwcxcqcxd cwcxcvcw dacpd cxcpcqcxd cxd cpcrd dbcxcsct cpd cvct cxd crcpd ctd csd ctd dbd czd cpcs cpd ctd cpd cwctcxd crd ctcrb cxdact cpd cxcuctd cpd cxd cpd ctd cub cxd cxd cpd cqd cxd ctd cpd cxd ctdccxd cxd cxd cwct ctd dbd czba ctd cpcrd cxd dbcxd cuctctcscqcpcrcz crd cvctd cxd crd crcpd crcpd cud cwctd cud cpcvb ctd cpd cxd cpd dbctd cxd crcpd ctd cpcsd cxd cxd cxcud cpcrd cpd crcwcpd cpcrd ctd cxdecpd cxd cxd dactd cpd ctd cxctd cbcrcpd ctb cxd dacpd cxcpd cqd cxd ctd cxd cxctd crd crctd cpd ctcs ctd cxd csd dactd cxd cxdecpd cxd cpd csctd cxd cxdecpd cxd ctd dbd cxd czd cpd cvb cpd cvct csctd ctd csctd crct ctcpcsd csctcrcpdd ctd ctb ctd cvd cscxd cxcqd cxd dbcwcxcrcw crcpd cpd cpd cpd cxacctcs ctd ctcxd csctd cpddd cxd cpcrczctd dbcxd crcwctcs ctd dbd czd btd ctd cpcscscxd cqd abctd cpcrct ctd abctd cxd cxd ctcs ctd cpd cxd cqcpd csdbcxcsd cqct dactd dacxd cxd ctcs csctd cxdactd cwcxcvcw cpd ctcscxcrd cpcqd ctb ctd cud cpd crctba cpcscscxb cxd dacpd cxcpcqcxd cxd cxd cxd cxdecpd cxd crd cxcrcpd ctd cuctctcscqcpcrcz crd cvctd cxd crd ctcpd ctd ctd cqcpd ctcs cpcsd cxd cxd crd cpd csddd cpd cxcr cxd dbcwcxcrcw csctd ctd cpcrcrd cpd ctd cxd cpd ctd ctd dbd cpd ctba cwct adcxd cxcsctb cvb cpd cvct csctd ctd csctd crctdg cxbactbab cwct ctd ctd crct cxdacxcpd crd ctd cpd cxd crd cpd ckd cpd cvctay cxd crcpd ctd cxd cxctd ctcpd ctcscxcrd cpcqcxd cxd dddbcwcxcrcwd cpdd cqct ctdcd cxd cpcqd cud crd ctd btd ctdccpd cwcxd cxd cxd ctb cxd ctb crcpd crd cvctd cxd crd dbcwcxcrcw cwcpd cqctctd cpd cxctcs ctdccxd cxd crd crcw cpd ccbvc cpd cpd ctb cqcpd ctcs crd cvctd cxd crd ddcxctd cscxd cxcvd cxaccrcpd ctd cud cpd crct cvcpcxd ctcpdaddb cpcxd cccwct cwcxcvcw dacpd cxcpcqcxd cxd ddd cucpcvcvd ctcvcpd cpd cxd ctd cxd crcxd cpd cud cwct cscxdactd cxd cpd cuctd cxdectd cpd crd ctcrd cxd csd cpd cxd cxd cwct ctd ctd btd cwd cvcw ccbvc bbcdbwc crd ctcrd cxd cpd dactd cwd cwct csctd cuctdb cpcrczctd cwct cpcrczctd cqctd cvb cxdactcs add dbd cccwctd ctd cxctd ctd cxd cpcrd ctdactd cpd ctdactd cpcvcvd ctcvcpd cxd cud cxd cscxdacxcsd cpd ccbvc cpd cdbwc add dbd cqctd dbctctd cpcxd cwd cqd ctd cccwct cpd cvct cqctd cwd add dbd cwcpd cxd cpd cxd cxcrcpd cxd cud ctd dbd crd cvctd cxd cwct crcpd ccbvc cwd cpd cuctd ddd cxcrcpd ctd cvcpcvct cwct dbb cpd cuctcpd dbcwctd ctcpd cpd cuctd ctcpcs ckd ctcpcsddb cpd ctay csd cxd cwct crd cvctd cxd cpdad cxcscpd crct cwcpd ctba ctd cwctd ctd crd ctcrd cxd cwctd add dbd crcpd crd cxcqd cpd cvct cqctd cud cpcrczctd cxd cwd bdbk ctd cxd cxd ctb cpd cxcrd cpd dbcwctd cwctd add dbd cpd cxdact cxd cqd cpd ctd 
cpd cxd crd cxd ccccc bbbdbabcb byd cpd ctd ddb cwct cwctcpdaddb cpcxd ctcs add dbb cxdect cscxd cxcqd cxd cucpcrcxd cxd cpd ctd ctdb crd ctcrcwcpd cxd cwcpd cud crd cwctcxd cpd ctd cxd cwct cpd cqctd cvb cxdactcs add dbd cwcpd crcpd cwct cpcyd cxd ddd cud cwct crba cvb cxdactcs add dbd cpcsd cxd ctabctcrd cxdact cxcsctd cxaccrcpd cxd cxbactbab cxd crd cpd cxaccrcpd cxd cpd cwcxd ctd cwcpd cqctctd ctdcd cxd ctcs ctcsd crct cxcvd cpd cxd dactd cwctcpcs cxd dactd btccc ctd dbd czd ctcsd crct cwct dbd cxd dad dactcs cxd cpcs cqcpd cpd crcxd cxd cfctcq ctd dactd cxd crd ctcpd cwct cpb cqcxd cxd cpcsb ctd cxd cxdact cxd cvb cpd cxd dact crd cvctd cxd crd ctcpdaddb cpcxd ctcs cscxd cxcqd cxd cwd cvcw cxd cxd cpd ctd cxctcs cwct cwddd cxcrcpd crcpd cpd cxd ctd cub cxd cxd cpd crb cpd cxd ctd ctd cxd cwctd ctd dactd cxcvcw csctd cpddb cqcpd csdbcxcsd csd crd cccwct cpd cxcs cxd crd ctcpd cxd cxd crcpd cpcrcxd dactd cwct cpd cuctdb ddctcpd cwcpd cxd cpcrd cpcvcpd cxd csctd cpddd dbcwcxcrcw cpd cqd csctcs cqdd cwct ctctcsb cub cxcvcwd cccwcxd cxd cqd ctd cpd cxcr cud crd cwd cpd cuctd dbcwctd cpd ctd crdd cxd csd cxd cpd ctcs cqdd cpcvcpd cxd csctd cpdd cpd cud ctd crd cxd cpdad cxcscpcqd ctba cxd cpd ddb cwcxcvcw cpcvcpd cxd csctd cpdd cxd cxd cwct ctabctcrd cxdactb ctd ctcpcrd cxdact crd dbcwcxcrcw ctd cuctctcscqcpcrcz csd cpd crd cpcrd cxd cscpd ctcs cuctctcscqcpcrcz cxd cud cpd cxd csd cxd crd ctcpd ctcs cpd ctd crcxctd crcpd ctb cxd cxd ctd cpcrd cxd cwcpd cpcsdactd ctd cxd cpcrd cwct cxd adcxcvcwd cxd cwct cxd ctba cccwcxd ddd cxcrcpd cpd cxcuctd cxd ctd cpd csctd cxd cxdecpd cxd dactd cxd cxdecpd cxd ctd dbd ctd crctd bvd ctd ctd ddb cpcrd cxdactd ctcrd dactd crcwctd ctd crcwcpd cpcrczctd ctdactd cud dbcpd ctd crd ctcrd cxd cqctcrd cpd cpcrd cxdact cpd ctd cpd cxdactd cvctd ctd cpd ctd crd crcwctd ctd cwcpd ctd ctd dact ctd crctd cpd ctctcsctcs cpd cxd cvctd ctdactd ctcrd cxd cpd cpd cxd ctd dacxcrctba cpd csctd cxcrcxd cpd cwcpd cxd cvb csd cwctcxd cwcxd cpd cqd cscxd ctabctcrd cxd crb crcpd ctdcd ctd cpd ctdacxcpd cwct cqd cxd ctd cqd ctd cccwct cpd ctd cwd dbctdactd cxd ctd cxcrd ctcs cwd cpd cvct dacpd cxcpd cxd dgdbcwcxcrcwb crd ctb crcpd cxcvd cxaccrcpd cxd cpcrd ctd cud cpd crctdgcpd ctd cub cxd cxd cpd cqd cxd ctd cxd cpd cpcvcvd ctcvcpd cwctd ctd cwcpd cxd cpd cvctd cpabctcrd ctcs cqdd csctd cpcxd ctcs cvd cxd cvd cpd cpd ctd cxd crcpd ctd btd cpd cpcrcw ctcpcrd cxdact crd cwcpd crcpd cxd cxcvcpd cwct csctd cpddb cqcpd csdbcxcsd csd crd cqd ctd cxd cxd ctb cxd ctb crcpd crd dbcwcxcrcwb cqdd ctdcd cxd cxd crd ctd cpd cxd crd cpd ctb cscxcrd cpcqcxd cxd cpd cxd crcpd ctd ctdccrctctcscxd cwct caccccb crcpd cxd cxd cwct cscpd ctcsd ctd cuctctcscqcpcrcz cxd cud cpd cxd cqddb cwd dad ctd csb ctd crd cccwct ctd ctd ctd cpd ctd cxd csctcrctd cpd cxdectcs cpd ctd dbcxd cwd cqddb cwd cqd abctd cxd cvb crcwctcsd cxd cvb cpd cxd cxd ctd cpcrd cxd dbcxd ctd csb ctd crd cvctd cxd crd cpd cpd cxcrcpd cxd cpcscpd cpd cxd cwcpd ctd cpd cpd cwct cxd crcpd csb cxd cxd ctd bdbcbcb bhbcbc ctcrb cccwct cxd ctd cpdd cqctd dbctctd cwd cqddb cwd cpd ctd csb ctd crd ctcrd csct csddcxd ctcxd cwctd cxd cxd cpd cxd byd ctdccpd ctb cwct cpd cxcpd cqd abctd cxdectd cpd cscxd crcpd cxcrcxctd csctd ctd ccbvc crd cvctd cxd crd cpd dbctd cpd cwct cqctd cpcrd cxdact add dbd cpd cwctcxd csb cxd cxd ctd cpcscscxd cxd cxd crct cwct cqctd add dbd cpd cwctcxd csb cxd cxd ctd dacpd dbcxd cxd ctb cxd cxd cscx crd ctd ctcrd cwct cpd cxcpd cpd cpd ctd ctd cud cwct cwd cqddb cwd cxcrcxctd cccwct cxd ctd cpcrd cxd cpd crd ctdcb cpd cpd cscx crd csdd cpd cpd ddd cxcrcpd ddba cpcscscxd cxd cpd cxd cscxdacxcsd cpd ctd cpdd cwcpdact cpcrcrctd cpd cwct ctcrctd cpd bdbl cxd cud cpd cxd ctbacvbab csb cxd cxd ctd cpcscpd cwct crd cpd cpd ctd ctd crcpd ddb ctdactd cxcu cpd cxcpd ctd cud ctd cxd cwctd cpd cpd ctd ctd dbctd czd dbd cxd crd ctdactd cccwct ctd ctd ctd cpd ctd dbcxd cxd cpddctd crd byd ctdccpd ctb cfctcq cpd cuctd cxd dad dact ccccc ctd cxd cwcpd ccbvc dbcwcxcrcw cxd crd cwct cpd cxd cxd cxd cscxdacxcsd cpd cpcrczctd cbcxd cxd cpd ddb cwct bud csctd bzcpd ctdbcpdd crd bubzc cud cxd ctd csd cpcxd cxd ctd ccbvc ctdcb crcwcpd cvct ctcpcrcwcpcqcxd cxd cxd cud cpd cxd cqctd dbctctd ctcxcvcwcqd cxd csd cpcxd cxczctdbcxd ctb ccbvc cud ctd dactd btccc dbcxd ctd ctd ctd dbd czd dbcxd cscxdactd ctd cud cpd crct ctd cxctd cccwct crd ctdc cpddctd cxd cxd crd cud ctd csctcvd cpcsctd ctd cud cpd crct cxd cqd dbcpddd byd ctdccpd ctb ccbvc cxd ctd ctd cpcrczctd cpd crd cvctd cxd cxd cscxcrcpd cxd ctdactd cwd cvcw dbcxd ctd ctd ctd dbd czd cpdd ctdcd ctd cxctd crct csd cpd cxctd cxd cucpcscxd cvba cbcxd cxd cpd ddb cpd ctb cqcpd ctcs cuctctcscqcpcrcz crd cxd cpd btccc ctd dbd ctbacvbab cxd btdacpcxd cpcqd bucxd cacpd ctd dacxcrctb cxd ctd cpcrd dbcxd ccbvc crd cvctd cxd crd cdd cpdactd cxd cwct cxd ctd cpcrd cxd cqctd dbctctd cpddctd ctd cxd ctd csctd cpcxd ctcs csctd cpd cscxd ctcpcrcw cwct crd cpd ctd cxd crd ctdc ctd cud cpd crct csctd dbcxd cpd cvct cqctd cpd cpd ctd ctd btd cwd cvcw cwct ctd ctd dbctd crcw cxd crcrctd cxd csctcrctd cpd cxdectcsb cwctd ctd cvctb ctd cpd cpd ctd ctd cpd ctb cwctd dactd ctd cxctd cxd csd crct cxcvd cxaccrcpd crd ctdccxd cxd ctd dbd crd cdd csctd cpd cscxd cvb cpd ctd 
cwcpd ctdcd cxd cxd cvb cwct cxd ctd cpcrd cxd cqctd dbctctd dbd czd cpcsd cpd crd ctcrcwcpd cxd cxd crd crcxcpd ctdad dacxd cwct ctd ctd cxd cpcqd ctb cqd cpd crcxctd ctd dbd czba bgbabf bzd cpd bvcwcpd ctd cvctd bgbabfbabd cbcrcpd cpcqd cxd ctdactd ctd dbd bvd cxd csctd cpd ctcxcscwcpd csd cactdccud csb cfcxd cxcpd ctd dbd czd cpd crd ctcs cqdd dacpd cxctd ctd crct cpd crcpd cxd ctcrcwd cxd ctd cwcpd ctd cpd cscxabctd ctd cxd crcpd ctd byd ctdccpd ctb cqd abctd cpd cpcvctd ctd cpd cxd crcwctcsd cxd ddd cxcrcpd ctd cpd cpd acd cxd crcpd ctb crd cvctd cxd crd ctd cpd ctd cpd cwct ctcscxd cxd ctd crcpd csb cxd cxd ctd cpd cxd cpd cpcsb cxd cxd crd ctd cpd cpd crd cpd ctd cxd crcpd ctba cccwctd cpd cpd ctd ctd csd cxdacxd cwctd ctcrcwcpd cxd cpd ddd cxcrcpd ctd cpd cpd ctd dbd dacxd cxd cxd cpd ctd cpd cxd cpd crcw cpd cvctd cxd crcpd ctb cpd cvcxd cud cwd cpd cscpddd dbctctczd cpd cwd byd ctdccpd ctb ctd cpd crd accvd ctcs dbcxd cpd cpd ctd ctd cud cqd abctd cpd cpcvctd ctd ctbacvbab cqd abctd cxdectd cacpd csd bxcpd ddb bwctd ctcrd cxd cqcpcqcxd cxd cxctd cxd crcwctcsd cxd ctbacvbab dbctcxcvcwd ctcs cucpcxd ctd cxd dbctcxcvcwd cpd cxd ctbacvbab cxd dbctcxcvcwd cud ctd cbcwd ctd cpd bycxd cxd cvb bud csctd bzcpd ctdbcpdd crd cxcrcxctd cccwct cpd cpd ctd ctd csd crcwcpd cvct dactd cud ctd cpd cpd ddd cxcrcpd ctd cxd cxd cpd cxd byd cwctd ctb cwct csctd cxcvd cwct ctd dbd cvdd cpcscxd cxd cpd crcrd cpd dactd crd cpd cxd ctd crcpd ctb cwd cvcw ctcrctd ctd ctcpd crcw cwcpd ctd ctcs cxd ctdb ctcrcwd cvcxctd cud bebc cvdd ctcrd accvd cpd cxd ctbacvbab dbcpdactd ctd cvd cpd cxcvd ctd cxd cfcpdact bwcxdacxd cxd cxd ctdccxd cvb cccwct cpd cvct cxd cvcpd cqctd dbctctd ctd dbd czb ctdactd crd cpd ctd cpd cxd cpd crd cxd cscpddb ctd dbd czd crcpd ctd cxd cxd crcxctd ctd dbd ctd crctd cpd csctcvd cpcsctcs ctd ctd crctcxdactcs ctd cud cpd crctba cpd dbcxd cwct cvcpd cqctd dbctctd ctd dbd czb ctdactd cpd ctd cpd cxd cpd crd cpd csctb cxdacxd crcpd cpcqd cpd cqd crd ctcrcwcpd cxd ctd cxd ctd dacxd cqctd crcwcpd ctd cvcxd cqd ctd cxd ctd dbd cxd cxd cpd csctd cxd cvb cxd crd cscxd cvbm cxd crd cdd csctd cpd cscxd cwct cxd ctd cpcrd cxd cqctd dbctctd cscxabctd ctd crd cpd crd ctdactd cxd crd crcxcpd crcxctd cpcvct ctd dbd ctb crctd buctd ctd csctd cwcpd crcpd cwctd cxd ctd cpcrd cxd dbd cucpcrcxd cxd cpd cqd crd cccwctd csctd cpd crd crcxcpd csctd ctd cxd cxd dbcwcxcrcw ctd crd ctcrcwcpd cxd cwd cqct cpd cxctcs cvctd cwctd cpd cxd dbcwcpd dbcpddbabyd ctdccpd ctb cwct cxd ctd cpcrd cxd cqctd dbctctd cxcrcxd cxcrcxctd cpd ctd dbd dacxd cxd cxd cvb ctd dbd cxd cpd cvdd ctcrd accvd cpd cxd cxd dbctd csctd csba ctd dbd csctd cxd cxd cxd cpd crd ctd cxd ctd ctabctcrd cxdact csctd cwct dbd czd cpcs cpd cvddb cpd crd ctcpd cud cpd cxd cwct ctd crct cxb cxdecpd cxd cqd ctd cccwctd cqd ctd cpd cxczctd cqct dactd crd cxcrcpd ctcsb cpd ctd cxd ctdb ctcrcwd cxd ctd cud acd cscxd ctabctcrd cxdact cpd cqd cxd byd ctcpd cxd crcwcpd cvctd ctd dbd crd accvd cpd cxd cpd cxcrcxctd cwctd ctcrcwd cxd ctd cqct crd cpd cxd cpd crcxctd ctd dbd czcxd cxd cxd cvbm cxd ctd dbd ctd cpd cxd ctd cxd ctd crcxctd ddd ctd cud cpcrd cxd cxd crd accvd cpd cxd cpd cpcvct cscpd cpb cuctctcs cwct cvdd cpd dbd czd cpcs csctd cbcxd cxd cpd ddb cxd ctd cpd cxd ctd cxd crcxctd ddd ctd cud ctcrd accvd cxd ctd dbd ctd ctd ctd dbcxd ctdb crd cpd cpd ctd ctd cccwct ddd ctd cpd cwctcxd csctd ddcxd crd crcpd cpd cvct ctd dbd czd cpd cwcxcvcw cxd ctctcsd bgbabfbabe cxd cxdectcs cactd cxdactd ctd cpd cactd crct bvd cxd btd cxd bxd cxb cacpcqcxd dacxcrcwb cactcxd ctd bud cxcscvcxd cwct cxd crcpd cqctd dbctctd crcpd crd cxd cpd ctd cpcrcrctd cxd cud cpd cxd cxd ctd ctd cwcpd crct cwct ctd cxdactd ctd cwct ctd ctd dbd cwcxd cpd ctd crdd cwcxcscxd cxd dact ctd cpd cxd cucpcrd cxd cqd cxd dbd cpd ctd cpcqd ctdb cpd cxcrcpd cxd cxd dad dacxd cxd cpcrcrctd ctd cwcxcvcwd cscxd cxcqd ctcs cxd cud cpd cxd crctd cpd crd ctd dacxcrctd cpd cvct cpd ctcsd cscpd cscpd cxd ctd dactd cwct ctd ctd cwcpd crd ctd cqcpd csdbcxcsd cpd cpcs ctd cpd ctd dactd bxdccpd ctd cpd ctd ctcpd ctcs bwc ctd cxctd cpd ccccc ctd ctd cpd csd cxd cwcxd crd ctd ctd dbd ctd crctd cpd cpcrctd ctdcd cpcs ctd csb ctd dactd cfcwcxd cwct ctd ctd crcpd cpcrcxd cxd cxd crd ctcpd cxd cpd cpd cxcs cpd ctb cpd cwct csctd cpd csd ctdb cpd cxcrcpd cxd ctd dactd cpd ctd ctd cpcrcrctd cxd dactd cwct ctd cud cpd crct cqd ctd ctcrcz dbcxd cxd crd ctcpd cxd cvd cwcxcud dbcpd csd bebd cwct cqcpcrczcqd ctd cpd ctd ctd dactd cactcsd crcxd ctd crct crd cxd cxd cwctd ctcud cpd cxd cpd dbcpdd cxd crd ctcpd cwct ctabctcrd cxdact crcpd cpcrcxd cwct ctd ctd bvcpcrcwcxd cpd ctd cxcrcpd cxd cpd crd cpd cxcr dbcpddd cpcscsd ctd cwct cqd ctd cpcqd dactba dbb ctdactd cwctd cpd cxd cpd crcwcpd ctd cvctd cxd cvctd cxd cwct crcpcrcwcxd cpd ctd cxcrcpd cxd cxd cwct crd ctdcd cwct ctd ctd ccd cpd cpd ctd crdd cqd ctd dacxcsct cpd cpd ctd crcpcrcwctd cwcpd crcpd cqct cpcrctcs cud ctctd cxd cwct ctd dbd czba ccd cpcrcwcxctdact cpd cpd ctd crddb crd cxd ctd cxd ctcs dacxcsct cqctd ctd dbcpdd cud ctd ctd ctd cxd cwct crcpcrcwcxd cxd cud cpd crd ctba ccd cscpddb cxd cwcxcycpcrczctcs cqd dbd ctd cxd 
cpd cxcrcpd crd accvd ctcsba ctcxd cwctd cxd cxd cpd cxd cucpcrd ddba cxcycpcrczcxd cqd ctcpczd ccbvc crd ctcrd cxd dbcwctd cpcrczctd cud crd cxctd cpczct cscxabctd ctd cpd cwd cwct csctd cxd cpd cxd bvd accvd cxd cqd dbd ctd cpcrctd crcw cpd cpcsd cxd cxd cpd cxdact cqd csctd cbc cpd cxd cuctcpd cxcqd cpd cpd cud cwcxcvcwctd cxctd cbc dbcwd crd ctd cpd cwctd cbc cpd ctd ctd cpcrctd ctd cqd ctd crct cwct cpd cpd ctd crdd cqd ctd cxd dactcs cwcpd dbct cpd cud ctct cpd cpd ctd crcpcrcwctd cpd dddbcwctd cxd cwct ctd dbd czb cwct ctdcd ctd cxd cxd dbcwcpd cpd cwct cxcvcwd cpd ctcvcxcr cpcrctd csctd cwctd cbcxd cxd cpd ddb dbcwctd cxd cwct ctd dbd cwd crd ctd ctd dactd cqct cpd dbcwcpd cxd cwct ctd cxcrcpd cxd csctcvd ctct cud ctd cxcrcpd ctcs ctd dactd btd cwcxcvcwctd ctdactd cud cvcxdactd csctd ddd ctd crcpcrcwctd cpd ctd dactd cxd cwct ctd dbd czb dbcwcpd crd ctd cwd cqct cpcrctcs dbcwcxcrcw crcpcrcwctd cpd ctd dactd buctcxd cpcqd csddd cpd cxcrcpd cpd cpd cpd cxcrcpd ctcrd cxcsctd crd ctd cpcrctd ctd cxd cxd cpd csctcpd dbcxd crcwcpd cvcxd csctd cpd csd btd cwctd cxd ctd crd cxd cpcrctd ctd cqd ctd btcscsd ctd cxd cwct cpcrctd ctd cqd ctd ctd cxd ctd cvd csctd cud ctd dbd cvddb cpd cxdcb cpd cpcrcrctd csctd cpd ctd cxd ctd crd cxd ctcpd ctd ctd crb ctd dbd cpd ctd dactd cpcsd cpd crd ctd cpcvctba bwcxd ctd cxd cxd cqd ctd btd cwctd crcwcpd ctd cvct cxd csctd cpd cscxd cwct cscxd ctd cxd cxd dccxctd dbctd cud bvc cwd cvcxdactd dcdd ctd dactd cwcpdactb cwd dbd crcw cpcxd ctd ddb cwd cpd cscxd csd cxdactd cpd dbcwcpd cxdectbr cccwct cqd ctd cxd ctdbcwcpd cpd cpd cvd cpcvct cwcxctd cpd crcwdd cxd ctd cwct cpd dbd csctcrcpcsctd byd cwctd crcwcpd ctd cvctd cxd crd csct cxd cxd ctd cxcvctd crct cpd cpd cxcpd crd cxd crcpcrcwctd cpd ctd dactd cud ctcuctd crcwcxd cvb crd ctd cpd cxd dbcxd cwctd crcpcrcwctd cpcxd cpcxd cxd crd cxd ctd crddb cpd cxd crd ctcpd cxd cwct cxd ctd ctd cwcpd crcpd cqct crcpcrcwctcsba byd ctcuctd crcwcxd cvb crcpcrcwctd cpd ctd dactd crd ctdccrcwcpd cvct cwcxd cpd dbcxd cqctd ctd ctcscxcrd cxd cud csctd cpd csba byd cxd ctd crcpcrcwct crd ctd cpd cxd cqctd ctd ctcrcwb cpd cxd cpd ctctcsctcs cud crcpd cxd cpd cpcvctd ctd cxbactbab cpd dbcxd crcpcrcwct acd dbcwcxcrcw cwctd crcpcrcwctd cpdd cwcpdact ctd ctd ctcs cqcyctcrd cpd cud ctd dactd ctd ctcrd cxd cxd crd cscxd cpd cxd ctd cxcvctd csctcrcxd cxd dbcwctd cqd cpcxd cpd cqcyctcrd cud ctd crcpcrcwct cpd dbcwctd cuctd crcw cxd cscxd ctcrd cud cwct ctd ctd dactd cactcvcpd cscxd cwct crcpcrcwctcpcqd cxd cud cpd cxd cpd crd cxd ctd crddb cpd cwct crcwcpd ctd cvct cxctd cxd ctcsd crcpd cxd crd ctd dacxcsctd cxd ctd csctd cxcvd cfctcq cxd ctd cpd cpcsd cxd crctd cpcxd ctcrcwd cvcxctd cwcpd cwcpdact cpd ctcpcsdd cqctctd ctcsba bebe bvd crd cxd btd cqctd cwctd ctd ctd ctd cvctcs cxd cwct dbd czd cwd cpd cpd ctadctcrd ctcs cxd cwcxd cpd ctd bycxd ctcpd ctd ctd ctcrcwd cxd ctd cud cwct ctd ctd cwcpdact cqctcvd csctdactd cqd cxcvb cxaccrcpd dactcs cqd ctd ctd cpcxd cfd czd cpcs ctcpd ctd ctd cxd crcwcpd ctd cvcxd cvb cpd ctctcsd ctadctcrd cwct cxd add ctd crct cwct cwctcpdadd cscxd cxcqd cxd cpd cpcxd ctd ctd cxd cpd dbd czd cpcs ctd cxcrd cwct cqcxcvcvctd crcwcpd ctd cvctd cpd ctcpd cqct csctd cpd dbcwctd cwctd cpd cwd dbd czd cpcs crcwcpd cpcrd ctd cxd cxcrd cpd crcwcpd cvcxd cpd ctdb cpd cxcrcpd cxd cpd cxd cpd cpd csctd ddctcs cxd cwct ctd ctd ctcpd ctd ctd cpd cpcrcwctd cpd cwct ctd dbd ctdactd cpd dacpd cxctcsb cpd cqd cpd cxdact cpd cpcrd cxdact ctcpd ctd ctd ctcrcwd cxd ctd cwcpdact cqctctd csctdactd ctcsba cfcwcxd cqctd cpcrd cxdact ctd dbd ctcpd ctd ctd ctcrcwb cxd ctd crcpd dacxcsct dbcxd csd cxd ctd dbd ctd cxctd cxd cxd ctb cxd cpd cwd cpcrczctd cwctd cpd cpd cwctd ctd cxd cpcqd ctd dbd cpd cwcpd cpd ddctd cscxd ctcrd ctcpd cpcqd ctbn cud cwctd ctb cwct crcwcpd ctd cvct cscxd crctd cxd ctd dbd cpd cud cpd cxdact ctcpd ctd ctd cxd cscpd cpd cvctd ctd cbctcrd csb ctcrcwd cxd ctd cud csctd cxd cwct ctd ctd ctd cud cpd crct cpd ddctd dbctd csctdactd ctcsba cxcvd cxaccrcpd crd cxcrcpd cxd cxd cwct crd ctcsb cpd ctd ctd cpd cxcrcpd cxd cxd dbcwcxcrcw ctd cqctcwcpdacxd crd cpcscpd cpd cxd cpd ctd dbd crd cscxd cxd cpd cxd cpd ctd cxd ctd cpcrd ctd cpd ctcs cqd ctd cxd cwcpd csctd cxd ctd cwd csd ctd cud crd cxd cvd cpcqd cpcrd cxd ctdactd cpcrczctd ctd add dbd cpd cpcrd cxd cpd cpcqd cpcrd cpdbcpdd ctd cpd cpd cpd cxcpd dacpd cxcpcqcxd cxd ctd dbd crd cscxd cxd ddctd cxd cxd cyd cwctd ctd cxctd cwcpd ctctd cqct cxd cpd cxd cwct ctd cud cpd crct cscpddb ctd ctd bycxd cpd ddb ctd cwd csd cwcpd cxd dact ctd cud cpd crct cpd ctd crct cpd cpd cvctd ctd cxd cwct ctd ctd cpd cqctcxd csctdactd ctcs dactd cpd cxcsd ddb cpd cpd cxd crd ctcscxcqd dacpd cxctcsba cccwctd ctd cwd csd crcw cpd crcpcrcwcxd cvb cxd csctdccxd cvb cscpd ctd cxcrcpd cxd ctdb crd cpd ctdb ctd dacxcrct csctd cpd cud ctd cqcyctcrd ctcs cxcvd ctd cud cpd crct ctdacpd cpd cxd cqd cqctcrcpd cwct cpd cxcs cpcrct crcwcpd cvct cpd cqctcrcpd cwct ctd cud cpd crct ctdacpd cpd cxd cscx crd cxctd ctd cxd ctcs cpcqd dactba dbctdactd dactd cwctc ctd ctd cwct ctdcd ctdactd cud crd cxd cpd cxd ddb cxd dbcwcxcrcw cpd cxd ctd dacxcrct cpd ctd crct crd cxd cpd cqd csctcs cpd csctd csb cwct cpcqcxd cxd ctabctcrd cxdactd cpd cpcrcrd cpd ctd csctd ctd ctd ctd cud cpd crct dbcxd cqctcrd cxd cscxd ctd cxcqd 
ctba bucpd ctcs cwctd cqd ctd dacpd cxd dbd czd cwd cpd cxcrcxd cpd csctdactd ctcs crd crd ctd cpd cud cwct ctd ctcrctd cpd cpcsdacpd crct cwct cpd cwct cpd cxd ctd ctd ctd cud cpd crct csctd cxd cvb dbcwcxcrcw cpd cxd ctcs cpd ckbzd cpd bvcwcpd ctd cvctd cxd cwcxd cpd ctd cvd ctd cwctd cpd dbcxd cwctd dact cwct ctd ctd cud dbcpd cxd cwct ctdb crctd dbcxd cud cscpd cxd cqcpd ctcs ctcpd ctd ctd cpd cpd ddd cxd cpd csb ctd cxd cvba bebf 
tiny tera packet switch core nick mckeown martin izzard adisak mekkittikul william ellersick mark horowitz departments electrical engineering computer science stanford stanford communications laboratory dsp center corporate research development texas instruments incorporated box dallas abstract paper present tiny tera small packet switch aggregate bandwidth tiny tera cmos-based input-queued fixed-size packet switch suitable wide range applications highperformance atm switch core internet router fast multiprocessor interconnect off-the-shelf technology plan demonstrate highbandwidth switch built esoteric optical switching technology employing scheduling algorithms unicast multicast traffic switch maximum throughput close highspeed chip-to-chip serial link technology plan reduce physical size complexity switch system pin-count introduction case high-performance networking overwhelming traffic internet continues grow month apparent end sight result recent years witnessed increasing interest high-speed networks supporting atm high speed networks high performance routers switches recently blurring line switches routers attempts combine benefits satisfy increased bandwidth requirements ensure bandwidth bottleneck network elements fundamental rooted memory interconnect bandwidth limitations attempt provide industry switching element developing building tiny tera small high-bandwidth single-stage switch tiny tera ports operating approximately ocrate switching fixed-size packets switch distinguishes classes traffic includes efficient support multicast aim demonstrate build compact switch aggregate bandwidth cmos technology central hub larger soda switch serve core applications diverse atm switch internet router tiny tera input-buffered switch allowing highest bandwidth switch cmos memory technology switch consists logical elements ports central crossbar switch central scheduler packets queued port entry switch optionally prior exit scheduler map ports queue occupancy decides crossbar configuration packet-time work supported texas instruments center telecommunications stanford input-queueing parallelism tight integration provide keys high-bandwidth switch input-queueing reduces memory bandwidth requirements packets queued input buffer memories run faster line rate speedup required output-queued switches long-standing view packets input-queued switch suffer poor performance due head line hol blocking developed scheduling algorithms reduce effects hol blocking unicast multicast traffic unicast traffic well-known buffering scheme called virtual output queueing voq input maintains separate queue output motivated dec pim algorithm fast fair efficient scheduling algorithm called islip achieves throughput close make scheduling decision current technologies multicast traffic developing algorithms based fanout splitting residue concentration ideas order realize compact switch high aggregate bandwidth tiny tera interconnect optimized support massive bandwidth connectors variable length physical paths ics reasonable pin-counts power-consumption developing serial link circuit block provide ic-to-ic physical link vlsi engines link byte interface interconnect single low-swing differential pair block mux dmux clock multiplication pll clock recovery pll line drivers line receivers switch architecture shown figure tiny tera switch consists main parts parallel sliced selfrouting crossbar switch centralized scheduler configuring crossbar ports operating packet arrives port buffered input queue destination priority class single destination unicast multiple destinations multicast packet awaits decision scheduler allowing traverse crossbar switch fabric beginning fixed-length packet time call slot scheduler examines contents input queues decides configuration crossbar chooses set conflict-free connections inputs outputs scheduling decision passed back ports communicate configuration information crossbar slices transmit packets crossbar packets leaving crossbar buffered output queues await transmission external line scheduler crossbar switch hub scheduler situated central hub figure connected ports easily gather queue status updates issue configuration data switch pipeline root sources configurations grant-tokens trigger release back pressure mechanisms switch flexible pipeline architecture scheduler implements algorithms provide efficient crossbar bandwidth unicast multicast sliced crossbar switch makes rest central hub figure slice tiny tera printed circuit board -bit crossbar chip crossbars scheduler connected port high-speed serial links operating multiple links detail section advantages central sliced crossbar switch hub crossbar slice extremely simple traces cross trace lengths connecting port crossbar similar minimum length reduces skew crosstalk means slice small tiny tera slice approximately diameter extremely high aggregate bandwidths achievable switching multiple bits parallel result switch scaled throughput requirements varying number slices switch supports multicast efficiently connecting single input multiple outputs tiny tera reverse path self-routing slot port transmits routing tag crossbar ahead transmitted packet routing tag -bit determines reverse path port send port forward-path self-routing -bit routing tag needed set destinations central hub comprised number identical crossbar slices scheduler slice single crossbar chip switch consists central hub port card connects radially port connected multiple external lines line interface multiplexer figure architecture detail tiny tera switch port buff buff crossbar stack port scheduler centralized scheduler crossbar slices high-speed serial link port tiny tera port designed scalable data rate packet size basic switching unit -bits packets length multiple bits main challenges designing port interface providing memory bandwidth input output queues performing per-packet processing functions atm vci address lookup figure shows port architecture separated application-independent packet datapath data slice application-specific port processor port processor packets arrive external interface set serial links operating -bits packet cached data slices call -bit unit chunk data slice forwards chunk port processor decides memory chunk stored port processor sends back memory address chunk header chunk updated written -bit wide sram data slices packet effectively written -bit wide sram port processor communicates scheduler informing newly arrived packets scheduler tells port processor read input-queue port processor issues read request data slices indicating packet dequeued memory packet forwarded serial links crossbar packets leaving crossbar buffered data slices control port processor stored output-queues leaving system external interface facility experimentation switch speedup requirements advantage maintaining input output queues sram dynamically partitioned resulting efficient usage important switch support variable internal speedup leading variable ratio memory requiresram data slice -bit bus sram data slice sram data slice application-specific port-processor ossbar interface external interface scheduler interface port card figure architecture port card data slice components application-independent switch -bit chunks port-processor application-dependent processes atm cell headers addresses serial link serial link serial links ments input output sharing sram input output queues requires readand write operations packet time approximately memory operation achievable commercial memory devices data slice designed application-independent data slice switches buffers chunks multiple -bits data slice designed ports built data rates number slices slice buffer chunk packet fact packet thought -dimensional structure shown figure packet consists multiple chunks processed multiple data slices port processor designed application-dependent implementation port processor process -byte atm cells performing virtual-circuit lookup implement atm forum bit rate best-effort traffic management standard port processor implement ip-routing segmentation reassembly packets switch 
core queueing scheduling port separate structures buffering unicast multicast packets input-queueing structure shown figure unicast packets port maintains separate fifo queue output scheme virtual output queueing voq eliminates hol blocking packet held queue packet destined output slightly complex switch maintains input fifos voq requires additional memory bandwidth packet arrive depart input packet-time impracticable eliminate hol blocking multicast packets require input maintain separate queue set destinations -port switch maintaining queues fact found benefit obtained maintaining multiple queues number queues approaches tiny tera port maintains single fifo queue multicast packets scheduling unicast packets voq unicast packets switch requires scheduling algorithm examines contents input-queues beginning packet time deciding served good scheduling algorithm fast simple fair efficient chunk chunk chunk chunk figure packet viewed structure -bit chunks data slice data slice billion input-lines operate packet -byte atm cell scheduling algorithm make decision previous work shown maximum size bipartite graph matching algorithm maximum weight bipartite graph matching algorithms longest queue lqf oldest cell ocf achieve throughput algorithms impractical implementation fast simple hardware requiring running time complexity developed practical heuristic scheduling algorithms islip ilqf iocf islip iterative algorithm high efficiency best-effort traffic simple implement hardware algorithm achieves fairness independent roundrobin arbiters input output simple round-robin arbiters experience output contention limits throughput simple modification islip overcomes problem causing arbiters slip respect match slot leads larger faster match slot algorithm behaves inputs outputs initially unmatched inputs outputs matched end iteration eligible matching connections made iteration removed iteration larger unicast queues output output multicast queues priorities packets external interface packets crossbar figure input-queueing structure port logn --sized match result steps iteration operate parallel output input step request unmatched input sends request output queued packet step grant unmatched output receives requests chooses appears fixed round-robin schedule starting highest priority element output notifies input request granted pointer highest priority element round-robin schedule incremented modulo location granted input grant accepted step iteration step accept unmatched input receives grant accepts appears fixed round-robin schedule starting highest priority element pointer highest priority element round-robin schedule incremented step request input makes request output packet step grant output selects requesting input pointer round-robin schedule arbiters shown outputs inputs requested output output grants input note pointers updated step input input input arbitration completed matching size found note maximum sized matching step accept input selects output arbiter input shown input accepts output updated point output pointers matched outputs updated note pointer unsuccessful output updated figure iteration islip algorithm modulo location accepted output input matched iteration figure illustrates three-step arbitration islip iteration islip algorithm properties property independent arrivals uniformly distributed outputs islip achieves throughput single iteration iterations queueing delay reduced figure property connection starved requirement pointers updated iteration output continue grant highest priority requesting input successful property islip iteration heavy load queues common output throughput property algorithm converge iterations simulation suggests average algorithm converges fewer log iterations property deterministic nature islip reduces burstiness traffic transits switch offered load avg cell latency cells fifo slip slip slip output figure performance islip iterations compared fifo output queueing independent arrivals destinations uniformly distributed outputs results obtained simulation switch graph shows average delay packet measured slots arriving input buffers departing switch note algorithm necessarily converge maximum sized match find maximal match largest size match removing connections made earlier iterations detailed consideration performance islip refer packet delay reduced increasing number iterations simulation find iterations sufficient switch importantly find centralized scheduler switch implemented single chip exploratory designwork suggests islip implemented current cmos technology perform iteration straightforward implementation islip shown figure -port switch hardware size dominated round-robin arbiters arbiter shown figure consists programmable priority encoder register holding highest-priority pointer decoder priority pointer incremented updated location matched input output matching occurs step arbitration remains unchanged scheduling multicast traffic crossbar performs multicast simultaneously delivering packets multiple destinations service disciplines fanout-splitting copies packet time packet win access outputs desires copied slot discipline fanout-splitting packets delivered output ports number slots copies unsuccessful slot continue contend output ports slot tiny tera employs fanout-splitting work-conserving enabling higher throughput requiring increase implementation complexity figure compares average packet latency simulation fanout-splitting random scheduling policy clear fanout splitting performance degraded fortunately fanout-splitting simple support extra signal scheduler inform input port hol packet finished service addition fanout-splitting scheduling algorithms employ residue concentration explain residue concentration separate packets input packets output packets input packet packet input queue generates multiple copies copy called log priority encoder round-robin grant arbiter islip algorithm priority encoder programmed highest-priority accept arbiter input identical decodergrant arbiters accept arbiters state input queues bits decision register interconnection arbiters implement islip nxn switch figure implementation islip output packet implementing fanout-splitting scheduler discharges output packets possibly leaving residual unexpanded output packets queue residual output packets called residue work-conserving policy leave residue policy determine distribute residue input ports decision place residue uniquely defines scheduling policy determining residue equivalent determining transmission schedule argued analytically simulation policy concentrating residue inputs lead highest throughput case switch proved subject natural fairness constraint optimal algorithm concentrates residue minimum number inputs breaks ties round-robin fashion concentrating residue smallest number inputs hol input packets completely served bringing packets forward head line residue-concentrating algorithm maximize throughput switch optimal residue-concentrating algorithm complex practicable residue-concentrating algorithm lead starvation packets large number destinations tiny tera employ practical scheduling algorithms developing called tatra fact scheduling problem mapped tetris-like game called weight based algorithm wba designed similar hardware islip unicast scheduling algorithm algorithms attempt fair achieve high throughput figure random schedule average packet latency offered load uncorrelated input traffic destinations uniformly distributed outputs average fanout average cell latency offered load fanout-splitting fanout-splitting high speed chip-to-chip serial communication links tiny tera design poses chip-to-chip communication challenges crossbar switch scheduler chips terminate communication links link originating board links achieve high data rates noisy digital environment integrated chips equally high bandwidth memory interfaces complex logic single chip terminate links chosen serial link architecture departs traditional practice adjusting link timing receivers tiny tera links phase adjustment circuitry transmitters receivers smart end dumb end phase alignment careful arrangement links ensure chips large fan-in dumb ends links greatly reducing complexity power consumption chips figure shows link data 
slice chips port smart end crossbar slice chip dumb end link reused ic-ic communications tiny tera operation high data rate communication links low voltage high edge-rate environment deep sub-micron cmos chips requires link circuitry excellent noise tolerance addition long feedback path phase adjustment smart transmitter limits rate phase drift tracked requiring stable clocks improve voltage noise tolerance integrating receivers clock stability achieved low phase-noise pll design compensates voltage temperature variations steady precise phase alignment accomplished digitally controlled clock phase interpolator clock distribution multi-board system tiny tera performance limited distribution high frequency clocks resultant clock skew phase noise jitter tiny tera design careful clock distribution scheme minimize skew on-chip pll multiply byte clock distributed board create transmit receive clocks figure tiny tera serial link architecture phase control timing data data timing port chip crossbar chip input memory output memory crossbar switch clock clock interp mult pll clock mult pll performing high speed board-to-board communication phase aligning serial links clock distribution skews wire package delays offset phase adjustment feedback loops phase control phase detection selection receivers link data receiver samples data centered bit time timing receiver samples data one-half bit time offset centered bit transition comparator determines timing receiver sampling transitions phase control logic alters receive clock optimize data receiver sampling window timing receiver sampling window fixed relative data receiver window figure illustrates one-to-zero transition timing receiver output high sampling clock early remote phase detection selection align phase data smart transmitters fixed sampling clock dumb receivers dumb receivers include data timing receiver phase adjustment mechanism timing information dumb receivers fed back periodically smart transmitter adjusts phase transmit clock center data fixed clock dumb receiver transmitter adjusts phase match receiver links crossbar scheduler run clock transmit receive local phase control current integrating receivers proper phase alignment voltage noise sample time switching noise errors serial links improve immunity input receiver integrates input entire bit time integration makes timing noise irrelevant received bit depend average signal bit time conclusion architecture concepts tiny tera small high performance fixed-size packet switch tiny tera combines switch architecture scheduling vlsi datapath high performance serial link circuits create switching engine extremely high performance cmos vlsi-based machine tiny tera bottlenecked memory bandwidth scheduler speed expect cost effective compact building block wide range high performance data switching applications pushing bandwidth single-stage element order magnitude today data sample timing sample received data waveform bit figure phase measurement waveforms acknowledgments richard edell california berkeley discussions nick mckeown lead version tiny tera architecture balaji prabhakar ritesh ahuja helped development multicast scheduling algorithms members tiny tera team ken chang shang-tse chuang jeff hsieh youngmi joo rolf muralt brian stark stanford ah-lyan yee helen chang ani anirudhan sharat prasad texas instruments tamir frazier high performance multi-queue buffers vlsi communication switches proc ann symp comp arch june karol hluchyj morgan input versus output queueing space division switch ieee trans communications anderson owicki saxe thacker high speed switch scheduling local area networks acm trans computer systems nov mckeown nick prabhakar balaji scheduling multicast cells input-queued switch proceedings ieee infocom march vol mckeown nick varaiya pravin walrand jean scheduling cells input-queued switch iee electronics letters dec mckeown nick anderson tom quantitative comparison scheduling algorithms input-queued switches submitted request mckeown nick scheduling cells input-queued cell switches phd thesis california berkeley mckeown nick anantharam venkat walrand jean achieving throughput inputqueued switch proceedings ieee infocom march vol prabhakar balaji mckeown nick ahuja ritesh multicast scheduling input-queued switch submitted preprint request tarjan data structures network algorithms society industrial applied mathematics pennsylvania nov sidiropoulos stefanos horowitz mark current integrating receivers high speed system interconnects ieee custom integrated circuits conference maneatis john precise delay generation coupled oscillators ieee journal solid state circuits vol dec 
global intrusion detection domino overlay system yegneswaran barford jha computer sciences department wisconsin madison emails vinod jha wisc abstract sharing data widely distributed intrusion detection systems offers possibility significant improvements speed accuracy isolated systems paper describe evaluate domino distributed overlay monitoring internet outbreaks architecture distributed intrusion detection system fosters collaboration heterogeneous nodes organized overlay network overlay design enables domino heterogeneous scalable robust attacks failures important component domino design active sink nodes respond measure connections unused addresses enables efficient detection attacks spoofed sources reduces false positives enables attack classification production timely blacklists evaluate capabilities performance domino large set intrusion logs collected providers internet analysis demonstrates significant marginal benefit obtained distributed intrusion data sources coordinated system domino evaluate configure domino order maximize performance gains perspectives blacklist length blacklist freshness proximity perform retrospective analysis sql-snake sqlslammer epidemics highlights information exchange domino reduced reaction time false-alarm rates outbreaks finally provide preliminary results prototype active sink deployment illustrates limited variability sink traffic feasibility efficient classification discrimination attack types introduction internet intrusions large-scale attacks catastrophic affect including stolen corrupted data wide-spread denial-of-service attacks huge financial losses disruption essential services estimated code red virus infected hosts resulting financial losses billion potentially profound impact detecting network intrusions attacks important goal protecting networks nefarious intrusions attacks remains challenging number reasons foremost fact problem constantly moving target due continued innovation easy access portscanning tools internet basic vulnerability widespread intrusions classes worms exploits identified primary means propagating information organizations cert result unacceptably slow response times installing countermeasures infrastructures ip-supported traceback pushback offer promise combating intrusions attacks similar measures widely deployed current practice protecting intrusions firewalls network intrusion detection systems nids firewalls choke points filter traffic network gateways based local security policies nids systems monitors residing end systems passively observe local network traffic react specific signatures misuse detection statistical anomalies anomaly detection examples nids employ misuse detection snort bro fundamental weaknesses misuse-detection-based nids inability detect types intrusions anomaly detection techniques establish statistical profiles network traffic flag traffic deviating profile anomalous high variability common network packet traffic limits effectiveness approach general current nids suffer major drawbacks high false alarm rates perspective single vantage point limits ability detect distributed coordinated attacks promising approach addressing abovementioned shortcomings distributed network intrusion detection systems dnids environment alerts nids combined address above-mentioned shortcomings valdes skinner show merging alerts nidss deployed single administrative domain reduce false alarm rate improvements limited perspective potential dnids contributions contribution paper description architecture distributed intrusion information sharing domino architecture enables nids deployed diverse locations securely share intrusion information domino overlay design facilitates scalable data sharing heterogeneous participation robustness nodes joining leaving infrastructure domino data sharing architecture describes methods transfer summarization information nodes architecture flexible enable consideration local policies important part domino architecture nodes monitor unused addresses call collection nodes domino active sinks data sources devoid false positives monitor unused addresses active sinks provide mechanisms detect spoofed sources efficient classification attack packets defined categories important additional benefit monitoring unused addresses fewer privacy concerns collecting data contribution paper evaluation domino design performance characteristics evaluation based set intrusion logs gathered networks internet month period knowledge evaluation dnids capability large distributed dataset key insights effectiveness distributed intrusion detection completed architectural specification domino implementation ongoing monitoring components developed implementation message passing components ongoing performed post facto analysis based domino specification evaluate data prototype active sink deployment experiments focused evaluating aspects domino marginal utility adding measurement nodes detecting worst offenders creating port summaries ideal configuration parameters domino architecture focused blacklist size sorted list worst offending sources frequency blacklist generation reaction time identifying worm outbreaks effect false alarm rates effectiveness domino identifying slow scanners variability payload distributions active sink data results important results experimental investigation improved summaries marginal utility experiments demonstrate small network collaborating peers approximately individual networks significantly improve perspective global attack behavior size individual peering nodes significant number collaborating peers blacklists worst offender list show approximately tens attack sources responsible significant portion scans day substantial benefit achieved stale blacklists decreased reaction time evaluate reaction time system data outbreaks sql-snake sql-sapphire provide examples rules domino employ react favorably scenarios significant false alarms demonstrate reaction time exploit recognition substantially reduced domino conditions slow scanners results suggest small daily blacklists sources significant impact deterring slow scanners utility active sink data provide preliminary results active sink deployment highlight limited variability observed payloads malicious traffic motivate approach building robust classifier results number important implications domino architecture demonstrates framework systems administrative domains participate coordinated intrusion detection clear improvements ability identify intrusions coordinated data sharing make compelling consideration network administrators deployment active sink nodes unused address space internet significantly increase fidelity speed alert generation intrusion detection systems widely deployed infrastructure domino considered target attacks effective domino resilient variety attacks discussion threats mitigating measures domino discussed section related work techniques intrusion detection misuse detection statistical anomaly detection information retrieval data mining inductive learning survey intrusion detection reader consult existing literature topic classification intrusion detection systems appears section researchers started investigating distributed network intrusion detection authors propose coverage cooperative virus response mechanism reacts highly virulent viruses indra proposes fully peer-to-peer approach intrusion detection organization completely adhoc locality account infrastructure serves primarily rule dissemination mechanism domino design combination peerto-peer hierarchical components providing significant advantages purely hierarchical architecture advantages include simplified information sharing scalability fault tolerance current state art aggregating intrusion logs observing global trends dshield project number participants volume data collected makes attractive resource weakness data collection static devoid real time analysis rule generation capabilities payload information complete protocol headers captured makes attack classification impossible locality mechanism adjust queries account proximity database distributed limits scalability introduces single point failure infrastructure seeks address defeciencies approach domino flat tuple space express alerts researchers developing languages express alerts languages standardized plan incorporate domino merging alerts sources studied researchers merging algorithm domino influenced experimental results investigating algorithms data fusion purpose goal intention recognition correlate alerts possibly emerging sources infer plan adversary context domino working problem plan incorporate existing intention recognition module domino investigating structures reason sequences attacks privilege graphs attack graphs purposes intention recognition work influenced empirical studies intrusion attack activity moore examined 
prevalence denial-of-service attacks backscatter analysis authors analyze details code red worm outbreak provide important perspective speed worm propagation follow-on work moore provide insights speed counter measures installed inhibit spread worms code red work closely domino paper explore statistical characteristics internet intrusion activity global perspective work informs domino design perspective potential multiple sites coordinated intrusion detection domino architecture domino overview domino network dynamic infrastructure composed diverse collection nodes located network spanning internet objective system provide framework information sharing aimed improving intrusion detection capability participants overarching requirements properties challenges organization network requirements unlike large information sharing infrastructures include availability networks prone system failures congestion attacks infrastructure resilient temporary network instabilities crucial network remain face worm outbreaks denial-of-service attacks internet catastrophes scalability success utility network participants relies ability scale gracefully large number nodes decentralization decentralized architecture greater flexibility eliminates single point failure pervasiveness network effective figure domino node organization axis nodes participate peer peer overlay identifying attack trends characterizing global internet intrusion phenomenon obtains representative participants moderate size portion address space privacy network reveal data individual participants sensitive increase likelihood attack individual participants heterogeneity network harmonize systems disparate networks varying sizes run wide range nids firewall technologies domino overcome weaknesses individual nids rules organizational topologies inducement finally incentive direct benefit networks join infrastructure critical mass participants required obtaining benefit low shown figure domino network comprised sets participants axis overlay satellite communities terrestrial contributers describe sections communication axis overlay nodes satellites encrypted provide description key distribution strategy section axis overlay axis nodes central component domino architecture responsible bulk intrusion information sharing scalability availability vital resilience infrastructure important requirements resilience failure axis nodes ability quickly detect adapt topological resulting nodes joining leaving overlay networks shown highly resilient disruption possess ability deliver messages large-scale failures network partitions order enhance robustness extend availability architecture external connectivity nodes participating domino axis overlay maintained set domino access points dap participation axis node level domino achieved administrative procedure section axis node overlay terms components intrusion data collection axis nodes act intrusion data collection points domino axis nodes typically belong large well-managed networks high level trust required participate level networks nids firewalls active sinks deployed nids firewall nids firewall logs provide data specific intrusion signatures rejected packets fundamental intrusion data sources domino active sinks sink hole large chunk unused advertised address space active sink sniffs traffic bound addresses addresses simulates virtual machines supporting level interaction naive instantiation active sink labrea tarpit labrea developed mechanism slowing codered propagation creating sticky honey-pot persistent connections sinkholes infecting machines temporarily stuck slowing propagation outbreak examples active sinks include honeyd highly customizable low-interaction honeypot isink scalable sink hole responder approach monitoring important auxiliary benefits domino includes active sinks enable examination payload packets helps associating attack vulnerability examination request helps distinguish codered nimda variants traditional nids service running port spoofed sources behave differently active sink response send payload packet respond reset simply drop syn ack received sink source sends payload active sink considered malicious misconfigured enables creation high confidence blacklists attachment greater accountability attack sources assess feasibility scalability large scale active sink deployment running version active sink analogous tarpit class networks weeks number monitored ips increased measurement period characterization analysis data captured sink discussed appendix axis node ideally maintains nids active sink large unused address space experience similar datasets discussed section collection data sources sufficient identify global attack characteristics high degree accuracy expect number axis nodes consistently order maximize effectiveness system activity database schema axis database important relations packet logs local global summaries vulnerabilities alerts domino summary exchange protocol domino axis nodes overlay participate periodic exchange intrusion information refer data sets exchanged summaries actual format summaries section summaries exchanged levels granularities hourly daily monthly summary exchange involves steps pulling data satellites alternatively implemented periodic push choice left satellites generation summary data multicast axis nodes executing store operation enable persistent availability data domino query engine domino axis nodes export queriable interface tune firewall parameters expeditiously react outbreaks queries external sources directed daps accessibility controlled protect integrity infrastructure finally query engine supports trigger mechanism axis nodes pull data satellites real-time basis mechanisms prove extremely valuable gathering fine-grained information analyzing outbreaks satellite communities satellite communities smaller networks satellite nodes implement local version domino protocol potentially wide disparity sizes underlying nids firewall software running networks extensions provide support domino implemented plug-ins systems satellite nodes organized hierarchy node routes communication larger network parent node domino satellite axis node data collected satellite nodes transmitted axis nodes combination push pull mechanisms data obtained satellites considered trustworthy collected axis nodes satellites potential generate large volume spontaneous alerts due limited perspective nodes incapable performing local analysis classification attack severity nodes organized ad-hoc hierarchies efficient clustering neighboring alerts robust construction pertinent digests preserving hierarchical attributes edges domino overlay facilitates efficient data aggregation intelligent routing queries responses establishment trust levels simplifies administrative demands axis nodes satellites enjoy symbiotic relationship representation satellites network wider coverage space inducement satellites global vantage point rapid outbreak recognition dynamic content filtering application specific source blacklisting protect networks timely manner terrestrial contributers terrestrial contributers form trustworthy potentially large source data nodes implement domino protocol active sinks bound software installation nodes run firewall nids software simply supply daily summaries port scan data terrestrial contributers simply means expanding coverage including intrusion data sets infrastructure domino messages foster interoperability maximize extensibility domino protocol messages represented xml extend schema proposed idwg intrusion detection working group idmef intrusion detection message exchange format draft schema adds message types provided idmef alerts hearbeats message categories domino alerts summary messages heartbeats topology messages queries updates triggers description message types formats appendix information sharing axis node maintains local global view intrusion attack activity local view considers activa utility additional subnets detecting worst offender utility additional subnets detecting top target port figure marginal utilities ity network satellites axis nodes periodically receive summaries peers create view global activity issues creating views include scalability timeliness trust axis node employ strategy creating local global views strategies data aggregation create local global views discussed appendix authentication axis nodes domino high degree trust authenticating inter-axis communication vital public-key cryptography 
specifically rsa purpose schemes source authentication anticipate number axis nodes scale rate domino infrastructure key distribution nodes envisioned big hurdle fact easily special certificate authority domino network axis node joins domino engage key distribution protocol domino axis node multicasts intrusion summary computes shahash summary appends digital signature hash summary verified recipients approach scalable domino axis nodes broadcast summaries infrequently summaries lightweight order kbs current implementation broadcasting period approximately hour plan undertake experimental evaluation overhead computing digital signatures context domino investigating mechanisms source authentication including ellipticcurve based public-key systems public-key axis node authentication standard challenge-response protocol finally authentication schemes based secret key exchanges considered chose pursue authentication scheme based sharing secret keys entail sharing secret key pair axis nodes approach scalable require maintenance choice public-key system results section provide background results demonstrate utility sharing intrusion information measure amount information gained adding additional measurement nodes investigate temporal attributes stability blacklists effectiveness blacklist terms size similarity blacklists respect destination proximity explore information sharing infrastructure affect reaction times worm outbreak aforementioned results based data obtained dshield set firewall nids logs portscans collected month period firewall administrators distributed globe basis analysis detailed description data appears appendix description analysis data captured active sink appendix marginal utility information theoretic approach quantify additional information gained adding nodes distributed intrusion detection framework approach utilizes kullback-leibler distance metric probability distributions measure information gain framework evaluating marginal benefit employing additional measurement sites context internet topology discovery presented presented methodologies quantifying marginal benefit obtained incorporating results additional experiment online offline marginal utility metlength blacklist ips percentage scans filtered daily blacklist weekly blacklist monthly blacklist effectiveness blacklists length source rank average number scans daily weekly monthly effectiveness blacklists age figure effectiveness blacklists ric offline metric considers benefit experiment post facto basis measuring experiment usefulness experiments conducted study experiment corresponds additional intrusion log submitted network choose offline metric concerned order logs submitted assume intrusion logs log defines distribution source ports originate scan probability scan originated port intrusion log rank intrusion logs entropy distribution higher entropy intuitively probability distribution higher entropy contributes distribution distribution information logs combined distribution intrusion logs combined marginal utility denoted dkl log equation sum ranges source ports intrusion log framework measure effectiveness sharing logs identifying worst offenders effectiveness identifying frequently scanned target ports day month june randomly selected dshield logs determine number participating networks required obtain stable distribution figure depicts diminishing marginal benefit adding additional network logs developing port summaries curves networks show similar trend additional benefit declining networks message benefit bigger measurement networks important measurements multiple vantage points graph marginal benefit developing worst offender list blacklist figure message pronounced graph size matter graphs imply collaboration networks adequate develop port summaries blacklists high degree confidence interesting note actual marginal utility values worst offenders higher port summaries suggests important add additional sites developing blacklists creating port summaries summary marginal utility information detect target source ports port scans minimal nodes suggests respect identifying target ports worst offenders port scans domino network approximately axis nodes suffice blacklist effectiveness crucial operational parameters domino overlay size blacklists exchanged participants domino axis distance blacklist similarity figure similarity blacklists proximity nodes develop exchange service specific blacklists multiple granularities study generated combined blacklist dshield providers granularities daily weekly monthly figure illustrates relationship blacklist length effectiveness terms percentage scans blocked graph shows hour scanning activity attributed source ips surprisingly global daily blacklist sources account scans similar benefits achieved stale monthly blacklist sources summary sources responsible large fraction scans sources persist size blacklists domino network large blacklist aging figure means visualize aging blacklists create blacklist top sources multiple granularities graph average daily number scans generated rank higher ranks top hourly blacklists deliver superior performance lower ranks instances monthly blacklist performs daily blacklist validates maintaining blacklists multiple granularities suggests lower granularities greater benefit creating longer blacklists address proximity address proximity important consideration organization domino topology conflicting issues resolved allocation satellites axis nodes minimize false alarms effectively cluster related scans attack episodes beneficial organize nearby nodes nethour starting number scans sources hour number sources scans hour inflection point figure scan rate hrs surrounding sql-snake outbreak works hierarchy scanning attack tools designed sequentially traverse space axis node obtain composite view attack activity ideal data diverse set blocks understand granularity aggregation maximizes tradeoff randomly selected networks measured similarity monthly blacklists june defined distance networks dist express similarity blacklists networks needed metric greater weight match higher rank asymmetric similarity list denoted sim symmetric similarity lists denoted symsimilar average sim sim formally similarity metrics defined denotes length lists sim rank symsimilar sim sim figure shows similarity blacklists function distance networks figure shows high degree similarity blacklists networks close similarity farther summary similarity blacklists positively correlated distance respective networks observation consequences context domino satellite nodes figure reduction reaction time add networks address organized single axis node set address spaces randomly distributed axis participants axis node generates version global summary simple aggregation work weighted merging retrospective analysis sql snake section perform retrospective analysis sql-snake outbreak unlike precedents codered nimda sql-snake slow-spreading worm due small size susceptible population mode propagation tcp wanted measure information sharing system domino affect reaction time alarm rate outbreak randomly selected networks trained port summary data port ms-sql server weeks network measured hourly average number scans average number sources figure shows hourly scanning rate terms number scans number distinct sources scanning port hours surrounding outbreak denote visually apparent point outbreak inflection point simulated random iterations domino networks axis nodes iteration measured number outbreak alarms generated networks size ranging nodes assumed domino nodes exchange hourly summaries scanning activity triggers fired spontaneous alerts experiment voting scheme generate outbreak alarm outbreak alarm generated atleast nodes vote alarm node votes alarm holds chosen complicated rule generating alarms based statistical anomaly detection howfigure change alarm rate add networks increase number scans hourly average increase number sources hourly average number sources greater reaction time defined elapsed time inflection point alarm point figure shows decrease observed reaction time average hour single node add sufficient axis nodes approximately figure displays average number alarms decreases topology size stabilizes alarms false alarms correspond preceding hours inflection 
point show gradual increase source rates points outbreak predicted earlier domino oscillatory behavior alarm rate artifact rule requires integral participants vote outbreak summary adding sufficient nodes outbreaks detected early minimal reaction time false alarms retrospective analysis sql-sapphire sql-sapphire worm sql-slammer released january wreaked significant havoc networking infrastructures ten minutes worm distinguished predecessors small payload size single udp packet bytes enabled rapid propagation rate spite small susceptible population reality high speed worms implies distributed architectures domino opportunity detect react worm outbreaks simple rule suffices illustrate point time jan number scans sources minute number sources scans minute scan rates port surrounding sql-sapphire outbreak number subnets reaction time seconds rule rule rule reaction time sql-sapphire outbreak figure statistics sql-sapphire figure shows exponential increase number scans number sources minutes outbreak epidemics alarms generated hourly axis summaries suffice domino mechanism deal scenarios spontaneous alerts issued triggers domino nodes associate related packets episodes horizontal scan episode sequential scan machines subnet aimed target port vertical scan episode scan multiple ports single survey vulnerabilities coordinated scan episode distributed scan subnet multiple sources episodes port domino nodes maintain average number scans average number attack sources duration trigger spontaneous alert defined episode deviates average number sources number scans times average number sources times average duration times average recognize existence outbreak rule rule rule participants generate spontaneous alert hour repeated previous experiment random iterations iteration picked random class-c subnets data weeks january train system measured episode rates simulated spontaneous alerts cataloged change reaction time add additional subnets rules figure shows adding sufficient nodes previous subsection sophisticated rule generate spontaneous alert simple rule suffice illustrate point reaction time reduced seconds goal domino outbreak containment outbreak recognition insulation maximal number participants authors show worm infection rate susceptibility accurately predicted observing data collected single network spans small fraction entire address space slow scanners blacklist evasion section evaluate ability slow scanners evade blacklists generated infrastructure domino axis nodes periodically exchange blacklist summaries finite list top-n local worst offenders volume activity simplicity assume summaries generated networks order ensure source global blacklist ensure local blacklist summaries optimal strategy omniscient adversary simultaneously scan subnets rate blacklist threshold volume n-th offender scenario time completely scan single subnet essentially time required scan entire address space utility domino scenarios ability prolong scanning process perform worst case analysis logs dshield constructed hourly daily blacklists entire month computed -th percentile values basis blacklist thresholds figure shows blacklist thresholds time scan entire subnet ipv address space blacklist size granularity hourly daily noteworthy characteristics graphs hourly daily blacklists effective desource rank typical volume percentile hourly blacklist daily blacklist typical volume top offenders hourly daily local blacklists blacklist length time scan subnet days hourly blacklist daily blacklist minimal time required days evade top-n blacklist scan subnet figure blacklist evasion terrant evasive scanners evade daily blacklist sources days years year evade hourly blacklist top sources larger values daily blacklists effective hourly blacklists finally staircase behavior hourly blacklist due heavy tailed nature hourly sources sources scans hour corresponds scans flat region daily blacklists corresponds sources horizontally scan entire scans threat vulnerability widely deployed infrastructure domino considered target attacks effective domino resilient variety attacks design robust attempted address vulnerabilities domino attack virtue fact architecture enables heterogeneous client participation infeasible address vulnerabilities address threats domino model considers forms attacks attempted include attacks intent denying service infrastructure attempts infiltrate infrastructure attacks intent reducing domino effectiveness denial service threat attempt effectively remove node dos attack systems domino remedy face standard packet flood attacks set domino nodes effectively removed infrastructure fact non-goal infrastructure protect nodes dos attack distributed coordinated nature infrastructure makes robust removal nodes failures attacks threat compromised domino node begins sending large amounts appears legitimate data attempt mount dos attack axis node remedy axis node apply filters incoming data data node set nodes exceed threshold configuration filters dependent system resources historical variability multiple axis nodes compromised filtering cease effective infiltration threat attempt masquerade axis node remedy discussed section assume axis nodes intermittently forced participate mutual authentication protocol axis nodes axis node fails authentication protocol initiated specific axis node broadcasts message axis nodes domino network informing axis node compromised obfuscation threat compromised node sends data large amounts supposed real attempt obfuscate activity remedies remedies threat nodes attach shadigest block data collision resistant property shawill make hard adversary tamper data axis node remedy stems distributed nature domino results forwarded axis nodes filters applied data fusion process single node ability skew results simply increasing data volume filtering node set axis node applied discretion axis node effect axis level filter obfuscation attacks based volume fusion process designed emphasize coordinated perspective significantly reduces eliminates effectiveness attack threat attempts stealthy coordinated scanning remedy important strength domino enhanced perspective afforded coordination multiple sites enhanced perspective expose stealthy coordinated scans finer granularity detection single site adversary sufficiently slow scanning employs sufficiently nodes coordinated fashion elude detection domino remedy include nodes domino make threshold stealthy coordinated scanning high render alternative infeasible threat attempt avoid active sink nodes remedy basic function active sink nodes track scanning activity unused addresses sense adversaries isolate specific networks addresses networks combined nids live addresses active sinks unused addresses intrusion attempts possibility tracked simple confuse active sink identification employ probabilistic responses responding syn packets block respond number long attackers spoof source addresses active sink nodes monitor significant fraction unused space traffic captured sinks provide valuable insight network intrusions conclusions future work paper describe evaluate domino cooperative intrusion detection system domino designed enable intrusion information sharing globally distributed network consisting trusted axis nodes organized peer-to-peer overlay satellite nodes axis node hierarchically arranged terrestrial nodes deployed leaves infrastructure provide daily intrusion summaries domino design based heterogeneous data collection nids firewalls active sinks architecture enables domino secure scalable fault-tolerant facilitates data sharing evaluation domino based data sources set intrusion logs collected month period networks world wide prototype sink implementation single network monitors addresses evaluation demonstrates utility sharing information multiple nodes cooperative infrastructure informationtheoretic approach show perspective intrusions greatly enhanced cooperation small number nodes sql-worm outbreaks demonstrate false-alarm rates significantly reduced domino reaction time outbreak detection similarly reduced finally provide 
initial evaluation effectiveness active sinks discriminating types attacks based examining payload data results demonstrate active sinks provide important insight regard based analysis conclude domino offers significant opportunity improve intrusion outbreak detection capability internet intend pursue future work number directions plan develop interactive sink-hole responders enhance attack discrimination capability plan deploy operational domino infrastructure enable test develop domino topology creation maintenance protocols expand infrastructure enable case studies future intrusion outbreak activity plan investigate alternative methods information merging sharing goal improving efficiency precision finally plan develop tools automating firewall rule generation acknowledgements authors johannes ullrich providing access dshield logs david plonka great domino active sink running finally anonymous reviewers shepherd angelos keromytis valuable suggestions helped substantially improve content organization paper allen christie fithen mchugh pickel stoner state practice intrusion detection technologies technical report cmu sei-tr- software engineering institute carnegie mellon january anagnostakis greenwald ioannidis keromytis cooperative immunization system untrusting internet icon andersen balakrishnan kaashoek morris resilient overlay networks proceedings sosp lake louise alberta october anderson khattak information retrieval techniques intrusion detection proceedings international workshop recent advances intrusion detection raid september balasubramaniyan garcia-fernandez isacoff spafford zamboni architecture intrusion detection autonomous agents annual computer security applications conference acsac pages december bellovin cheswick network firewalls ieee communications magazine september bestavros byers crovella marginal utility network topology measurements proceedings acm sigcomm internet measurement workshop san francisco november center http cert cert cert incident note in- http cert incident note in- html cuppens managing alerts multi-intrusion detection environment proceedings -th annual computer security applications conference acsac cuppens miege alert correlation cooperative intrusion detection framework proceedings ieee symposium security privacy oakland pages cuppens ortalo lambda language model database detection attacks proceedings recent advances intrusion detection raid pages dacier quantitative evaluation computer security phd thesis institut national polytechnique toulouse december goodman mahler nguyen mathematics data fusion kluwer academic publishers group dordrecht gray entropy information theory springerverlag idg study code red costs top billion http thestandard august idwg intrusion detection message exchange format http ietf html charters idwg charter html ilgun kemmerer porras state transition analysis rule-based intrusion detection approach ieee transactions software engineering march janakiraman waldvogel zhang indra peer-to-peer approach network intrusion detection prevention unpublished manuscript koblitz elliptic curve cryptosystems mathematics computation krugel toth kerer decentralized event correlation intrusion detection proceedings information security cryptology icisc seoul korea pages december lee stolfo mok data mining framework building intrusion detection models ieee symposium security privacy leland taqqu willinger wilson self-similar nature ethernet traffic extended version ieee acm transactions networking pages liston labrea homepage http hackbusters net lunt tamaru gilham jagannathan neumann javitz valdes garvey real-time intrusion detection expert system ides -final technical report technical report computer science laboratory sri international menlo park california february mahajan bellovin floyd ioannidis paxson shenker controlling high bandwidth aggregates network computer communications review july moore paxson savage shannon staniford weaver spread sapphire slammer worm http caida outreach papers sapphire sapphire html moore shannon claffy code red case study spread victims internet worm proceedings acm sigcomm internet measurement workshop november moore shannon voelker savage internet quarantine requirements self-propagating code proceedings ieee infocom april moore voelker savage inferring internet denial service activity proceedings usenix security symposium washington august mukherjee heberlein levitt network intrusion detection ieee network june needham schroeder encryption authentication large networks computers communications acm northcutt network intrusion detection analyst handbook riders paxson bro system detecting network intruders real time proceedings usenix security symposium perrig biba one-time signature broadcast authentication protocol proceedings acm conference computer communications security ccs november provos honeyd virtual honeypot daemon proceedings dfn-cert workshop february rivest shamir adelman method obtaining digital signatures public-key cryptosystems coommunications acm roesch snortlightweight intrusion detection networks proceedings usenix lisa conference november roesch snort network intrusion detection system http snort rohtagi compact fast hybrid signature scheme multicast packet proceedings acm conference computer communications security ccs pages savage wetherall karlin anderson practical network support tracback proceedings acm sigcomm sheyner haines jha lippmann wing automated generation analysis attack graphs proceedings ieee symposium security privacy staniford hoagland mcalerney practical automated detection stealthy portscans proceedings acm ccs ids workshop november staniford paxson weaver internet spare time proceedings usenix security symposium teng chen adaptive real-time anomaly detection inductively generated sequential patterns ieee symposium security privacy pages ullrich dshield http dshield valdes skinner probabilistic alert correlation proceedings recent advances intrusion detection raid pages warrender forrest pearlmutter detecting intrusions system calls alternative data models ieee symposium security privacy pages yegneswaran barford plonka design utility internet sinks network abuse monitoring uwtechnicalreport yegneswaran barford ullrich internet intrusions global characteristics prevalence proceedings acm sigmetrics june zou gao gong towsley monitoring early warning internet worms proceedings acm conference computer communications security ccs october domino messages foster interoperability maximize extensibility domino protocol messages represented xml extend schema proposed idwg intrusion detection working group idmef intrusion detection message exchange format draft schema adds message types provided idmef alerts hearbeats message categories domino alerts alerts spontaneous responses events defined nids firewall custom policies alerts generated small networks satellites propagated axis level depending pervasiveness severity alert clustering suppression challenging problem vital operational success infrastructure idmef draft defines alert classifications tool alert correlation alert overflow alert domino axis nodes exchange alerts significant deviation periodic summaries outbreak alerts blacklist alerts denial-of-service attack alerts dtd alert element alert createtime detecttime analyzertime classification source target additionaldata attlist alert version cdata fixed ident cdata required impact cdata unknown summary messages domino summaries typically exchanged axis peers formats relating type information transmitted summary message types include port summaries source summaries cluster summaries domino defines levels trust low medium high summary messages based source axis satellite choice levels trust arbitrary cues intelligent aggregation dtd summary messages element summary createtime summaryduration ipblocksummary attlist summary version cdata fixed ident cdata required element ipblocksummary minip maxip ipcount trustlevel portsummary sourcesummary clustersummary element portsummary vulnid portnum numuniqsrcip numuniqdestip scancount element sourcesummary vulnid portrange scancount aggregatescancount numuniqtargets element clustersummary srciplist destiplist vulnid portrange scancount heartbeats domino satellite nodes periodically exchange heartbeat messages parent nodes current status higher level nodes vice-versa interval heartbeats left satellites minutes hour element heartbeat createtime analyzertime additionaldata attlist heartbeat ident cdata required topology 
messages types topology messages adopt detour recall divorce satellite node disconnected parent reconnect normal heartbeat exchange protocol fails issues adopt message dap multicast overlay axis nodes axis node forward adopt message applicable children satellite analyzes acknowledgments responds detour message eligible parent axis satellite parent restarts issues recall message children child accept invitation rejoin issuing divorce message foster parent simultaneous detour message original parent element topologymessage createtime type ipblocksummary attlist topologymessage version cdata fixed ident cdata required queries domino query messages exchanged xquery format axis nodes maintain consistent schema inter-axis queries sql chose xquery maximize interoperability satellites provide query create top blacklist port times src distinct document scans xml source scan document scans xml scan source src time scan timestamp port scan port port time time return blacklist source src source num scans sum scan count numscans blacklist sortby sum scan count limit updates domino protocol automatic mechanism updating nids rulesets axis vulnerability database considered means dispensing timely content based filters satellites format messages straightforward element dbupdate createtime vulnerabilityid signature attlist dbupdate version cdata fixed ident cdata required description cdata element signature targetports payload sourceport protocol seqno triggers triggers issued domino axis satellites nodes lower hierarchy trigger components query constraint action define types actions alerts filter rules trigger generation outbreak alert number scans exceeds threshold element trigger createtime query constraint action attlist trigger version cdata fixed ident cdata required description cdata element action alert filter information sharing potential strategies information sharing include local aggregation intrusion information gathered satellite nodes step organize refine data create coherent picture malicious activities satellite nodes send raw alerts axis nodes overwhelmed alerts satellite nodes aggregated communicated axis nodes cuppens describes cooperative intrusion detection module crim means combining alerts idss domino adopts extends design purposes aggregating raw alerts global aggregation straight-forward merge logs multiple sites simple addition average dimension data approach simple means organizing summarizing data risk inaccuracy case port summary logical add number scans number unique destinations simply adding set unique sources axis nodes domino performs simple aggregation port summaries results sources weighted merging potentially important consideration fusing summaries address proximity summaries generated neighboring address blocks germane generated distant network uncommon scans attacks proceed horizontally space weighted merging approach emphasizes proximity domino performs simple weighted merging blacklists sampling sampling standard method reducing scale measurement data goal sampling approach balance quantity data precision measurement case domino challenging intrusions form attacks easy sample stealthy scans rare events hard sample sampling method domino poses ability expose types events investigating feasibility employing sampling technique data sharing related issue important domino aging local data packet data accumulated large sinks order megabytes day summaries meant light weight simply purging data older number days reasonable approach practice care ensure periodic patterns table monthly summary dshield logs month scans dest ips million june million july million monthly rise fall codered worm lost present propose domino maintain summaries granularities weighted averaging merge older summaries timely data intrusion trace data set firewall nids logs portscans collected month period firewall administrators distributed globe basis analysis domino logs provide condensed summary lowest common denominator portscan activity obtained firewall nids platforms platforms supported include blackice defender cisco pix zonealarm linux ipchains portsentry snort approach significantly increases coverage reduces reliance individual nids interpretation events table illustrates format typical log entry date time fields standardized gmt provider hash aggregation destination addresses belong administrative network table high level summary data analysis dataset obtained dshield research effort funded sans institute part internet storm center goals dshield include detection analysis worms vulnerabilities notification isps exploited systems publishing blacklists worst offenders feedback submitters improve firewall rulesets data comprised logs submitted diverse set networks includes class networks class sized networks large number smaller sub-networks networks represented data set widely distributed geographically topologically autonomous system space unique perspective global intrusion activity highlighted dshield contribution detection early analysis codered nimda sql worm outbreaks preliminary results active sink figures show number packets flows inbound outbound dshield data port january sql-sapphire analysis active sink positive flows outbound negative inbound expected number inbound packets higher outbound active sink respond persistent payload packets difference number inbound outbound flows artifact flows accounted minute intervals surprising outbound udp packets number inbound packets typically packets connection attempts active sink running pentium linux problem coping traffic rate per-connection state maintained connection attempts spanned wide variety ports originated hundreds thousands sources typical summary top ports week shown table ms-sql-s mssql-m scans correspond recent sql-sapphire worm sql-snake http probes codered nimda infected hosts microsoft-ds scans port port scans lioten worm scans open proxy servers means obfuscate internet activity figure protocol breakdown active sink packets jan feb figure protocol breakdown active sink flows jan feb important application traffic captured active sink nodes generating signatures malicious payloads signature payload worm nids simple pattern matching identify malicious payloads method lead significant number false positives variations malicious paytable sample log entries portscan logs date time hash scans src src port targt targt port tcp flags provider provider table sample weekly summary top probed services service port protocol flows octets packets ms-sql-s udp microsoft-ds tcp ms-sql-m tcp http tcp netbios-ss tcp analogx proxy server tcp https tcp hyview proxy tcp http-alt tcp win rpc tcp loads detected demonstrate traffic captured active sink nodes create robust signature malicious payload step cluster payloads traffic observed active sink nodes intuitively cluster corresponds malicious payload construct classifier cluster classifiers nids identify malicious payloads performed clustering step future investigate constructing classifiers identifying malicious payloads results clustering encouraging performed clustering data collected jan jan constructed fingerprint payload fingerprint payload distribution bytes bytes snort displaying payloads fingerprint records number bytes range distance payloads kullback-leibler distance fingerprints payloads clustered means algorithm sum squared metric determine optimal number clusters results show distinct clusters table figure cumulative distribution function distance cluster centers clusters perfect clusters distance clusters port port variability port scans cluster codered nimda variants variability clusters attributed reasons attack codered nimda sql-snake series similar packets attempt open shell execute series commands variants worms true port slightly search path default presence exploit experiments demonstrate clusters naturally correspond classes malicious payload classifiers generated 
clusters successful identifying malicious payloads figure variability payload clusters table cluster summary cluster port scans cluster cluster cluster cluster cluster cluster 
modeling tcp latency neal cardwell stefan savage thomas anderson cucardwell savage tomcv washington department computer science engineering washington seattle usa abstract analytic models describe steady-state throughput bulk transfer tcp flows function round trip time packet loss rate models describe flows based assumption long sustain packet losses tcp transfers today internet short losses performance dominated startup effects connection establishment slow start paper extends steadystate model proposed order capture startup effects extended model characterizes expected distribution tcp connection establishment data transfer latency function transfer size round trip time packet loss rate simulations controlled measurements tcp transfers live web measurements show unlike earlier steady-state models tcp performance extended model describes connection establishment data transfer latency range packet loss conditions including loss introduction today popular internet applications including world-wide web e-mail file transfer usenet news remote login tcp transport protocol consequence tcp controls large fraction flows packets bytes travel wide-area internet paths recently researchers proposed number analytic models characterize tcp performance terms round-trip delay packet loss rate achieving understanding sensitivity tcp performance network parameters models helped inform design active queue management schemes tcp-friendly multicast protocols analytic models proposed date split broad classes models steady-state bulk transfer throughput models short flows suffer packet loss majority models fit class focus characterizing bulk transfer throughput models successful predicting steady-state throughput recent studies noted majority tcp flows traveling wide-area internet short sizes median sizes flows short spend entire lifetime tcp slow start mode suffering single loss steady-state models assume flows suffer loss undefined common case class models focuses short flows suffer packet losses models delayed acknowledgments sender receiver buffering limitations alternative initial congestion windows losses connection establishment dramatic performance impact paper proposes model tcp performance integrates results classes models extend steady-state results deriving models aspects dominate tcp latency connection establishment three-way handshake slow start simulation controlled measurements live web traces show slow start model works tcp flows length suffer packet losses model works flows length suffer packet losses combined approach integrates models predicting performance short long flows varying packet loss rate conditions addition suggest technique estimating distribution data transfer latencies rest paper organized section describes model relates models descended section iii compares connection establishment model simulations section compares data transfer model simulations tcp measurements http traces finally section summarizes conclusions model assumptions extended model develop assumptions endpoints network steady state model presented section describes assumptions detail including assumptions stated explicitly details large impact latency short tcp flows presentation model terminology notation assumptions endpoints assume sender congestion control algorithm tcp reno family refer readers details tcp reno-style congestion control describe model terms simpler common tcp reno algorithm apply newer tcp implementations newreno sack fack previous measurements suggest model faithful sophisticated algorithms resilient bursts packet losses focusing tcp performance general client-server performance model sender receiver delays due scheduling buffering limitations assume duration data transfer sender sends full-sized segments packets fast congestion window receiver advertises consistent flow control window similarly account effects nagle algorithm silly window syndrome avoidance minimized prudent engineering practice assume receiver typical delayed acknowledgment implementation sends acknowledgment ack bpbedata segments delayed ack heartbeat timer expires whichever linux adaptive implementation delayed acks short flows technique modeled longer flows effect approach shave round trips assumptions network model tcp behavior terms rounds round starts sender begins transmission window packets ends sender receives acknowledgment packets assume time send packets window smaller duration round duration round independent window size note tcp reno congestion control true flow fully utilizing path bandwidth assume losses round independent losses round losses round correlated sense time packet lost packets round lost assumptions idealizations observations packet loss dynamics paths fifo drop-tail queuing hold links red queuing paths packet loss largely due link errors congestion assume probability packet loss independent window size hold flows fully utilizing link modeling data transfer assume packet loss direction sender receiver assumption acceptable low levels ack loss small effect large windows network paths congested direction data flow direction ack flow packet loss drastic result connection establishment model packet loss directions connection establishment assumptions transfer share assumptions endpoints network relax key assumptions data transfer transfers short suffer packet losses losses dominated connection establishment delay initial slow start phase syn syn ack ack active opener passive opener failures failures connection effectively established fig tcp connection establishment model overview model describes aspects tcp performance derive expressions expected distribution time required connection establishment handshake begins tcp connection derive expression expected latency transfer amount data describe methodology extrapolating distribution transfer latency separating connection establishment latency data transfer latency apply model applications establish single tcp connection independent data transfers connection establishment successful tcp connection begins three-way handshake endpoints exchange initial sequence numbers figure shows initiating host typically client performs active open sending syn segment initial sequence number server performs passive open receives syn segment replies syn segment initial sequence number ack active opener initial sequence number active opener receives syn ack packet connection successfully established confirms sending ack passive opener initial sequence number stage process party receive ack expecting syn timeout initially seconds retransmits syn waits long response model process presence packet loss direction define forward packet loss rate path passive opener active opener forward primary direction data flow reverse packet loss rate cacccc average round trip delay hosts model three-way handshake consists stages active opener transmits syn times unsuccessfully bdb -th syn arrives successfully passive opener passive opener ignore syns active opener repeatedly retransmits syn ack receives response general send syn ack times unsuccessfully finally cyb bdb -th syn ack arrives successfully active opener purposes model connection established point application protocols immediately sending ack ddb active opener sends data segment passive opener redundant ack ddb cxbncyb probability three-way handshake episode consisting failures transmitting syns successful syn failures transmitting syn acks successful syn ack cxbncyb bpd latency cxbncyb process cxbncyb cacccc cxa czbpbc cya czbpbc cacccc bdb bdb cacccc beb probability latency three-way handshake episode seconds cjc cxbncyb akd cxbncyb tcp implementations abort connection establishment attempts failures loss rates low handshakes succeed tcp shown good approximation expected handshake time bxcjc clbpcacccc bda bda bed bda bda bed model assumes tcp implementation 
complies tcp specification model non-compliant implementations current versions linux achieve slightly performance responding retransmitted syn segments retransmitted syn ack segments data transfer defined data transfer begins application places data send buffer ends tcp receives acknowledgment byte buffer assume transfer sending application places data send buffer quickly sending tcp send fast window decompose data transfer latency bxcjcccl forcs data segments aspects initial slow start phase resulting packet loss transfer remaining data added delay delayed acknowledgments begin calculating amount data expect send initial slow start phase encountering packet loss finishing data transfer deduce time spent slow start final congestion window slow start expected cost loss recovery steady-state throughput approximate cost sending remaining data finally add extra cost delayed acks discuss aspects turn initial slow start assume transfer transfer connection transfer connection experienced losses circumstances tcp begins slow start mode quickly increases congestion window crdbd detects packet loss bxcjcc expected latency initial slow start phase depends structure slow start episode important cases case sender crdbd grows continuously detects packet loss case sender crdbd eventually bounded maximum window cpdc imposed sender receiver buffer limitations determine case calculate bxcjcs number data segments expect sender send losing segment deduce bxcjcf window expect tcp achieve end slow start maximum window constraint bxcjcf cpdc window limitation effect bxcjcc simply time sender send bxcjcs exponential growth mode slow start hand bxcjcf bqcf cpdc bxcjcc time sender slow start crdbd cpdc send remaining data segments rate cpdc segments round calculate bxcjcs number data segments expect send initial slow start phase loss occurs including lost segment bethedatasegmentloss rate expect send segments slow start bxcjcs clbpcs hand bqbc andwe assume loss rate independent sender behavior bxcjcs csa czbpbc bda deduce time spent slow start slow start round sender sends data segmentsasitscrdbd receiver sends ack cq-th data segment receives round sender approximately crdbd csbpcq acks sender slow start ack receives increases crdbd segment crdbd denote sender congestion window beginning round denote rate exponential growth crdbd slow start crdbd cxb crdbd crdbd bpcq bdbpcqb crdbd crdbd sender starts initial crdbd segments cscpd amount data end slow start round closely approximated geometric series cscpd cxa solving number slow start rounds transfer cscpd segments data arrive cscpd bdb csb window tcp achieves sending segments unconstrained slow start csb csb bdb csb bdb typical parameters bpbdbmbh equation implies csb put reach congestion window flow send approximately bfdb interestingly implies reach full utilization bandwidth-delay product mbps kbytes tcp flow transfer kbytes quantity larger wide-area tcp flows transfer easy internet flows spend lifetimes slow start observed calculate window size expect end slow start constrained cpdc bxcjcf bxcjcs clb bdb determine expect crdbd constrained cpdc slow start bxcjcf bqcf cpdc slow start proceeds phases crdbd grows cpdc flow send adcf cpdc segments phase cpdc rounds phase flow sends remaining data rate cpdc packets round cpdc rounds combining case bxcjcf cpdc simpler case bxcjcf cpdc time send bxcjcs data segments slow start approximately bxcjcc clbp cacccc cpdc bdb cpdc bxcjcs cla adcf cpdc ada bxcjcf bqcf cpdc cacccc bxcjcs clb ada bdb bxcjcf cpdc loss tcp flows initial slow start phase ends detection packet loss slow start ends packet loss flow loss probability occurrence ways tcp detects losses retransmission timeouts rtos triple duplicate acks derivation probability sender congestion avoidance detect packet loss rto function packet loss rate window size denote probability bndbb bndbb cxd bdbn dba bpb probability sender detect loss triple duplicateacksissimplybda bndbb althoughc bndbb derived assumption sender congestion avoidance mode unbounded amount data send experience shown equally applicable slow start senders limited amount data largely bndbb insensitive rate growth crdbd senders limited amount data high risk rtos small windows practice suspect fast recovery strategy sender greater impact senders sack fack newreno achieve behavior predicted bndbb reno senders difficulty achieving performance encounter multiple losses single round expected cost rto derived bxcjci ccc clbp bzb average duration timeout sequence successive timeouts bzb bzb bpbdb bed bgd bkd bdbid bfbed expected cost fast recovery period depends number packets lost fast recovery strategy sender tcp implementation receiving tcp implementation returning selective acknowledgment sack options case single loss sender sack information fast recovery takes single cacccc worst case newreno require cacccc lost packet experience possibilities occurs important model predictions model sake simplicity assume fast recovery takes single cacccc combining results expected cost rtos fast recovery end initial slow start phase bnbxcjcf clb bxcjci ccc clb bnbxcjcf clb caccccb transferring remainder order approximate time spent sending data remaining slow start loss recovery estimate amount remaining data apply steady-state model amount data left slow start loss recovery approximately bxcjcs crcp clbpcsa bxcjcs approximation actual amount data remaining depend window loss occurs segments lost size congestion window time loss cpdc recovery algorithm model accurate cases simplification sake simplicity equation bxcjcs crcp segments left send approximate time transfer data steady-state throughput model model throughput denote cab bncaccccbncc bncf cpdc function loss rate round trip time cacccc averagerto maximum window constraint cpdc bda cfb bncfb caccccb cfb bdb bncfb bzb bda cfb bocf cpdc bda cpdc bncf cpdc caccccb cpdc bda cpdc beb bncf cpdc bzb bda bndbb bzb cfb expected congestion window time loss events congestion avoidance cfb beb bfcq bkb bfcqd beb bfcq results expected throughput approximate expected time send remaining data bxcjcs crcp bxcjcc crcp clbpbxcjcs crcp clbpcab bncaccccbncc bncf cpdc model steady-state throughput characterize cost transferring remaining data introduces errors sender detects loss initial slow start phase crdbd larger steady-state average crdbd combining analysis sender detect roughly bdbpbfd bfbpb becqd loss indications bring crdbd end slow start bdbpbfd steady state bfbpb becqd loss rates higher sender exits slow start steady-state window error approach small loss rates loss indications megabytes data reach steady state approach overestimate latency transfers source error derives fact model slow start retransmission timeouts rtos loss rates error introduces small loss rates congestion avoidance throughput similar slow start rtos lower loss rates rtos uncommon occur long delays overwhelm details crdbd growth finally rto durations vary widely average rto model duration specific short tcp flow introduce significant error delayed acknowledgments delayed acknowledgments comprise final 
component tcp latency model number circumstances delayed acknowledgments large delays short transfers common delay occurs sender sends initial crdbd mss case receiver waits vain segment finally delayed ack timer fires sends ack bsd-derived implementations delay uniformly distributed windows windows delay distributed uniformly delayed acks lead large delays sender sends small segment nagle algorithm prevents sending segments sender sends segments full-sized receiver implementation waits full-sized segments sending ack simulations measurements senders initial crdbd mss model expected cost delayed ack denote bxcjcc csctd cpcrcz expected delay reception single segment delayed ack segment bsd-derived stacks windows combining results model expected time data transfer sum expected delays components including delayed ack cost bxcjccclbpbxcjcc clb bxcjcc clb bxcjcc crcp clb bxcjcc csctd cpcrcz modeling distributions model prediction latency parameters experienced flow experience set transfers size high bandwidth-delay path important determinants latency number losses average timeout duration cost delayed acks result approximate distribution latency set flows range loss rates delayed ack costs estimate likelihood scenario latency expected scenario section iv-a apply method simulations bernoulli loss model delayed ack costs uniformly distributed bandwidth bytes sec frequency loss indications proposed proposed proposed proposed pftk msmo fig comparing throughput predicted steady state models throughput predicted proposed model varying transfer sizes cbcbbpbdbgbibcbytes cacccc bdbcbc bpbdsegment bpbdbmbh bpbd sec cpdc bpbdbcmbytes comparison earlier models proposed model generalization previous approaches case packet losses reduces model time send segments slow start mode special case corresponds closely simpler models derived case large total time dominated time transfer data loss case behavior corresponds closely underlying throughput model figure explores relationship proposed model models throughput predicted proposed model transfer sizes steady-state throughputs predicted expression bfbpbga cbcbbpb cacccc mentioned earlier expected loss proposed model agrees closely shown work flows suffer losses hand losses proposed model predicts short flows suffer time reach steady-state crdbd long flows crdbd grows steady-state iii verifying connection establishment model figure compares distribution connection establishment times approximate model distribution simulations cacccc bpbjbcms bernoulli packet losses bpbcbmbf bpbcbmbe simulations fulltcp implementation modeled closely bsd tcp implementation model approximation fit results similar scenarios figure summarizes performance full approxcumulative fraction time sec simulated cdf modeled cdf simulated modeled approximate model fig distribution connection establishment times model approximate model simulations bpbcbmbf bpbcbmbe time sec forward loss rate simulated modeled approximate model fig expected connection establishment latency simulations trials loss rate model approximate model imate model comparing trials scenarios bcbmbc bcbmbgbh full model fits simulations approximate model diverges sharply approaches assumption unbounded wait times fails verifying data transfer model simulations flows loss simulated tcp flows suffer packet loss expression describes tcp behavior closely figure shows figure depicts simulated modeled latency tcp transfers simulated simulation fulltcp sender transfers data gbit link fulltcp receiver link buffers provisioned prevent packet loss trials consisted cross-product cubebnbfbnbgcv segments cubdbmbhbnbecv withmodeled transfer time rtt simulated transfer time rtt modeled time simulated time fig simulated latency tcp data transfers experienced packet loss compared modeled latency equivalently bandwidth bytes sec frequency loss indications simulated proposed pftk msmo fig scatter plot simulated performance model predictions overlaid kbyte transfers cbcb bdbgbibc bytes cpdc mbytes bpbdsegment bpbdbmbh cacccc bpbdbcbcms bpbhbdblms bpbcbmbcbh bpbc delayed acks segments cbcb bytes cpdc segments cacccc cubdbibnbibgbnbebhbicvms model agrees closely simulations average error caccccs average relative error outliers caccccs correspond trials window segments throughput hurt delayed ack timer recipient mis-aligned cacccc ack-clocking employed sender flows suffering losses figures illustrate match performance flows suffer moderate-to-high levels loss figure shows scatter plot depicting bandwidth loss rate experienced simulated fulltcp flows model predictions overlaid flow transferred cumulative fraction time sec simulated cdf simulated pftk proposed proposed cdf fig distribution latencies experiment figure bandwidth bytes sec frequency loss indications simulated proposed pftk msmo fig scatter plot simulated performance model predictions overlaid mbyte transfers cbcb bdbgbibc bytes cpdc mbytes bpbdsegment bpbdbmbh cacccc bdbcbc bpbgbhbcms bpbcbmbcbcbd bpbc cumulative fraction time sec simulated cdf simulated pftk proposed proposed cdf fig distribution latencies experiment figure transfer time sec data transferred bytes measured proposed slow start proposed full pftk fig measured modeled latencies transfers washington uc-davis kbytes path synthetically-generated bernoulli losses average loss rate bpbcbmbcbh bpbc proposed model fits trials experience packet loss provide reasonable fit trials experience loss figure shows distribution latencies trials capture average latency modeled distribution derived technique section ii-e reasonable characterization distribution latencies considerable variance latency case flows completing half average time flows taking half long average time experience technique yields good approximation latency distribution packet losses provide good fit average latency figures provide view long transfers mbyte paths low loss rates proposed model captures average latency latency experienced half flows loss predicts performance flows experience single loss flows enter congestion avoidance crdbd larger steady-state preliminary results characterizing dynamics crdbd converges steady-state slow start capture aspects behavior long flows suffer losses approach lines controlled internet measurements order examine proposed model fits tcp behavior internet performed number tcp transfers linux sender washington internet sites figure shows depicts latency transfers varying sizes california davis predictions average packet loss rate trials average loss rate cumulative fraction error rtt proposed model fig error modeleda measuredb bpcacccc proposed model http measurements flows suffered packet losses note cacccc-normalized error model cacccc actual time flows cumulative fraction relative error proposed model pftk msmo fig relative error models http measurements flows suffered triple duplicate acks rtos consequence flows suffered losses fits live http measurements order undestand tcp models describe typical tcp data transfers compared set http traces traces consist client-side packet-level traces tcp flows transporting single http operations made wget web clients well-connected universities washington-seattle california-berkeley duke web servers spread twenty-five servers chosen web popular sites determined analysis web proxy logs remaining servers chosen random yahoo database web sites http operation fetched index html object site average size cumulative fraction relative error proposed model pftk msmo fig relative error models http measurements flows suffered rtos objects kbytes flow extracted total data transfer time defined period starting data segment arrived client ending data segment arrives client minus delay due delayed acks extracted mss initial window size estimated cacccc receiver-oriented techniques estimate number fast retransmit events observing data segments arriving triple-duplicate 
acks estimate number average duration timeouts heuristics including arrival duplicate data segments arrival data segments fill sequence space hole arrival in-order data segments arrive idle period split flows classes based character losses suffered flow examine error measured latency predictions made models actual cbcb cpdc cacccc andcc observed flow figure shows cacccc-normalized error latency predictions modeled measuredb bpcacccc flows suffered packet loss show proposed model models undefined model predictions cacccc actual transfer times turning relative error modeleda measuredb bpmeasured median relative error cases meaning flows suffered loss actual transfer latency figure shows relative error latency predictions flows suffered losses recover losses fast retransmit fast recovery models provide similar predictions similarly figure shows relative error latency predictions flows suffered retransmission timeouts model fits poorly assumes timeouts occur models significant error note presence packet loss provide similar predictions onclusion paper presented models tcp connection establishment tcp slow start models extend steady-state model assumes packet loss characterize latency tcp flows suffer packet losses simulation measurement found connection establishment model promising extended data transfer model characterizes flows varying lengths varying loss conditions technique estimating distribution latencies tcp transfers showed simulations suggesting method approximate wide distribution data transfer latencies range conditions acknowledgments arnold kim suggesting technique derive sally floyd neil spring providing comments earlier drafts paper jitendra padhye providing analysis scripts robert morris providing traces john zahorjan anna karlin providing advice encouragement mark allman vern paxson estimating end-to-end network path properties sigcomm august mark allman vern paxson stevens tcp congestion control rfc april hari balakrishnan venkata padmanabhan srinivasan seshan randy katz mark stemm tcp behavior busy internet server analysis improvements infocom april hari balakrishnan mark stemm srinivasan seshan randy katz analyzing stability wide-area network performance sigmetrics june juerg bolliger thomas gross urs hengartner bandwidth modelling network-aware applications infocom march bolot turletti experience rate control mechanisms packet video internet computer communications review january bolot vega-garcia control mechanisms packet audio internet infocom march braden requirements internet hosts communication layers rfc october claudio casetti michela meo approach model stationary behavior tcp connections infocom march claffy greg miller kevin thompson nature beast recent traffic measurements internet backbone proceedings inet july carlos cunha azer bestavros mark crovella characteristics client-based traces technical report bu-cs- boston july sally floyd connections multiple congested gateways packetswitched networks part one-way traffic computer communications review october sally floyd kevin fall promoting end-to-end congestion control internet ieee acm transactions networking august sally floyd tom henderson newreno modification tcp fast recovery algorithm rfc april sally floyd van jacobson random early detection gateways congestion avoidance ieee acm transactions networking august steven gribble eric brewer system design issues internet middleware services deductions large client trace usits december john heidemann performance interactions p-http tcp implementations computer communications review april john heidemann katia obraczka joe touch modeling performance http transport protocols ieee acm transactions networking october http hot van jacobson congestion avoidance control sigcomm august anurag kumar comparative performance analysis versions tcp local network lossy link ieee acm transactions networking august lakshman upamanyu madhow performance tcp networks high bandwidth-delay products random loss ieee acm transactions networking june bruce mah empirical model http network traffic infocom april jamshid mahdavi tcp performance tuning http psc networking tcptune slides april sam manthorpe implications transport layer network dimensioning phd thesis ecole polytechnique federale lausanne mathis mahdavi forward acknowledgement refining tcp congestion control sigcomm august mathis semke mahdavi ott macroscopic behavior tcp congestion avoidance algorithm computer communications review july matt mathis jamshid mahdavi sally floyd allyn romanow tcp selective acknowledgement options rfc april greg minshall yasushi saito jeffrey mogul ben verghese application performance pitfalls tcp nagle algorithm workshop internet server performance archan misra teunis ott window distribution idealized tcp congestion avoidance variable packet loss infocom march ucb lbnl vint network simulator version teunis ott lakshman larry wong sred stabilized red infocom march jitendra padhye victor firoiu don towsley stochastic model tcp reno congestion avoidance control technical report massachusetts jitendra padhye victor firoiu don towsley jim kurose modeling tcp throughput simple model empirical validation sigcomm september craig partridge timothy shepard tcp performance satellite links ieee network pages september october vern paxson end-to-end internet packet dynamics sigcomm september jon postel editor transmission control protocol darpa internet program protocol specification rfc september lili qiu yin zhang keshav individual aggregate tcp performance technical report cornell stefan savage sting tcp-based network measurement tool usits october http ens mistral tcpworkshop html december kevin thompson gregory miller rick wilder wide-area internet traffic patterns characteristics ieee network november vivisano rizzo crowcroft tcp-like congestion control layered multicast data transfer infocom april yahoo random yahoo link http random yahoo bin ryl maya yajnik sue moon jim kurose don towsley measurement modelling temporal dependence packet loss infocom march 
internet-wide measurement infrastructures paul barford computer science department wisconsin madison spring wisc motivation plenty internet huge network networks scientists love study model systems emergent characteristics wide area network behavior unpredictable networks effort constant change normal applications minimum performance requirements reliability predictability network managers adjust systems conditions wisc tutorial goals present overview internet-wide measurement monitoring focus tools infrastructure present overview internet measurement data analysis directions headed provide citations pointers internet measurement resources stimulate discussion wisc tutorial outline network measurement overview challenges tools techniques important internet measurement infrastructures today future overview methods internet data analysis problems network measurement work today grim wisc tutorial themes measurement basis important results measurement measurement capability internet limited systems designed support measurement measurement infrastructures limited size diversity complexity change measurement data presents challenges networking researchers connections experts domains part network measurement challenges successes tools methods wisc difficulties measuring internet size internet hosts routers networks complexity internet components protocols applications users constant change norm web e-commerce peer-to-peer internet developed measurement fundamental feature network operator data network private floyd paxson difficulties simulating internet ieee acm transactions networking wisc small selection past successes leland self-similar nature ethernet traffic ieee acm transactions networking analysis bellcore lan traces established selfsimilar properties packet arrival process cunha characteristics client-based traces bu-tr modeled variety client characteristics paxson measurement analysis end-to-end internet dynamics phd thesis characterized routing packet behavior wide area wisc past successes contd govindan reddy analysis inter-domain topology route stability infocom establishes basic properties inter-domain connectivity moore inferring internet denial service activity usenix security symposium analysis extent denial service activity zhang constancy internet path properties internet measurement workshop investigates aspects path stationarity wisc measure internet reasons presented operation research improve internet don understand structure behavior understand don measure build effective models simulators don measure long term objective day life internet nrc report fence networks neighbors view networking research wisc measure internet structure topology routing cdn wireless traffic transport end-to-end performance users applications peer-to-peer streaming security failures areas nefarious behavior pattern attacks port scans wisc measure internet measurements obvious studying web servers web logs good starting point goal measurements representative internet weather reports placement measurement nodes understood problem measure commercial networks wisc measure internet active methods probes application simulation passive methods application monitors logs packet monitors surveys significant infrastructure required methods present difficulties resources slac slac stanford xorg nmtf nmtf-tools html caida caida tools taxonomy wisc measure internet diurnal traffic cycle time scales depend passive measurements typically continuous generate huge data sets people access logs active measurements typically discrete important characteristics missed probes filtered detected wisc measuring internet businesses great deal measurement measurements taking data instrumentation measurement-based research developments past years slow current studies slac slac stanford comp net wan-mon netmon html caida caida analysis performance measinfra studies coordinated narrowly focused wisc active probes study path properties active probe tools send stimulus packets network measure response network transport udp tcp application layer probes active probes measure things delay loss topology routing behavior bandwidth throughput oldest examples probe tools internet control message protocol icmp network layer probe wisc simple delay loss probing ping simplest request response probe tool icmp echo capability windows desktop ping soi wide pinging asari soi wide bytes data reply bytes time ttl reply bytes time ttl reply bytes time ttl reply bytes time ttl ping statistics packets received lost loss approximate round trip times milli-seconds minimum maximum average wisc routing behavior traceroute standard utility assessing route hosts traceroute sends series probes nodes route intended destination records source address message returned operation routers decrement time live ttl field pkts router sends icmp time exceeded message back source ttl field decremented ttl starts source host receive time exceeded message router hopes traceroute typically sends probes hop reports source address information rtt probe wisc traceroute wisc probing link characteristics packet dispersion techniques jacobson infer characteristics link internet path latency bandwidth queue delays cross traffic problems tools bprobe clink nettimer pathchar pchar pathrate drm downey pathchar estimate internet link characteristics sigcomm size max wisc clink output probe link bandwidths boston univ univ wisconsin clink pluto wisc number probes lat latency low high bandwidth probes sizes localhost lat net-gw lat crc-ext-gw lat atm -oc -gigapopne nox lat abilene-gigapopne nox lat clev-nycm abilene ucaid lat ipls-clev abilene ucaid lat r-peer-at- net wisc lat lat foundry wisc lat pluto wisc wisc passive packet measurement capture packet data passes packet capture applications tcpdump jlm hosts packet capture filter bpf libpcap mlj requires access wire promiscuous mode network ports traffic hardware-bases solutions univ waikato mbps problems adds deletes reordering timestamping gbps ethernet today gbps lots data privacy issues wisc tcpdump output sunlight newbury http win ttl sunlight newbury http win ttl newbury http sunlight ack win ttl sunlight newbury http ack win ttl sunlight newbury http ack win ttl newbury http sunlight ack win ttl newbury http sunlight ack win ttl newbury http sunlight ack win ttl sunlight newbury http ack win ttl newbury http sunlight ack win ttl newbury http sunlight ack win ttl wisc passive flow measurement flow defined unidirectional series packets source dest port pair period time exported lightweight flow accounting protocol lfap enabled routers cisco netflow flowscan plonka collect process netflow data combines flow collection engine database visulaization tool real-time visualization network traffic breaks traffic service application src port dst port pkts bytes start end time tcp flags prot wisc wisc passive monitoring intrusions plenty bad guys cracking tools readily detecting attacks nefarious behavior port scans critical protecting networks passive measurements packet traffic reconstruct higher level behavior traffic unencrypted network intrusion detection systems nids packet filters observe network traffic paxson bro system detecting network intruders realtime computer networks roesch snort lightweight intrusion detection networks lisa wisc nids signature-based nids generates alerts based observations attacks anomaly-based nids generates alerts based observed deviations established profile normal behavior activity-based nids generates alerts based observed deviations site security policy commercial systems systems suffer false positives negatives wisc snort output snort portscan log mar syn mar syn mar syn mar syn mar udp mar udp mar udp mar udp snort alert log 
spp portscan portscan detected threshold connections exceeded seconds web-iis isapi ida attempt classification web application attack priority tcp ttl tos iplen dgmlen seq ack xbfdf win bfc tcplen xref http whitehats info ids xref http cve mitre cgi-bin cvename cgi can- part measurement infrastructures today future wisc architecture measurement infrastructures architecture consists physical systems management operation environment physical systems measurement method inform system selection extra hardware gps deployment typically based deploying small number systems difficult maintaining systems underestimated wisc operation management systems security critical strong authentication important encryption assume bad guys break design system quick reinstall measurement scheduling system method automated environment scheduling synchronizing measurements methods things synchronization traffic poisson probing methods data collection archival system automated environment collecting storing results careful work area pays end wisc operation management systems contd analysis visualization systems standard scripts evaluating data visualization time series data critical web front end software deployment maintenance standard distributions management methods documentation archives configurations large systems pull environment works push wisc rapid prototype visualization yao devise javascreen visualization web spie wisc skitter infrastructure caida internet routing topology measurement infrastructure traceroute study focused router link discovery raw data request trace packet delay loss infrastructure sources destinations world wide deployment destinations reached sources methodology sources traceroute destinations visualization component project caida wisc skitter daily summary wisc skitter daily summary contd wisc skitter visualization paths wisc skitter visualization bgp paths wisc route views infrastructure oregon inter-domain routing measurement infrastructure passive collection system boarder gateway protocol bgp routing updates data understand size routing tables infrastructure glass router receives bgp peering feeds networks world wide methodology database routing table snapshots updates made pseudo real-time antc uoregon route-views ripe net ripencc pub-services ris-index html wisc route views wisc surveyor infrastructure advanced network systems infrastructure measuring internet performance reliability data routing latency loss infrastructure measurement systems deployed world wide gps enabled centralized database analysis visualization tools methodology one-way active probe measurement poisson intervals avg full mesh traceroutes min advanced wisc surveyor node deployment courtesy matt zekauskas advanced systems wisc surveyor node deployment courtesy matt zekauskas advanced systems wisc surveyor daily analysis courtesy matt zekauskas advanced systems wisc surveyor delay midnight est courtesy matt zekauskas advanced systems wisc surveyor loss midnight est courtesy matt zekauskas advanced systems wisc network analysis infrastructure national laboratory applied network research nlanr infrastructure active amp measurements confederation universities approx rtt loss topology measurements infrastructure passive pma measurements high speed packet monitors approx throughput packet flow analysis squid cache hierarchy publicly cache logs nlanr caches tons data sites amp net pma nlanr net ircache nlanr net wisc amp summary data wisc squid cache log wisc internet weather traffic reports andover news mids infrastructures meant provide high level global internet traffic statistics periodic pings routers dns servers servers world break provider geographically commercial focus internettrafficreport mids wisc internet traffic report wisc global internet traffic summary ping response time chunk data response time response pings wisc national internet measurement infrastructure nimi paxson icir adams mathis psc secure management platform wide area measurements designed general probe installation distributed client infrastructure principally academic sites world wide paxson architecture large scale measurement ieee communications ncne nlanr net wisc future global internet measurement infrastructure gimi ubiquitous measurement capability embedded design internet emphasis extensible api measurement analysis capability built measurement quality soundness data formats enable aggregation reflects higher level behaviors difficulties management security privacy heterogeneity deployment wisc html white paper gimi wisc approach wisconsin advanced internet lab internal lab enables instrumentation measurement entire end-to-end system enables systems protocols implemented places access wide area complement external facilities hands-on test bed creates paths identical internet end-to-end-through-core variety highly configurable equipment vision internal lab means network research status significant commitment industry partners rev wisc wail conceptual design distribution distribution accessaccess core part measurement data analysis wisc standard approaches data analysis summary statistics meaningful size complexity histograms curve fitting danger spending time assessment upper tails properties exhibit heavy tails assessment scaling properties self-similarity true success stories wisc modeling simulation variety models internet traffic proposed willinger self-similarity high-variability statistical analysis ethernet lan traffic source level ieee acm transactions networking proposed model network traffic rely mathematical construction generate data shown approximate internet traffic behavior provide insight internet mechanisms simulations successful highly simplified isi nsnam ssfnet wisc analysis methods innovative methods extracting information existing data critical path analysis mechanistic models explain behavior internet variety levels focus multiresolution analysis mra application mathematical statistical methods fractals wavelets non-linear dynamics innovative visualization techniques dimensionality magnitude addressed wisc extracting information tcp packet traces barford crovella critical path analysis tcp transactions ieee acm transactions networking cpa identifies precise set events determine execution time distributed application applying cpa tcp transactions enables accurate assignment delays server delay client delay network delay propagation network variation drops wisc cpa file transfer delay file denver boston wisc applying wavelets detect network traffic anomalies motivation anomaly detection identification important task network operators operators typically monitor eye snmp flows simple thresholding ineffective anomalies obvious focus characterize develop distributed means detecting classes anomalies network outages flash crowds attacks measurement failures approach wavelet techniques analyze anomalies flow snmp data sites implications tools infrastructure quickly accurately identify adapt traffic anomalies wisc characteristics normal traffic wisc approach analysis barford plonka characteristics network traffic flow anomalies sigcomm imw wavelets provide means describing time series data considers frequency time characterizing data sharp spikes discontinuities tricky determine wavelets provide resolution signals data tools developed wavelet idr center step identify filters isolate anomalies wisc analysis normal traffic wavelets easily localize familiar daily weekly signals wisc anomaly attacks dos sharp increase flows packets direction linear splines good filter distinguish dos attacks wisc characteristics flash crowds sharp increase packets bytes flows slow return normal behavior linux releases leading edge significantly dos signal step spikes wisc characteristics network anomalies typically steep drop packets bytes flows short time restoration part difficulties network measurement wisc poor data consistency data collected characteristic methods agree packet delays tcp versus probes logs sources information perspective matters recent work bgp chang umich clock synchronization difficult wisc inaccurate tools active measurement tools blocked passive measurement tools 
behave sorts ways systems operating lower levels network visible privacy issues limit ability validate calibration difficult wisc representativeness size heterogeneity constant radical change representative thing invariant properties self-similarity heavy-tails infrastructures community important wisc reproducing results networking community culture reproducing results instances public repositories data research nrg dbase nrgsearch html ita lbl infrastructures mentioned talk sharing analysis tools wisc explosion data current state art gbps popular web sites hits day understanding aspects internet require measurements layers standard databases internet measurement data datasets today overwhelm statistical methods statistical tools wisc conclusions measurements understanding improving internet structure behavior tools methods taking internet measurements give horizontal view internet behavior current measurement infrastructures provide great deal data fall short gimi goal significant expand analysis methods employed evaluate internet data internet measurements easy poorly difficult wisc acknowledgements people support mark crovella jeff kline larry landweber vern paxson david plonka amos ron walter willinger vinod yegneswaran matt zekauskas 
analysis memory architecture fast packet buffers sundar iyer ramana rao kompella nick mckeown computer systems laboratory stanford stanford sundaes ramana nickm stanford abstract packet switches packet buffers hold packets times congestion capacity high performance router dictated speed packet buffers true shared memory switch memory operate times line rate number ports system input queued switches buffer packets rate arrive link rates increase memory bandwidth requirements grow today dram technology link barely write packets read packets memory rate arrive depart link rates increase problem harder techniques building faster packet buffers based ideas computer architecture memory interleaving banking directly applicable packet switches form basis techniques today paper packet buffer architecture consisting large slow low cost drams coupled small fast sram buffer describe analyze memory management algorithm ecqf-mma replenishing cache find bound size sram keywords--memory buffers packet buffers memory banks striping cell interleaving introduction fundamental requirement packet switch internet router atm switch buffer packets performance packet switch limited speed buffer packets paper practical method overcome limitation fact approaches problem due proprietary nature commercial solutions aware quantitative analysis comparison techniques paper describes analyzes packet buffer architecture longer term goal work quantitatively compare variety techniques characteristics common packet buffers types packet switch line rate increases memory bandwidth packet buffers increase packet switch ports buffers packets single shared memory requires memory bandwidth hand packet switch maintains separate packet buffer input requires memory bandwidth cases memory bandwidth scales linearly line rate memory bandwidth defined reciprocal time write data read data random location memory -bit wide memory random access time memory bandwidth interfaces faster line rates require larger buffers rule-of-thumb packet switches employ buffers size approximately round trip time flows passing packet switch occasions packet switch bottleneck tcp flows passing internet approximately seconds today interface requires gbits memory today bigger priced sram buffer successive generation interface requires memory packet buffers made costeffective lower power slower dram packet buffers arranged first-in firstout fifo queues shared memory switch maintains fifo output line input-buffered packet switch maintains virtual output queues packet switch performs per-flow per-class queueing number fifo queues large fourth sequence packets read buffer determined scheduling algorithm shared memory switch time packet read memory determined output-link scheduler wfq scheduler similarly packet switch input buffers time packet read memory determined arbiter determines configuration switch fabric types switch arbiter requests packet retrieved memory delivered fixed time deterministic sequence requests buffer manager time packets written memory buffer manager concerned sequence requests unpredictable required retrieve packet fixed time behavior data read main memory computer computer considered acceptable time retrieve data variable common packets segmented fixed size units prior storage reasons memin packet switches maintain per-flow fifos number queues grows faster line carry larger number multiplexed flows line interfaces atm commonly maintain queues factors lead variations retrieval time data cached cached primary secondary cache cached data retrieved page previous data faster memory access alternatively data held memory refreshed rtt rtt rtt ory utilized efficiently buffers size switch fabrics generally operate fixed size data units arriving packets fact -byte atm cells paper refer fixed size segments cells size equal size atm cell summary packet buffers consist multiple fifo queues stored dram fixed sized cells unpredictable sequence requests arbiter packet buffer retrieve cells fixed time period memory bandwidth size packet buffer increase linearly worth fast packet buffer operate line rates packet buffer single interface sonet ethernet requires memory bandwidth cells bytes long written read memory transaction memory cell wide memory operation required faster random access time drams today line rate sonet memory operation required faster commercial dram today expected future paper describe analyze mechanism memory bandwidth increased reading writing multiple cells memory parallel single address bus controls memory devices parallel words unpredictable arbiter requests cell multiple cells read dram time additional cells stored temporarily sram required memory hierarchy large dram set fifos head tail fifo cached possibly on-chip sram shown figure sram sized arbiter requests cell delivered bounded delay sequence requests paper describe algorithm minimizes sram size guaranteeing bounded latency size sram dictated memory management algorithm mma determines order cells read dram noted general packet buffer architecture proprietary undocumented packet switches previous work related problem goal systematically study analyze memory architecture benefit designers designs determine large sram propose algorithms deciding common practice cells bytes long power sizes atm cells minimum length tcp segments bytes special case latency replenish sram cache minimize size minimize latency face scheme similar traditional data striping banking interleaving pre-fetching computer systems approaches rambus dram controllers techniques hide latency unlike computer systems packet switches tolerate bank conflicts occasionally data delivered unpredictable time simply striping cell multiple memory banks cell size small approach statistical memory banking pseudo-random functions hash functions probability worst case request patterns low work time support worst case patterns guarantee bound access time cell main result paper dram fifo queues exists mma sram size cells ingress egress sram caches sufficient bound time arbiter requests cell cell retrieved number cells written read memory operation shown figure result holds arbiter packet arrival departure process maximum time request received cell retrieved dram time slots time slot time cell arrive results arriving packets departing packets large dram memory access time ingress sram egress sram cache fifo heads figure memory hierarchy packet buffer showing large dram memory heads tails fifo maintained smaller sram cache cells arbiter cells cells write access read access time time memory management algorithm cache fifo tails requests fifo tailsfifo heads fifo centers grants aqb input-queued router ports operating input maintains virtual output queues dram random access time requiring segments packet byte cells results packet buffer built kbits sram ingress egress sram caches latency bound cell memory management algorithm introduction alternative algorithms deciding write data read data dram buffer algorithm determine amount sram needed describe memory hierarchy detail describe ecqf-mma earliest critical queue memory management algorithm show minimizes size sram buffer memory hierarchy referring figure cells size arrive rate buffered ingress sram buffer wait mma write large fifo dram cells written time written tail dram fifo similarly mma reads cells dram needed places fifo egress sram buffer cells read time fifo dram time arbiter requests 
cell delivered sram buffer rate head tail fifo resides sram middle portion fifo resides dram fifo cells reside sram assume dram read write operation takes seconds random access time dram maximum time access location memory array cell written dram read dram number write read operations equal contrasted cpu data commonly written read times memory operating cycles length cycle consists write read obvious requirement packet buffer sustain line rate paper requirement minimize memory width assume clarification request arrives cell ingress sram buffer cell fifo fewer cells cell read directly ingress sram buffer affects size sram buffer packet buffer maintained fifo queue operation simple time cells arrived ingress sram written dram require cells storage ingress buffer store cells arrived cell similarly egress buffers require cells storage egress sram buffer receives request arbiter mma reads cells dram grants cell arbiter stores remaining cells sram time requests arrive arbiter cells read dram fifos system complicated fifos cells depart egress sram buffer cell departs trigger replenish fifo prevent under-run fifo future request arrives find cell dram consecutively departing cells fifos replenishment queue read requests form waiting cells retrieved dram read request queued long fifo egress sram buffer replenished under-runs put egress sram buffer large number cells fifo hold sufficient reserves cover worst case sequence departures fortunately mma issue read requests dram order fifos depleted mma knowledge quickly fifo replenished give priority fifos urgent replenishment mma urgently fifo replenished scheme considered mma lookahead buffer requests arbiter mma lookahead buffer peek fifos receiving requests lookahead buffer increases latency request issued cell delivered latency small bounded acceptable applications define lookahead buffer latency context definition lookahead lookahead defined number time slots future arbiter request pattern definition latency latency request time elapsed arbiter issues request cell granted arbiter sram assume time read cells sram buffer negligible discussion focussed egress sram buffer interesting note ingress egress sram buffers symmetrical sense ingress egress buffer unpredictable arrival departure process predictable departure arrival process turns mma ingress egress buffers size brevity analyze egress buffer results extend simply ingress buffer definitions definitions definition occupancy counter queue occupancy counter time reflects number cells present egress sram fifo queue request arrives cell delivered decremented cells read dram sram incremented definition critical queue queue critical time queue requests lookahead buffer cells sram definition earliest critical queue earliest critical queue queue critical turns critical earliest definition dynamic shared sram buffer paper assume sram consists buffer space shared cells queues necessity bound size egress sram buffer theorem necessity egress sram buffer size cells mma service sequence requests bounded latency proof case fifos dram non-empty arbiter request cell queue turn make requests assume request leads retrieval cells dram egress buffer sends cell arbiter store remaining cells queue egress buffer size cells iii mma minimizes size sram buffer describe mma minimizes size sram buffer bounding latency call earliest critical queue mma ecqf-mma ecqf-mma ecqf-mma lookahead buffer hold unpredictable stream requests arbiter algorithm description cell time ecqf-mma opportunity read dram decide fifo queue egress sram buffer replenish algoqit qit qit rithms simply reads cells earliest critical queue places sram ecqf-mma figure shows ecqf-mma figure shows mma time computes queues critical time earliest critical queue chosen service dram cells queues leave egress sram times figure ecqf-mma determines earliest critical queue chosen service dram cells queues leave egress sram times occupancy egress sram time shown figure queue earliest critical queue chosen service dram derive size egress sram required ecqf-mma section make simplifying assumptions assumptions relaxed assumption queues initially full time egress sram full cells queue occupancy counter queue total occupancy sram assumption queues empty mma decides refresh queue cells present dram queue assumption request time slot arbiter issues request time slot figure ecqf-mma algorithm size egress sram cells lookahead cells critical critical critical critical critical critical egress sram egress sram egress sram lookahead lookahead lookahead acb dab earliest critical queue read ecqf-mma requires earliest critical queue read lemma lookahead time slots sufficient guarantee critical queue proof proof pigeon-hole principle start egress sram size implies sum occupancy counters queues sum occupancy counters queues remains set cells arrive time slots cells depart system period time slots lookahead buffer deducting number arbiter requests lookahead buffer queue leave queue cells arbiter request unsatisfied making critical critical queue implies earliest critical queue ready state main theorem theorem egress sram buffer size lookahead size sufficient ecqf-mma service sequence arbiter requests latency time slots proof proof parts show egress sram buffer overflow show cell delivered bounded latency time slots request issued prove part assumptions made section iiia lemma ecqfmma reads cells earliest critical queue time slots total occupancy egress sram buffer change true time slots size egress sram buffer grow larger prove part arbiter request lookahead buffer cell present present sram latency encountered cell present sram cell present sram occupancy counter smaller number requests lookahead buffer queue critical suppose total number queues critical queue cell arrived earlier time slots start dram time slots service earlier critical queues time slots arbiter request arrives ecqf-mma identified earliest critical queue serviced ensuring cell present egress sram time request reaches head lookahead buffer cell present sram latency bounded depth lookahead buffer time slots relaxing assumptions show theorem holds assumptions relaxed order cells previous section virtual cells defined definition cell placeholder space occupied cell ingress sram arrive system egress sram consists cell placeholders time definition virtual cells sum real cells present dram egress sram cell placeholders generalized scenario assumption queues initially full queue virtual cells assumption holds virtual cells assumption queues empty real cells dram assume cell placeholders read dram introduce slight modification memory architecture assume ingress sram fills cell placeholders egress sram cells writing dram assumption true virtual cells assumption request time slot additional ghost queue arbiter request request ghost queue lookahead buffer requests size egress sram buffer bounded cells cells analysis derive tighter bound size egress sram complex brevity include conclusions packet switches architecture require packet buffers general architecture presented build high bandwidth packet buffers traffic arrival pattern packet scheduling algorithm scheme number drams parallel controlled single address bus costs technique on-chip sram cache grows 
size linearly line rate number queues non-zero bounded latency requests made packets lookahead buffer hold requests memory management algorithm implemented hardware systems technique inapplicaqb ble systems number queues large line-rate requires large sram chip technique build packet buffers faster commercially today shared memory router maintains queues dram operating mbytes sram input queued router linecard maintains virtual output queues mbytes sram tamir symmetric crossbar arbiters vlsi communication switches ieee transactions parallel distributed systems vol jan demers keshav shenker analysis simulation fair queuing algorithm acm computer communication review sigcomm parekh gallager generalized processor sharing approach flow control integrated services networks single node case ieee acm transaction networking vol june birman gail hantler rosberg optimal service policy buffer systems journal association computing machinery vol gail grover guerin hantler rosberg sidi buffer size requirements longest queue proceedings ifip vol sasaki input buffer requirements round robin polling systems proceedings annual conference communication control computing iyer kompella mckeown techniques fast packet buffers proceedings gbn anchorage apr chen david patterson maximizing performance striped disk array isca joo mckeown doubling memory bandwidth network buffers proc ieee infocom vol san francisco patterson hennessy computer architecture quantitative approach san francisco morgan kaufmann publishers alexander kedem distributed prefetch-buffer cache design high performance memory systems proceedings international symposium high-performance computer architecture feb lin reinhardt burger reducing dram latencies integrated memory hierarchy design proc int symposium high-performance computer architecture january hong mckee salinas klenke aylor wulf access order effective bandwidth streams direct rambus memory proceedings international symposium high performance computer architecture january corbal espasa valero command vector memory systems high performance low cost proceedings international conference parallel architectures compilation techniques october mathew mckee carter davis design parallel vector access unit sdram memory systems proceedings sixth international symposium high performance computer architecture january mckee wulf access ordering memory conscious cache utilization proceedings international symposium high performance computer architecture january rixner dally kapasi mattson owens memory access scheduling proceedings annual international symposium computer architecture june carter wegman universal hash functions jour computer system sciences impagliazzo zuckerman recycle random bits proc thirtieth annual symposium foundations computer science research triangle park oct rau schlansker yen cydra stride-insensitive memory system proc int conf parallel processing 
proceedings acm sigcomm internet measurement workshop signal analysis network traffic anomalies paul barford jeffery kline david plonka amos ron abstract identifying anomalies rapidly accurately critical efficient operation large computer networks accurately characterizing important classes anomalies greatly facilitates identification subtleties complexities anomalous traffic easily confound process paper report results signal analysis classes network traffic anomalies outages flash crowds attacks measurement failures data study consists flow snmp measurements collected month period border router large results show wavelet filters effective exposing details ambient anomalous traffic specifically show pseudo-spline filter tuned specific aggregation levels expose distinct characteristics class anomaly show effective exposing anomalies detection sharp increase local variance filtered data evaluate traffic anomaly signals points network based topological distance anomaly source destination show anomalies exposed effectively aggregated large amount additional traffic compare difference traffic anomaly signals snmp flow data show coarse-grained snmp data expose anomalies effectively introduction traffic anomalies failures attacks commonplace today computer networks identifying diagnosing treating anomalies timely fashion fundamental part day day network operations kind capability networks operate efficiently reliably accurate identification diagnosis anomalies depends robust timely data established methods isolating anomalous signals data network operators principally data sources isolate identify traffic anomalies data simple network management protocol snmp queries network nodes management information base mib data broad consists counts activity number packets transmitted node type data flow monitors data includes protocol level information specific end-to-end packet flows make specific snmp data combination types data solid measurement foundation anomaly identification current practices identifying diagnosing traffic anomalies hoc consist visualizing traffic perspectives barford ron members computer sciences department wisconsin madison e-mail amos wisc kline member mathematics department wisconsin madison e-mail kline math wisc plonka member division information technology wisconsin madison e-mail plonka doit wisc identifying anomalies prior experience variety tools developed automatically generate alerts failures generally difficult automate anomaly identification process important step improving capability identifying anomalies isolate characterize important features road map characterizing broad aspects network traffic outlined paper restrict focus aspect work report results detailed signal analysis network traffic anomalies analysis considers timefrequency characteristics flow snmp data collected border router wisconsin-madison month period included data catalog distinct traffic anomalies identified campus network engineering group data collection period combination data enabled focus efforts employ filtering techniques effectively expose local frequency details anomalies facilitate work developed integrated measurement analysis platform internet traffic imapit imapit data management system supports integrates flow snmp anomaly identification data imapit includes robust signal analysis utility enables network traffic data decomposed frequency components number wavelet framelet systems details imapit sections initially analyzed variety traffic signals applying general wavelet filters data wavelets provide powerful means isolating characteristics signals combined time-frequency representation tested wavelet analysis applying wavelet systems traffic signals determine expose characteristics anomalies recorded accepted constraint flow snmp data collected minute intervals precluding analysis finer timescales select wavelet system develop algorithms effectively expose underlying features ambient anomalous traffic surprisingly analysis shows clear daily weekly traffic cycles important expose components anomalous traffic effectively isolated analysis focused anomalies separating groups based observed duration group consisted flash crowd events long-lived events data set typically span week flash crowd anomalies effectively exposed low frequency representation system group anomalies short-lived consisted network failures attacks events short-lived standard fourier analysis enables localization frequency proceedings acm sigcomm internet measurement workshop anomalies difficult expose data due similarity normal bursty network behavior found signals effectively exposed combining data mid high frequency levels investigation combinations data expose anomalies included comparing snmp flow data breaking flow data packet byte flow metrics measuring variations packets average size important test developed exposing short-lived events based computing normalized local variance mid high frequency components signal intuition approach local deviation high frequency representation exposes beginning end short-lived events local variability mid frequency filters expose duration large values local variances sharp unpredictable change volume measured quantity deviation scoring method section step attempting automate anomaly detection typically visual inspection time-series network traffic plots multi-resolution techniques employing method data number weeks exposed number true anomalies verified post-mortem network engineers cataloged previously majority work focused identifying anomalies aggregate traffic campus border router source destination address flow data isolate anomalies points network pruning traffic subnets move closer source anomaly event typically pronounced data easier expose event takes place point network lower aggregation traffic typically variability ambient traffic result task isolating anomaly signal difficult show methods work measurement point close distant point anomaly paper organized section iii describe data sets work describe current practices employed network operators general anomaly detection section describe signal analysis methods imapit framework section present results analysis discuss implications evaluate performance anomaly detection method section summarize conclude discuss future work section vii related work general properties network packet traffic studies intensely years standard include analysis techniques employed studies including wavelets majority traffic analysis studies focused typical packet level end-to-end behavior notable exception focus flow level identifying frequency characteristics anomalous network traffic prior studies network fault detection methods include feather statistical deviations normal traffic behavior identify faults method identifying faults applying thresholds time series models network traffic developed studies focus accurate detection deviations normal behavior work focused identifying anomalies removing signal predictable ambient part employing statistical methods wavelet task detection black-hat activity including denial-of-service dos attacks port scan attacks treated widely methods detecting intrusions include clustering neural networks markov models moore show flow data effective identifying dos attacks number intrusion detection tools developed recent years response rise black-hat activity bro extensible environment identifying intrusion attack activity work complements work providing means identifying variety anomalous behaviors including attacks identify flash crowds important anomaly category events september inability online news services deal offered demand extreme kind behavior infrastructure content delivery networks cdns developed mitigate impact flash crowds studies characteristics exist recent study flash crowds jung work considers flash crowds dos attacks perspective web servers logs focused network traffic finally cooperative pushback proposed means detection control events flash crowds iii data measurement data analysis based types network traffic data types snmp data flow data source juniper router handled traffic crossed wisconsin-madison campus network border exchanged world campus network consists primarily ipv class networks roughly addresses fewer half utilized campus connectivity 
commodity internet research networks discrete wide-area transit peering links terminate aforementioned router snmp data gathered mrtg minute sampling interval commonly network operators snmp data consists high capacity interface statistics defined rfc polled snmp version analysis byte packet counters direction wide-area link specifically -bit counters ifhcinoctets ifhcoutoctets ifhcinucastpkts ifhcoutucastpkts flow data gathered flow-tools post-processed flowscan juniper router running junos junos configured perform cflowd flow export packet proceedings acm sigcomm internet measurement workshop sampling rate caused forwarded packets sampled subsequently assembled flow records similar defined cisco netflow version similar packet-sampling-interval minute flow active-timeout packet byte counts computed flow records multiplied sampling rate approximate actual byte packet rates attempted formally determine accuracy packet-sampling-based flow measurements compared snmp measurements common measurements network operations snmp flow data post-processed produce rate values stored rrdtool timeseries database archives configured retain values minute granularity september april internet service providers bill customers based percentile peak interface usage similar retention policy snmp data network operators retain five-minute granularity data days hours mrtg default data coalesced averages increasingly longer time intervals typically minute hour hour averages campus approximately subnets set data resulted database approximately size collected flow records retained validate results analysis collected minute intervals resulting compressed files approximately total combined size uncommon analysis considered average packet size computed byte packet rates applications typical packet sizes bimodal respect requests responses data acknowledgments analysis metric occasionally exposes application usage snmp-based byte packet interface rate statistics parallel collection measurement data journal anomalies network events maintained log entries journal noted event date time one-line characterization anomaly simple nomenclature label events types network network failure event temporary misconfiguration resulting problem outage instance router software spontaneously stopped advertising campus class networks campus bgp peers attack typically denial-of-service event floodbased instance outbound flood -byte tcp packets campus host security compromised remotely controlled malicious party flash flash crowd event instance increase outbound traffic campus ftp mirror server release redhat linux measurement anomaly determined due network infrastructure problems abusive network usage campus host participating tcp bulk data transfer host campus part research project problems data collection infrastructure categorized measurement anomalies include loss flow data due router overload unreliable udp table types counts network anomaly events traffic database study anomaly type count network attack flash crowd measurement total netflow transport collector total events identified subset researched tagged engineers operating campus network table shows distribution types tagged events flash crowd events occuring measurement period selected sampling anomalies categories based detailed description operator journal journal record traffic anomaly measurement period acted unique road map exploring raw traffic measurement data provided basis determining anomalies detected characterized automatically current practice experienced network operators employ effective hoc methods problem determination anomaly detection techniques rely heavily operator experience persistent personal attention modern network management systems nms software common tools handling snmp data ostensibly most-used graphing tool capable continuously collecting plotting values mibs uncommon network operators fill workstations screens plots traffic passes network elements alarm tool periodically performs tests collected values notifies operators tools based locally authored rules augmented heuristics provided nms vendor rules rudimentary conditional threshold tests router interface utilization notify resulting expert knowledge expressed rules necessarily portable network environment tools handling flow data mature freely-available tools employed work achieved level popularity operators enterprise large networks tools leverage existing snmp experience converting detailed flow-export records familiar time-series data tabular data compiled commercial freelyavailable tools occasionally major deficiency tools amount expert local knowledge time required setup pervasively instance collected unique time-series metrics single network element campus border router amount data prohibits visual inspection graphs plots small subset metin proceedings acm sigcomm internet measurement workshop rics methods wavelet analysis typical input analysis platform string internet traffic measurements basic principles methodology treatment measurement string generic signal ignoring large degree semantics signal content packet header instrumentation snmp flowscan quantity measured packet count byte count incoming traffic outgoing traffic actual subnet targeted pay careful attention time aggregation measurement measurement minutes order capture daily weekly patterns inconsistencies approach important build platform portable automated analysis tool depends heavily nature local subnet surely portable locations due heterogeneity internet traffic basic tool employ wavelet analysis wavelet tool organizes data strata hierarchy component signals maintains time independent variable lower strata sparse filtered information thought sophisticated aggregations original data refer part representation low-frequency representation algorithm derive representation single dataset extracts general slow-varying trends original signal contrast high strata hierarchy capture fine-grained details data spontaneous variations referred high-frequency strata review bit detail so-called wavelet processing processing made complementary steps analysis decomposition inverse reconstruction synthesis process analysis goal analysis process extract original signal aforementioned hierarchy derived signals iterative process input iteration signal length output collection derived signals length output signal obtained convolving specially designed filter decimating coefficient convolution product denote output signal obtained special filters denoted smoothing averaging effect output low-frequency output filters thought discrete differentiation typical output capture fine-grained details high-frequency content signal iterations proceed decomposition creating shorter signals hrl continuing manner obtain family output signals form hilj index counts number lowpass filtering iterations applied obtain output signal larger lower derived signal hierarchy refer hilj belonging jth frequency level higher lower frequency original signal consists measurements minute intervals derived signal hilj consists data values minutes grows output signal shorter records smoother part signal values derived signals hilj wavelet coefficients case level derived signal hil aggregated data values minutes aggregation level correctly anticipate subtle variations evolve hour duration blurry time-stamp variations hand coefficients level capture variations day night traffic synthesis iterations perform inverse analysis step input signals iteration hrlj output signal inverse jth iteration analysis algorithm employing step sufficiently times recaptures original signal wavelet process detection-only mode mode examines derived signals decomposition infer information original signal wavelet-based algorithms sophisticated attempt assemble signal pieces decomposition altering values derived signals decomposition step applying reconstruction general idea suppress values carry information ignore view fine-grained spontaneous data apply threshold entries low-frequency levels replace zeros description falls short resulting well-defined algorithm suppose suppress day night variation traffic mentioned variations frequency level lower levels recorded derived signal level turns simple answer wavelet tranform describe wavelet systems provide unique decomposition data choosing subtle details wavelet transform 
requires expert understanding performance wavelet decompositions ultimate success depends selecting wavelet transform suits application time frequency-localization approximation orders vanishing moments highly qualitative description selection wavelet transform based careful balance time localization characteristics frequency localization characteristics time localization simple notion primarily measured length filters employed transform long filters lead excessive blurring time domain long filters denies ability easily distinguish strong short-duration change proceedings acm sigcomm internet measurement workshop traffic volume opposed milder change longer duration anomaly detection ability answer accurately question critical chose wavelet system short filters frequency localization context characteristics wavelet system regarded belonging class measure frequency localization measuring number vanishing moments analysis filters possess filter vanishing moments fourier series wavelet system filter vanishing moment filters low number vanishing moments lead appearance large wavelet coefficients times significant event occurring resulting increasing number false positive alerts order create wavelet transform high number vanishing moments select longer filters closely related measure frequency localization approximation order system forgo explaining details notion mention decision measure frequency localization vanishing moments approximation order depends primarily objective nature algorithm employed issue context artifact freeness transform wavelet systems reconstructed modified signal shows features original signal artifacts filters wavelet filters short create undesired artifacts rare good time localization insistence artifact-free wavelet system narrowed search optimal system substantial wavelet system employ bi-frame version system type framelet system redundant wavelet system essentially means number high-pass filters larger simple count shows total number wavelet coefficients exceeds length original signal work redundancy considered virtue redundancy added flexibility construct short filters good frequency localization chosen system low-pass filter high-pass filters analysis filters -tap non-zero coefficients synthesis filters -tap vanishing moments high-pass analysis filters approximation order system artifact freeness system guaranteed low-pass filters deviate mildly spline-filters perform pure multiple averages ideal artifact-free low-pass filters analysis platform derive signal initial assumption internet traffic smooth gain system approximation order switched system approximation order shorter filters comparisons performance type system filters -tap approximation order yielded significant difference performance represents five-minute average measurements output signals description fits signal measured months slightly rules employed shorter duration signals signal measured week frequency -part signal obtained synthesizing low-frequency wavelet coefficients levels l-part signal capture patterns anomalies long duration days signal sparse number data elements approximately original signal captures weekly patterns data types internet data l-part signal reveals high degree regularity consistency traffic reliably capture anomalies long duration albeit blur characteristics abnormal behavior traffic frequency -part signal obtained synthesizing wavelets coefficients frequency levels signal zero-mean supposed capture daily variations data data elements number original signal igh frequency -part signal obtained thresholding wavelet coefficients frequency levels setting coefficients absolute falls chosen threshold setting coefficients level thresholding stems fact data h-part consists small short-term variations variations noise aid anomaly detection objective close section technical comments theory thresholding redundant representations rudimentary form evident vary thresholding level number vanishing moments filter decreasing threshold filter high vanishing moments implemented technique finally due high approximation order system capture accurately sharp discontinuities data detection anomalies single method detecting anomalies found step developing automated method identifying irregularities measured data algorithm call deviation score ingredients normalize m-parts variance compute local variability normalized m-parts computing variance data falling moving window size length moving window depend duration anomalies captured denote duration anomaly time length window local deviation ideal situation quotient small anomaly blurred lost quotient large overwhelmed anomalies interest network operators current experiment focuses anomalies duration hours moving -hour local deviation window shorter anomalies single definition anomaly change measured data anomaly correspond identifiable change network state proceedings acm sigcomm internet measurement workshop sufficient intensity detected combine local variability h-part m-part signal weighted sum result ariable -part signal apply thresholding v-signal measuring peak height peak width v-signal begin identify anomalies duration relative intensity provide details application technique section approach identifying anomalies occur periods hours appears promising step process automated anomaly detection based wavelet coefficients choice scale dependent windowing calculate deviation score motivated simplicity approach enabled easily quantify significance local events reconstructed signal local variability future find direct combinations wavelet approximation coefficients components sufficient accurate automated anomaly detection end future work plan investigate components provide descrimination employ machine learning tools techniques develop robust automated anomaly detectors approach enable evaluate quantitatively combinations wavelet features provide detection capability imapit analysis environment imapit environment developed study significant components data archive signal analysis platform data archive rrdtool mentioned section iii flexible database front-end flow snmp data analysis platform framelet signal analysis visualization system enables wide range wavelet systems applied signals signal manipulation data preparation imapit analysis performed modified version freely-available lastwave software package addition wavelet decomposition implemented deviation score method exposing signal anomalies flow snmp time-series data input compute deviation score signal calculating deviation score parameters window size h-window size weights assigned h-parts single constant set parameter values produce results section tune imapit sensitivity instantaneous events modifying moving window size constructing local deviation smaller window sensitive weights h-parts emphasize events longer shorter duration analysis found anomalies journal deviation scores higher scores higher high-confidence scores low-confidence deviation scores plotted figures section show score grey band clipped vertical axis labeled side evaluation deviation scoring means anomaly detection found section results decompose signal analysis distinct signals low mid high point signal analysis week long period evaluate shortlived anomalies h-part frequency levels part frequency levels l-part remainder signal weeks long period evaluate long-lived anomalies m-part frequency levels l-part remainder bytes sec bytes original signal autonomous system campus inbound -decthrough -dec- bytes high-band bytes mid-band sat sun mon tue wed thu fri sat sun bytes low-band fig aggregate byte traffic flow data typical week high mid low decomposition bytes sec bytes original signal interface campus inbound -decthrough -dec- bytes high-band bytes mid-band sat sun mon tue wed thu fri sat sun bytes low-band fig aggregate snmp byte traffic week figure high mid low decomposition characteristics ambient traffic essential establish baseline traffic free anomalies means calibrating results studies describe essential features network traffic including standard daily weekly cycles figure shows byte counts inbound traffic campus commodity proceedings acm sigcomm internet measurement workshop internet service provider typical week figure shows wavelet decomposition signal high mid low-band components 
parts discussed section regular daily component signal clear low band figure show byte traffic week level aggregation measured snmp case traffic measured utilizing high-capacity snmp interface octet counters selecting specific bgp autonomous system number exported flow records decompositions figures indistinguishable primary difference slightly high-frequency jitter flow-export-based signal characteristics flash crowds step analysis anomalies focus flash crowd events choice investigating flash crowds due long lived features exposed mid low-band filters suggests analysis snmp flow-based data suitable focus flowbased data figure shows decomposition weeks outbound traffic campus class-b networks popular ftp mirror server linux releases weeks releases popular linux distributions occurred resulting heavy campus mirror server subsequent figures grey boxes added hand focus reader attention anomaly position box determined simple visual inspection attention focus low-band signal lowband signal highlights event longlived aspect event effects flash crowds perspective impact typical sizes packets intuition large data software releases result increase average packet size outbound http traffic packet size effective means exposing flash crowds figure shows weeks outbound http traffic highlights flash crowd anomaly data set anomaly result network packet traces made campus web server curiously unrelated reasons server data set kernel customized tcp maximum segment size mid-band low-band signals figure show outbound http packets server fact redefine campus average http packet size interesting note packet size signal stable signal fewer artifacts flash crowd event visible mid-band flash crowds typically involve single application application packet size profile temporarily dominates easily expose weekly component signal higher aggregation filters weekly behavior important groups anomalies study employ formal methods quantify difference snmp flow signals decompositions future work octoct- octoct- octnov- novnov- novm outbound class-b network bytes low-band outbound class-b network bytes mid-band bytes sec outbound class-b network bytes original signal class-b network outbound -septhrough -novfig baseline signal byte traffic week side flash crowd anomaly caused software release high mid low decomposition octoct- octoct- octnov- novnov- novoutbound http average packet size low-band outound http average packet size mid-band bytes outbound http average packet size signal campus http outbound -septhrough -novfig baseline signal average http packet sizes bytes weeks side flash crowd anomaly mid low decomposition characteristics short-term anomalies short-term anomalies comprise attacks network outages measurement anomalies coarse-grained minute intervals nature measurements complicates discrimination categories anomalies group evaluated short-term anomalies combinations data determine expose features present analysis examples short-term anomalies highlight general features contrast flash crowds short-term anomaly features exposed mid-band high-band filters isolate short-timescale aspects signals figure shows decomposition tcp flow counts exposes inbound denial-of-service dos attacks occurred week period attacks floods -byte tcp syn packets destined campus host flood packets dynamic source adin proceedings acm sigcomm internet measurement workshop dresses tcp port numbers flood reported degenerate flows packet flow predicted decomposition easily isolates anomaly signal high mid bands separating signals longer time-scale behavior signals amenable detection thresholding flows sec inbound tcp flows original signal campus tcp inbound -febthrough -febinbound tcp flows high-band inbound tcp flows mid-band sun mon tue wed thu fri sat inbound tcp flows low-band fig baseline signal packet flows week period highlighting short-lived dos attack anomalies high mid low decomposition bytes sec inbound tcp bytes original signal campus tcp inbound -febthrough -feb- inbound tcp bytes high-band inbound tcp bytes mid-band sun mon tue wed thu fri sat inbound tcp bytes low-band fig baseline signal byte traffic flow data week period showing short-lived measurement anomalies high mid low decomposition type short-term anomaly shown figure figure shows periodic sequence measurement anomalies observed day period found host world performing nightly backups campus backup server large volume traffic day due misconfiguration client backup software prior decomposition easily isolates anomaly signal high mid bands low band affected anomaly anomaly intended behavior accounting high mid bands require additional filters analysis platform discriminator short-term anomalies objectives work provide basis automating anomaly detection important anomaly detection mechanism minimize false positives false negatives analysis led development deviation score discrimination function short-term anomalies section figure shows deviation scores highlight series short-term anomalies figure shows inbound tcp packet rate week anomalies difficult discern baseline signal anomalies dos floods easily detected exposed automatically deviation scores marked grey bands note bands score values shown scale figure leftmost score reach band marks measurement anomaly unrelated dos attacks sun mon tue wed thu fri sat score deviation score packets sec inbound tcp packets campus tcp inbound -febthrough -febfig deviation analysis exposing dos attacks measurement anomaly week period packet count data figure present deviation analysis week network outage outage affected fourth campus ipv address space caused decrease traffic traffic measurement metric packets bytes flows inbound outbound deviation scoring identified marked anomaly suggests feasible rules based approach weighted average determine type scope anomaly based accumulated impact set deviation scores exposing anomalies aggregate signals important issue detecting traffic anomalies relationship strength anomaly signal set aggregated traffic easily considered respect point measurement data collected network intuition anomaly measured close source evident anomaly evident signal aggregated large amount traffic investigate issue isolating specific subnet system victim dos attack figure shows deviation analysis inbound dos floods aggregate traffic victims host subnet proceedings acm sigcomm internet measurement workshop inbound score outbound score sun mon tue wed thu fri sat score bytes sec pkts sec sun mon tue wed thu fri sat flows sec fig deviation analysis exposing network outage class-b networks inbound score outbound score score bytes sec pkts sec sun mon tue wed thu fri sat flows sec sun mon tue wed thu fri sat inbound score outbound score score bytes sec pkts sec sun mon tue wed thu fri sat flows sec sun mon tue wed thu fri sat fig deviation analysis dos events host subnet victim attack top aggregate traffic entire campus proceedings acm sigcomm internet measurement workshop aggregate traffic campus class-b networks top set graphs figure show deviation scores easily highlight extreme nature dos floods inbound traffic subnet highlight evident outbound traffic anomaly bottom set graphs show deviation scores highlight anomalies number hidden anomalies application methods identify number hidden anomalies data sets anomalies previously identified campus network engineers majority dos attacks identified careful visual inspection hidden anomaly interest shown figure figure shows outbound 
traffic campus classb networks week period duration anomaly prevented detection deviation score decomposition enabled identify anomaly previously unnoticed easily visually anomaly visible december low-band graph traffic remained uncharacteristically high subsequent days follow-up investigation repository flow records showed anomaly due network abuse campus hosts security compromised remotely operated peer-to-peer file servers bytes sec outbound bytes original signal class-b network outbound -novthrough -dec- outbound bytes high-band outbound bytes mid-band novdec- decdec- decm outbound bytes low-band fig three-band analysis exposing multi-day network abuse anomaly deviation score evaluation evaluated results deviation scoring method anomaly detection ways selected set anomalies logged network operator journal baseline evaluated deviation score detection capability baseline set anomalies evaluate effectiveness alternative detection technique based holt-winters forecasting comparison deviation scoring limited extent evaluate detection method baseline set anomalies analysis complete attempt determine method reported false-positives table comparison anomaly detection methods total candidate candidates detected candidates detected anomalies evaluated deviation score holt-winters case tolerant discrepancies anomaly timestamps journal log entries times automated methods reported anomalous network traffic specifically allowed discrepancy hours automated techniques shift report significantly time event onset respective identification anomalies evaluation set summarized table techniques performed false-negative reports anomalies candidate set low deviation score logged anomalies selected events network operator log anomalies subset events suitable amount evidence gathered label high confidence anomalies evidence gathering tedious effort involving examination individual flow records identify specific header values packets comprised anomaly anomalies selected baseline evaluation deviation score analysis detected significantly confident score higher single anomaly wasn detected method deviation score substantial visual inspection plot signal showed due prominent anomaly detected earlier week suppressed magnitude undetected anomaly score side-effect normalization context week-long window analysis method holt-winters forecasting logged anomalies evaluate deviation score compared anomaly detection results holt-winters forecasting reporting technique implemented freelyavailable development source code rrdtool version holt-winters forecasting algorithm builds exponential smoothing specific implementation holt-winters forecasting selected holt-winters method comparison sophisticated technique network operators common techniques employ simple site-specific rules-based thresholding summarily rejected simple techniques rules magic numbers thresholding portable local network general inability handle seasonal effects daily cycles signal amplitude deviation score holt-winters analysis configured seasonal period consideration proposed alternatives analysis visual inspection network trafin proceedings acm sigcomm internet measurement workshop fic signals deviation score method holt-winters method parameters configured constructing rrdtool databases hwpredict round-robin archive rra configured alpha beta seasonal period period day minute intervals implementation default failure-threshold window-length means minimum violations observed values confidence bounds window values considered high-confidence anomaly hwpredict parameters default values implementation author holt-winters method detected anomalies evaluation set visual inspection anomalous signals plotted deviation scores holt-winters results shown figures made observations logged anomalies reported confidently holt-winters method careful inspection holt-winters predictions anomalies showed reported larger window size reporting phase time holt-winters method reported feature anomalous lagged original time event logged operator sun mon tue wed thu fri sat failure holt-winters forecast failure packets sec inbound tcp packets campus tcp inbound -febthrough -febfig holt-winters results figure deviation scores holt-winters forecasting found holt-winters method sensitive potential anomalies deviation score method reported failure ostensibly anomalous events included log method false-positives reasons reports twofold holt-winters method parameters determine sensitivity part poorly configured input data set deviation score technique blur signal features widening respect time making single anomaly erroneously reported multiple times holt-winters boolean reporting oscillated true false appeared single anomalous feature determined visual inspection holt-winters method reported ostensibly single anomaly discrete event behavior mitigated changing parameter values necessarily general criticism holt-winters approach observed deviation score method readily reported small amplitude features signal holt-winters method due holt-winters method requiring feature amplitude travel confidence band width reported anomaly deviation score method fixed values respect signal amplitude deviation score based normalized signal amplitudes window spanned five-minute data points week deviation score values configured necessarily applicable week-long window relative ambient average traffic levels window means anomaly deviation score lowered presence prominent anomaly week effect visual inspection vertical axis signal amplitude auto-scaled time-series plot prominent anomaly draw observer attention lesser vii conclusions future work paper present signal analysis network traffic anomalies flow snmp data collected wisconsin border router data set spans months includes catalog anomalies organize distinct categories short-lived events long-lived events analysis developed imapit environment facilitate work environment combines flexible database system robust signal analysis capability applied variety time-frequency analysis techniques data determine isolate anomalies found wavelet system effectively isolates short long-lived traffic anomalies addition system developed concept deviation score considers signal variation high medium frequency bands found score extremely effective isolating anomalies amenable generation threshold-based alerts evaluation deviation scores means automating anomaly detection shows similarly effective sophisticated time-series techniques holt-winters forecasting techniques small set tunable parameters perform poorly configured incorrectly perform parameters configured appropriately set anomalies evaluation methods performed false-negative reports negligible results traffic anomaly detection mechanisms based deviation score techniques effective development future plan investigate machine learning methods evaluate impact additional features deviation scores intend investigate deviation score method implemented detect anomalies real time study methods classifying anomalies facilitate proceedings acm sigcomm internet measurement workshop inbound failure outbound failure sun mon tue wed thu fri sat failure bytes sec pkts sec sun mon tue wed thu fri sat flows sec fig holt-winters results figure diagnosis treatment finally intend pursue idea coordinated anomaly detection multiple measurement locations wide area acknowledgements darryl veitch comments work anonymous reviewers helpful feedback barford plonka characteristics network traffic flow anomalies proceedings acm sigcomm internet measurement workshop san francisco november aceres measurements wide-area internet traffic tech rep ucb csd computer science department california berkeley paxon fast approximate synthesis fractional gaussian noise generating self-similar network traffic computer communications review vol october paxson measurements analysis end-to-end internet dynamics thesis california berkeley willinger taqqu sherman wilson self-similarity high-variability statistical analysis ethernet lan traffic source level ieee acm transactions networking vol february abry veitch wavelet analysis long range dependent traffic ieee transactions information theory vol claffy internet traffic characterization thesis california san diego hood proactive network fault detection proceedings ieee infocom kobe japan april katzela schwartz schemes fault identification communications networks ieee acm transactions networking vol december ward glynn richardson internet service performance failure detection performance evaluation review august feather siewiorek maxion fault 
detection ethernet network anomaly signature matching proceedings acm sigcomm san francisco september brutlag aberrant behavior detection time series network monitoring proceedings usenix fourteenth system administration conference lisa xiv orleans december toelle niggemann supporting intrusion detection graph clustering graph drawing proceedings international workshop recent advances intrusion detection raid toulouse france october fox henning reed simonian neural network approach intrusion detection tech rep harris corporation july markov chain model temporal behavior anomaly detection workshop information assurance security west point june moore voelker savage inferring internet denial-of-service activity proceedings usenix security symposium washington august paxson bro system detecting network intruders real-time computer networks vol jung krishnamurthy rabinovich flash crowds denial service attacks characterization implications cdns web sites wwwhawaii manajan bellovin floyd paxson shenker ioannidis controlling high bandwidth aggregates network aciri draft paper february oetiker multi router traffic grapher proceedings usenix twelfth system administration conference lisa xii december mccloghrie kastenholz interfaces group mib ietf rfc june romig fullmer osu flow-tools package cisco netflow logs proceedings usenix fourteenth system administration conference lisa xiv orleans december plonka flowscan network traffic flow reporting visualization tool proceedings usenix fourteenth system administration conference lisa xiv orleans december cisco ios netflow http cisco netflow daubechies han ron shen framelets mra-based constructions wavelet frames preprint ftp ftp wisc approx dhrs emmanuel bacry lastwave http cmap polytechnique bacry lastwave brockwell davis introduction time series forecasting springer 

fast scalable layer switching srinivasan varghese suri waldvogel abstract layer switching route resources allocated packet determined destination address header celds packet source address tcp udp port numbers layer switching uni ces crewall processing rsvp style resource reservation clters qos routing normal unicast multicast forwarding single framework framework forwarding database router consists potentially large number clters key header celds packet header matchmultiple clters clter cost packet forwarded cost matching clter paper describe algorithms solving cost matching clter problem high speeds crst algorithm based grid-of-tries construction works optimally processing clters consisting pre celds destination-source clters linear space algorithm cross-producting fast lookup times arbitrary clters potentially requires large storage describe combination scheme combines advantages schemes combination scheme optimized handle pure destination pre clters memory accesses destination-source clters memory accesses worst case clters memory accesses typical case introduction building web sites internet usage expanding rate commonly nuclear reactions internet tra exploding growing number users growing demand bandwidth intensive data multimedia applications instance computer science department washington louis research supported part nsf grant ncry computer science department washington louis research supported part nsf grant ncrand onr young investigator award computer science department washington louis research supported part nsf grant ncrx computer science department eth zurich easily consume megabytes bandwidth tokeep increased tra link speeds internet core increased mbps number vendors providing faster routers traditional router performs major tasks forwarding packet packet destination address router database switching packet incoming link outgoing links recent advances task switching understood vendors fast buses crossbar switches algorithms developed recently address lookup inherent impediment building gigabit routers traditional data forwarding internet increasingly users demanding router vendors providing discriminating form router forwarding quote john mcquillan routing traditionally based solely destination host numbers future based source host source users destination urls universal resource locators speci business policies future path casually browse web cnn headlines routed berentway corporate web site enter monthly sales cgures sites hosted facility location order entry form low latency sections normal service web sites comprised berent servers berent locations future routers switches class service qos determine paths web pages end-users requires layers vision forwarding called layer forwarding routing decisions based headers layer higher osi architecture layer switching bers increased dexibility router capability block tra dangerous external site reserve bandwidth tra company sites give preferential treatment kind tra online database transactions kinds web browsing layer switching referred vendor literature phrase cservice berentiation traditional routers provide service berentiation treat tra internet address layer switching service differentiation router distinguish tra based origin source address application type web tra cle transfer layer switching eculties change higher layer headers require reengineering routers whichiswhy routers traditionally layer headers data encrypted security clear routers access higher layer headers eculties variants layer switching evolved industry routers implement crewalls trust boundaries suchas entry exit points corporate network crewall database consists series packet clters implement security policies typical policy remote login corporation disallow corporation predictable guaranteed service lead proposals reservation protocols rsvp reserve bandwidth source destination cries routing based tra type strident recently instance route web tra site site onsay route tra route figure illustrates examples subnet subnet database router traffictype forwarding directive video forward drop traffic reserve mbps figure clters provide tra sensitive routing crewall rule resource reservation crst clter routes video tra shown default routing clter blocks tra experimental site accidentally leaving site clter reserves mbps tra internal network external network implemented byforwarding tra special outbound queue receives special scheduling guarantees andyare pre cxes users dexibility features provided crewalls tra reservations qos routing hard future routers ignore issues genie appears bottle camel entered tent depending point view hand clear hoc solutions deployed cleaner general techniques cleaner solution tra sensitive routing reservation problem push form ctra classi cer routing header determine application requirements inspecting higher layer headers cnal solutions clear future routers forward tra based combination destination address source address grateful craig partridge john wrocklawski sharing ideas opinions classi cer celds routing layer higher layer layers headers paper neutral stance issue choosing combination celds function issue deciding functions concentrate general problem router forwarding database consists anumber clters conjunction exact range pre matches set packet celds describe family ecient algorithms cnding matching clter packet determines packet route resource allocation access rights concerned cnding algorithms efccient implementable gigabit speeds scalable large numbers clters clters reasonable memory costs firewalls today contribute typically clters backbone routers pre cxes qualify destination precx port numbers qos routing source pre cxes resource reservation sites virtual private network hard imagine hundred thousand clters today crewall processing clters generally slow linear search clter set considered acceptable price pay csecurity problem cnding matching clter clters gigabit speeds importantchallenge rest paper organized formulate matching clter problem precisely section section brie discuss related work section showhow replace range matches pre matches section describe crst scheme gridof-tries scheme cross-producting section discuss lower bounds show culty general clter problem section present ascheme combines features grid-of-tries cross-producting section finally discuss implementation results section conclude section matching filter problem traditionally rules classifying message called clters rules crewall terminology layer switching problem determine lowest cost matching filter incoming message router assume information relevant lookup contained distinct header celds message header celds denoted celd string bits instance relevant celds ipv packet destination address bits source address bits protocol field bits destination port bits source port bits tcp dags bits number relevant tcp dags limited prefer combine protocol tcp dags celd tcp-ack tcp packet ack bit set relevant tcp dags represented similarly udp packets represented udp combination tcp-ack denotes header packet destination source tcp dags important packet cltering crst packet connection ack bit set simple rule block tcp connections initiated allowing responses internally initiated connections protocol tcp destination port source port ack bit set clter database ofalayer router consists nite set clters clter combination values header celd celd clter allowed kinds matches exact match pre match range match exact match header celd packet match clter celd instance protocol dag celds pre match clter celd pre header celd blocking access subnetwork range match header values lie range speci ced clter port number ranges clter directive act speci ces forward 
packet matching clter directive speci ces packet blocked packet forwarded directive speci ces outgoing link packet queue link message belongs dow bandwidth guarantees wesay packet matches clter celd matches celd matchtype implicit speci ccation celd instance destination celd speci ced requires pre match protocol celd udp requires exact match port celd range requires range match instance tcp clter act block packet header tcp matches blocked packet tcp hand doesn match packet matchmultiple clters thedatabase associate cost clter determine unambiguous match clter database non-negativenumber cost goal cnd clter cost matching packet header cost function generalizes implicit precedence rules practice choose multiple matching clters crewall applications instance rules clters database speci linear order clter takes precedence subsequent clter goal cnd crst matching clter bect scheme making cost equal position number database clter database crewall database shown figure screened subnet con cguration assumed so-called bastion host company mediates access external world serves mail gateway external server access network time protocol ntp sources internal company external address secondary server external company addresses machines company network start cidr pre net match pre net packet senttom udp destination port equal packet matches filters allowed crst matching clter filter extend type matches greater dexibility illustrate examples common types port port destination source destination source flags comments inbound mail udp net net tcp ack secondary access incoming telnet ntp time info outgoing packets return acks block everythingl udp dns access figure sample crewall database cfor small company book cheswick bellovin block dags shown cgure crst clters block false clter block true block related work anywork directly related fast clter processing packet clters demultiplexing time instance solve berent problem filters matching rules wildcards address ranges arbitrary celds require return crst matching clter address lookup problem closely related problem lookup problem simpler special case clter problem cross-producting scheme matching pre building block packet cltering unpublished paper bypaul tsuchiya describes data structure called cecilia dealing noncontiguous net masks cecilia generalized call set pruning trees layer switching scheme bers memory explosion makes impractical clter database size large figure shows tsuchiya scheme simple methods exponential memory blowup section describe basic idea set pruning trees existing crewall implementations linear search database track matching clter implementations caching toimprove performance cache full packet headers speed processing future lookups cache hit rate caching full addresses routers cache hit rates muchworse caching full headers incurring linear search cost search clters bottleneckeven occurs packets cost matching clter thoughtofasa special case general multidimensional searching problem general solutions exist problem celd clter thoughtofasakdimensional rectangular box packet header thoughtofasapoint k-dimensional space cost clter matching problem cnd cost box header point general result computational geometry bers data structure requiring logn space search time logn logarithms base instance section worst-case search memory costs data structure infeasible modest values instance worst-case search cost memory cost recent approachtolayer switching wehave unable determine details scheme appears range matching hardware technique generalize binary search quad-tree construction higher dimensions instance instance destinationsource clters correspond two-dimensional search clter mapped quad-tree cell bits long bits long binary searchby crst matching packet clters quad-tree cell maximum bit length destination source pre problem probe outcome fail match eliminates quadrant search space requires recursive calls dimension cnish search leads large search time wayto avoid making recursive calls precompute future matches markers leads infeasible memory explosion wehave shownalower bound hashing schemes show generalize poorly multiple dimensions summary existing methods lead large blowup memory lookup time cost clter problem converting address ranges pre cxes clter celd speci ced range common range port numbers instance crewall clter require source port greater arbitrary range converted union pre ranges pre range expressed pre instance -bit celd pre expresses range suppose wewanttoconvert arbitrary range lies enclosing binary range cne anchoredrange endpoint end enclosing range arbitrary range split anchored ranges lie anchored range split logarithmic number pre ranges constantly halving range stage halving contributes pre range net result represent arbitrary subrange pre ranges -bit port numbers range expressed pre range hand range expressed pre ranges rest paper assume clter celd pre grid-of-tries crst scheme based simplest form trie binary branching tree branch labeled pre node concatenation bits root node figure instance leftmost node dest-trie pre node basic data structure called grid-of-tries designed handle two-dimensional clters destination-source pairs signi ccant algorithm rightbecause large backbone routers mayhave large number destination-source clters handle virtual private networks multicast forwarding grid-of-tries extended albeit loss eciency handle clters celds suchasport numbers section start explaining basic dimensional data structure database destination-source clters shown figure examples destination-source note idea abstracted handle clters anytwo pre celds remaining celds completely wildcarded filter destination source figure dest-source clters set pruning trees motivate grid-of-tries scheme begin describing dimensional set pruning trees build trie destination pre cxes database figure illustrates construction database figure valid pre destination trie dest-trie points trie source pre cxes question source pre cxes store instance clters destination pre store source pre cxes storing clters ecient clters match destination matches fact wildcard destination pre matches matches suppose packet destination header starts source address starts cost clter matching header lowest cost clter suggests store source trie source precxes clters destination pre figure shows complete data structure database figure trie crst match destination header dest-trie yields longest matchonthe destination pre traverse source trie cnd longest source match search source trie wekeep track lowest cost matching clter clters matching destination pre stored source trie searched cnd correct cost clter basic idea set pruning trees simple extension dimensions memory blowup problem problem arises source pre occur multiple figure instance source pre cxes trie worst-case forcing memory created set clters shown figure problem destination pre matches destination header source pre cxes copied times destination pre dest-trie source figure crst idea grid-of-tries require memory clters worst case dest-trie trie destination pre cxes nodes valid destination pre database shown solid shown circles valid destination pre pointer trie source pre cxes belong clters destination celd pre filter destination source figure forcing memory fortwo dimensional set pruning trees similar examples apply number simple schemes show storage dimensional clters avoiding memory blowup order avoid memory blowup simple trie scheme observe clters 
destination pre copied source trie pre instance figure pre clters copied destination celd pre similarly copied destination celd pre avoid copying byhaving destination pre point source trie stores clters destination celd requires modify search strategy searching source trie matching destination pre wemust search source ancestors order search cost clter crst traverse dest-trie cnd longest destination pre matching header search source trie update cost matching clter work back dest-trie search source trie pre points nonempty source trie clter stored memin scheme search source pre cxes destination order changing search time order order motivate cnal scheme dest-trie source figure avoiding memory blowup storing clter trie ory requirement structure whichis signi ccantly improvementover previous scheme lookup cost scheme worse crst scheme worst-case lookup costs maximum number bits speci ced destination source celds bound search cost observation worstcase wemay end searching source cost total improving search time basic grid-of-tries wenow describe key ideas improving search cost two-dimensional keeping memory requirement linear key idea precomputation switch pointers speed search source trie based search earlier source trie figure shows construction switch pointers switch pointers shown dashed lines source distinguish switch pointers dotted lines connect dest-trie nodes source dest-trie source figure improving search cost switch pointers order understand role switch pointers matching packet destination address source address search dest-trie match westart search matching source pre source trie clters search immediately fails crst bit source previous scheme back dest-trie restart searchin source trie parentof scheme switch pointer directly jump node source trie similarly search bit source fails jump node source trie destination pre intuitively switch pointers jump directly lowest point ancestor source trie good source match current node skip clters ancestor source trie source celds shorter current source match turn improves search complexity wenow cne switch pointers precisely destination string ancestor pre wesay lowest ancestor longest pre destination trie denote source trie pointed recall source celds clters destination celd node fails bit corresponds source pre trie string starting lowest ancestor source trie source string starting pre atnodev place switch pointer node pointing node suchnodev exists switch pointer nil switch pointer failure bit cned similarly instance figure node labeled fails bit switch pointer node labeled switch pointers increase length matching source pre restart root ancestor source trie allowus skip clters source trie source celds shorter current source match instance packet header start crst source trie pointed destination trie node match crst source bit clter fail bit follow switch pointer leads node trie labeled clter switch pointers node nil search terminates note wehave missed clter matches packet case higher cost general overlooked clter havelower cost solve problem byhaving node source trie maintain variable storedfilter speci ccally node destination pre source pre stores storedfilter cost clter destination celd pre source celd pre precomputation node labeled figure store information lower cost finally argue search cost cnal scheme time cnd destination pre time spent traversing source step length match source celd increases traversing trie switch pointer ancestral trie maximum length source pre cxes total time spent searching source memory requirementiso eachofn clters stored clter requires space improvements improvements previous scheme notice role played dest-trie determining longest matching destination pre longest matching destination pre tells source trie start searching point dest-trie plays role wemove source switch pointers crst improvement replace desttrie fast scheme determining matching pre destination address scheme proposed requires logw time worst-case cnding longest matching pre combining scheme grid-of-tries leads total lookup time logw destination-source clters -bit source multi-bit multi-bit crst expand destination source pre multiple instance suppose figure destination pre clters expanded source pre cxes expanded k-bit expansion single pre expand pre cxes total memory requirement grows memory blows factor hand depth trie reduces total lookup time logw depending memory optimize time-space tradeo extending grid-of-tries handle protocol ports wenow describe handle general clters protocol type port number celds speci ced grid-of-tries assume port number celd clter single port number wild card partition clters small number classes requires lookup destinationsource combination eliminate protocol celd cost increasing memory factor main protocols tcp udp protocols grouped class cother purpose packet forwarding note port numbers cned tcp udp protocols replicate times clter protocol celd values protocol tcp udp wenowhave remaining port celds build hash tables combination port celds unspeci ced destination source speci ced hash tables indexed combination port celds protocol celd tcp udp figure clter form tcp crst place entry exist dstport hash table key tcp points grid-oftries structure representing destination source precxes clters prot tcp dstport srcport shown figure clter grid-of-tries structure whichkeeps memory linear number clters finally search header search hash tables turn searching hash table actual port numbers protocol celd tofollow pointer grid-of-tries perform searchwe grid-of-tries search wekeep track lowest matching clter simple optimization combine hash port number celds lookup grid-of-tries extended handle port number ranges creating dimensional cplanes loss eciency scheme crewall clters port number ranges cross-producting crst trie node grid-of-tries figure saves hashes hash table hash table hash table hash table dstport srcport dstport srcport tcp grid destination source fields filters protocol tcp destport srcport figure extending basic grid-of-tries deal port number celds cross-producting grid-of-tries scheme excellent performance dimensional pre cxes matches destination-source clters requires linear memory takes time equivalent lookups source destination address extremely important cases virtual private networks general clters applications crewalls gridof-tries extended handle celds replicating grid-of-tries structure section showed port number celds wildcarded fully speci ced ranges grid-oftrie structures expensive worse wehave handle clters port number ranges wenow describe algorithm cross-producting clter matching problem unlike grid-of-tries cross-producting easily handle arbitrary clters including clters range speci ccations high speeds memory search times predictable grid-of-tries cnal scheme combine features grid-of-tries cross-producting proceed describe cross-producting main idea cross-producting start slicing clter database columns ith column storing distinct pre cxes celd packet determine matching pre celds separately combine results matching pre lookups individual celds main problem lies cnding ecient method combining lookup individual celds single compound lookup end start slicing database figure individual pre celds sliced columns refer wildcard character string default recall mail gateway internal ntp agent tiare full addresses lie pre range net sliced database shown figure 
top column wehave number elements column -tuple formed taking column call crossproduct altogether wehave cross-products sample cross-products shown figure destination celd signi ccant dags celd signi ccant pretend values increase column order cross-products smallest largest anynumber system key insight packet ifwedo matching pre operation celd net destination prefixes source prefixes prefixes srcport prefixes prefixes dstport flags default net default udp tcp ack default default default figure database figure csliced columns column set pre cxes celd crossproduct num matching default default default default default udp tcp ack default default udp default tcp ack default default default default default default tcp ack filter filter filter filter filter filter filter filter filter figure sample cross-products obtained cross-producting individual pre tables figure sliced pre database concatenate results form cross-product cost clter matching cost clter matching formalized simple theorem theorem packet associatedcrossproduct matching clter matching clter proof suppose celd pre celd clter matches matches case berent matching clter clter matches implies celd pre pre happen longer contradicts assumption longest matching pre column basic cross-producting algorithm build table cross-products precompute cost clter matching cross-product shown figure packet header determine cost matching clter packet matching pre operations single hash table lookup cross-product table small databases individual pre lookups reside cache result cache accesses asingle memory lookup hardware eachofthek pre lookups parallel matching packet header udp database figure crossproduct obtained performing matching pre cxes individual celds udp default easily check precomputed clter cross-product filter filters match crossproduct filter cost simple cross-producting algorithm bers memory explosion problem worst case crossproduct table entries number clters number celds moderate values table size reach prohibitively large describe simple optimization reduce memory requirement considerably demand cross-producting major idea reduce memory build crossproducts demand building complete crossproduct table start incrementally add entries table pre tables celd built packet arrives perform matching pre cxes individual celds compute cross-product term cross-product table entry clter returned entry cross-product table cnd matching clter possibly linear search database insert entry cross-product table subsequent packets cross-product yield fast lookups figure shows pseudo-code build search on-demand cross-producting build datastucture called clter tok kisnumber packet celds set distinct pre cxes celd filter pre cxtable buildtable pre table celd crosssearch called arrival packet tok pre cxlookup pre cxtable cross-product hashlookup crossproducttable nil table find crst clter matching hashinsert crossproducttable insert clter return return figure pseudo code demand cross producting on-demand cross-producting greatly improve building time data structure storage cost fact treat cross-product table cache remove cross-products recently wehave discovered number optimizations incremental computation cross-product database clters added defer results paper earlier caching bective caching based cross-producting effective database figure imagine series web accesses internal site external network suppose external destinations accessed addresses correspond crossproduct terms net tcp-ack net full-header caching result distinct entries cache cross-producting cache entries examples lead hit rates cross-product cache standard header caches bene cts on-demand cross-producting validated actual packet traces plan future work lower bounds wehave grid-of-tries scheme works two-dimensional pre matches destination-source pairs requires multiple planes grid-of-tries solve problem general clters hand pure cross-producting fast require prohibitive amount memory on-demand cross-producting appears ber good caching solution guarantee worst case performance set pruning trees fast require prohibitive amount memory general case observations raise natural question schemes handle hundreds thousands arbitrary clters bounded memory fast worst-case search times fast scalable scheme exists completely arbitrary multi-dimensional clters general multidimensional range searching ranges dimensions requires logn worst-case time memory limited linear size notice lower bound dimensional case fast logn dimensional case special fast scalable solution lower bounds hold arithmetic model computation apply schemes based hashing repeated hashing scheme instance bers logw solution one-dimensional pre matching problem maximum pre length plausible general solutions based techniques pursue approach based repeated hashing generalized clter matching defer detailed description results paper summarize main results paragraph wewere devise hashing scheme takes hashes worst-case two-dimensional pre matching problem source-destination pre cxes called scheme rectangle search importantly wewere show matching lower bound hashes lower bound extended show dimension schemes based techniques require hashes cts nicely lower bound multidimensional range matching bottom line twodimensional cases special extensions higher dimensions slow lower bound apply schemes based grid-of-tries plausible schemes based emulated byschemes based hashing suppose trie scheme node reached string root trie search pointer location hash based scheme determine pointer hash table indexed complete path rough plausibility argument applies types trie searchschemes make suspect infeasible cnd ecient generalization gridof-tries higher dimensions theoretical arguments imply layer switching implemented real routers high speeds requiring infeasible amounts memory wedo practice clter databases small number completely general clters crewall clters vast majority clters restricted destination pre cxes destinationsource pre cxes clters celds completely speci ced assumption true leverage assumed distribution clters construct ecient combined scheme describe combined scheme weenvisage clter databases future consist large number pure destination pre clters standard forwarding fairly large number fully speci ced clters destination source port celds fully speci ced bandwidth reservations fairly large number destination-source pre clters multicast forwarding virtual private networks smaller number completely arbitrary clters port ranges crewalls dat worst case cgure types clters makes sense haveascheme optimize important special cases pure destination pre clters wehave previous sections grid-of-tries works optimally destination destination-source pre clters hand on-demand cross-producting handle arbitrary clters predictable speed cache misses makes sense combine twoschemes simplest combination divide clters sets crst set clters pure destination destination-source pre cxes handled single grid-oftries set remaining clters handled cross-producting simple scheme disadvantages common case destination destination-source pre cxes requires cross-producting search remaining clters ensure lower cost clter set cross-producting search requires destination source pre lookup grid-of-tries search wasteful combined scheme attempt terminate grid-of search common cases avoid redundant destination source lookups wehave fall back cross-producting akey idea required early termination concept clter overlap wesay clters overlap packet header matches suppose search cnd clter matches packet ifwe ensure clter database overlaps terminate search output cost clter search match progressively complex clters initially packet matches destinationonly clter overlap clter failing destination-source clter fails cross-product search matching pre remaining celds modify slightly grid-of-tries cross-producting algorithm combined scheme divide set clters sets allocate clters port celds crst set whichwe call 
port-free clter set clters allocated call port-full clter set combined scheme project port-full clters port-full clter create projection clter obtained wild-carding port entries order distinguish original portfree clters projected clters add bit port clter set port-free clters projection port-full clters reason adding projections port-full clters clters enhanced group destination source pre cxes database cross-producting avoid redundant computation destination source pre matches wenow build single grid-of-tries structure enhanced group port-free clter port associate additional bit called overlap bit set overlaps clter clter database bit false port-free clter compute storedfilter cost port-free clter destination source celds pre cxes celds packet start grid-of-tries search usual begin cnding matching pre bmp destination celd source trie bmp clter bmp port overlap output cost clter stop perform normal grid-of-tries search starting bmp initialize overlap bit overlap arrive node port-free clter stored update cost clter set overlap maxfoverlap overlapg search group ends overlap temporary variable cost clter non-nil output clter terminate search overlap cost clter variable nil initiate crossproducting search modify normal cross-producting search matching pre source address matching pre clters destination celd pre packet destination hard show modi ccation preserves correctness matching pre bmp destination celd bmp source pre node grid-of-tries search terminated claim bmp matching pre source celd clters destination celd compatible repeat matching pre computation destination source addresses perform pre computation remaining celds protocol type port numbers concatenate matching precx cross-product term hash cross-product table exists output clter stored search algorithm linear search port-full clters search cnishes add entry cross-product table recall fully speci ced clters celds full speci ced commonly reserving voice video bandwidth combination scheme allocate clters port-full set require cross-producting search clters greatly increase number cross-products reduce bectiveness cross-product cache assume destination source celds clters pre cxes port numbers wild cards ranges simple trickisto place clters set handled single hash celds search fall back cross-producting search match terminate match fully speci ced set precompute matching clter net result combined scheme process packets map destination clters havenooverlap clters time equal lookup memory accesses multibit process packets map destination-source clters overlap time equal lookups grid-of-tries memory accesses process packets map fully speci ced clters hash total memory accesses cnish clters port number celd lookups hash cross-product table total memory accesses cross-product cached cross-product table corresponds clters port-full fully speci ced sets hope small number crewall clters good caching performance remaining clters note combination schemes instance hardware scheme implement planes extended grid-of-trie search parallel extended grid-of-tries handle port number ranges clters port number ranges handled small additional content addressable memory cam implementation measurements implementation platform wechose mhz pentium system cost dollars running windows kbytes cache cache line size bytes results similar run comparable platforms alpha tool called vtune access dynamic instruction counts cache performance clock cycles short program segments evaluations gridof-tries scheme cross-producting cnish implementation combined scheme provide estimates performance combined scheme grid-of-tries implementation measurements report worst case time simple gridof-tries implementation process destination-source clters implementation multibit sampling bits time destination trie source started bit trie node bit trie nodes yields worst case memory accesses easily source bits time yield worst case memory accesses increases storage destination-source filters vtune mhz pentium measured worst case path taking nsec memory access time nsec clock tickinterval nsec numbers single lookup reported nsec roughly corresponds lookups destination-source clters appears optimal hard cnd lowest cost matching clter faster individual matching pre source destination addresses memory required clters mbytes time construct entire data structure seconds general filters built plane grid-of-tries handle general clters section fully speci ced port numbers layer databases started publically database pure destination pre cxes entries added entries specialize entries experiment publicly maeeast database pre cxes randomly chose destination pre cxes create clters pre chosen clters added whichwere form tcp tcp tcp source pre cxes chosen randomly set pre cxes destination pre maeeast clters generated number clters form varied clters generated eachchosen destination pre port numbers generated randomly table obtained distribution clters pure destination pre clters specialized made cve clters tcp clters cve tcp clters cve tcp clters original destination pre total adds twenty clters filters memory build time worst case search sec plane sec table planes grid-of-tries implementation measurements mhz pentium worst case time plane grid-of-tries search measured vtune usec plane total usec number plane slightly measured number single grid-of-tries search additional hash port number celds section cross-producting implementation measurements expect cross-producting small clter databases arbitrary port number ranges crewall database test cross-producting crewall clters generated based clter database sample crewall database create larger databases added similar clters base clter database maintaining ratio number distinct longest matching pre cxes celd total number pre cxes celd note longest matching pre source destination celds found byany technique amultibit trie approach port lookups implemented full arrays note cnal cross-product table main memory structures individual celds small database cache cnal cross-product table implemented array hash table simple cross-producting small clter sets case cnal table implemented array looked index concatenation indexes returned individual column lookups databases clters ondemand cross-producting essential on-demand crossproducting reduce memory cnal cross-product table hash table number memory average worst case time cross-product search filters kbytes nsec nsec on-demand on-demand table cross-producting implementation measurements mhz pentium worst case time measurement vtune based clock cycle counts ifl access delay fromthe cache nsec worst case clter lookup time array cross-product table nsec hashing on-demand cross-producting worst case harder evaluate hash function gave collisions weexpect on-demand cache hit rate high cworst case cgure shown hashing on-demand assumes hash collisions cache hit cross-product table crewall databases destination source addresses full addresses pre cxes case destination source column lookups single hash memory accesses needed longest matching pre assuming clock cycle hash function clter resolution special case pre cxes worst case nsec whichistwice fast general case nsec conclusions wehave algorithms packet cltering gigabit speeds grid-of-tries solution scalable linear storage fast worst case time equal twoip lookups nsec pentium destination-source clters clters implement virtual private networks multicast forwarding eciently grid-oftries solution extended handle general clters high lookup cost sec clters allowing port number ranges hand crossproducting solution fast lookup times nsec small clters predictable lookup 
times caching cross-products make storage manageable simple combined scheme grid-of-tries handle destination-source pure destination source clters weanticipate handle large majority clters packets matching clters terminate grid-of-tries search packets matching clter pure destination pre clter optimized terminate search destination trie address lookup fully speci ced clters telephony handled single extra hash cve celds finally remaining clters crewall clters handled on-demand crossproducting information initial grid-of-tries search prevent cross-producting step recomputing longest matching pre cxes destination source addresses based measurements individual components pentium estimate nsec lookup times packets map pure destination pre cxes nsec packets map destination-source clters nsec packets map fully speci ced clters nsec assuming hit cross-product cache packets map general clters hardware engines increased opportunities parallelism pipelining average packet size bits aworst case lookup time nsec million packets layer router gigabit link matching pre special case lowest cost matching clter surprising clter searchschemes generalizations pre searchschemes gridof-tries set pruning trees generalize trie schemes pre matching multidimensional range matching schemes generalize pre matching schemes based range matching rectangle search tuple search generalize binary search hash tables crossproducting generalization existing pre matching scheme specialized pre lookups future work wewould create clter lookup algorithms specialized important clter types grid-of-tries specialized dimensional clters benchmark clter databases compare lookup schemes hope trace-driven evaluation bectiveness on-demand cross-producting finally wehave made bort fast clter insertion issues bgp implementation instabilities add destination pre cxes order milliseconds rsvp reservations add clters order seconds importanttohave faster clter insertion algorithms work remains webelieve layer switching feasible high performance routers routers future forward based layer headers based celds routing header case applications qos routing firewalls virtual private networks large scale multicast require dexible form forwarding based multiple celds routing header techniques paper forwarding dexibility high performance acknowledgements observation protocol celd eliminated cases interest due hari adiseshu wewould hari initial discussions led gridof-tries scheme zubin dittta eatherton jon turner valuable discussions bailey pathfinder proceedings osdi bradner generation routers overview proc networld interop chapman zwicky building internet firewalls reilly associates chazelle lower bounds orthogonal range searching reporting case acm chazelle lower bounds orthogonal range searching arithmetic model acm cheswick bellovin firewalls internet security addison-wesley decasper dittia parulkar plattner router plugins software architecture generation routers proc acm sigcomm sep deering hinden internet protocol version ipv speci ccation rfc http fds internic net frfc frfc txt degermark brodnik carlsson pink small forwarding tables fast routing lookups proc acm sigcomm october digital electronics corporation dec alpha http fwww dec engler kaashoek dpf fast flexibible message demultiplexing dynamic code generation proceedings acm sigcomm august intel pentium processor pentium intel vtune performance measurement tool intel fdesign fperftool fvtune labovitz malan jahanian internet routing instability proc acm sigcomm october lakshman stiliadis high speed policy-based packet forwarding ecient multidimensional range matching proc acm sigcomm sept lampson srinivasan varghese lookups multiway multicolumn search proc infocom march mccanne jacobson berkeley path finder proc winter usenix mckeown izzard mekkittikul ellersick horowitz tinytera packet switch core ieee micro jan ffeb mcquillan layer switching data communications october merit ipma statistics nic merit newman minshall huston switching gigabit routers ieee communications magazine january nilsson karlsson fast address look-up internet routers proceedingsof ieee broadbandcommunications april partridge locality route caches nsf workshop internet statistics measurement analysis san diego usa february preparata shamos computational geometry introduction springer-verlag york samet design analysis spatial data structures addison-wesley suri varghese waldvogel srinivasan layer switching rectangle tuple search preparation srinivasan george varghese faster lookups controlled pre expansion proc acm sigmetrics june torrent systems http fwww torrent tsuchiya search algorithm table entries non-contiguous wildcarding unpublishedreport bellcore turner design gigabit atm switch proc sigcomm october waldvogel varghese turner plattner scalable high speed routing lookups proc sigcomm october zhang rsvp resource reservation protocol ieee networks magazine sept 
simulation-based comparisons tahoe reno sack tcp kevin fall sally floyd lawrence berkeley national laboratory cyclotron road berkeley kfall lbl gov floyd lbl gov abstract paper simulations explore benefits adding selective acknowledgments sack selective repeat tcp compare tahoe reno tcp common implementations tcp modified versions reno tcp version new-reno tcp modified version tcp sack avoids reno tcp performance problems multiple packets dropped window data version sack tcp conservative extension reno tcp modified sack option proposed internet engineering task force ietf describe congestion control algorithms simulated implementation sack tcp show selective acknowledgments required solve reno tcp performance problems multiple packets dropped absence selective acknowledgments impose limits tcp ultimate performance show selective acknowledgments tcp implementations constrained retransmit dropped packet round-trip time retransmit packets successfully delivered introduction paper illustrate benefits adding selective acknowledgment sack tcp current implementations tcp acknowledgment number field cumulative acknowledgment indicating tcp receiver received data byte selective acknowledgment option receivers additionally report non-sequential data received coupled selective retransmission policy implemented tcp senders work supported director office energy research scientific computing staff department energy contract de-ac considerable savings achieved transport protocols provided selective acknowledgment sack received data include netblt clz xtp sdw rdp hsv vmtp che proposals adding sack tcp bjz removed tcp rfcs request comments bbj pending research current proposal adding sack tcp mmfr simulations show sack option defined mmfr substantial benefit relative tcp sack simulations designed highlight performance differences tcp sack paper tahoe tcp refers tcp slow-start congestion avoidance fast retransmit algorithms implemented bsd tahoe tcp reno tcp refers tcp earlier algorithms fast recovery implemented bsd reno tcp sack reno tcp performance problems multiple packets dropped window data problems result await retransmission timer expiration reinitiating data flow situations problem occurs illustrated paper section reno performance problems consequence absence sack show implemented variant reno algorithms simulator called new-reno suggestion janey hoe hoe hoe new-reno avoids retransmit timeouts reno requiring sack new-reno perform tcp sack large number packets dropped window data purpose discussion new-reno clarify fundamental limitations absence sack absence sack reno new-reno senders retransmit dropped packet round-trip time senders recover multiple drops window data waiting retransmit timeout characteristic shared tahoe tcp limited retransmitting dropped packet round-trip time fundamental consequence absence sack sender choose strategies recover lost data retransmitting dropped packet round-trip time retransmitting packets successfully delivered reno new-reno strategy tahoe illustrate advantages tcp sack show simulations sack tcp sack implementation simulator sack tcp based conservative extension reno congestion control algorithms addition selective acknowledgments selective retransmission sack sender idea packets successfully delivered compared comparable protocols lacking sack information sender avoid unnecessary delays retransmissions resulting improved throughput addition sack tcp important made tcp time improve performance sections describe congestion control packet retransmission algorithms tahoe reno new-reno sack tcp section shows simulations tahoe reno new-reno sack tcp scenarios ranging packets dropped window data section shows trace reno tcp actual internet traffic showing performance problems reno sack theoretical interest finally section discusses future directions tcp selective acknowledgments section conclusions tahoe tcp modern tcp implementations number algorithms aimed controlling network congestion maintaining good user throughput early tcp implementations go-backmodel cumulative positive acknowledgment requiring retransmit timer expiration re-send data lost transport tcps minimize network congestion tahoe tcp implementation added number algorithms refinements earlier implementations algorithms include slow-start congestion avoidance fast retransmit jac refinements include modification round-trip time estimator set retransmission timeout values modifications jac ste fast retransmit algorithm special interest paper modified subsequent versions tcp fast retransmit receiving small number duplicate acknowledgments tcp segment dup acks data sender infers packet lost retransmits packet waiting retransmission timer expire leading higher channel utilization connection throughput reno tcp reno tcp implementation retained enhancements incorporated tahoe modified fast retransmit operation include fast recovery jac algorithm prevents communication path pipe empty fast retransmit avoiding slow-start re-fill single packet loss fast recovery operates assuming dup ack received represents single packet left pipe fast recovery tcp sender make intelligent estimates amount outstanding data fast recovery entered tcp sender receiving initial threshold dup acks threshold tcprexmtthresh generally set threshold dup acks received sender retransmits packet reduces congestion window half slow-starting performed tahoe tcp sender reno sender additional incoming dup acks clock subsequent outgoing packets reno sender usable window receiver advertised window sender congestion window maintained number dup acks reaches tcprexmtthresh tracks number duplicate acks fast recovery sender inflates window number dup acks received observation dup ack packet removed network cached receiver entering fast recovery retransmitting single packet sender effectively waits half window dup acks received sends packet additional dup ack received receipt ack data called recovery ack sender exits fast recovery setting fast recovery illustrated detail simulations section reno fast recovery algorithm optimized case single packet dropped window data reno sender retransmits dropped packet round-trip time reno significantly improves behavior tahoe tcp single packet dropped window data suffer performance problems multiple packets dropped window data illustrated simulations section dropped packets problem easily constructed simulator reno tcp connection large congestion window suffers burst packet losses slow-starting network drop-tail gateways gateways fail monitor average queue size new-reno tcp include new-reno tcp paper show simple change tcp makes avoid performance problems reno tcp addition sack time new-reno tcp explore fundamental limitations tcp performance absence sack new-reno tcp paper includes small change reno algorithm sender eliminates reno wait retransmit timer multiple packets lost window hoe change concerns sender behavior fast recovery partial ack received acknowledges packets outstanding start fast recovery period reno partial acks tcp fast recovery deflating usable window back size congestion window new-reno partial acks tcp fast recovery partial acks received fast recovery treated indication packet immediately acknowledged packet sequence space lost retransmitted multiple packets lost single window data new-reno recover retransmission timeout retransmitting lost packet round-trip time lost packets window retransmitted new-reno remains fast recovery data outstanding fast recovery initiated acknowledged implementations new-reno sack tcp simulator maxburst parameter sack tcp implementation maxburst parameter limits number packets response single incoming ack sender congestion window packets new-reno maxburst parameter set packets fast recovery packets fast recovery closely reproduce behavior reno tcp fast recovery maxburst parameter needed window packets leaving fast recovery sender prevented receiver advertised window sending packets 
fast recovery maxburst sender send large burst packets exiting fast recovery applies reno new-reno tcp lesser extent sack tcp tahoe tcp slow-start algorithm prevents bursts recovering packet loss bursts packets exiting fast recovery new-reno tcp illustrated section simulations packet drops bursts packets exiting fast recovery reno tcp illustrated flo hoe recommends additional change tcp fast recovery algorithms suggests data sender send packet dup acks received fast recovery flywheel ack data packets implemented newreno wanted minimal set reno needed avoid unnecessary retransmit timeouts sack tcp sack tcp implementation paper called sack simulator discussed flo flo sack option format mmfr mmfr sack option field number sack blocks sack block reports non-contiguous set data received queued block sack option required report data receiver recently received segment additional sack blocks repeat recently reported sack blocks mmfr simulations sack option assumed room sack blocks sack option timestamp option tcp extensions high performance bbj sack option room sack blocks mmfr sack option timestamp option tcp tcp extensions transactions bra tcp option space room sack blocks sack tcp implementation previous simulator steven mccanne sally floyd conform formats mmfr sack implementation major contributions kevin fall jamshid mahdavi matt mathis congestion control algorithms implemented sack tcp conservative extension reno congestion control algorithms increasing decreasing congestion window make minimal congestion control algorithms adding sack tcp change basic underlying congestion control algorithms sack tcp implementation preserves properties tahoe reno tcp robust presence out-of-order packets retransmit timeouts recovery method resort main difference sack tcp implementation reno tcp implementation behavior multiple packets dropped window data reno sack tcp implementation enters fast recovery data sender receives tcprexmtthresh duplicate acknowledgments sender retransmits packet cuts congestion window half fast recovery sack maintains variable called pipe represents estimated number packets outstanding path differs mechanisms reno implementation sender sends retransmitted data estimated number packets path congestion window variable pipe incremented sender sends packet retransmits packet decremented sender receives dup ack packet sack option reporting data received receiver pipe variable decouples decision send packet decision packet send sender maintains data structure scoreboard contributed jamshid mahdavi matt mathis remembers acknowledgments previous sack options sender allowed send packet retransmits packet list packets inferred missing receiver packets receiver advertised window sufficiently large sender sends packet retransmitted packet dropped sack implementation detects drop retransmit timeout retransmitting dropped packet slow-starting sender exits fast recovery recovery acknowledgment received acknowledging data outstanding fast recovery entered sack sender special handling partial acks acks received fast recovery advance acknowledgment number field tcp simulator simply works units packets units bytes segments data packets tcp connection constrained size note aggressive implementation decrement variable pipeby packet ack packet sack option received reporting receiver received out-of-order packet header sender fast recovery partial acks sender decrements pipe packets fast retransmit initiated pipe effectively decremented packet assumed dropped incremented packet retransmitted decrementing pipe packets partial ack received sense cheating partial ack represents packet left pipe succeeding partial acks pipe incremented retransmitted packet entered pipe decremented packet assumed dropped succeeding partial ack arrives fact represent packets left pipe original packet assumed dropped retransmitted packet sender decrementspipe packets partial acks sack sender recovers slowly slow-start maxburst parameter limits number packets response single incoming ack packet experimental necessarily recommended sack implementations number proposals tcp congestion control algorithms selective acknowledgments kes sack implementation simulator designed conservative extension reno congestion control algorithms makes minimum reno existing congestion control algorithms simulations section describes simulations scenarios packets dropped window data set scenarios run tahoe reno newreno sack tcp section section shows trace reno tcp traffic internet traffic measurements illustrating performance problems reno tcp sack section discusses future directions tcp sack tcp implementations scenarios dropped packet detected fast retransmit procedure source receives dup acks results tahoe simulations similar scenarios tahoe sender recovers reading sack code simulator boolean overhead parameter significantly complicates code concern simulator overhead parameter randomization added timing tcp connection simulations paper overhead parameter set implying randomization added fast retransmit slow-start number packets dropped window data connections larger congestion window tahoe delay slow-starting back half previous congestion window significant impact performance reno implementation sack optimal performance single packet dropped window data scenario figure dropped packets sender fast retransmit fast recovery succession unnecessarily reducing congestion window scenarios packet drops reno sender wait retransmit timer recover expected new-reno sack tcps recover scenarios wait retransmit timeout new-reno sack tcps simulations similar new-reno sender retransmit dropped packet round-trip time limitations new-reno relative sack tcp pronounced scenarios larger congestion windows larger number dropped packets window data case constraint retransmitting dropped packet round-trip time results substantial delay retransmitting dropped packets window addition sender limited receiver advertised window recovery period sender unable effectively bandwidth scenarios sack sender recovers good performance per-packet endto-end delay throughput simulation scenario rest section consists detailed description simulations figures simulations run simulator command test-sack readers interested text packet-by-packet description behavior tcp simulation mbps mbps figure simulation topology figure shows network simulations paper circle finite-buffer droptail gateway squares sending receivthis shown lbnl simulator test many-drops run command test-sack ing hosts links labeled bandwidth capacity delay simulation tcp connections connection shown figures connections limited data send included achieve desired pattern packet drops connection pattern packet drops changed simply changing number packets connections readers interested exact details simulation set-up referred files test-sack sack tcl simulator granularity tcp clock set msec giving round-trip time measurements accurate nearest msec simulations drop-tail gateways small buffers intended realistic scenarios realistic values buffer size intended simple scenario illustrating tcp congestion control algorithms simulations red random early detection gateways general avoid bursts packet drops characteristic drop-tail gateways based lbnl previous simulator tcpsim turn based real simulator kes simulator production tcp code pretend reproduce exact behavior specific implementations tcp flo simulator intended support exploration underlying tcp congestion error control algorithms including slow-start congestion avoidance fast retransmit fast recovery simulation results contained report recreated test-sack script supplied simplicity simulations shown paper data receiver sends ack data packet received simulations paper consist one-way traffic result acks compressed discarded path receiver back sender simulation set run thetest-sackscript includes simulations multiple connections two-way traffic data receivers send ack data packets received graphs simulations generated tracing packets entering departing 
graph -axis shows packet arrival departure time seconds -axis shows packet number packets numbered starting packet packet arrival departure marked square graph single packet passing experiencing appreciable queueing delay generate marks close graph single mark packets delayed dropped generate colinear marks constant packet number spaced queueing delay packets dropped due buffer overflow graph packet dropped returning ack packets received marked smaller dot packet loss figure shows tahoe reno new-reno sack tcp dropped packet figure shows tahoe requires slow-start recover packet drop reno new-reno sack tcp recover smoothly fast recovery rest section describes simulations figure detail figure tahoe tcp packets error sending tcp congestion window increases exponentially slow-start algorithm figure square packet arrives leaves congested gateway packet experiences queueing delay squares single mark queueing delay congested gateway increases due part competing traffic shown figure marks arrival departure diverge distance arrival departure marks corresponds queueing delay experienced packet end fourth non-overlapping window data router queue full causing packet dropped packets fourth window successfully delivered acks dropped simulations acks arrive sender increases window sends packets receiving ack packet sender receives additional acks packet receiver successful receipt packets duplicate ack sequence fourth ack packet meets duplicate ack threshold fast retransmission slow-start invoked addition slow-start threshold ssthresh reduced sending tcp resets congestion window retransmits packet receiver cached packets receiving retransmitted packet acknowledges packet ack packet sender increase congestion window continue transmissions packet transmitting window beginning packet sender reaches slow-start threshold enters congesthe slow-start threshold ssthresh dynamically-set indicating upper bound congestion window tcp sender switches slow-start congestion avoidance algorithm tion avoidance subsequent transmissions sender window increased roughly packet round-trip time expected figure reno tcp reno fast recovery algorithm optimal performance scenario sender congestion window reduced half incoming dup acks clock outgoing packets slow-start avoided reno operation figure identical tahoe fourth ack packet received sender acks packets comprise dup acks packet dup ack triggers retransmission packet puts sender fast recovery reduces congestion window slowstart threshold fast recovery receipt fourth dup ack brings usable window dup ack usable window reaches inflated window dup acks sender send packets receiving ack packet sender exits fast recovery continues congestion avoidance congestion window new-reno sack simulations figure show differences reno simulation packet drop packet number mod tahoe tcp packet number mod reno tcp packet number mod new-reno tcp packet number mod time sack tcp figure simulations dropped packet packet losses figure shows tahoe reno new-reno sack tcp dropped packets previous simulation tahoe recovers packet drops slow-start reno tcp recovers difficulties new-reno sack tcp recover smoothly quickly rest section describes simulations figure detail top figure figure shows tahoe tcp dropped packets response loss packet tahoe single loss case tahoe packets fact forgotten sender retransmitting packet retransmitting packet receiving dup acks sender receives ack packet sender slow-start opens window sends packets sender switches slow-start congestion avoidance sending packet reno sender forced wait retransmit timeout recover packets dropped window data figure reno tcp fast retransmit reno sender wait retransmit timeout recovers fast retransmit fast recovery times succession process cutting congestion window half successive round-trip times slows tcp connection considerably packet drops occur packets operation similar one-drop case loss packet implies dup acks generated packet dup acks sender send packets usable window dup ack received loss packet number dup acks packet received sender ack packet triggered receiver receiving retransmitted packet ack sender send packet dup acks triggered packets final dup ack triggered packet time ack packet received sender exits fast recovery congestion window reduced loss receipt dup ack packet sender begins fast retransmit sender retransmits packet reduces congestion window unable send additional data usable window usable window precisely packets dropped window data reno sender forced wait retransmit timeout congestion window packets fast recovery initiated congestion window packets receiver advertised window fast recovery initiated grows receipt sixth dup acks allowing sender send packets sender receives ack packet result receiver receiving retransmitted packet ack brings sender fast recovery congestion window ssthresh acks packets sender send ack packet packet pattern repeats round-trip times alternating single ack advancing sender window series acks advance expand sender window congestion avoidance figure new-reno tcp new-reno behavior similar reno sender receives ack packet ack partial ack new-reno retransmit packet immediately exit fast recovery dup ack counter reset increased number dup acks matching partial ack congestion window affected arrival dup acks packet sender sends packets ack packet sender exit fast recovery congestion window continue congestion avoidance figure sack tcp sack tcp behavior similar reno sender receives ack packet point protocol initializes pipe subtracts subsequent dup acks adds transmitted packets point ack packet arrives pipe ack packet partial ack causing pipe decremented sender congestion window packets additional dup acks packet minus retransmission packet sender send packets sender receives dup acks packet receipt packets allowing sender send packets ack received sender packet corresponds receiver receiving retransmitted packet brings sender fast recovery congestion window allowing packet acks packets sender send packets continue congestion avoidance packet number mod tahoe tcp packet number mod reno tcp packet number mod new-reno tcp packet number mod time sack tcp figure simulations dropped packets packet losses figure shows tahoe reno new-reno sack tcp dropped packets previous simulations tahoe recovers packet drops slow-start reno tcp hand experiences severe performance problems wait retransmit timer recover dropped packets new-reno sack tcp recover fairly smoothly rest section describes simulations figure detail top figure figure shows tahoe tcp dropped packets response loss packet tahoe single loss case packet loss case packets account sender retransmitting packet receiving dup acks sender receives ack packet sender slow-start opens window sends packets note packets time successfully received sender receives acks packet receipt resent packets acks data increases congestion window sender continues slow-start packet switches congestion avoidance figure shows reno tcp dropped packets packets dropped window data reno sender forced wait retransmit timeout reno operation figure generally similar reno drops additional packet drop dup acks packet thirteen dup acks sender send packet usable window retransmitting packet arrival ack packet reno exits fast recovery receiving additional acks re-enters fast recovery congestion window usable window arrival ack packet usable window grows sender unable send data 
packets unacknowledged ack packet brings sender fast recovery congestion window point ack packet arrives sender stalled packets acknowledged requires retransmission ack clock lost implying reno unable employ packets dropped window data reno sender forced wait retransmit timeout number packets dropped packets congestion window fast retransmit fast retransmit await retransmission timeout timeout packet expires causing retransmission putting sender slow-start ack packet corresponds arrival packet receiver sender continues congestion avoidance expected figure shows new-reno tcp dropped packets new-reno operation similar reno drops receipt ack packet receiving ack new-reno sender immediately retransmits packet sets usable window congestion window subsequent dup acks packet inflate usable window eleven allowing sender send packets partial ack acknowledges packet sender retransmit packet reduce usable window sender unable send additional data receipt fourth dup acks packet sender send packets usable window eleven ack packet brings sender fast recovery returns congestion window packets unacknowledged point sender send additional packets limited sending packets maxburst parameter arrival acks packets sender send packets sender continues congestion avoidance window figure shows sack tcp dropped packets sack tcp packet sending pattern similar reno packet drops dup ack packet received sender ack sack information indicating hole packet sending packets reno sends retransmits handling pipe similar sack tcp packet drops dup ack packet arrives sender pipe initialized retransmission packet accounted causing pipe ack packet arrives ack corresponds receiver receiving retransmitted packet sender reducepipeby send packets packet number mod tahoe tcp packet number mod reno tcp packet number mod new-reno tcp packet number mod time sack tcp figure simulations dropped packets acks acknowledge packet sack information indicating hole packets acks sender reduce pipe retransmit packet point holes remain filled sender send packets ack arrives shortly acknowledges packet hole packet partial ack causing pipe decremented allowing sender send packets acks packet arrive correspond receiver receiving packets acks sack information indicating hole packet remains filled sender retransmitted holes sack information sender continues sending packets ack received sender corresponds receiver receipt retransmission packet acknowledges packet brings sender fast recovery congestion window sender continues congestion avoidance packet losses figure shows tahoe reno new-reno sack tcp dropped packets previous simulations tahoe recovers packet drops slow-start previous simulation reno tcp experiences severe performance problems wait retransmit timer recover dropped packets new-reno requires roundtrip times recover retransmit dropped packets sack tcp sender recovers quickly smoothly differences new-reno sack tcp pronounced packets dropped window data rest section describes simulations figure detail top figure figure shows tahoe tcp dropped packets response loss packet tahoe single loss case transmission packets forgotten sender retransmitting packet retransmitting packet receiving dup acks sender receives ack packet sender slow-start opens window sends packets tahoe duplicates effort packet sender receives acks packet receipt resent packets acks data increases congestion window sender sends packets duplicating effort packet pair acks data duplicate correspond receiver receipt packets increase sender congestion window ack packet arrives increases congestion widow continues slowstart sender switches congestion avoidance sends packet continues congestion avoidance expected figure reno tcp sender forced wait retransmit timeout packets dropped single window data sender receives eleven dup acks packet retransmits packet send packets result receiving ninth eleventh dup acks ack packet brings sender fast recovery usable window set congestion window dup ack receiver receipt packets initiates fast retransmit fast recovery triggering retransmission packet reducing congestion window setting usable window packets unacknowledged sender proceed receives ack ack packet brings sender fast recovery bringing congestion window usable window case drops sender frozen unacknowledged packets exceeds congestion window ack clock lost sender await retransmission timer expiration proceed timer expires sender retransmits packet receives ack packet transmits timer expiration reno behaves similarly tahoe retransmits packets case packet transmitted cached receiver receiving acks packet continues congestion avoidance figure new-reno tcp new-reno operation similar reno drops receipt ack packet receiving ack sender immediately retransmits packet sets usable window congestion window subsequent dup acks packet inflate usable window ten allowing sender send packets partial ack acknowledges packet sender retransmit packet reduce usable window packet number mod tahoe tcp packet number mod reno tcp packet number mod new-reno tcp packet number mod time sack tcp figure simulations dropped packets sender unable send additional data receipt dup acks packet sender send packet usable window partial ack acknowledges packet sender retransmit packet reduce usable window sender unable send additional data receipt dup ack packet sender send packet usable window ack packet brings sender fast recovery returns congestion window packet unacknowledged point sender send additional packets limited sending maxburst parameter arrival ack packet sender send packets sender continues congestion avoidance window figure sack tcp sack tcp packet sending pattern similar reno packet drops dup ack packet received sender indicating hole packet dup ack packet holes packets sender retransmits packets result acks handling pipe similar sack tcp packet drops dup ack packet arrives sender pipe initialized retransmission packets accounted causing ofpipeto ack packet arrives partial ack receiver receiving retransmitted packet sender reduce pipe sack information indicating holes packets sender proceeds sending packets retransmitted dup ack packet corresponds receiver receiving packet sack information indicating holes packets sender notices retransmitted proceeds retransmitting short time ack packet arrives indicating holes packets ack packet arrives indicating hole packet acks reduces pipe allowing sender send packets retransmitted acks packet arrive correspond receiver receiving packets acks sack information indicating hole packet remains filled sender avoids retransmitting packet continues sending packets ack received sender corresponds receiver receipt retransmission packet acknowledges packet brings sender fast recovery congestion window sender continues congestion avoidance trace reno tcp tcp trace section actual internet traffic measurements exhibits behavior similar simulator shows poor performance reno sack multiple packets dropped window data tcp connection trace repeated packets dropped window data time forced wait retransmit timeout recover time sequence number time sequence number figure trace reno tcp trace figure shows tcp connection san diego supercomputer center sdsc san diego irixto brookhaven national laboratory long island irixthe tcp connection receives poor throughput repeated waits retransmit timeout graph enlargement section graph left blowup shows mark packet transmitted ack received enlargement shows data receiver delayed-ack algorithm sending single ack data packets result congestion avoidance phase data sender 
sends data packets ack packet received ack packet received sender increase congestion window packet data sender sends data packets receiving single ack packet time data sender receives ack acknowledging sequence number data sender sends packets sequence numbers packets dropped time data sender receives dup ack figure printed top dup ack executes fast retransmit retransmits packet receives ack packet point sender congestion window half large permit sender send highest packet sender waits retransmit timer expire retransmitting packet dropped original window data similar reno behavior illustrated simulator scenario tahoe give performance reno trace supplied vern paxson part work thesis vern reports collected tcp traces show behavior tcp traces fast retransmit retransmit timeout packet retransmitted retransmit timeout previously retransmitted tcp sender additional condition eliminates incidents tahoe reno traces retransmit timeout required simply retransmitted packet dropped vern tcp traces include reno tcp multiple packet drops unnecessary retransmit timeout future directions selective acknowledgments addition selective acknowledgments additional improvements tcp addition improving congestion control behavior multiple packets dropped window data explores tcp congestion control algorithms tcp sack bpsk shows sack explicit wireless loss notification result substantial performance improvements tcp lossy links researchers exploring sack coupled explicit notification non-congestion-related losses lossy environments satellite links sack option tcp protocol intelligent ways selective acknowledgments sender make intelligent response dup acks tcp implementations including shown paper simply ignore dup acks sack sender dup ack packet fact left pipe allowing sender send packet receiver advertised window permits sack sender packet left network allowing sender make informed guess dup ack receive giving precise information exact data received receiver order data received sack sender infer mistakenly assumed packet dropped rescind decision reduce congestion window effectively decoupling decisions send packet decisions packet send sack opens advances tcp congestion control algorithms sack implementation simulator improved robustness reordered packets fast recovery fast recovery sender receives sack packet sack block packet sack block repeating report packet sender implementation immediately retransmit packet sender wait acks indicating packet missing receiver give robustness reordered packets new-reno sack implementations simulator maxburst parameter limit potential burstiness sender window packets exiting fast recovery issue sender prevented sending packets fast recovery restrictions imposed receiver advertised window improved sack implementation maxburst parameter immediately leaving fast recovery comparable mechanism prevent bursts exiting fast recovery set congestion window number packets pipe set ssthresh congestion window slow-start quickly proposals necessarily original general discussions research community sack don precise attribution proposal increase congestion window back ssthresh conclusions paper explored fundamental restrictions imposed lack selective acknowledgments tcp examined tcp implementation incorporates selective acknowledgments reno tcp making minimal tcp underlying congestion control algorithms assume addition selective acknowledgments tcp open developments tcp protocol acknowledgements document written support mmfr current proposal adding sack option tcp draws discussions sack tcp wide range people hari balakrishnan bob braden janey hoe van jacobson jamshid mahdavi matt mathis vern paxson allyn romanow lixia zhang vern paxson tcp traces implementation sack tcp simulator large part matt mathis jamshid mahdavi bbj borman braden jacobson tcp extensions high performance request comments proposed standard rfc internet engineering task force obsoletes rfc braden jacobson tcp extensions long-delay paths request comments experimental rfc internet engineering task force october bjz braden jacobson zhang tcp extension high-speed paths request comments experimental rfc internet engineering task force october obsoleted rfc earlier versions note url ftp ftp lbl gov papers sacks december url ftp ftp lbl gov papers sacks march results essentially unchanged earlier results non-standard tcp implementations sender maximum congestion window assumed receiver advertised window bpsk balakrishnan padmanabhan seshan katz comparison mechanisms improving tcp performance wireless links sigcomm symposium communications architectures protocols aug bra braden tcp tcp extensions transactions functional specification request comments experimental rfc internet engineering task force july clark hoe start-up dynamics tcp congestion control avoidance schemes technical report jun presentation internet end-toend research group cited acknowledgement purposes che cheriton vmtp versatile message transaction protocol protocol specification request comments experimental rfc internet engineering task force february clz clark lambert zhang netblt bulk data transfer protocol request comments experimental rfc internet engineering task force march obsoletes rfc sally floyd van jacobson random early detection gateways congestion avoidance ieee acm transactions networking aug url http www-nrg lbl gov nrgpapers html flo sally floyd simulator tests technical report jul url http wwwnrg lbl gov nrg-papers html flo floyd issues tcp sack technical report mar url ftp ftp lbl gov papers issues flo floyd sack tcp sender congestion control algorithms implementation sack lbnl simulator viewgraphs technical report mar presentation tcp large windows working group ietf march url ftp ftp lbl gov talks sacks hoe hoe start-up dynamics tcp congestion control avoidance schemes jun master thesis mit hoe hoe improving start-up behavior congestion control scheme tcp sigcomm symposium communications architectures protocols aug hsv hinden sax velten reliable data protocol request comments experimental rfc internet engineering task force july updated rfc jac jacobson congestion avoidance control sigcomm symposium communications architectures protocols pages updated version ftp ftp lbl gov papers congavoid jac jacobson modified tcp congestion avoidance algorithm technical report apr end end-interest mailing list url ftp ftp lbl gov vanj apr txt kes keshav real network simulator technical report california berkeley berkeley california kes keshav packet-pair flow control technical report nov presentation internet end-to-end research group cited acknowledgement purposes steven mccanne sally floyd network simulator url http www-nrg lbl gov matthew mathis jamshid mahdavi forward acknowledgement refining tcp congestion control sigcomm symposium communications architectures protocols aug mmfr matthew mathis jamshid mahdavi sally floyd allyn romanow tcp selective acknowledgment options internet draft work progress sdw strayer dempsey weaver xtp xpress transfer protocol addison wesley reading ste richard stevens tcp illustrated volume protocols addison wesley 
tcp explicit congestion notification sally floyd lawrence berkeley laboratory cyclotron road berkeley floyd lbl gov abstract paper discusses explicit congestion notification ecn mechanisms tcp protocol part proposes guidelines tcp response ecn mechanisms source quench packets ecn fields packet headers simulations explore benefits drawbacks ecn tcp networks simulations red gateways modified set ecn bit packet header indication congestion reno-style tcp modified respond ecn packet drops indications congestion simulations show advantage ecn mechanisms avoiding unnecessary packet drops avoiding unnecessary delay packets low-bandwidth delay-sensitive tcp connections advantage ecn mechanisms networks generally lans effectiveness tcp retransmit timers limited coarse granularity tcp clock paper discusses implementation issues specific ecn mechanisms tcp networks introduction paper proposes guidelines tcp response ecn explicit congestion notification mechanisms explores effect performance ecn mechanisms tcp networks paper discusses implementation issues ecn mechanisms make specific recommendations ecn mechanisms tcp networks current tcp networks tcp relies packet drops indication congestion tcp source detects dropped packets receipt duplicate acknowledgements acks timeout retransmit timer responds dropped packet reducing congestion window tcp implementations respond icmp source quench work supported director office energy research scientific computing staff department energy contract de-ac messages source quench messages rarely part consume network bandwidth times congestion reliance packet drops indication congestion perfectly network routers main function route packets output port current routers tcp networks provision detection incipient congestion queue overflows packets dropped tcp source detects packet drop tcp source infers presence congestion network future routers developed mechanisms detection incipient congestion decbit scheme routers detect incipient congestion computing average queue size set ecn bit packet headers average queue size exceeds threshold recentlyproposed random early detection red gateways similar ability detect incipient congestion gateways mechanisms detecting incipient congestion queue overflows limited packet drops method informing sources congestion networks mechanisms detection incipient congestion ecn mechanisms notification congestion end nodes prevents unnecessary packet drops bulk-data connections user concerned arrival time packet data delays individual packets concern interactive traffic telnet traffic user sensitive delay individual packets low-bandwidth delay-sensitive tcp traffic unnecessary packet drops packet retransmissions result noticeable unnecessary delays user connections delays exacerbated coarse-granularity tcp timer delays source retransmission packet benefit ecn mechanisms ecn sources informed congestion quickly unambiguously source wait retransmit timer duplicate acks infer dropped packet bulk-data tcp connections delay retransmission individual packet generally issue bulk-data tcp connections wide-area environments congestion window generally sufficiently large dropped packet detected fairly promptly fast retransmit procedure cases dropped packet detected fast retransmit procedure ecn mechanisms improve bulk-data connection response congestion source delayed detecting dropped packet due small congestion control window coarse-grained tcp timer source lie idle delay combined global synchronization result substantial link idle time additional motivation exploration ecn mechanisms tcp networks concerns possibility tcp traffic traversing networks congestion control mechanisms atm networks current implementations tcp networks limited packet drops viable mechanism inform tcp sources congestion networks benefit addition tcp intelligent ecn-response methods case tcp traffic travels part path atmnetworks ecn mechanisms invoked edge atm network inform tcp sources congestion atm network ecn mechanisms inform tcp sources congestion independent congestion control mechanisms atm networks paper explores general advantages disadvantages ecn mechanisms tcp mechanisms make recommendations specific ecn mechanisms addition ecn field headers results paper intended qualitative quantitative clear ecn reduce packet delay low-bandwidth delay-sensitive tcp traffic extent benefit depends exact network topology traffic mix details relevant gateway transport congestion control algorithms simulations paper show ecn reduce packet delay quantify expected reduction packet delay network section discusses current ecn mechanisms source quench tcp networks section briefly discusses role router detecting incipient congestion section presents proposal guidelines tcp response ecn guidelines differ current network mechanisms section discusses application guidelines implementation reno-style tcp simulator sections present simulation results lan wan environments section discusses implications evaluation ecn mechanisms proposed modifications tcp gateway scheduling algorithms finally section discusses implementation issues ecn mechanisms tcp networks include comparisons source quench ecn fields packet headers possibilities incremental deployment ecn mechanisms tcp networks discussion tcp clock granularity discussion ip-level ecn mechanisms tcp traffic atm networks section presents conclusions open questions current ecn mechanisms section discuss briefly ecn mechanisms source quench messages decbit ecn bit fecn becn proposals atm networks purpose section describe current ecn mechanisms tcp networks includes detailed explanation inadequacies current implementations source quench section describe ecn mechanisms decbit congestion avoidance scheme partly motivate somewhat-different guidelines propose sections ecn tcp networks finally provide pointers discussions proposed ecn mechanisms literature icmp source quench messages ecn mechanisms tcp networks fact source quench rarely current internet router host send icmp source quench message receives datagrams rate fast processed rfc required routers generate source quenches ran buffers current draft requirements routers specifies router originate source quench messages router originate source quench messages limit rate generated draft source quench messages criticized consuming network bandwidth ineffective unfair contrast discussed section red gateways source quench messages control rate source quench messages generated increasing effectiveness fairness messages guidelines tcp response source quench predate tcp congestion control mechanisms fast retransmit fast recovery guidelines tcp implementations respond source quench triggering slow start retransmission timeout occurred bsd tcp implementations tcp source responds source quench reducing congestion control window initiating slow-start source quench signals dropped packet retransmit timer timeout fast retransmit procedure timeout recovery code source quench code case slow start threshold ssthresh ends set segments resulting slow reopening congestion window slow-start combined small slow start threshold makes source quench unattractive large-window tcp connections high-speed environments paper proposes alternate guidelines tcp response source quench decbit congestion avoidance scheme gateway congestion-notification bit packet headers provide feedback congestion network packet arrives gateway gateway calculates average queue length average queue size gateway exceeds gateway sets ecn bit packet header arriving packets source window flow control updates window roundtrip times half packets window ecn bit set congestion window decreased multiplicatively congestion window increased additively contrast decbit scheme ecn mechanism proposed paper single packet ecn bit set interpreted transportlevel source indication congestion wrm reports experiments osi testbed modified include congestion-notification bit proposed range ecn-based rate-based congestion control schemes proposed atm networks include proposals forward ecn fecn backward ecn becn introduction proposals found role router section discusses role router generating ecn messages ecn 
messages generated router boundary router atm network carries tcp traffic section considers networks red gateways gateway monitors average queue size congestion probabilistic algorithm choose arriving packets mark drop set ecn field packet header simulations red gateways ecn red gateways set ecn field packet header simulations red gateways ecn red gateways drop packet variants red gateways gateway drops packet packet arrives full queue add ecn mechanisms traditional drop-tail gateway gateway simply drops arriving packets queue buffer full drop-tail gateways dropping packet send source quench messages tcp source advocate adding ecn mechanisms drop-tail gateways investigate schemes paper ecn mechanisms added gateway makes sense add time mechanisms monitor average queue size ecn mechanisms benefit gateway notifies connections incipient congestion queue overflows approximation red gateways mark drop percentage arriving packets exact percentage arriving packets marked control average queue size long run lan environment tcp connection increases congestion window rapidly non-ecn gateway drop significant fraction arriving packets control congestion red gateways fifo queue fraction bulk-data packets dropped control congestion red gateway drops fraction telnet packets current routers generally single queue output port future routers separate queues separate classes traffic bcs case ecn mechanisms apply separately queue discussed section affect motivations ecn mechanisms guidelines tcp response ecn section explain guidelines tcp response ecn guidelines differ tcp current response source quench messages response transport protocols decbit congestion notification bit guidelines provide receipt single ecn message serves notification congestion tcp source time guidelines ensure tcp source respond ecn messages frequently guidelines tcp response ecn similar suggested gateway send source quench messages queue size exceeds threshold longer time scales response dropped packet indication congestion smaller time scales round trip times tcp response ecn conservative response dropped packet indication congestion tahoe reno implementations tcp packet dropped tcp source stops sending time period order round trip time half round trip time reno implementations allowing network queues dissipate delay response ecn queue overflow tcp receipt single ecn single source quench packet single packet ecn bit set trigger response congestion unlike decbit congestion control scheme source responds congestion half packets window ecn bit set decision single ecn message trigger response congestion requires minimum overhead addition gateway set ecn field arriving packet average queue size high gateway probabilistic algorithms inform sources congestion probability connection notified congestion proportional connection share bandwidth congested gateway probabilistic algorithms reduce global synchronization improve fairness tcp react ecn roundtrip time tcp source ignore succeeding ecns source reacted previous ecn dropped packet roundtrip time means immediately reacting ecn tcp source receives duplicate acks indicating dropped packet tcp source repeat reduction congestion window packet dropped source reduced window response ecn tcp follow existing algorithms sending data packets response incoming acks response ecn trigger sending retransmitted data packets tcp follow normal procedure timeout retransmit timer retransmit timer timeout tcp source slow-start retransmit dropped packet tcp source decrease slow-start threshold ssthresh decreased roundtrip time implementing ecn simulator section describe implementation tcp response ecn simulator implementation ecn made version tcp incorporates fast recovery congestion control algorithm reno tcp -reno bsd tcp slowstart congestion avoidance fast retransmit algorithms earlier tahoe tcp -tahoe bsd tcp simulations paper red gateways option set ecn bit packet header dropping packet indication congestion buffer overflowed tcp receiver receives data packet ecn bit set packet header receiver sets ecn bit outgoing ack packet briefly describe slow-start congestion avoidance fast retransmit fast recovery algorithms tcp phases windowadjustment algorithm connection begins slowstart phase current congestion window cwnd doubled roundtrip time congestion window reaches slow-start threshold ssthresh congestion-avoidance phase entered congestion window increased roughly packet roundtrip time congestion window allowed increase receiver advertised window refer maximum window addition retransmit timers detect lost packets source fast retransmit procedure discover packet loss duplicate ack packets received acknowledging previously-acknowledged data packet source infers packet dropped tahoe version tcp source reacts packet loss setting slow start threshold half congestion window decreasing congestion window packet entering slow-start phase contrast reno fast recovery algorithm tcp source slow-start inferring packet dropped tcp source effectively waits half round trip time halves congestion window source retransmits dropped packet incoming duplicate acks clock additional outgoing packets fast recovery algorithm detail description fast recovery algorithm good complete publicly-available description algorithm aware caution readers earlier printings prior distinguish fast retransmit fast recovery algorithms description window increase algorithm congestion guidelines previous section receiving ecn message source quench message ack packet ecn bit set time responses congestion made roughly roundtrip time tcp source halves congestion window cwnd slow-start threshold ssthresh loss incoming acks clock outgoing packets short pause recover severe short-term congestion tcp source doesn slow-start tcp source doesn respond succeeding ecns packets outstanding time acked receiving duplicate acks time responses congestion made roughly roundtrip time tcp source fast retransmit fast recovery procedures source won respond ecn set duplicate acks packets outstanding time acked discusses problems result fast retransmit procedure invoked window data receiving duplicate acks responding ecn packets outstanding time response ecn acked source doesn reduce ssthresh cwnd recently source retransmits dropped packet source reno fast recovery procedure incoming duplicate acks clock outgoing packets simulation results ecn lans section discusses results simulations tcp ecn local-area networks simulation scenario consists bulk-data tcp connections ten telnet connections lan congested gateway compare sets simulations set drop-tail gateways set red gateways rely packet drops notification congestion set simulations ecn-capable red gateways tcp implementations simulations show networks ecn throughput bulk-data connections high telnet packet delay low buffer size tcp clock granularity tcp window size red gateway variation simulations avoidance phase earlier printings congestion window incremented cwnd small fraction segment size time ack received inclusion small fraction segment size error reno bsd implementations emulated future tcp implementations ecn robust delivering essentially optimal performance wide range conditions simulations red gateways ecn results depend simulation parameters simulations telnet packet delay optimal disastrous simulations coarse tcp clock granularity aggregate throughput low telnet packet delay worst simulations drop-tailgateways ecn general simulations show ecn performance sensitive network parameters ecn improve delay throughput simulations show benefits ecn simulations show proper conditions reasonable performance ecn senders gateway receiver mbps usec mbps usec figure lan simulation scenario lan simulation scenario simulation scenario 
figure consists bulk-data tcp connections ten telnet connections sources feeding single congested link simulations range switch buffer sizes window sizes gateway variations tcp clock granularities simulations run buffer sizes simulations red gateways minimum threshold average queue size set -th buffer size maximum threshold set times minimum threshold red gateways drop arriving packets average queue size exceeds maximum threshold tcp simulations reno-style congestion control slow-start fast retransmit fast recovery modified previous section respond ecn set simulations tcp clock granularity set msec simulation scenario reduces wait retransmit timer time avoiding false timeouts set simulations tcp clock granularity set msec closer values msec current tcp implementations maximum tcp window ranges default parameters set packet tcp connection measurements made roundtrip time retransmit timer set seconds tcp clock granularity simulations ecn worstcase telnet delay determined initial retransmit timer telnet connections send -byte packets random intervals drawn tcplib distribution ten telnet connections send hundred -byte data packets -second simulation bulk-data connections send -byte data packets start times bulk-data connections staggered -second simulation figures graphs illustrate throughput delay performance simulations columns figures show simulations droptail gateways red gateways ecn red gateways ecn graphs top row show effective throughput bulk-data connections fraction total bandwidth bits row graphs show bulk-data connection receives smallest throughput -second simulation row graphs shows telnet packet highest one-way telnet delay seconds oneway delay delay time packet transmitted source packet received receiver fourth row shows average one-way telnet delay row shows fraction telnet packets one-way delay greater msec roundtrip packet delay greater msec noticeable telnet user queue sizes propagation delays simulations one-way packet delay greater msec packet dropped gateway graph -axis shows switch buffer size lines graph correspond simulation sets maximum tcp windows byte-based packet-based gateways unrealistic byte-based gateways queue size measured bytes packets small -byte telnet packet arrive full buffer larger -byte ftp packet packet-based gateways queue size measured packets packet-based red gateways gateway decision drop mark packet independent packet size bytes byte-based red gateways probability packet dropped marked proportional packet size bytes ran simulations set parameters result simulations marked graph lines show averages simulations results lan simulations figures show simulations red ecn effective throughput high telnet packet delay low ecn network performance significantly affected tcp clock granularity level congestion function tcp maximum window red gateway dropping policy sensitive packet size simulations figure tcp clock granularity set msec throughput high sets simulations drop-tail red ecn red ecn simulations packet-based drop-tail red gateways ecn telnet packets occasionally dropped leading occasional telnet packets high delay simulations figure red ecn smaller switch buffers tcp clock granularity msec small tcp windows throughput bulk-data connections suffers coarse tcp clock granularity number connections waiting retransmit timer expire resulting link idle time simulations drop-tail gateways small tcp windows packets dropped gateway simulations drop-tail gateways larger tcp windows tcp clock granularity msec throughput high graph smallest bulk-data throughput shows unfairness smaller buffer sizes throughput smallest bulk-data connections optimal note drop-tail gateway buffer size directly compared red gateway buffer size comparison droptail gateway red gateway similar average queue size simulations show delay small telnet packets lower byte-based gateways byte-based gateways easy implement simulator typical current gateways addition low-throughput delay-sensitive interactive traffic size individual packets similar size bulk-data packets byte-based gateways improve performance interactive traffic drop tail tcp clock msec switch buffer size bulk-data throughput byte-based windows packet-based windows byte-based windows packet-based windows red ecn tcp clock msec switch buffer size bulk-data throughput red ecn tcp clock msec switch buffer size bulk-data throughput drop tail tcp clock msec switch buffer size smallest bulk-data throughput ooo red ecn tcp clock msec switch buffer size smallest bulk-data throughput xxx xxoo ooo red ecn tcp clock msec switch buffer size smallest bulk-data throughput drop tail tcp clock msec switch buffer size highest telnet delay seconds red ecn tcp clock msec switch buffer size highest telnet delay seconds xxx xxxoo red ecn tcp clock msec switch buffer size highest telnet delay seconds drop tail tcp clock msec switch buffer size average telnet delay seconds ooo ooo red ecn tcp clock msec switch buffer size average telnet delay seconds xxo red ecn tcp clock msec switch buffer size average telnet delay seconds drop tail tcp clock msec switch buffer size fraction packets high delay ooo ooo ooo red ecn tcp clock msec switch buffer size fraction packets high delay xxx xxxooo red ecn tcp clock msec switch buffer size fraction packets high delay figure lan simulations msec tcp clock drop tail tcp clock msec switch buffer size bulk-data throughput xoo byte-based windows packet-based windows byte-based windows packet-based windows red ecn tcp clock msec switch buffer size bulk-data throughput xxx ooo red ecn tcp clock msec switch buffer size bulk-data throughput xooo drop tail tcp clock msec switch buffer size smallest bulk-data throughput ooo ooo ooo red ecn tcp clock msec switch buffer size smallest bulk-data throughput xxx ooo ooo red ecn tcp clock msec switch buffer size smallest bulk-data throughput ooo drop tail tcp clock msec switch buffer size highest telnet delay seconds red ecn tcp clock msec switch buffer size highest telnet delay seconds xxxooo red ecn tcp clock msec switch buffer size highest telnet delay seconds drop tail tcp clock msec switch buffer size average telnet delay seconds ooo oooo red ecn tcp clock msec switch buffer size average telnet delay seconds xxxx xxx red ecn tcp clock msec switch buffer size average telnet delay seconds drop tail tcp clock msec switch buffer size fraction packets high delay ooo red ecn tcp clock msec switch buffer size fraction packets high delay xxxx xxx xxxoo ooo red ecn tcp clock msec switch buffer size fraction packets high delay figure lan simulations msec tcp clock simulation results ecn wans section results simulations ecn non-ecn gateways wide-area environment throughput bulk-data traffic similar simulations drop-tail gateways red gateways ecn red gateways ecn packet delay low-bandwidth telnet traffic significantly lower simulations ecn gateway msec mbps msec msec msec msec msec msec msec gateway mbps msec mbps figure simulation scenario wide-area traffic wan simulation scenario simulation network figure two-way traffic consisting sixteen telnet 
connections direction occasional ftp connections limited amount data transfer packets number bulk-data connections unlimited amount data transfer simulations figure moderate traffic load bulk-data tcp connections direction simulations figure heavy traffic load twenty bulkdata tcp connections direction intended realistic scenario simply intended illustrate performance non-ecn gateways depends part level congestion roundtrip propagation delays range msec -byte packets bandwidth-delay product single connection ranges packets simulation run seconds red gateways simulation minimum maximum thresholds average queue size previous section gateways intended widearea traffic time constant low-pass filter calculate average queue size increased weight exponential weighted moving average graphs figures show sets simulations previous section row graphs shows aggregate throughput bulk-data connections source left receiver row graphs shows bulk-data connection smallest throughput fourth rows graphs show worst-case average telnet packet delay telnet packets left row graphs shows average throughput shorter data connections limited data send note graphs -axis figure figure simulations tcp connections msec tcp clock granularity simulations tcp connections msec tcp clock granularity give similar results shown results wan simulations results wan simulations show throughput similar sets simulations packet delay low-bandwidth interactive traffic simulations ecn results fairly similar simulation sets ecn drop tail gateways red gateways construct wan scenarios lan simulations earlier paper illustrate advantages red gateways ecn drop-tail gateways case scenarios exhibit global synchronization unfairness drop-tail gateways note drop tail gateways red gateways ecn telnet packet delay worse larger number bulk-data connections tcp connections larger windows simulations increased demand increased number packet drops required non-ecn gateway control congestion drop-tail gateways throughput delay performance good simulations smaller number bulk-data connections smaller windows byte-based gateways case level congestion fairly low wide-area traffic cases source wait retransmit timer detect lost packet tcp clock granularity msec major problem additional delay wait retransmit timer significant impact perforfilter calculate average queue size decreased drop tail tcp clock msec switch buffer size bulk-data throughput xxx xxx xxx ooo ooo byte-based windows packet-based windows byte-based windows packet-based windows red ecn tcp clock msec switch buffer size bulk-data throughput xxx xxx ooo ooo red ecn tcp clock msec switch buffer size bulk-data throughput xxx xxx xxx ooo oooo drop tail tcp clock msec switch buffer size smallest bulk-data throughput xxx xxx xxx red ecn tcp clock msec switch buffer size smallest bulk-data throughput xxx xxx oooo red ecn tcp clock msec switch buffer size smallest bulk-data throughput xxx xxxx ooo drop tail tcp clock msec switch buffer size highest telnet delay seconds red ecn tcp clock msec switch buffer size highest telnet delay seconds red ecn tcp clock msec switch buffer size highest telnet delay seconds drop tail tcp clock msec switch buffer size average telnet delay seconds xxx xxx xxx ooo ooo red ecn tcp clock msec switch buffer size average telnet delay seconds xxxxoo ooo red ecn tcp clock msec switch buffer size average telnet delay seconds drop tail tcp clock msec switch buffer size throughput short data conns xxx xxx ooo ooo ooo oooo red ecn tcp clock msec switch buffer size throughput short data conns xxx xxx xxx xxx ooo ooo oooo red ecn tcp clock msec switch buffer size throughput short data conns xxx xxx oooo figure wan simulations msec tcp clock moderate number bulk-data connections drop tail tcp clock msec switch buffer size bulk-data throughput xxxxx ooo ooo ooo byte-based windows packet-based windows byte-based windows packet-based windows red ecn tcp clock msec switch buffer size bulk-data throughput xxx xxxx xxx xxx ooo oooo red ecn tcp clock msec switch buffer size bulk-data throughput xxx xxx xxx ooo ooo drop tail tcp clock msec switch buffer size smallest bulk-data throughput xxx xxx ooo red ecn tcp clock msec switch buffer size smallest bulk-data throughput xxx ooo red ecn tcp clock msec switch buffer size smallest bulk-data throughput xxx xxx xxx ooo ooo ooo ooo drop tail tcp clock msec switch buffer size highest telnet delay seconds xxx xxx xxx red ecn tcp clock msec switch buffer size highest telnet delay seconds red ecn tcp clock msec switch buffer size highest telnet delay seconds drop tail tcp clock msec switch buffer size average telnet delay seconds red ecn tcp clock msec switch buffer size average telnet delay seconds xxx ooo ooo ooo red ecn tcp clock msec switch buffer size average telnet delay seconds drop tail tcp clock msec switch buffer size throughput short data conns xxxx xxxx xxx xxxx xxx xxxooo oooo ooo red ecn tcp clock msec switch buffer size throughput short data conns xxxx xxx xxx ooo red ecn tcp clock msec switch buffer size throughput short data conns xxxx xxxx ooo ooo ooo figure wan simulations msec tcp clock large number bulk-data connections mance case simulations msec tcp clocks similar msec tcp clocks advantages disadvantages ecn section discuss advantages disadvantages ecn current internet environment proposed modifications environment discussed introduction advantages ecn include reduction packet drops packet delay low-bandwidth delay-sensitive tcp traffic prompt notification end nodes network congestion disadvantages ecn disadvantages potential problems ecn concern non-compliant ecn connections potential loss ecn messages network non-compliant tcp connection set ecn field ecn-capable ignore ecn notifications non-compliant connections ignore source quench messages network packet drops congestion notification non-compliant connection refrain making window decreases response packet drops non-compliant connection interested reliable delivery ignore packet drops completely absence monitoring controls non-compliant connection congestion problems ecn non-ecn environment problem ecn messages counterpart packet drops ecn message source quench message tcp ack packet ecn field set dropped network congestion notification fail reach end node source quench messages ecn fields packet headers guarantee tcp source receive notification congestion red gateways gateway rely source respond congestion notification gateway continue set ecn field randomly-chosen packets long congestion persists gateway addition gateway implementing red algorithms drop high fraction packets occasional loss ecn message problem ecn versions tcp simulations paper reno-style tcp algorithms modified suggested paper respond ecn messages section discuss implications ecn proposed modifications tcp proposed modification tcp addition selective acknowledgements reduce tcp reliance retransmit timer multiple packets dropped roundtrip time improve robustness response bulkdata tcp connections packet drops indication congestion reduce ability ecn mechanisms 
reduce packet delay low-bandwidth delay-sensitive tcp connections proposed modifications tcp bop tcp source detect incipient congestion traffic dynamics connection traffic stream network internet admissions control tcp source completely prevent network dropping packets improved detection tcp incipient congestion tcp source reduce congestion reduce number packets dropped possibility improved congestion detection end nodes eliminate improved congestion detection gateways absence prior information fixed propagation delay path end nodes distinguish propagation delay persistent queueing delay queueing delay existed connection started persisted duration connection delay-bandwidth product network connections increases buffer capacity gateways increase increasingly important large buffers persistent large queues detection persistent large queues appropriately gateway notification end nodes congestion requires packet drops ecn proposed modifications tcp decrease number packets dropped gateways result buffer overflows modifications eliminate form congestion notification gateways end nodes modifications tcp newer end-to-end congestion avoidance mechanisms significantly reduce usefulness ecn ecn proposed modifications router scheduling algorithms future networks introduction priority-based scheduling fairqueueing-based scheduling gateways complicate traffic dynamics tcp traffic future networks proposed ipng header flow label -bit traffic class field identifying classes flow-controlled tcp traffic including classes unattended data transfer attended data transfer ftp interactive traffic telnet interactive control traffic snmp flow labels facilitate gateways separate queues scheduling algorithms traffic classes bcs separate traffic class interactive traffic reduce packet drops traffic periods low demand interactive traffic attended data transfer interactive traffic notification congestion gateways continue required ecn mechanisms improve promptness robustness congestion notification data transfer connections reduce unnecessary packet drops connections interactive traffic class difficult predict future internet congestion control environment precise advantages disadvantages ecn mechanisms environment basic advantages ecn mechanisms reducing unnecessary packet drops low-bandwidth interactive traffic speeding notification congestion bulk data connections remain heterogeneous internet routers find ecn mechanisms ecn-capable tcp connections ecn mechanisms required routers implementation issues source quench messages ecn fields packet headers guidelines paper response tcp sources ecn messages orthogonal question mechanisms delivering congestion notification source section compare mechanisms source quench messages ecn fields packet headers advantage ecn fields packet headers ecn field places additional load network times congestion drop-tail router send source quench message packet dropped router overhead source quench traffic times congestion significant problem intelligent gateway mechanisms red gateways limit overhead source quench traffic addition environments lans overhead source quench messages limited small number hops return paths source quench messages justifiable advantage source quench messages forms backward ecn forward ecn mechanisms ecn fields packet headers source quench messages notification congestion arrives source quickly explored dynamics backward ecn mechanisms source quench simulations promptness notification congestion advantage congestion control schemes practical advantage source quench messages source quench messages immediately networks modified tcp implementations response source quench messages proposed paper ecn field tcp networks depend presence ecn field ipng headers evidence sufficiently compelling motivate addition years headers fully deployed mentioned source quench messages tcp acknowledgement packets ecn field set dropped gateway result tcp source node receive congestion notification network drops data packet ecn bit set tcp source infer congestion detects dropped data packet network drops ack packet ecn bit set tcp source receives ack packet ecn bit set acknowledges subsequent data packet tcp source receive notification congestion source quench messages ecn fields ensure reliable delivery congestion notification incremental deployment ecncapable tcp concern ecn fields packet headers incremental deployment ecn-capable tcp implementations gateway sets ecn field packet header gateway transport-level protocol capable responding appropriately ecn field bits bit transport protocol respond ecn bit congestion ecn field bit functions combined single bit ecn field consists single bit ecncapable transport protocol non-ecn transport protocol congestion notification packets transport-level sources capable ecn response ecn field set default packets transport-level sources capable ecn response ecn field set non-ecn-capable gateways ignore ecn field simply dropping packets congestion ecn-capable gateways packets ecn field transport protocol ecn-capable set ecn field packets times congestion arriving packets ecn field ecncapable gateway packet non-ecn-capable transport protocol ecn field set previous gateway case gateway wanted notify tcp source congestion gateway drop packet method incremental deployment single-bit ecn field packets ecn-capable transport protocols packet dropped router attempting set ecn bit happen packets pass multiple congested gateways gateways choose packet notifying source congestion ecn fields deployed heterogeneous environment tcp implementations ecn-capable routers procedures setting ecn field note description single-bit ecn field assumes tcp connection one-way traffic data packets travel direction ack packets travel tcp connection two-way data transfer bit needed ecn field additional mechanism needed return indication congestion receiver source concern incremental deployment exists source quench messages gateway source quench messages gateway tcp implementation implementation fairly drastic response source quench messages newer implementation responses recommended paper case problem older implementations ignore source quench messages back long response source quench message incentive users upgrade newer tcp implementations environment routers source quench messages improving tcp clock granularity simulations section advantages ecn mechanisms tcp networks pronounced lan traffic tcp implementations limited coarse-granularity tcp clock coarse-grained tcp clock limits granularity tcp measurements current roundtrip times determine retransmit timer simulation results paper results argue favor improving granularity tcp clocks hardware considerations tcp designers set tcp clock granularity optimal obvious optimal clear tcp clock granularity msec slightly smaller current networks tcp clock granularity msec current tcp implementations current algorithms setting tcp retransmit timer coarse granularity tcp clock deliberately low-pass filter filter common traffic variations filtering implicitly accounts common traffic dynamics interactions local long haul traffic changing arbitrarily-fine-grained tcp clock considerably smaller msec remove filtering resulting false retransmits scenarios finegrained tcp clock filtering replaced substantially sophisticated estimation process addition ecn mechanisms tcp networks advantage reducing importance tcp clock granularity increasing general robustness network tcp atm investigation ecn paper concerns tcp networks proposals ecn atm networks congestion control strategies inside atm networks scenario tcp traffic part path consist atm networks atm network mechanisms inform tcp connections congestion moment viable mechanism atm network drop tcp packets inside boundaries atm network ip-level ecn mechanisms source quench ecn fields packet headers atm networks inform tcp sources congestion atm networks invoke mechanisms boundary atm networks frame segmentation reassembly occur tcp network tcp sources ecncapable atm boundary router drop tcp packets congestion non-ecn-capable tcp sources invoke ecn mechanisms packets ecn-capable tcp sources conclusions future 
work proposed specific guidelines tcp response source quench messages ecn mechanisms propose guidelines modify tcp response source quench messages tcp implementations clearlydefined response source quench messages networks atm lans source quench messages controlled notification congestion tcp connections traversing network wide-area network overhead source quench messages makes problematic logistical difficulties adding ecn fields packet headers makes ecn fields problematic proposed ipng packet header space allocated ecn field clear ipng options minimum length octets place ecn field simulations paper suggest ecn mechanisms give clear modest benefit tcp networks research preliminary investigation advantages disadvantages ecn mechanisms tcp networks main advantage ecn mechanisms avoiding unnecessary packet drops avoiding unnecessary delay packets low-bandwidth delaysensitive tcp connections advantage pronounced highly-congested network high frequency packet drops required control congestion advantage ecn mechanisms networks generally lans effectiveness tcp retransmit timers limited coarse granularity tcp clock ecn congestion notification promptly received tcp source connection remain idle waiting tcp retransmit timer expire packet dropped extent over-coarse granularity tcp clock corrected tcp retransmit timer algorithms suitably modified ecn mechanisms reducing number packet drops reduces dependence retransmit timer disadvantage ecn mechanisms discussed earlier paper ecn messages source quench messages tcp ack packets ecn field set dropped network reaching tcp source tcp connection packet drops reliable slow indication congestion preliminary simulations wide-area scenario two-way traffic multiple congested gateways drop-tail gateways ecncapable red gateways show performance problems dropped ecn messages addition number dropped ecn messages small network ecn mechanisms red-style gateways acknowledgements work benefited ongoing discussions van jacobson vern paxson allyn romanow curtis villamizar perceptive anonymous reviewers helpful feedback work motivated part discussions members traffic management working group atm forum almquist requirements routers working draft ietf requiretxt april bcs braden clark shenker integrated services internet architecture overview request comments rfc ietf june braden postel requirements internet gateways request comments standard rfc ietf june bop brakmo malley peterson tcp vegas techniques congestion detection avoidance proceedings sigcomm danzig jamin tcplib library tcp internetwork traffic characteristics report cs-sys- computer science department southern california ftp excalibur usc pub jamin tcplib tcplib tar floyd link-sharing resource management models packet networks submitted ieee acm transactions networking anonymous ftp ftp lbl gov papers link september floyd tcp successive fast retransmits technical report october anonymous ftp ftp lbl gov papers fastretrans floyd jacobson random early detection gateways congestion avoidance ieee acm transactions networking august hinden generation overview ietf internet draft work progress october jacobson congestion avoidance control proceedings sigcomm august updated version paper anonymous ftp ftp lbl gov congavoid newman traffic management atm local area networks ieee communications magazine vol august prue postel host source quench request comments rfc july romanow floyd dynamics tcp traffic atm networks proceedings sigcomm august ramakrishnan jain binary feedback scheme congestion avoidance computer networks acm transactions computer systems vol stevens tcp illustrated volume addison-wesley reading villamizar song high performance tcp ansnet submitted computer communications review september wang crowcroft congestion control scheme slow start search tri-s acm computer communication review january wang crowcroft eliminating periodic packet losses -tahoe bsd tcp congestion control algorithm acm computer communication review april wrm wilder ramakrishnan mankin dynamics congestion control avoidance two-way traffic osi testbed acm computer communications review april 
core-stateless fair queueing achieving approximately fair bandwidth allocations high speed networks ion stoica cmu istoica cmu scott shenker xeroxparc shenker parc xerox hui zhang cmu hzhang cmu abstract router mechanisms designed achieve fair bandwidth allocations likefair queueing desirable properties congestion control internet mechanisms maintain state manage bers perform packet scheduling dow basis complexitymay prevent frombeing cost-e bectively implemented widely deployed paper propose architecture signi ccantly reduces implementation complexityyet achieves approximately fair bandwidth allocations apply approachtoanisland routers contiguous region network distinguish edge routers core routers edge routers maintain dow state estimate incoming rate dow insert label packet header based estimate core routers maintain dow state fifo packet scheduling augmented probabilistic dropping algorithm packet labels estimate aggregate tra router call scheme core-stateless fair queueing present simulations analysis performance approach discuss alternate approach introduction central tenet internet architecture congestion control achieved end-host algorithms starting nagle researchers observed end-to-end congestion control solutions greatly improved routers mechanisms allocate bandwidth fair manner fair bandwidth allocation protects well-behaved dows ill-behaved diverse set end-to-end congestion control policies co-exist network discuss section researchwas sponsored bydarpa contract numbers -ce dabt -cand nsf career award grantnumber ncraddi- tional support provided byintel corp mci sun microsystems views conclusions contained document authors interpreted representing ecial policies expressed implied darpa nsf intel mci sun government maintain fair bandwidth allocation plays bene ccial role congestion control fair allocations typically achieved perdow queueing mechanisms suchasfair queueing dand manyvariants perdow dropping mechanisms flow random early drop fred mechanisms complex implement traditional fifo queueing drop-tail widely implemented deployed mechanism routers today fair allocation mechanisms inherently require routers maintain state perform operations dow basis packet arrives router routers classify packet dow update dow state variables perform operations based dow state operations simple deciding drop queue packet fred complex manipulation priority queues fair queueing numberoftechniques proposed reduce complexity packet operations commercial implementations intermediate class routers unclear algorithms cost-e bectively implemented high-speed backbone routers algorithms require packet classi ccation dow state management paper start assumption fair allocation mechanisms play important role congestion control complexity existing fair allocation mechanisms substantial hindrance adoption points debatable developments router technology make algorithms inexpensive implement solutions congestion control require fair allocation discuss point fully section assumptions starting points claiming true implications true starts assumptions overcoming complexity problem achieving fair allocation vitally important problem end propose examine architecture set algorithms allocate bandwidth approximately fair manner allowing routers high-speed links fifo queueing maintain perdow state max-min cnition fairness candidate fairness reasonable implemented local information approach identify island routers distinguish edge core island edge routers compute perdow rate estimates label packets passing inserting estimates packet header core routers fifo queueing perdow state employ probabilistic dropping algorithm information packet labels router measurement aggregate tra bandwidth allocations island routers approximately fair approachwere adopted high speed interiors isp fair allocation mechanisms adopted slower links high-speed interiors approximately fair allocations achieved approach likefair queueing red bene adopted incremental fashion incremental adoption island-by-island basis router-by-router basis call approach core-stateless fair queueing csfq core routers perdow state state carried packet labels describe details approach rate estimation algorithm packet dropping algorithm section suchascheme hope achieve nearly-perfect levels fairness obtained byfair queueing sophisticated stateful queueing algorithms interest perfection obtaining reasonable approximations fair bandwidth allocations deriveaworst-case bound performance algorithm idealized setting bound presented section worst-case analysis give adequate guide typical functioning csfq section present results simulation experiments illustrate performance approach compare schemes drr variantoffair queueing fred red fifo discuss relative mechanistic complexities approaches crst sections paper narrowly focussed details mechanism performance absolute relative mechanism granted section return basic question fair allocations relevant congestion control allocating bandwidth fairly address call unfriendly dow problem discuss alternate approach addressing problem identi ccation approach conclude summary section longer version paper proofs theoretical results complete pseudocode found http fwww cmu isto ica fcsfq core-stateless fair queueing csfq section propose architecture approximates service provided island fair queueing routers muchlower complexity core routers architecture twokey aspects avoid maintaining dow state router distributed island contiguous portion network well-de cned interior edges core routers state perdow state wesay cstateless referring absence perdow state algorithm edge routers maintain dow state core non-edge routers maintain dow state utilize perdow information carried labelineach packet header label estimate dow rate initialized edge router based perdow information updated router path based aggregate information router avoid dow bering scheduling required byfair queueing fifo queueing probabilistic dropping input probability dropping packet arrives queue function rate estimate carried label fair share rate router estimated based measurements aggregate tra approachavoids maintain perdow state touse complicated packet scheduling bering algorithms core routers give intuition works crst present idealized bit-by-bit duid version probabilistic dropping algorithm extend algorithm practical packetby-packet version fluid model algorithm crst berless duid model router output link speed dows modelled continuous stream bits assume dow arrival rate precisely max-min fair bandwidth allocations characterized fact dows bottlenecked bits dropped router output rate call rate fair sharerate server fair share rate time general max-min bandwidth allocations achieved dow receives service rate min denote total arrival rate ecthen fair share unique solution min bits dropped convention set max dow sends server fair share rate tra forwarded fraction bits dropped output rate suggests simple probabilistic forwarding algorithm achieves fair allocation bandwidth incoming bit dow dropped probability max dropping probabilities arrival rate dow hop min packet algorithm algorithm cned berless duid system arrival rates task extend approach situation real routers transmission packetized substantial bering arrival rates packet dropping rate estimator packet labeling rate estimator packet labeling flow flow edge router core router estimator buffer occupancy figure architecture output port edge router core router employ drop-on-input scheme drop packets bits rate estimation incorporates packet size dropping probability independent packet size depends asabove rate fair share rate left remaining challenges estimating rates fair share address issues turn subsections discuss rewriting labels pseudocode decting algorithm figure note main point paper architecture detailed algorithm presented represents initial prototype serves adequately proof-of-concept architecture fully expect details design continue evolve computation flow arrival rate recall architecture rates estimated edge routers rates inserted packet labels edge router exponential averaging estimate rate dow arrival time length packet dow 
estimated rate dow updated time packet received constant discuss rationale form exponential weight section longer version paper show wide range conditions estimation algorithm converges link fair rate estimation section present estimation algorithm giveintuition duid model section arrival rates assume system performs probabilistic dropping algorithm rate algorithm accepts packets function current estimate fair share rate whichwe denote letting denote acceptance rate wehave min note continuous nondecreasing concave piecewise-linear function ifthe link congested wechoose unique solution link congested tobe largest rate dows traverse link max note knew arrival rates compute directly toavoid perdow state seek implicitly compute aggregate measurements heuristic algorithm aggregate state variables estimate fair share rate estimated aggregate arrival rate estimated rate accepted tra twovariables updated arrival packet exponential averaging parameter inter-arrival time current previous packet updating analogous formula update updating rule depends link congested clter estimation inaccuracies due exponential smoothing window size link assumed congested times interval length conversely link assumed uncongested times interval length updated end interval link congested uncongested cnitions link congested updated based equation approximate linear function intersects origin slope yields link congested set largest rate active dow largest label time units compute dropping probabilities completeness give pseudocode csfq algorithm figure wenow describe minor amendments algorithm related bers managed goal estimating fair share match accepted rate link bandwidth due estimation inaccuracies load ductuations updates probabilistic nature algorithm accepted rate occasionally exceed link capacity ideally router bers accommodate extra packets occasionally router forced drop incoming packet due lackof ber space drop-tail behavior defeat purpose algorithm exhibit undesirable properties case adaptive dows tcp important limit bect simple heuristic receiving packet edge router classify label estimate rate prob max label prob eunif rand estimate drop estimate enqueue prob label relabel estimate dropped estimate rate est arrival rate dropped false estimate rate est acceptedtra rate congested false congested true start time crt time crt time start time start time crt time congested true congested false start time crt time tmp compute crt time start time tmp max tmp label tmp start time crt time tmp return figure pseudocode csfq time ber dows decreased small cxed percentage simulations avoid overcorrection make consecutive updates decrease addition reason link congested ber empty apply rule link uncongested test figure assume remains uncongested long ber occupancy prede cned threshold paper threshold half total ber capacity label rewriting rate estimation algorithm section label packets dow rate enter island packet dropping algorithm section limit dows fair share bandwidth dow experiences signi ccant losses congested link inside island packet labels longer accurate estimate rate rerun estimation algorithm involves perdow state fortunately note section outgoing rate minimum incoming rate fair rate rewrite packet label min outgoing dow rates properly represented packet labels weighted csfq csfq algorithm extended support dows berentweights denote weightof dow returning duid model meaning weights wesayafair allocation bottlenecked dows normalized fair rate unique min expression dropping probabilities weighted case max major change label simply finally details note weighted packet-by-packet version virtually identical version plain csfq algorithm important note weighted csfqwe approximate islands dow weight routers island algorithm accommodate situations relativeweights dows ber router router island limitation weighted csfqmay prove avaluable mechanism implementing berential services proposed performance bounds wenow present main theoretical result paper generality result weighted csfq proof algorithm built estimation procedures inherently inexact natural concern dow purposely cexploit inaccuracies fair share bandwidth answer question full generality analyze simpli ced situation normalized fair share rate held cxed bering drop probabilities precisely addition assume packet arrives fraction packet equal dow forwarding probability transmitted note time interval dow weight entitled receive service time call amountabove excess service bound excess service bounds independent arrival process length time interval dow active bound depend crucially maximal rate whicha dows packets arrive router limited speed dow access link smaller rate tighter bound theorem link constantnormalized fair rate dow weight excess service received dow weight sends rate larger boundedabove max max represents maximum length apacket bounding excess service wehave shown idealized setting asymptotic throughput exceed fair share rate dows exploit system short time scales limited fair share long time scales implementation complexity core routers time space complexity algorithm constant respect number competing dows csfq implemented high speed core routers edge router csfq maintain dow state arrival packet edge router classify packet dow update fair share rate estimation outgoing link update dow rate estimation label packet operations exception packet classi ccation eciently implemented today ecient general-purpose packet classi ccation algorithms active research expect leverage results note packet classi ccation ingress nodes needed number purposes context multiprotocol label switching mpls accounting purposes classiccation required csfqmay extra cost addition edge routers typically high-speed backbone links problem classi ccation moderate speeds practical architectural considerations wehave term dow cning intentional csfq approach applied varying degrees dow granularity constitutes dow arbitrary long packets dow follow path core paper convenience dow implicitly cned source-destination pair easily assign fair rates granularities source-destination-ports unit dow vary island island long rates re-estimated entering island similarly wehave precise size csfq islands extreme router island estimate rates router allowustoavoid complicated perdowscheduling dropping algorithms require perdow classiccation possibility isp extend island csfq routers edge network edge routers points customer packets enter isp network building previous scenario multiple isp combine islands classi ccation estimation performed isp-isp boundaries key obstacle trust isps miscellaneous details presented basic csfq algorithm wenow return discuss aspects detail wehave exponential averaging estimate arrival rate constant exponential weightwe interpacket arrival time constant motivation closely dects duid averaging process independent packetizing structure speci ccally shown constantweight estimated rate sensitive packet length distribution pathological cases estimated rate bers real arrival rate factor dows exploit estimation process obtain fair share contrast parameter estimated rate asymptotically converge real rate bound excess service achieved theorem similar averaging process estimate total arrival rate choice expression presents tradeo smaller increases system responsiveness rapid rate ductuations larger clters noise avoids potential system instability large estimated rate calculated edge network remains accurate packet traverses multiple links delay-jitter packets interarrival pattern whichmay result increased discrepancy estimated rate received packets labels real rate counteract bect rule thumb order magnitude larger delay-jitter experienced bya dowover time 
interval size larger average duration dow based constraints issue relates requirement csfq label carried packet possibilityistouse type service byte header doating point representation bits mantissa bits exponentwe represents rate kbps mbps accuracy possibility cne option case ipv hop-by-hop extension header case ipv simulations section weevaluate algorithm simulation provide context compare csfq performance additional algorithms fifo red represent baseline cases routers attempt achieve fair bandwidth allocations algorithms fred drr represent berent approaches achieving fairness fifo packets served crst-in crst-out order bers managed simple drop-tail strategy incoming packets dropped ber full red random early detection packets served crst-in crst-out order ber management signi ccantly sophisticated drop-tail red starts probabilistically drop packets long bandwidth mbps flow number drr csfq fredfred- red fifo bandwidth mbps flow number drr csfq fred red fifo figure simulation results mbps link shared byn dows average throughput sec dows udps arrival rate dow times larger fair share dows indexed throughputs udp dow indexed sending mbps tcp dows sharing mbps link ber full providing early congestion indication dows gracefully backo ber dows red maintains ber thresholds exponentially averaged ber occupancy smaller crst threshold packet dropped exponentially averaged ber occupancy larger threshold packets dropped exponentially averaged ber occupancy thresholds packet dropping probability increases linearly ber occupancy fred flow random early drop algorithm extends red provide degree fair bandwidth allocation toachieve fairness fred maintains state dows packet ber unlike red dropping decision based ber state fred dropping decisions based dow state specifically fred preferentially drops packet dow packets dropped past queue larger average queue size fred twovariants whichwe call fredand fredthe main berence fredguarantees dow minimum number bers general rule fredper- forms fredonly number dows large data distinguish quoting results version fred performed drr ccit round robin algorithm represents ecient implementation well-known weighted fair queueing wfq discipline ber managementscheme assumes ber full packet fromthe longest queue dropped drr sophisticated perdow queueing algorithm achieves highest degree fairness algorithms represent berent levels complexity drr fred classify incoming dows fifo red drr addition implement packet scheduling algorithm rest crst-incrst-out scheduling csfq edge routers complexity comparable fred csfq core routers complexity comparable red wehave examined behavior csfq variety conditions assortment tra sources tcp sources constant bit rate udp sources on-o sources topologies due space limitations report small sampling simulations wehave run simulations performed nsb provide accurate packet-level implementation network protocols tcp rlm receiver-driven layered multicast ber management scheduling algorithms red drr algorithms simulation csfq fred part standard nsdistribution speci ced parameters simulations section output link capacity mbps latency ber red fred cases crst threshold set set averaging constants estimating dow rate estimating fair rate making decision link congested set speci ced general rule thumb follow paper choose constants roughly times larger maximum queueing delay mbps finally topologies crst router path dow assumed edge router routers assumed exception core routers simulated algorithms give benchmarks assess results drr model fairness baseline cases fifo source referred udp remainder paper cxed size packets packet interarrival times uniformly distributed avg avg avg average interarrival time fuller set tests scripts run http fwww cmu istoica fcsfq shown rule idle link suddenly congested set identical udp sources experience ber dow algorithm detects congestion long aggregate arrival rate times link capacity allocated bwdth ideal bwdth total number flows drr csfq fred red fifo figure normalized bandwidth tcp dow competes udp dows sending allocated rates function red representing unfair status quo goal experiments determine csfq sits extremes fred ambiguous benchmark complex csfq complex drr general cnd csfqachieves reasonable degree fairness signi ccantly closer drr fifo red csfq performance typically comparable fred situations csfq signi ccantly outperforms fred large number experiments experimentinvolves complex dynamics due space limitations sections followwewill highlight fewimportant points omit detailed explanations dynamics single congested link crst single mbps congested link shared dows propagation delay link performed related experiments crst experiment wehave udp dows indexed dow sends times fair share mbps dow sends mbps dow sends mbps figure shows average throughput dowover sec interval fifo red fredfail ensure fairness dow share proportional incoming rate drr extremely bectiveinachieving fair bandwidth distribution csfq fredachieve precise degree fairness csfq throughputs dows ideal experimentwe impact ill-behaved udp dow set tcp dows precisely tra dow udp source sends mbps dows tcps figure shows throughput dowaveraged sec interval algorithms bectively udp dow drr csfq fred udp dow mbps close times fair share udp mbps mbps drr csfq expected fifo red perform poorly udp dow mbps cases cnal experiment measure howwell algorithms protect single tcp dow multiple sources udpudp-k udpgateway gatewaygateway gateway udpudp- udp-k udp-k udp-k udp- udpsinksource tcp udptcp udpsinks figure topology analyzing bects multiple congested links throughput dow link ten cross dows udps links mbps capacities sending rates udps excepting udpare mbps leads links routers congested ill-behaved dows perform simulations berentvalue simulation tcp dow udp dows udp sends fair share rate mbps figure plots ratio average throughput tcp dowover seconds fair share bandwidth receive function total number dows system points interest drr performs dows performances decreases tcp dow ber share bers signi ccantly bects throughput csfq performs drr numberof dows large csfqis cope tcp burstiness allowing tcp dowtohave packets bered short time intervals finally entire range csfq similar performance compared fred multiple congested links wenow analyze throughput well-behaved dow bected dow traverses congested link performed experiments based topology shown figure udps udpsend mbps link system mbps capacity result links routers congested crst experiment wehave udp dow denoted udpsending fair share rate mbps figure shows fraction udps tra forwarded versus number congested links csfq fred perform drr experimentwe replace udpwith tcp dow similarly figure plots thenormalized tcp throughput number congested links drr csfq prove bective comparison fred performs signi ccantly worse red fifo reason drr csfq allocate bandwidth fairly competing dows congestion fred allocate bers fairly flows end-to-end congestion control algorithms achieve berent throughputs routers fairly allocate ber allocated bwdth ideal bwdth number congested links drr csfq fred red fifo allocated bwdth ideal bwdth number congested links drr csfq fred red fifo figure normalized throughput udpas function number congested links plot udpis replaced tcp dow algorithm delivered dropped drr 
csfq fred red fifo table statistics on-off dow competing tcps dows numbers packets algorithm time std dev drr csfq fred red fifo table transfer times standard deviations short tcps presence udp dow sends link capacity mbps coexistence berent adaptation schemes experimentweinvestigate extent csfq deal dows employ berent adaptation schemes receiver-driven layered multicast rlm dis adaptive scheme source sends information encoded intoanumber oflayers multicast group receiver joins leaves groups layers based packet drops experiencing mbps link traversed tcp rlm dows source layer encoding layer sends kbps eachlayer modeled udp tra source fair share dow mbps rlm case correspond receiver subscribing crst cvelayers receiving rates averaged interval algorithm plotted figure experiment link bandwidth mbps router ber size precisely wehave kbps mbps algorithm std dev drr csfq fred red fifo table throughputs packets standard deviations tcps presence udp dow link propagation delay udp sends link capacity mbps set constants times larger maximum queue delay aninteresting point notice unlike drr csfq fred provide fair bandwidth allocation scenario discussed section due fact rlm tcp berent end-to-end congestion control algorithms berent tra models wehave considered udp tcp layered multicast tra sources wenowlookattwo additional source models greater degrees burstiness single mbps congested link crst experiment link shared on-off source tcps periods on-off source drawn exponential distributions means period on-off source sends mbps note ontime order averaging intervals experiment designed test extent csfq react short timescales on-off source packets experiment table shows number packets on-off source dropped congested link drr results show on-off source restricted fair share times fred csfq achieve high degree fairness experiment simulates web tra tcp transfers inter-arrival times exponentially distributed length throughput mbps time sec tcp rlm rlm rlm drr throughput mbps time sec tcp rlm rlm rlm csfq throughput mbps time sec tcp rlm rlm rlm red throughput mbps time sec tcp rlm rlm rlm fred throughput mbps time sec tcp rlm rlm rlm fifo figure throughput rlm dows tcp dow mbps link transfer drawn pareto distribution packets packet shaping parameter values consistent presented addition single mbps udp dow table presents transfer time standard deviations csfq performs worse fred larger average queue size order magnitude fifo red large latency experiments small link delays experimentwe single mbps congested link propagation delay load comprised udp dow sends link speed tcp dows due large propagation delay experimentwe set ber size table shows average number packets tcp dow seconds interval csfq fred perform packet relabeling recall dropping probability packet non-zero relabel fair rate label packet dect rate dow test howwell works practice topology figure link mbps note long dows attempt full fair share fair shares dows link mbps link mbps dropping links test relabelling function make incoming rates accurately dected link perform experiments csfq performance crst udps sending data flow mbps mbps mbps mbps mbps sources mbps mbps mbps sink gateway gateway link link flow flow figure simulation scenario packet relabeling experiment link mbps capacity propagation delay tra flow flow flow udp tcp table throughputs resulting csfqaveraged seconds dows figure link mbps table shows average throughputs sec udp dows expected rates closed mbps experiment replace udps tcps tcp burstiness whichmay negatively bect rate estimation relabeling accuracy tcp close fair share discussion simulation results wehave tested csfq wide range conditions conditions purposely designed stress abilitytoachieve fair allocations tests wehave run show space limitations suggest csfqachieves reasonable approximation fair bandwidth allocations conditions csfq superior regard status quo fifoor red situations csfq roughly comparable fred cases achieves signi ccantly fairer allocations recall fred requires per-packet dow classi ccation csfq achieving levels fairness scalable manner room improvementincsfq cases performance signi ccantly benchmark drr due choices estimation algorithms inherent properties csfq architecture fair allocations important introduction stated underlying assumptions work fairly allocating bandwidth bene ccial crucial congestion control section motivate role fair allocations congestion control discussing problem unfriendly dows presenting approaches problem end section discussion role punishment borrow heavily bene cted greatly conversations steve deering sally floyd note matters addressed section controversial overview unavoidably dects prejudices section intended provide perspectiveon motivation work biases overview undercut technical aspects csfq proposal main focus previous sections unfriendly flow problem data networks internet reliance statistical multiplexing provide mechanism control congestion currentinternet fifo queueing drop-tail mechanisms routers relies end-to-end congestion control hosts curtail transmission rates detect network congested widely utilized form end-to-end congestion control embodied tcp tremendously successful preventing congestion collapse ecacy approach depends fundamental assumptions dows cooperative implement congestion control algorithms algorithms homogeneous roughly equivalent produce similar bandwidth allocations similar circumstances assumption requires language dows tcpfriendly assumption universal cooperation violated general ways applications unresponsive don implementany congestion control algorithms early multimedia multicast applications vat vic realaudio fall category applications congestion control algorithms responsive tcp-friendly rlm algorithm users cheat non-tcp congestion control algorithm bandwidth modi ced form tcp instance larger initial window window opening constants forms noncooperation signi ccant negative impact performance obtained cooperating dows present knowhow widespread noncooperation assess level harm lieu solid evidence noncooperation problem unsound base internet congestion control paradigm assumption universal cooperation started paper fundamental assumption deal problem unfriendly dows term tcp-friendly means ctheir arrival rate exceed tcp connection circumstances arrival rates roughly comparable property precisely called tcp-equivalent blur distinction tcp-friendly tcp-equivalenttoavoid overly unwieldy set terms short overview distinction rendered moot congestion control algorithms tcp-equivalent tcp-friendly fare share widely deployed data section showed rlm receiving fair share wechangethe simulation scenarioso tcp dow starts rlm dows receives half fair share hysteresis rlm versus tcp behavior crst pointed steve mccanne approaches literature general approaches addressing problem unfriendly dows crst allocation approach router ensures bandwidth allocated fairly isolating dows unfriendly dows haveavery limited impact dows allocation approach demand dows adopt universally standard endto-end congestion control algorithm dows choose respond congestion manner suits unduly harming dows assuming dows prefer signi ccant levels packet drops allocation approaches give incentive dows endto-end congestion control unresponsivehurts performance note allocation approach provide incentive dows tcp-friendly alternative end-to-end congestion control algorithm provide strong incentives drop-intolerant applications form end-to-end congestion control canonical implementations allocation approach suchasfair queueing require signi ccant complexity routers goal paper present scalable realization allocation approach problem unfriendly dows addressed 
manner identi ccationapproach exempli ced routers lightweight detection algorithm identify unfriendly dows explicitly manage bandwidth unfriendly dows bandwidth management range restricting unfriendly dows highest friendly dow share extreme severely punishing unfriendly dows dropping packets approach relies ability accurately identify unfriendly dows lightweight router mechanisms daunting task belowwe discuss process identifying unfriendly dows present simulation results identi ccation algorithm weare aware realizations identi ccation approach process identifying unfriendly dows occurring logically distinct stages crst easy step estimate arrival rate dow harder step arrival rate information dropping rate aggregate measurements decide dow unfriendly assuming friendly dows tcp-like adjustment method increase-by-one decrease-by-half derive expression details bandwidth share function dropping rate round-trip time packet size constant routers round trip time dows lower bound double propagation delay attached link dows link behave aggressively identi ced unfriendly discuss dows tolerate signi ccant levels loss situation identi ccation perfect management goalachieved dows max-min fair allocations aware algorithm achieve management goal delving details approachlayed dows classi ced very-high-bandwidth necessarily unfriendly unresponsive unfriendly simulation simulation algorithm udp tcptcp- tcptcp- redi csfq table simulation throughputs mbps udp tcp dows mbps link redi csfq simulation throughputs tcps tcpopens congestion window times faster tcpunder redi csfq occurs practice experiments identi ccation algorithm whichwe call red identi ccation redi case multiple dows traversing mbps link latency output ber size constants set table shows bandwidth allocations redi csfqaveraged sec crst experiment simulation mbps udp dow tcp dows experiment simulation wehave standard tcp tcpand modi ced tcp tcpthat opens congestion window times faster cases redi fails toidentify unfriendly dow allowing obtain two-thirds bandwidth increase latency congested link redi starts identify unfriendly dows values high fails identify dows identi ccation approach awaits viable realization allocation approach demonstrated method deal problem unfriendly dows punishment earlier section argued allocation approachgave drop-intolerant dows incentive adopt endto-end congestion control drop-tolerant dows illustration cre-hose applications complete drop-tolerance send high rate muchvalue fraction arriving packets call originally stream rate cre-hose applications care ultimate throughput rate thedropping rate ina completely static world bandwidth shares constant cre-hose protocols provide advantage sending fair share rate fair shares path ductuating signi ccantly cre-hose protocols utilize instantaneous ductuations bandwidth cre-hose protocols relieve applications burden adapt fair share restrained fair share incentive dows send signi cantly current fair share addition grateful sally floyd provided script implementing redi algorithm similar script simulation understanding preliminary design identi ccation algorithm contention design identi ccation algorithm fundamentally ecult due uncertaintyofrtt approximations complete drop-tolerance reached video transport coding schemes cle transport cre-hose coding cle transfer methods cre-hoses decrease bandwidth dows packets destined dropped congested link represent unnecessary load upstream links universal deployment allocation approach dowwould obtain fair share link share smaller cre-hose responsive end-to-end congestion control impossible knownow problem problem cre-hoses world fair bandwidth allocation dire problem unfriendly dows current fifo internet incentive unfriendly harmful impact considerably greater case consequence paper emphasizes problem unfriendly dows current fifointernet concerned cre-hose dows internet fair bandwidth allocation nonetheless cre-hose problem dows incentive adopt responsive endto-end congestion method explicitly punish unresponsive dows denying fair share punishment discussed bandwidth management approach approach informally referred red-with-a-penalty-box accurately identifying dows unresponsivemay easier identifying unfriendly wesaw simulations context identi cation approach solved problem challenge determine dow decreased usage response increases packet drop rates identifying unresponsive dows straightforward allocation approach determine dow signi ccantly high drop rates long period time proof concept wehave implemented simple identi ccation punishment mechanism examine b-line dropped packets monitor dows dropped packets estimate rate monitored dows dow rate larger start dropping packets continue monitor penalized dows continuing punishmentuntil arrival rate decreases parameters applied algorithm simulation table udp dowwas identi ced penalized seconds task easy identi ccation unresponsive dows based result packet drops long periods time examine algorithm detecting decreased rate response increase drop rate note allocation approach distinguish responsive unresponsive punishment phase inherently easier task distinguishing friendly unfriendly summary provide incentives drop-tolerant dows responsive end-to-end congestion control identify punish unresponsive dows overhead isn clear practice overheads greater advantages gained claim drop-intolerant applications allocation approach drop-tolerant applications strong incentive responsive end-to-end congestion control algorithms method atm abr network provide explicit dow feedback ingress nodes edge nodes police tra dow basis assume heavyweight mechanism internet csfq punishment extension marriage allocation identi ccation approaches berence approach largely relative importance identi ccation allocation start allocation fundamental identi ccation starts identi ccation considers allocation context managing bandwidth identi ced dows summary paper presents architecture achieving fair bandwidth allocations requiring perdow state core routers edge routers estimate dow rates insert packet labels core routers perform probabilistic dropping input based labels estimate fair share rate computation requires aggregate measurements packet labels rewritten core routers dect output rates approach handle multihop situations tested csfq algorithms wide variety conditions cnd csfqachieve signi degree fairness circumstances matching fairness benchmark drr comparable superior fred vastly baseline cases red fifo approach achieve comparable levels fairness perdow operations core routers main thrust csfq rate estimation edge routers packet labels carry rate estimates core routers details proposal estimation algorithms subject active research results initial experiments untuned algorithm encouraging open question bect large latencies logical extreme csfq approachwould rate estimation atthe entrance tothe network customer fisp boundary core introduces signi ccant latencies point estimation points congestion initial simulations large latencies reveal signi ccant problems understand csfqwell con cdent viability call-core design viable call-core design interior routers simple forwarding dropping mechanisms classify packets dows addition note csfq-like architecture provide service guarantees approachwould route pinning mechanisms shape aggregate guaranteed tra output link core routers initial assumptions paper traditional mechanisms achieve fair allocations suchasfair queueing fred complex implement cost-e bectively eciently high speeds case scalable approach csfq achieve fair allocations csfq islands comprised high-speed backbones edge routers lower speeds classi ccation perdow operations problem csfqmay play role router technology advances stage traditional mechanisms reach eciently high speeds core-version csfq retro sizable fraction installed router base complexity roughly comparable red implemented software csfq islands high-speed backbones comprised legacy routers lastly note csfq approach requires con cguration edge routers distinguished core routers csfqmust adopted island time router-by-router measuring isp knowif topologies presents rocketfuel neil spring impediment ratul csfq mahajan david wetherall nspring ratul djw washington computer science engineering washington seattle abstract date realistic isp topologies accessible research community leaving work depends topology uncertain footing paper present internet mapping techniques enabled directly measure router-level isp topologies techniques reduce number required traces compared brute-force all-to-all approach orders magnitude significant loss accuracy include bgp routing tables focus measurements exploiting properties routing eliminate redundant measurements alias resolution dns divide map pops backbone collect maps ten diverse isps techniques find maps substantially complete earlier internet mapping efforts report properties maps including size pops distribution router outdegree inter-domain peering structure part work release maps community categories subject descriptors communication networks architecture design topology general terms measurement introduction realistic internet topologies considerable importance network researchers topology influences dynamics routing protocols scalability multicast efficacy proposals denial-of-service tracing response aspects protocol performance sadly real topologies publicly isps generally regard router-level topologies confidential isps publish simplified topologies web lack routerlevel connectivity pop structure optimistic date uncertainty properties real isp topologies router outdegree distribution power law suggested unclear synthetic permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee sigcomm august pittsburgh pennsylvania usa copyright acm topologies generated tools gt-itm brite representative main contribution paper present measurement techniques infer high quality isp maps measurements insight routing information exploited select measurements valuable technique directed probing bgp routing information choose traceroutes transit isp mapped technique path reductions suppresses traceroutes follow redundant paths isp network techniques reduce number traces required map isp orders magnitude compared bruteforce all-to-all approach show savings high cost terms accuracy describe solution alias resolution problem clustering interface addresses listed traceroute routers pair-wise alias resolution procedure finds times aliases prior techniques additionally dns information break isp maps backbone pop components complete geographical location techniques map ten diverse isps abovenet ebone exodus level sprint telstra tiscali europe verio vsnl india publicly traceroute sources measurement vantage points maps summarized paper isps ten measured helped validate maps estimate completeness maps scanning isp address ranges routers missed comparing peering links find present bgp routing tables maps reveal complete isp topologies compared earlier efforts find roughly times routers links area focus skitter contribution examine properties maps interest researchers generating synthetic internet maps report results distribution pop sizes number times isp connects networks distributions significant tails characterize distribution router outdegree repeating analysis richer data finally goal work part ongoing validation effort publicly releasing isp network maps inferred measurements making entire raw measurement data researchers maps constructed end-to-end measurements benefit confidential information maps data rest paper organized sections describe approach mapping techniques implementation mapping engine rocketd neighbors tracerouteserver figure isp networks composed pops backbones solid dots inside cloud represent pops pop consists backbone access routers inset traceroute isp discovers path source destination fuel section present sample isp maps section section evaluate maps completeness techniques measurement efficiency accuracy analyze properties inferred maps section present related work section conclude section problem approach goal work obtain realistic router-level maps isp networks section describe isp map key measurement challenges address isp network composed multiple points presence pops shown figure pop physical location isp houses collection routers isp backbone connects pops routers attached inter-pop links called backbone core routers pop access routers provide intermediate layer isp backbone routers neighboring networks neighbor routers include bgp speakers non-bgp speakers non-bgp speaking small organizations aim discover isp maps consist backbone access directly connected neighboring domain routers ip-level interconnections constitutes interior routing region isp information boundaries isps bgp autonomous system numbers asns map collect precisely correspond address space advertised isp maps defined exclude portions address space represent non-bgp speaking neighboring networks consumer broadband dialup access include boundary neighbors paper isp names numbers interchangeably distinction important earlier internet mapping efforts discover isp maps traceroutes process illustrated figure traceroute yields path network traversed traceroute source destination traceroute paths multiple sources multiple destinations merged obtain traceroute inherent understood limitations studying network topology traceroute backup links network expose link-layer redundancy dependency multiple links fiber multi-access links isp map publicly traceroute servers sources traceroute server vantage points unique traceroute sources routers traceroute server key challenge face build accurate isp maps measurements burden public traceroute servers excessive load number traceroutes collect server limited brute-force approach internet mapping collect traceroutes vantage point allocated prefixes bgp table public traceroute servers queried minutes bruteforce approach days complete map period internet undergo significant topological brute-force approach traceroute addresses owned isp approach feasible isp address space include millions addresses million addresses design philosophy choose traceroutes contribute information map omit redundant insight expected routing paths provide valuable means guide selection approach trades accuracy efficiency part evaluation techniques loss accuracy smaller gain efficiency make worthwhile engineering tradeoff connectivity information obtained traceroutes difficulties remain traceroute consists list addresses represent router interfaces accurate map addresses belong router called aliases resolved started construct maps found prior techniques alias resolution ineffective resolving obvious aliases address problem develop pair-wise adoption bennett stephens zhang high speed 
scalable accurate implementation packet fair queueing algorithms atm networks proceedings ieee icnp pages atlanta october bennett zhang worst-case fair weighted fair queueing proceedings ieee infocom pages san francisco march braden clark crowcroft davie deering estrin floyd jacobson minshall partridge peterson ramakrishnan shenker wroclawski recommendations queue management congestion avoidance internet january internet draft callon doolan feldman fredette swallow viswanathan framework multiprotocol label switching november internet draft crovella bestavros self-similarityinworld wide web tra evidenceand possiblecauses proceedings acm sigmetrics pages philadelphia cruz sced ecient management qualityof service guarantees proceedings infocom pages san francisco demers keshav shenker analysis simulation fair queueing algorithm journal internetworking research experience pages october proceedings acm sigcomm floyd fall router mechanisms support endto-end congestion control february lbl technical report floyd jacobson random early detection congestionavoidance ieee facm transactions networking july golestani self-clocked fair queueing scheme broadband applications proceedings ieee infocom pages toronto june jacobson congestion avoidance control proceedings acm sigcomm pages august bottleneck dow control ieee transactions communications july keshav control-theoretic approachto dow control proceedings acm sigcomm pages zurich switzerland september lin morris dynamics random early detection proceedings acm sigcomm pages cannes france october mccanne scalable compression transmission internet multicast video phd dissertation universityof california berkeley december nagle packet switches cnite storage ieee trans communications april ucb flbnl fvint network simulator version parekh gallager generalized processor sharing approachto dow control single node case proceedings infocom shenker making greed work networks game theoretical analysis switch service disciplines proceedings acm sigcomm pages london august shreedhar varghese ecient fair queueing ccit round robin proceedings sigcomm pages boston september stilliadisanda varma ecientfair queueingalgorithms packet-switched networks ieee facm transactions networking april stoica shenker zhang core-stateless fair queueing achieving approximately fair banwidth allocations high speed nteworks june technical report cmu-cs- carnegie mellon stoica zhang lira model service berentiation internet proceedings nossdav london july wang user-share berentiation usd scalable bandwidth allocation berentiatedservices internet draft 
test aliases variety router identification hints identifier rate-limiting ttl values analyze structural properties collected maps identify geographical location router role topology success recent geographical mapping work leverage location hints typically embedded dns extract backbone pops isp map mapping techniques section present mapping techniques divided categories selecting measurements resolving addresses aliases identifying isp routers role geographical information traceroute output selecting measurements based observations classes techniques reduce required number measurements traceroutes expected transit isp technique called directed probing employs bgp tables identify relevant traceroutes prune remainder interested part traceroute transits isp traceroute traceroutes enter leave isp network point set techniques called path reductions identify redundant traceroutes limit provided administrator traceroute server aggressive traceroutes unresponsive destinations longer figure sample bgp table snippet destination prefixes left as-paths ases closer destination path directed probing directed probing aims identify traceroutes transit isp network ideally bgp routing table vantage point paths transited isp mapped tables routeviews approximation bgp views vantage points bgp table maps destination address prefixes set aspaths reach destination as-path represents list ases traversed reach destinations prefix 
show identify classes traceroutes transit isp network bgp table snippet figure map number traceroutes dependent prefixes call prefixes originated isp singly-homed customers dependent prefixes traceroutes prefixes vantage point transit isp dependent prefixes readily identified bgp table as-paths prefix number mapped dependent prefix traceroutes insiders call traceroute server located dependent prefix insider traceroutes insiders prefix transit isp traceroutes transit isp based as-path called traces traceroute server trace figure directed probing capitalizes routing information skip unnecessary traceroutes incomplete information bgp tables dynamic routing multiple paths lead kinds errors executed traceroutes traverse isp false positives sacrifice speed accuracy traceroutes transit isp network skipped limited bgp data include true path false negatives represent loss accuracy price pay speed evaluation section estimate level types errors path reductions traceroute probes identified directed probing unique paths inside isp number measurements required reduced identifying probes identical paths inside isp list techniques exploit common properties routing cut redundant measurements separately techniques compose bring greater reduction number required measurements ingress reduction path packet network destination-specific traceroutes ispmapped ispmapped mapped isp ashopnext figure path reductions traceroute destination servers share ingress trace dependent prefixes share egress router trace prefixes next-hop number figure alias resolution boxes represent routers circles represent interfaces traceroute lists input interface addresses paths left alias resolution clusters interfaces routers reveal true topology interfaces aliases vantage points destination enter isp point path isp illustrated figure traceroute destination redundant traceroute needed redundancy exploited balance load traceroute servers egress reduction similarly traces ingress prefix egress router traverse path traces redundant collected illustrated figure next-hop reduction path isp depends next-hop specific destination prefix means trace ingress router next-hop valuable illustrated figure unlike egress reduction next-hop reduction assume egress destination next-hop peer places egress customer prefix ingress egress predictions remove duplicates valuable traces sacrificing fidelity find ingress-router prediction incorrect repeat trace servers share predicted ingress alias resolution traceroute lists source addresses time exceeded icmp messages addresses represent interfaces received traceroute probe packets significant problem recovering network map traceroutes alias resolution determining interface addresses belong router problem illustrated figure addresses represent router resolved topology routers links real standard technique alias resolution developed part mercator project detects aliases sending traceroutelike probe high-numbered udp port ttl directly potentially aliased address relies routers configured send udp port unreachable response address outgoing interface source address aliases respond source mercator technique efficient requires message address found missed aliases approach alias resolution combines techniques identify peculiar similarities responses packets addresses include mercator address-based method detects alias responses source address compare ttls responses add confidence alias match choose candidate address pairs test comparing ttls accurate test icmp rate limiting techniques successful comparing identifier field responses identifier intended uniquely identifying packet reassembly fragmentation commonly implemented counter incremented sending packet implies packets consecutively consecutive identifiers xip routeror router ally figure alias resolution identifiers solid arrow represents messages dotted arrow procedure resolving aliases identifier shown figure tool alias resolution ally sends probe packet similar mercator potential aliases port unreachable responses include identifiers ally sends packet address responded small addresses aliases practice tolerance allowed reordering network optimization aliases disqualified packet establishes range in-order identifiers suggest single counter implies addresses aliases three-packet approach compensates routers increment counter varying speeds reduces likelihood false positive routers configured rate-limit port unreachable messages probe packet solicits response probe destinations reordered probes found rate-limiting routers generally replied source address detected mercator observed routers random identifiers implement counter least-significant-byte order set identifier field seconds probe packet solicits response time packet address rate-limiting heuristic detects match addresses rate-limited aliases identifier technique detects match identifiers differ small probability response packets nearby identifiers addresses aliases remove false positives repeat alias resolution test unverified aliases time router identification annotation section describe determine routers traceroute output belong isp mapped geographical location role topology rely dns identify routers belong isp dns names provide accurate characterization address space advertised reasons routers non-bgp speaking neighbors numbered address space case dns names accurately locate isp network edge neighboring domain routers named isps domain att net sprintlink net cases directly connected neighboring domain routers special naming convention helps locate network edge instance small neighbors customer organizations sprint named sl-neighborname sprintlink net sprint internal router naming convention edge links networks numbered address space dns names identify network edge correctly assigned correctly finally dns names effective pruning cable modems dsl dialup modem pools belonging organization isp numbered address space resort address space criterion routers dns names observed constraint routers belonging isp contiguous traceroute output goals understand structure isp maps includes backbone pops identify role router location information embedded dns names purpose isps naming convention routers sl-bb -nyc- sprintlink net sprint backbone router york city nyc miamfl verio net verio backbone router miami florida miamfl discover naming convention isp browsing list router names gather isps started city codes database routers dns names names lack location information infer location routers neighbors rocketfuel section describe rocketfuel mapping engine infers maps techniques architecture rocketfuel shown figure postgresql database stores information blackboard architecture database persistent storage measurement results substrate interprocess communication asynchronously running processes database enables run sql queries simple questions integrate analysis modules easily public traceroute servers listed traceroute web page representing vantage points world traceroute server potentially generate traceroutes routers autonomous system oxide sprintlink net generate traceroutes vanexecution parsing bgptable tasklistgeneration pathreductions isp maps serverstraceroute figure architecture rocketfuel database inter-process communication substrate tage points public traceroute servers support source bgp tables routeviews describe module figure turn egress discovery process finding egress routers dependent prefixes information egress reduction find egress routers traceroute dependent prefix local machine dependent prefixes advertised isp aggregated break prefixes prefixes length equivalently addresses probing assume breaking sufficient discover egresses dependent prefixes tasklist generation module bgp tables generate list directed probes dependent prefixes directed probes replaced possibly multiple egresses duplicates removed enables trace egresses path reductions tasklist database apply ingress next-hop reductions generate jobs execution information traceroutes executed past path reductions module perform reductions past traceroutes ingress vantage point traceroute module checks predicted ingress egress job complete list vantage point path execution engine handles complexities publicly traceroute servers load-limiting load-balancing formats traceroute output load distribution destinations 
achieved randomizing job list sorting hash jobs enforce minute pause accesses traceroute server avoid overloading traceroutes destination prefix executed simultaneously avoid hot-spots traceroute parser extracts addresses represent router interfaces pairs addresses represent links output traceroute servers output includes presentation mark-up headers tables graphics alias resolution identifier technique section requires engineering testing pair addresses reduce search space simple heuristics effectively exploit hierarchy embedded dns names sorting router addresses piecewise reversed names chi-sea-oc chicago isp net chi-sfo-oc chicago isp net lexigraphically adjacent adjacent pairs tested router ips replies nearby return ttls aliases ips grouped ttl response pairs nearby ttl tested starting equal ttl aliases found matched return ttl matched outgoing ttl alias transitive relation demonstrating alias demonstrates aliases aliases aliases alias resolution complete pairs addresses resolved aliases aliases unresponsive isp maps ran rocketfuel map ten diverse isps section present summary map information samples backbone pop topology full map set images backbones pops ten isps summary information names aggregate statistics ten mapped isps shown table large range sizes isps biggest networks sprint verio depending metric times larger smallest networks backbones evident style backbone design varies widely isps figure shows sample backbones overlaid map united states backbone network topology includes hubs major cities spokes fan smaller per-city satellite pops contrast sprint network pops usa major cities connected implying smaller city customers backhauled major hubs major providers type network stages transition newer design level represents paradigm backbone design highly connected backbone result circuit technology mpls atm frame relay pvcs tunnel pops pops unlike backbone designs found pop designs similar generic pop backbone routers densely connected mesh large pops backbone routers connected full mesh backbone routers connect backbone routers pops access router connects routers neighboring domain backbone routers redundancy neighboring routers connected access router point-to-point link layer device bridge multi-access medium lan aggregate neighboring routers connect access router differentiate scenarios point-to-point connections traceroute anexample common pattern figure shows map sprint pop springfield small pop large pops complex show detail figure names aliases listed backbone nodes shown top access routers sprint naming convention apparent sl-bbn names backbone routers sl-gwn names access routers directly connected neighboring routers shown named sl-neighborname sprintlink net small organizations sprint transit dns names understanding role routers topology clear naming practice isp customer peer popsrouters links routers links telstra australia sprintlink ebone europe verio tiscali europe level exodus vsnl india abovenet table number routers links pops ten isps isp routers include backbone gateway routers customer peer routers adds directly connected customer access peer routers links include interconnections sets routers rounded nearest hundreds pops identified distinct location tags isp naming convention figure backbone topologies top sprint middle level bottom multiple links present cities link shown clarity shaded relief background image ray sterner johns hopkins applied physics laboratory permission evaluation section evaluate effectiveness techniques axes fidelity resulting maps efficiency constructed spr spr spr spr spr spr spr spr spr spr spr spr spr spr spr spr spr pops otherpopsotherpops figure sample pop topology sprint springfield illinois names prefixes full names sprintlink net pops sprint larger complex show retain design completeness independent tests estimate accuracy completeness maps isps mapped validation devise technique estimate completeness isp map address coverage compare bgp peerings found present routeviews finally compare maps obtained skitter on-going internet mapping effort caida validating isps ten isps assisted partial validation maps identify isps validation confidential list questions asked answers received miss pop isps case isp pointed mislocated router router city code database miss links pops cases spurious link map caused broken traceroute output routing change traceroute random sample pops fraction access routers miss isp spot obvious misses backbone routers present access routers missing included routers affiliated fraction customer routers miss isps answer question claimed check information rate maps poor fair good good excellent received responses good good good excellent found results encouraging suggest accurate backbone reasonable pops survey validation attempts public isp maps confirms public maps authoritative sources topology missing pops optimistic deployment projections show parts partner networks managed isps address space completeness estimate searched prefixes isp address space additional responsive addresses routers found scanning address space traceroutes covered parts topology randomly selected prefixes isp included routers search routers select prefixes routers prefixes connect isps router mapped isp coverage prefix providing information routers addresses respond ping names follow isp router naming convention participate forwarding prefixes chosen make backbone access routers represented table shows estimated percentage coverage isp percentage calculated number addresses relative total number addresses subnets counting additional aliases routers isp consistent naming convention backbone routers access routers total broken separate columns shown table suggests find isp backbone routers access router coverage fair general backbone coverage plan investigate differences routers found rocketfuel address range scanning comparison routeviews estimate completeness number bgp adjacencies maps compared number observed bgp tables routeviews adjacency bgp table complete router-level map include link router mapped neighboring figure compares number adjacencies rocketfuel routeviews worst case rocketfuel sprint find neighbors interesting rocketfuel discovers neighbors present bgp table result consistent studied adjacencies found approaches found bgp tables find small low degree as-graph neighbors rocketfuel finds large neighbors backbone access total telstra sprint ebone verio tiscali level exodus vsnl abovenet table estimate rocketfuel coverage router-like named addresses aliases routers counted implies isp naming convention doesn differentiate backbone access routers number neighbors vsnl exodus level tiscali verio ebone sprint telstra rocketfuel routeviews common figure comparison bgp adjacencies maps bgp tables routeviews addresses vsnl exodus level tiscali verio ebone sprint telstra rocketfuel skitter common figure comparison rocketfuel skitter isp comparison skitter skitter traceroute-based mapping project run caida analyze skitter data collected compare addresses routers alias resolution links skitter rocketfuel mapped count number routers links dataset address statistics presented figure statistics summarized table rocketfuel finds roughly times links ips routers area focus routers links found skitter difference due times map collection skitter rocketfuel corresponds routers missed rocketfuel investigated found bulk neighboring domain routers access routers tools find routers links underscores complexity internet mapping impact reductions section evaluates directed probing path reductions section evaluate techniques extent reduction measurements bring potential loss accuracy results presented aggregated ten isp map individual results 
largely similar directed probing aspects directed probing fraction traces prune amount pruned traces transited isp traces fact transit isp effectiveness directed probing shown table brute-force search vantage points bgp-advertised prefixes broken isp prefixes requires million traceroutes directed probing traces required estimate traces traversed isp pruned ran experiment skitter data assuming vantage points skitter calculate traces selected directed probing skitter traces collected brute-force mapping calculate fraction skitter traces traversed isp identified directed probing find fraction pruned traces varies isp low non-us isps vsnl tiscali high big isps sprint variation attributed difference likelihood trace vantage point randomly selected destination traversing isp fraction traces means absence extra information bgp tables traceroute server carry extra measurements potentially explore potentially traces yielded paths chosen traces determine traces unnecessary tally directly measurement database traces roughly transit isp numbers encouraging directed probing cut number traces work pruned useless work ingress reduction section evaluate ingress reduction effectiveness discarding unnecessary traces ingress reduction traces chosen directed probing vsnl ingress reduction ingresses vantage points number vantage points share ingress figure number vantage points sharing ingress sorted decreasing order plotted log-log scale side curve approach public traceroute servers large number distinct ingresses mapped ases left vantage points share small number ingresses implies ingress reduction signifrank probes figure number vantage points share ingress rank aggregated ases vantage points share ingress left vantage points unique ingresses rank prefixes allnative figure number dependent prefixes share egress rank aggregated ases refer broken isp prefixes includes dependent prefixes originated isp icantly reduces amount work directed probing egress reduction egress reduction dependent prefix traces chosen directed probing figure shows number dependent prefixes share egress router x-axis represents egress router y-axis represents number prefixes share egress left part curve depicts egresses shared multiple prefixes demonstrates effectiveness egress reduction part shows prefixes unique egresses broken shows necessity breaking large cidr prefixes smaller units mapping address prefix bgp tables performed existing bgp based mapping techniques miss routers inside isp test hypothesis sufficiently fine granularity egress discovery randomly chose half isp prefixes set dependent prefixes broke traced links ips routers total unique total unique total unique rocketfuel skitter table comparison rocketfuel skitter aggregated isps asn brute directed remote egressforce probes traceroutes discovery telstra australia sprintlink ebone europe verio tiscali europe level exodus vsnl india abovenet table effectiveness directed probing summary number traceroutes including remote public traceroute servers locally determine egresses dependent prefixes local machine ratio previously unseen egresses total discovered estimate accuracy loss exploring isp boundaries due breaking finely egresses discovered process previously unseen median wide range fraction newly discovered egresses suggests assumption valid isps egresses universally applicable minimum customer allocation unit isps smaller future intend dynamically explore length dependent prefix broken discover egresses techniques binary search effectively purpose next-hop reduction next-hop reduction reduces number insider traces leave isp enter chosen directed probing figure show number prefixes chosen vantage point upper line number next-hop ases represent jobs reduction next-hop reduction effective number nexthop ases consistently smaller number prefixes valuable insiders directed probing traceroute prefixes bgp table next-hop reduction insiders trace external destinations evaluate commonly early exit assumption underlying reduction violated verio test case conducting traces reduction traces contained ingress next-hop pairs found cases ingress egress crossing isps policies early-exit routing result encouraging impact reductions orthogonal compose give multiplicative benefit impact reductions table shows total number traceroutes infer maps executed traces required brute-force technique reduction orders magnitude individual reductions isps varied level vsnl vantage point probes ingress prefixesnext-hop asns figure number prefixes unique next-hop ases vantage points mapping techniques scale number vantage points vantage points generate maps quickly increase number traceroutes unnecessarily extra vantage points bring things table speed accuracy speed improved vantage point shares ingress existing vantage point accuracy improved vantage point unique ingress isp alias resolution effectiveness address based approach approach alias resolution shown table table shows aliases additional addresses router found technique ally finds times aliases earlier address-based approach found aliases resolved ally superset resolved address-based technique means ally suffices alias resolution test build confidence resolved aliases correct complete compare aliases found ally predicted dns names chose isps ebone sprint routers easily recognized unique identool aliases recognized mercator ally table ally identifier-based technique finds times aliases address-based technique number aliases observed cdf figure number aliases observed routers mapped isps tifiers estimating aliases technique missed dns predicted aliases sprint backbone gateway routers correctly resolved routers resolve correctly routers interface address responded correctly resolved ebone routers failed unresponsive addresses suggests problem effective alias resolver handle unresponsive addresses addresses maps found responded alias resolution queries plan investigate sprint ebone routers responsive completely correctly resolved potential include implementation flaws alias resolution tool routers temporarily unresponsive stale dns entries authoritative routers multiple stacks identifier counters figure plots cdf aliases routers isps mapped shows routers ips maximum number aliases observed router york graph underestimate number aliases routers ips router analysis demonstrate utility maps include paper preliminary analysis properties report router outdegree distributions repeating analysis detailed data present pop peering statistics previously reported synthetic topology generation pop sizes distribution pop sizes shown figure level sprint cumulative fraction total number pops top total number routers bottom determine pop size count backbone access routers exclude customer peer routers distributions skewed details differ largest pops skewed distribution level skew variation pop size routers present ten largest pops networks isps significant number small pops sprint pops fewer routers pops account sprint routers pop size isp routers fraction pops level sprint pop size isp routers fraction isp routers level sprint figure distribution pop size sprint level pops top routers bottom largest pops chicago york fort worth chicago sprint york san jose level smallest pops networks europe maintained isps trans-continental connectivity smaller cities united states small pops called names isp distinguish backbone network nodes data centers private peering points router degree distribution describe distribution router outdegree isp networks complementary cumulative distribution function ccdf plots probability observed values greater ordinate routers role isp complementary cumulative distribution function ccdf router shown aggregate isps figure individual isps figure end paper fit tails distributions pareto power-law weibull lognormal distributions parameter pareto fit estimated half graph focus 
tail distribution weibull scale shape parameters estimated linear regression weibull plot lognormal line based variance log distribution router outdegree degree observed pareto alpha lognormal weibull figure router outdegree ccdf pareto fit applied tail observe unlike measured degree graphs router outdegree small range data covers orders magnitude ten isps fact physical size power constraints naturally limit underlying router outdegree data include undetected layer switches inflate observed router outdegree substantially ccdfs router outdegree isps fit distributions fit weibull fit simpler lognormal tails consistent pareto fit appears weibull fits tail body distribution distributions significant tails parameter high heavy-tailed distribution peering structure maps collected traceroutes enter exit mapped isp ingresses egresses give unique opportunity study peering structure ases paths bgp tables infer adjacency ases as-level graph ases connect rocketfuel topologies infer places ases exchange traffic bgp tables expose fact sprint peer show locations isps exchange traffic peering structure refer important level detail present as-level graphs collected bgp tables summarize peering structure showing number locations mapped isp exchanges traffic ases represent isps transit peer relationship customers running bgp multihoming ccdf plot style simplicity figure plots ccdf aggregated mapped isps figure end paper shows plots individual isps figures include pareto lognormal weibull fits calculated data highly skewed isps isp peer widely isps peer places isps relationships surprising distribution size degree heavy tailed router adjacencies adjacency degree observed pareto alpha lognormal weibull figure ccdf number router-level adjacencies as-level adjacency adjacencies include peerings isps peerings customers manage data small range covering orders magnitude peers routerlevel adjacencies ases organization peers locations locations represent discounting outliers graphs show rare isps peer thirty locations related work early attempt infer router-level map internet started list destinations traceroutes single network node mercator map collection tool run single host list hosts informed random address probing find destinations efforts explore source-routing discover cross-links improve quality network map burch cheswick bgp tables find destination prefixes source traceroute single machine improve coverage tunnels machines network similar effect source-routing skitter bgp tables database web servers skitter monitors probe network locations worldwide mapping technique differs fundamentally efforts collect router level map internet focused probing isp recover map result isp map complete obtained mapping efforts authors analyze marginal utility adding vantage points destinations discover internet backbone topology work similar minimize number measurements needed routing knowledge reducing number vantage points conclusions future work paper presented techniques mapping router-level topology focused portions internet isp end-to-end measurements shown routing information exploited ways select traceroutes expected result reduce mapping workload orders magnitude compared brute-force all-to-all approach losing accuracy turn enabled public traceroute servers measurement sources providing vantage points mapping efforts presented alias resolution technique discovered times aliases current approach based return addresses increases accuracy maps compared earlier efforts techniques map ten diverse isps releasing composite maps raw data community evaluate maps compared true map understood isp operators total number routers found scanning sampled subnets iii peerings exist bgp tables previous maps extracted skitter maps stack comparisons roughly times nodes links area focus skitter sufficiently complete metrics representative models isp networks notwithstanding clear work scratched surface isp map construction analysis readily extended dimensions data releasing study properties internet topology reported results distribution pop sizes number times isp connects networks finding distributions significant tails samples small extract properties traceroutes annotate maps improve usefulness recently devised method inferring approximate link weights characterize routes underlying topology finally improve basic techniques substantially leading mapping efficient accurate acknowledgements tom anderson guidance grateful administrators traceroute servers public service enabled work operators provided feedback quality maps lakshminarayanan subramanian scripts caida skitter data ramesh govindan provided independent verification alias resolution technique helpful mapping advice steve bellovin christophe diot randy bush early insights isp backbone pop topologies allen downey provided lognormal distribution analysis tools guidance walter willinger provided helpful feedback implications analysis results work supported darpa grant barford bestavros byers crovella marginal utility network topology measurements acm sigcomm internet measurement workshop november basu riecke stability issues ospf routing acm sigcomm august burch cheswick mapping internet ieee computer bush private communication november chang govindan jamin shenker willinger inferring as-level connectivity bgp routing tables technical report um-cse-tr- http topology eecs umich claffy monk mcrobb internet tomography nature january faloutsos faloutsos faloutsos power-law relationships internet topology acm sigcomm govindan tangmunarunkit heuristics internet map discovery ieee infocom kernen traceroute http traceroute labovitz ahuja bose jahanian delayed internet routing convergence acm sigcomm september mahajan bellovin floyd ioannidis paxson shenker controlling high-bandwidth aggregates network extended version http aciri pushback july medina matta byers brite flexible generator internet toplogies technical report bu-cs-tr- boston meyer routeviews project http routeviews padmanabhan subramanian investigation geographic mapping techniques internet hosts acm sigcomm august pansiot grad routes multicast trees internet acm sigcomm computer communication review pages park lee effectiveness route-based packet filtering distributed dos attack prevention power-law internets acm sigcomm august philips shenker tangmunarunkit scaling multicast trees comments chuang-sirbu scaling law acm sigcomm august radoslavov tangmunarunkit govindan shenker estrin characterizing network topologies analyzing impact protocol design technical report cs- usc rivest message-digest algorithm networking working group requests comment mit laboratory computer science rsa data security rfcrocketfuel maps data http washington research networking rocketfuel savage wetherall karlin anderson practical network support traceback acm sigcomm august snoeren partridge sanchez jones tchakountio kent strayer hash-based traceback acm sigcomm august sterner color landform atlas united states http fermi jhuapl states tangmunarunkit doyle govindan jamin shenker willinger size determine degree topology acm computer communication review october tangmunarunkit govindan jamin shenker willinger network topology generators degree-based structural acm sigcomm august zegura calvert bhattacharjee model internetwork proceedings ieee infocom router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull router outdegree degree observedpareto alpha lognormal weibull figure router outdegree ccdf isp router adjacencies adjacency degree observedpareto alpha lognormal weibull router adjacencies adjacency degree observedpareto alpha lognormal weibull router adjacencies adjacency 
degree observedpareto alpha lognormal weibull router adjacencies adjacency degree observedpareto alpha lognormal weibull router adjacencies adjacency degree observedpareto alpha lognormal weibull router adjacencies adjacency degree observedpareto alpha lognormal weibull router adjacencies adjacency degree observedpareto alpha lognormal weibull router adjacencies adjacency degree observedpareto alpha lognormal weibull router adjacencies adjacency degree observedpareto alpha lognormal weibull router adjacencies adjacency degree observedpareto alpha lognormal weibull figure ccdf number router-level adjacencies as-level peering broken isp 
published ieee acm transactions networking february measurement-based admission control algorithm integrated services packet networks extended version sugih jamin peter danzig scott shenker lixia zhang abstract designs integrated services networks offer bounded delay packet delivery service support real-time applications provide bounded delay service networks admission control regulate load previous work admission control focused algorithms compute worst case theoretical queueing delay guarantee absolute delay bound packets paper describe measurement-based admission control algorithm predictive service occasional delay violations tested algorithm simulations wide variety network topologies driven source models including exhibit longrange dependence aggregation simulation results suggest measurement-based approach combined relaxed service commitment predictive service enables achieve high level network utilization reliably meeting delay bound bounded delay services predictive service proposals supporting real-time applications packet networks prosugih jamin supported part uniforum research award office naval research laboratory contract -pat usc research supported afosr award number nsf small-scale infrastructure grant award number cdaand equipment loan sun microsystems parc research supported part advanced research projects agency monitored fort huachuca contract dabt -cthe views expressed reflect position policy government sugih jamin peter danzig computer science department southern california los angeles california jamin usc danzig usc scott shenker xerox palo alto research center palo alto california shenker parc xerox lixia zhang computer science department california los angeles los angeles california lixia ucla viding form bounded delay packet delivery service flow requests real-time service characterize traffic network make admission control decision typically sources peak average rates filter token bucket oon descriptions provide upper bounds traffic generated source traditional real-time service hard absolute bound delay packet csz service model called guaranteed service admission control algorithms guaranteed service priori characterizations sources calculate worst-case behavior existing flows addition incoming network utilization model acceptable flows smooth flows bursty guaranteed service inevitably results low utilization higher network utilization achieved weakening reliability delay bound instance probabilistic service provide worst-case scenario guarantees bound rate lost late packets based statistical characterization traffic approach flow allotted effective bandwidth larger average rate peak rate cases equivalent bandwidth computed based statistical model hui fluid flow approximation gan kel traffic precisely characterize traffic priori approach increase network utilization difficult impossible provide accurate tight statistical models individual flow instance average bit rate produced codec teleconfera refer interested readers jam comprehensive overview bibliography admission control algorithms ence depend participant body movements possibly predicted advance degree accuracy priori traffic characterizations handed admission control inevitably fairly loose upper bounds real-time applications vat vic recently developed packetswitched networks applications adapt actual packet delays tolerant occasional delay bound violations absolutely reliable bound tolerant applications csz scz proposed predictive service offers fairly absolutely reliable bound packet delivery times ability occasionally incur delay violations admission control great deal flexibility chief advantage predictive service measurement based admission control approach advocated csz jszc priori source characterizations incoming flows recently admitted measurements characterize flows place reasonable duration network utilization suffer significantly traffic descriptions tight relies measurements source behavior static general measurement based approach admission control provide completely reliable delay bounds needed guaranteed probabilistic service measurement-based approaches admission control context predictive service relaxed service commitments flows present unpredictability individual flow behavior dictates measurement based approaches conservative worst-case calculation measurement based admission control algorithm deliver significant gain utilization high degree statistical multiplexing summary predictive service differs important ways traditional guaranteed service service commitment reliable sources characterized token bucket filters admission time behavior existing flows determined measurement priori characterizations important differences distinct commonplace measurement-based admission control reliability service commitment note definition predictive service acceptable level delay violations reasons meaningful failure rate flow short duration reliably ensuring failure rate exceeds level leads worst-case calculations predictive service designed avoid csz approach csz proposes level reliability contractual matter network provider customers per-flow basis presume contracts level violations macroscopic time scale days weeks hundred packet times paper describe measurement based admission control algorithm predictive service demonstrate affirmative answers questions provide reliable delay bounds measurement-based admission control algorithm achieve reliable delay bounds offering predictive service increase network utilization earlier versions work published jszc jdsz incidentally work reported paper extended dkps support advance reservations authors dkps replicated results independently developed network simulator authors hlp gkk measurements determine admission control admission decisions pre-computed based assumption sources finite set source models approach applicable large heterogeneous application base approach admission control based network provider promise give customers money back violations exceed level duration flow matter short flow contend provider realistically assure excessive violations occur ongoing measurements authors measurement learn parameters assumed traffic distributions authors djm flo measurement existing traffic calculation equivalent bandwidth providing load delay bound hir clg neural network dynamic bandwidth allocation lch authors pre-computed low frequency flows renegotiate bandwidth allocation hardware implementation measurement mechanisms studied wckg measurement-based admission control ispn admission control algorithm consists logically distinct aspects aspect set criteria controlling admit flow based approximate model traffic flows measured quantities inputs aspect measurement process describe section iii section present analytical underpinnings admission control criteria sources requesting service characterize worst-case behavior flow csz characterization token bucket filter token bucket filter flow parameters token generation rate depth bucket token represents single bit sending packet consumes tokens bits packet loss generality paper assume packets fixed size token worth packet sending packet consumes token flow conform token bucket filter packet arrives token bucket empty flow idle transmitting lower rate tokens accumulated tokens flows idle sufficiently long period time dump bucket full data back back non-constant bit rate sources naturally conform token bucket filter token rate peak rates conceivable future real-time applications module time learn suitable bound traffic studied behavior admission control algorithm csz scheduling discipline csz csz scheduling discipline switch support multiple levels predictive service per-level delay bounds order magnitude admission control algorithm switch enforces queueing delay bound switch leave satisfaction end-to-end delay requirements end systems assume existence reservation protocol best-e bort versus reservations simple comparative analysis lee breslau scott shenker fbreslau shenkerg parc xerox xeroxpalo alto research center coyote hill road palo alto abstract simple analytical model paper addresses question internet retain best-e bort-only architecture adopt reservation-capable wecharacterize berences reservation-capable best-e bort-only networks terms application performance total welfare analysis yield cnitive answer question pose necessarily depend unknowable factors future cost network bandwidth nature future tra load model reveal interesting phenomena circumstances amount incremental bandwidth needed tomake best-e bortonly network perform reservation capable diverges capacity increases circumstances reservation-capable networks retain signi ccant advantages best-e bort-only networks matter howcheap bandwidth lastly cnd bounds maximum performance advantage reservation-capable network achieveover beste bort architectures introduction currentinternet bers single class best-e bort service internet bers guarantees packets delivered clients permission transmitting packets architecture tremendously successful supporting data applications recently demonstrated astonishing growth internet usage dramatic emergence worldthis researchwas supported part advanced research projects agency monitored byfort huachuca contract dabt -cthe views expressed dect position policy government wewould liketoacknowledge crucial contributions made early stages project deborah estrin subramaniam vincent wide-web internet architecture undeniable success data applications presentinternet architecture ecient support audio video so-called real-time applications internet research community devoted bort designing integrated services internet architecture whichis architecture capable end supporting systems real-time applications communicate data resource requirements applications network admitting flow admission control small algorithm sampling decide research flow area service culmination requested borts decide internet admitting engineering flow task force prevent ietf network recently promoted keeping proposed prior standard commitments extensions assume internet architecture moment admission enable control support reservations delay violations resources admission bandwidth control algorithm set analyze worst-case impact dow newly arriving flow existing flows relevantrfcs queueing delay additional supporting bursty material sources architecture token clients bucket parameters send best-e conservative bort estimates packets average traffic addition delays clients rarely approach option worst-case requesting bounds 
reservation achieve fairly reliable bound conservative approximate maximal delay predictive flows replacing worst-case parameters analytical models measured quantities call approximation equivalent token bucket filter approximation yields series expressions expected maximal delay result admission flow csz switches serve guaranteed traffic weighted fair queueing scheduling discipline wfq serve classes predictive traffic priority queueing computation worst-case queueing delay guaranteed predictive services section worst-case delay computation predictive service guaranteed service worst-case delay computations present equivalent token bucket filter close section presenting details admission control algorithm based equivalent token bucket filter approximations worst-case delay predictive service compute effect flow existing predictive traffic model worst-case delay priority queues cruz cru derived tight bound worst-case delay priority queue level derivation parekh par simpler looser bound assumes small packet sizes transmission time packet sufficiently small compared delays assumption small packet sizes ignore delays caused lack preemption assume aggregate rate aggregated traffic classes link capacity theorem parekh par worst-case class delay fifo discipline class assuming infinite peak rates sources class delay achieved strict priority service discipline class priority theorem delay bound class one-time delay burst accrues aggregate bucket classes flows simultaneously dumped switch classes sources continue send reserved rates base equation model effect admitting flow existing predictive traffic approximate traffic flows belonging predictive class single flow conforming token bucket filter conservative aggregate reserved rate flows belonging class recognize instances computed worst-case delay predictive class change flow class admitted flow higher priority class admitted guaranteed flow admitted switch priority scheduling isolates higher priority classes flow class worst-case delay re-evaluated admitting flow class remainder section compute effects predictive traffic individually end proof theorem refer interested readers par theorem jam theorem computations observe admitting higher priority predictive flow harm lower priority predictive traffic admitting guaranteed flow predictive flow priority equations denote newly computed delay bound denote sum guaranteed flows reservation link bandwidth serving predictive traffic nominal link bandwidth minus reserved guaranteed flows dow effect obtain predictive reservation flow client requests priority traffic amount model characterized effect tra admitting speci ccation flow quality predictive speci class ced service changing speci class ccation token bucket service parameters network decides satisfy request mechanistic berences integrated services proposals token bucket share parameters fundamental aspects flow applications ability reserve bandwidth network exercises control admission control reservation requests ensure level service reserved tra fundamental conceptual brought internet byanintegrated services architecture past years substantial research focus design details integrated services architecture delay investigating class grows instance term nature reservation proportional protocol flow behavior bucket measurement-based size admission effect control predictive algorithms flow service model vigor extent research activity interpreted sign consensus wisdom endeavor simmering background intense debate fundamental question reservations orwould internet dow purposes paper tra stream generated application retaining best-e bort-only architecture advocates reservations claim high cdelityinteractive audio video applications higher quality predictable network service delivered best-e bort-only internet opponents reservations hand contend simple matter provisioning reservation-capable network deliver satisfactory service blocking rate rate denies reservation requests low provisioning levels best-e bort networks provide completely adequate service service good reservation-capable network opponents maintain berential quality bset adding modest amount additional capacity best-e bort-only network bandwidth inexpensive cheaper added complexity proposed integrated services architectural extension addition ardent opponents claim adaptability modern network applications renders reservations unnecessary applications adapt service network bers researchwas initiated attempt formalize claims provide solid footing debate paper introduces simple analytical model whichwe concretely pose question internet adopt reservation-capable architecture retain beste bort-only architecture model intended complete representation reality intended illustrate accessible tractable fashion essential issues hope inform debate providing intellectual framework debate constructively continue expect work settle debate relative merits architectures depend practical concerns future cost bandwidth burden architectural complexity inputs outputs model spirit full disclosure admit authors biased favor reservations strived analysis neutral weobviously aren judges success regard toevaluate network architecture howwell meets user user employing network application utility borvalue user derives application depend application performance picture quality video sound quality audio applications application performance turn depends nature network service application receives network architectures intended provide high degree total utility sum utilityover network users simple case single link cxed load identical applications shown classes utility functions reservation-capable architecture higher level total utility review derivation section subsequentwork build results statements simpli ccations actual debate include givea davor contending arguments optimizing utility design goal competing goal keeping network architecture simple complexity network architecture hard quantify attempt clear anyintegrated services architecture signi ccantly complex best-e bort-only architecture key question performance advantage reservation-capable networks alluded signi ccant utility berence small reason incorporate reservations internet architecture burden adding signi ccant additional complexity internet architecture outweigh small increase utilityitwould bring initially address question sections variable load model extends cxed load model results variable load model show answer question posed depends critically characteristics network load nature application utility cnd conditions variable load model arguments opponents reservations largely correct cnd conditions incremental bandwidth needed equalize performance kinds networks increases capacity increases show subset cases variable load model reservation-capable networks retain signi ccant bounded performance advantage best-e bort networks matter howcheap bandwidth section extensions variable load model increase performance advantage reservation-capable networks conclude section discussion results fixed load model key berence best-e bort-only architecture reservation-capable dows denied access network send packets reservation-capable architecture network deny reservation requests question address reviewing material provide context denying reservation requests result increase utility conditions allowing dows access network maximize utility simple cxed load model single link capacity assume load link time comprised identical dows assume bandwidth allocated evenly dows dow receives bandwidth share dow represents application performance utility function bandwidth allotted function assume application receives bandwidth application receives bandwidth bandwidths berent applications berent levels performance cases nondecreasing function wemodela dow requested reservation denied service receiving bandwidth utility dows service total utilityof network function increasing utility maximized allowing dows access network lower priority case traffic compute best-e bort-only delay architecture bound admits class dows greater higher total requested utility class function directly adding maximized bucket cnite depth max reserved rate max utilitywould flow maximized denying service additional dows max max denial service requires integrated services architecture nature function determines architecture produces higher utility turn nature function depends character utility function general results interest exists neighborhood origin function convex concave convex linear region exists max max max functions admission control number users max function strictly concave number predictive classes strictly monotonically term reflects increasing function squeezing pipe case access additional bandwidth denied required admission flow control reduces needed bandwidth question lower priority flows real term application similar utility functions delay calculated traditional data reflects applications effect electronic mail flow cle burstiness transfer effect guaranteed elastic flow predictive traffic sensitive compute individual packet delay delays bound typically hard predictive real-time classes constraints directly suggests adding giving reserved rate applications additional bandwidth flow aids performance marginal improvement additional bandwidth decreases strictly concaveeverywhere maximized users denied access current best-e bort-only architecture ideal elastic applications opposite end spectrum rigid applications data arrive delay bound performance improve data arrives earlier notice bound traditional telephony guaranteed flow simply squeezes rigid pipe application reducing bandwidth applications rely predictive flows circuit-switched guaranteed service flows applications contribute needing delay due units buckets bandwidth 
forallb forallb function admission control constrain usage max applications utility curves give rise cnite max deemed inelastic function reservation-capable architecture extreme cases elastic rigid applications illustrate fact telephone internet network architectures designed meet original class applications rigid applications perform reservations data application fare adaptive utilityfunction utility bandwidth figure performance curve rate delay adaptive application video voice applications common internet internet voice fvideo applications built expect circuitswitched service designed adapt bandwidth variations packet delay appears due human perceptual factors minimal levels bandwidth low bandwidths marginal utility additional bandwidth fairly small similarly high bandwidths signal quality good marginal utility additional bandwidth high bandwidths small atintermediate levels signal quality crst starts viable marginal utility extra bandwidth signi ccant utility function modeling adaptive inelastic applications analysis function depicted figure note small large function utility function peak cnite max convex neighborhood origin adaptive nature application means decrease max ismuch gentle abrupt drop full utility utility rigid applications passes max true integrated services architecture produces superior performance adaptive audio video applications clear performance currentinternet audio video applications delay adaptive rate-adaptive adjust sending rate adjust varying packet delays elucidation bering utility curves twostyles adaptation treatment assume applications rate delay adaptive assumption makes case best-e bort-only service stronger applications suited best-e bort yields max facilitating comparisons rigid case max advantage signi ccant magnitude address issue section variable load model model reviewed previous section cxed load dows applications inelastic total utility higher reservationcapable network bered load higher max likelihood overload conditions evaluate extent performance advantage reservationcapable architecture quantify performance advantage extend cxed load model include variable loads load network cxed number inelastic dows probability distribution number inelastic dows link tokeep level complexity manageable model dynamics dows arriving departing network probability distribution static loads mixture numerical computations realistic discrete model analytical calculations tractable continuum model models similar spirit berent detail probability distributions slightly berent adaptive utility functions substantially berent results models asymptotic case large completely equivalent crst present discrete version variable load model discrete model denote probability dows requesting service denote average numberof dows requesting service assume user utility average utility load levels best-e bort-only architecture dow receives bandwidth total utility system notation refer normalized utility reservation-capable architecture dows request service min max admitted dow receives bandwidth min max min max rejected dows bandwidth total utility system max max max max notation refer normalized utility wehave inequality strict max max max max max conditions hold cases key question difference signi ccant answer question compare numerical values quantities performance gap units utility arbitrary approachmay limited assessing signi ccance determine additional bandwidth needed make beste bort-only network performance reservation-capable important quantity arguments reservations suggest performance achieved adding modest amount additional capacityto best-e bort-only network cne incremental bandwidth requirements called bandwidth gap relation reservation-capable architecture imposes burden additional complexity best-e bort-only architecture avoid extra complexity requires additional bandwidth order match performance reservation-capable architecture bandwidth gap quanti ces bandwidth versus complexity tradeo depends functions modeling separate cases representing classes inelastic applications discussed rigid adaptive rigid applications utility functions equation adaptive applications utility functions equation choice form adaptive utility function arbitrary represents extremely adaptive function non-negligible marginal utilityover wide range bandwidths modeling weclaim special wisdom nature future network loads tocover broad spectrum possibilities load distributions poisson exponential algebraic note poisson distribution exponential distribution power algebraic distribution controls asymptotic rate decrease cases cned constants chosen probability function normalized weintroduce parameters setting taking simple power law vary average distribution holding asymptotic power law cxed numerical calculations set note justify load distributions byany detailed arrival departure processes unknown aspects reality terms correlations diurnal rhythms model resulting stationary distributions wenowhave cases investigate twochoices forthe utility function combined choices load distribution solving quantities interest analytically ecult discrete variable load model numerically evaluate quantities modeling regard tractability numerical calculations necessarily cnite range values impossible make cnitive conclusions asymptotic large behavior quantities based computations analytical calculations whichwenow turn continuum model augment treatment variable load model byintroducing continuum version variable varies continuously model requiring additional simpli ccations analytically tractable discrete model simpli ccations bect asymptotic behavior quantities examine continuum model formulae max dkp max dkp max max dkp continuum model exponential algebraic load distributions easily computable addition make algebraic distribution tractable form calculations longer tractable adaptive applications utility functions equation modiced form adaptive utility function continuum model utility function parametrized bya constant conversely analytical calculations tractable asymptotic large limit numerical calculations illustrate nonasymptotic regime asymptotic behavior numerical computations poisson distribution completely unambiguous failure treat case analytically impact conclusions note reduces rigid case decreasing represents increasing levels adaptivity application max calculations identical rigid case best-e bort results signi ccantly altered utility function longer inelastic results wenow address cases berent load distributions crst rigid applications adaptive case begin relevant results numerical calculations discrete model augment discussion results continuum model poisson load distribution describes situation load fairly tightly controlled region average excursions large small loads extremely rare describes behavior poisson arrival process uncorrelated independent departure processes results closest load distributions cxed load model figure shows performance functions reservations best-e bort figure shows poisson load rigid applications note small whichwe close linear slope recall region berence performance reaches peak bandwidth gap reaches peak gaps signi ccant region slightly greater close unity closer vanish extremely quickly faster exponentially figures show functions poisson load adaptive applications contrast rigid case curves close smallest dects fact adaptive applications tolerate overload conditions performance bort degrade severely note curve continues increase past utility continues increase max decting adaptive applications tolerate overload conditions advantage underload conditions bectively rigid applications performance bandwidth gaps maximum values substantially lower rigid case region difference curves vanish superexponentially exponential load distribution describes situation load peaked average decays range exponential rate figures show functions exponential load rigid applications performance curves increase gradually poisson case redecting greater variability load levels additional berences poisson case vanishingly small linear performance gap peaks half poisson peak region decays slowly exponential case capacities rigid applications approximately poisson distribution capacities biggest contrast poisson case bandwidth gap monotonically increasing entire domain capacity increases incremental bandwidth needed make best-e bort performance equivalent reservations increases articulate behavior precisely continuum 
model rigid applications continuum equations recalling max dkp dkp dkp exponential distribution cnd addition solution grows asymptotically lnc large bandwidth gap grows logarithmically exponential loads rigid applications surprising result increase overprovisioning limit takes increasingly bandwidth render performance architectures crst puzzling performance gap decreasing bandwidth gap increasing phenomena easily understood noting approximated derivative decreasing faster gap increasing function performance gap shrinking increase utility unit bandwidth shrinking faster takes increasingly bandwidth make performance berence behavior disappears adaptive case figures show functions exponential load adaptive applications curves closer peak performance gap reduced factor capacity equals capacity equals note hitting peak bandwidth gap decreases continuum model recalling parameter continuum adaptive utility function cnd case solution large bandwidth performance gap constant opposed logarithmic growth found rigid case exponential distribution illustrates profound berence rigid adaptive applications qualitative quantitative impact adaptivity tradeo reservation-capable beste bort-only architectures algebraic distribution exponential distribution decreases range decrease slower figures show functions algebraic load rigid applications recall power algebraic distribution gap remains substantial wide range instance taking values performance gap peaks fairly lowvalue decays slowly contrast bandwidth gap increases linearly entire domain figures show functions algebraic load adaptive applications performance gap rigid applications increasing nature remains unchanged slope decreased factor continuum calculations shed light behavior recall algebraic distribution continuum model rigid applications gaps linear increase applies powers constant proportionality similar numerical calculations discrete case note limit conjecture limit represents greatest asymptotic advantage reservations haveover beste bort-only basic variable load model means worst asymptotic case variable load model best-e bort-only networks require times bandwidth reservation networks match performance reservationcapable network wfq scheduling algorithm smooths bursts observe term equivalent impact guaranteed flow adding zero-size bucket higher priority predictive flow contrasting equations experienced delay lower priority predictive traffic increases higher priority predictive flow admitted guaranteed flow same-priority predictive flow admitted wfq scheduler isolates predictive flows attempts guaranteed flows dump buckets network bursts contrast lower priority predictive traffic sees rates buckets higher priority predictive flows higher priority predictive flow squeezes pipe lower priority traffic preempts worst-case delay guaranteed service par author proves network arbitrary topology wfq scheduling discipline guaranteed delay bounds depend flows reserved rates bucket depths wfq guaranteed flow isolated isolation means long total reserved rate guaranteed flows link bandwidth guaranteed flows existing miss delay bounds accepting guaranteed flow admission control algorithm assure flow predictive flows miss delay bound over-subscribe link link bandwidth utilization target section iii-b discussion utilization target addition protecting guaranteed flows wfq isolates protects guaranteed flows predictive traffic equivalent token bucket filter equations describe performance aggregate advantage traffic best-e bort predictive class ratio single token additional bucket bandwidth filter needed make determine class berence token bounded bucket parameters adaptive completely case conservative approach make sum parameters constituent flows data sources bursty flows declare conservative parameters cover worst-case bursts notethat sum limit declared parameters result alna low link utilization limit algorithm constant approximate proportionality vary optimistic advantage statistical toe multiplexing measured depending values nature providing adaptive utility worst function notice case gain higher asymptotic utilization behaviors risking packets discrete continuum occasionally models miss agree delay bounds algebraic essence distribution disagree describe existing smaller aggregate traffic predictive class continuum model equivalent token bucket constant filter parameters asymptotic determined advantage traffic care measurement equations nature equally terms large current delays cases usage rates ratio bucket depths usage rates smaller easier measure discrete delays model measure bucket structure depths curveatlower values measured values due predictive berence class algebraic aggregate distribution bandwidth utilization vary class average changing experienced power packet law queueing delay inserted constant discrete class version perturbed guaranteed service distribution count lower sum values reserved rates versus measure actual bandwidth utilization realistic distribution guaranteed flows continuum approximation based pure speculation substituting point equations measured rates explain impact results reserved rates inanyevent asymptotic substituting behavior measured una delays bected adaptive utility function numerical computations behaves maximal delays previous large computations equation measured values wethink formulate exponential admission approach control algorithm asymptotic admission control realistic algorithm choice predictive flow utility incoming functions flow approach requests asymptotic service values predictive slowly class instance admission family control offunctions algorithm denies request approach sum flow algebraically requested rate large current berence usage turns exceed important targeted link utilization algebraic load level distributions focus important aspect large behavior make calculation tractable denies request form admitting flow violate delay bound captures behavior high priority level ignores behavior low form cnd max algebraic loads total utilities violation form lower priority classes delay bound constants note asymptotic behavior large depends ifr large asymptotically increases linearly guaranteed asymptotically flow decreases incoming flow wehave observed requests similar guaranteed behavior service admission calculations control variable algorithm load denies model request introduced section bandwidth illustrates check performance fails bandwidth gaps reserved bandwidth architectures guaranteed flows function exceeds targeted yields link insight utilization level relevant crucial denies behavior request delay bounds radically predictive berent classes violated behavior bandwidth predictive section service decreased gain insightinto request choice variable capacity model capacity level present network impossible question answer general depend market investigated form captures request satisfies low behavior inequalities high flow behavior admitted obtained iii asymptotic simple results time-window resembled measurement mechanism original formulae utility function factors previous section future rely cost measured bandwidth values level network usage attempt inputs clarify describe situation section presentavery simpli time-window ced measurement analysis mechanism economic measure tradeo quantities cost additional bandwidth admission control utility equations fundamental assume principles network underlying service provider make making claim provisioning decision measurement provide process additional bandwidth measurement process cost constants unit bandwidth assume discussion service roles provider sets performance tuning provisioning knobs level maximize description total measurement welfare process measurement process based measurements assumption experienced delay provider utilization recover estimate utility delays measure charging queueing delay customers packet quantity estimate utilization represents sample pro cts usage rate network guaranteed provider maximizing service welfare rise function predictive class describing capacity function sampling price period length welfare provided packet transmission network units computed describe measurements compute estimated maximal delay estimated utilization measuring delay measurement variable tracks estimated maximum queueing delay class measurement window packet transmission units basic measurement block updated occasions end measurement block update reflect maximal packet delay previous block individual delay measurement exceeds estimated maximum queueing delay estimate wrong immediately update times sampled delay parameter conservative increasing higher actual sampled delay finally update flow admitted projected delay admission control equations algebraically updating past measurement window side adding flow depending service class requested flow measuring rate measurement variables track highest sampled aggregate rate guaranteed flows predictive class heretofore shorthand updated occasions end measurement block update reflect maximal sampled utilization previous block individual utilization measurement exceeds immediately update sampled finally update flow admitted algebraically updating past measurement window average rate averaging period adding flow measured rate guaranteed traffic capped sum guaranteed reserved rate flow leaves network explicitly adjust measured values 
measurement mechanism adapt observed traffic automatically subtract reserved rate departing guaranteed flow sum guaranteed reserved rate performance tuning knobs constants algorithm simple queue variance delay diverges system approaches full utilization measurement-based approach doomed fail delay variations exceedingly large occur high utilization identify utilization target require admission control algorithm strive link utilization level utilization target link depends characteristics traffic flowing source rate small compared link capacity small grain size bursts short link utilization target set higher bursty sources big long bursts long idle periods require lower link utilization target paper set utilization target capacity simulations single instance packet delay current estimate typically subsequent delays larger packet queueing delay higher class estimated maximal delay back delay estimate larger paper averaging period controls sensitivity rate measurement smaller averaging period sensitive bursts larger averaging period smoother traffic appears captures individual bursts make admission control conservative desired paper packet transmission times increased values stay high end respective measurement window size controls adaptability measurement mechanism drops traffic load smaller means adaptability larger results greater stability window size utilization measurement utilization samples times measurement windows load delay maintained independently admit flow add worst case effect measured values restart measurement windows give measurement mechanism window gather information flow performance knobs tuning pronounced effect experienced delay link utilization varying related effects admission control algorithm length measurement block determine long previous maximal packet delay sampled utilization increasing makes estimates conservative turn makes admission control algorithm conservative larger means fewer delay violations lower link utilization controls long continue calculated estimate delay utilization induced newly admitted flow recall flow admitted artificially increase measured values reflect worst-case expectations restart measurement window calculated effects flows measured effects survive entire period flow arrival means average flow reservation rate link bandwidth assuming convenience admit number flows admit anymore flow end period lifetime flow approximately number flows admitted period end average lifetime average flow approximately number flows average rate average flow ideally link stable utilization level flows depart network expected number admitted flow departures period depends number flows duration number departures significant flow smaller number flows lifetime stable smaller average reservation rate size stablea determined average flow duration shorter average flow duration means departure long run aim equivalently flows reserved meaning give flows reservations present illustrative simulation results importance ratio section iv-e note infinite computed values conservative bounds ignore measurements suffer delay violations hop infinite parameter region reliability simulations admission control algorithms guaranteed service verified formal proof measurementbased admission control algorithms verified experiments real networks simulator tested algorithm simulations wide variety network topologies driven source models describe simulations paper case achieve reasonable degree utilization compared guaranteed service low delay bound violation rate conservative aim delay bound violation simulations present results simulations present topologies source models simulations hosta switch switch hostb one-link two-link four-link hosta switch switch hostb switch hosta switch switch hostb switch switch hostd hoste switch hostc hostc fig one-link two-link four-link topologies simulated topologies paper ran simulations topologies one-link two-link fourlink tbone topologies depicted figures topologies host connected switch infinite bandwidth link connection switches topologies mbps links infinite buffers one-link topology traffic flows hosta hostb two-link case traffic flows host pairs source destination order hosta hostb hostb hostc hosta hostc flows assigned host pairs uniform probability four-link topologies traffic flows host pairs hosta hostc hostb hostd hostc hoste hosta hostd hostb hoste hostd hoste flows distributed host pairs uniform probability figure host pairs paths packets traverse directed curve lines tbone topology consists mbps links depicted figure traffic flows host-pairs major currents shown figure numbers directed edge figure denote current total utility derived network minus cost denote quantities architectures similarly model wenow compare quantities comparing quantities aswe previous section compared utilities capacity level wenow compare welfare values price bandwidth comparison welfares recognizes fact make capacity decisions based part choice architecture wemust strict inequality holding long cases welfare berence compared additional complexity needed comparing absolute relative welfare values informative measure bandwidth price bandwidth price twowelfares equal ratio howmuch expensive bandwidth integrated services architecture assuming cost linear bandwidth order beste bort-only network cost-e bective quantify cost additional complexity howmuch extra per-unit-bandwidth takes build network good approximation reality ecient illustrate point compare additional utility provided reservations additional cost complexity figures display equalizing price ratio cases poisson load distribution rigid applications provisioning levels shown remain moderate smallest pricing levels price ratio makes architectures equivalentvaries present edge host-pairs listed table flows host-pairs ride current flows host rides current figure checkered box switch instrumented switch study traffic flowing switch link adjacent checkered box table forty-five host pairs tbone source destination source destination instrumentation mbps mbps mbps tbone topology traffic currents tbone fig tbone topology source models kinds source model simulations processes differ distribution time call holding time cht call flow duration flow lifetime two-state markov process widely literature recent studies ltww dmrw bstw shown network traffic exhibits long-range dependence lrd implications congested periods long slight increase number active connections result large increase packet loss rate called attention possibly damaging effect long-range dependent traffic measurement-based admission control algorithms investigate lrd related questions augmented simulation study lrd source models exp model model model exponentially distributed times period exponentially distributed random number packets average generated fixed rate packet sec milliseconds average exponentially distributed times average packet generation rate exp model section model packetized voice encoded adpcm kbps lrd pareto-on model process pareto distributed times ease call paretoon model period pareto distributed number packets pareto shape parameter generated peak rate packet sec times pareto distributed milliseconds shape parameter pareto shape parameter data infinite shape parameter results data infinite variance pareto location parameter pareto-on source generate lrd series aggregation wtsw lrd fractional arima number generated fractional autoregressive integrated moving average farima process number fixed-size packets back back period interarrivals periods fixed length practical programming reasons generate series farima data points beginning simulation farima source picks uniformly distributed number index series reaching end series source wraps beginning method similar authors simulate data sevtokens generated rate tokens token bucket filter user process packet time packet time host max transmission rate host network packets transmitted rate packet data queue averaging interval traffic generator fig traffic model token-bucket filter eral sources variable bit rate vbr video trace fractional arima model generates longrange dependent series marginal distribution farima generated series gaussian vbr video traces exhibit low average high peaks farima output model traffic single vbr video source simulation results aggregation farima generated series model aggregate vbr video traffic coming subnetwork farima model takes parameters autoregressive process order set weights degree integration values moving average process order figure set weights adding reservations requires added innovation gaussian cost marginal distribution bandwidth hos domain details prices generate reservationcapable network distributed innovation preferable choice bandwidth standard deviation exceedingly cheap packets minimum longer holds farima output switch adaptive applications shift poisson series load adding distribution absolute capacity levels minimum signi ccantly number higher decting series fact obtaining adaptive non-negative applications series advantage note underloaded situations shifting capacity process levels constrains maximum generated series welfare levels average whittle maximum likelihood estimator ber price levels shown figure equalizing price ratio bectively higher values adding reservation capability network incurred signi ccant perunit-bandwidth cost best-e bort-only architecture preferable choice results exponential load distribution fairly similar poisson distribution treat exponential case analytically rigid applications welfare maximized best-e bort-only cce function cned implicitly largest solution reservation case maximizing capacityisc lnp plnp ratio prices equal welfares solution equation lnp note ratio converges lnp lnp adaptive applications welfare maximized best-e bort-only small crst term dominates wehave approximately pln recall reservation case lnp ratio prices equal welfares approximately lnp approaches logarithmically rigid adaptive case rate converges bered factor lnp key feature exponential poisson distributions equalizing ratio converges price bandwidth approaches implies bandwidth cheaper beste bort-only network preferable complexityof reservations imposes signi ccant cost building managing network contrast algebraic case converge shown figures con crmed analysis reservation capable network imposes small nonvanishing additional per-unit bandwidth matter inexpensive bandwidth reservation-capable architecture preferable choice rigid applications welfare maximized best-e bort-only reservation case maximizing capacityisc ratio prices equal welfares consistent numerical computations takes values approaching approaches recall note ratio conjecture limit represents greatest asymptotic advantage reservations haveover best-e bort-only conjecture asymptotic ratios lim limc maximal cases worst asymptotic case conjecture best-e bort-only networks require times bandwidth reservation networks price constructing reservation-capable networks times expensive constructing best-e bort-only networks best-e bortonly networks advantageous matter load distribution adaptive applications welfare maximized best-e bort-only ratio prices equal welfares note ratio alna ratio varies case direct comparisons numerical calculations berent adaptive utility functions discrete continuum models discrete case approximately approaches extensions model wehave considered extensions model capture potentially relevant elements included basic model extensions suchas heterogeneous dows size utility risk-averse utility functions utility average performance experienced nonstationary loads probability distribution cxed change basic nature asymptotic large results substantially perturbed results region belowwe report brie extensions alter 
asymptotic results significantly detailed description extensions results sampling basic model weevaluate utilityofa dow single load level assume dow shares link dows probability load level constant entire duration dow reality lifetime dow dows arrive depart dow experience ductuating load level constant ductuating load level turn creates ductuations instantaneous application performance picture quality video stream vary time teleconferencing application varying quality user utilitymay average performance experienced closer minimal performance experienced understand impact mighthaveon results examined extension model dow samples performance times sample number dows sharing link picked independently distribution performance function maximal samples reservation case wehave stipulate acceptance frejection decision based crst sample ifk max dow admitted probability max bective load subsequent samples min max dow admitted faces total load greater max resulting formulae normalized average utilities max max max max max max max max probability maximal obtained independent samples multiple samplings bect poisson case distribution results variance load exponential algebraic cases hand reveal signi ccantchanges adaptive rigid applications performance bandwidth gaps best-e bort reservations increase relative original model performance gap exponential distribution adaptive applications capacity sampling model original model berence dected bandwidth gap basic model peak load occurring multiple samplings peak bandwidth gap occurs roughly asymptotically case converges similar evident algebraic distribution versions equations continuum model understand theasymptotic behavior multiple samples exponential distribution rigid applications cnd lnc sampling extension signi ccantly alter asymptotic nature results similarly asymptotic results limit small altered sampling extension algebraic distribution rigid applications large cxed wehave lim lim note limit asymptotic ratio large asymptotic price ratio small diverges longer apparent bounds asymptotic ratio asymptotic ratio basic model computes analogous quantities adaptive utilities asymptotic ratios lim lim adaptive applications limits diverge limit load distribution algebraic close amount extra bandwidth needed close performance gap exceedingly large cost penalty reservation-capable networks extremely high reservation-capable networks provide higher levels ofwelfare retrying basic model reservation-capable network rejected dow modeled utility reality rejected dows time previously rejected dow admitted point receives full performance utility user dissatisfaction due delay incurred reservation networks trade assured levels performance cost delay access network model assuming utility penalty retry call toavoid model actual retry process assume retries rejected dows obey basic distribution original probability distribution expressed byintroducing notation denoting distribution average original model parameter total bered load including retries average utility incorporate retries bdl represents average perdow utilityin basic model retries denotes average number retries dow makes interesting aspect extension elastic applications reservationcapable network provide higher utility case discard standard max maximizer cnite elastic applications cnite treating load level variable dow bers performance penalty time retries poisson exponential cases show minimal bects retrying algebraic cases exhibit signi ccantchanges interestingly bects apparent region instance adaptive utility performance gap confirms shifting cropping overlaying farima generated series destroy long-range dependence figure shows packet-arrival depiction source context 
host tokenbucket filter make traffic generation source conform token bucket filter host queue packets arriving empty bucket tokens data queue length packets arrive empty token bucket immediately dropped addition source burstiness network traffic dynamics capacity retries contrast retries signi ccantly price ratio curve previous cases monotonically increasing decreases small means bandwidth cheaper advantage reservationcapable networks increases theory suggests curve increase bound decreases converges cnite maximum continuum formulation yield closed form solution analyze large limit blocking rate small denote blocking rate load large small good approximation crst order wehave note large limit average utility dow unity minus blocking rate crst order expression expresses obvious result large disutility penalty retrying exponential loads large rigid applications remains logarithmic adaptive applications retrying exponential case asymptotic constant adaptive applications algebraic loads rigid applications lim lim adaptive applications lim lim note rigid adaptive cases asymptotic ratios diverge limit extending basic model incorporate retrying blocked dow requests leaves qualitative results unchanged algebraic case asymptotic ratios unbounded limit note extensions presented retained property algebraic case proportional large limit cnite small limit distributions quantities smaller appears generic propertyofsuch models rigid applications analysis easier large disutility reservationcapable networks proportional fraction blocked dows disutility beste bort-only networks proportional numberof dows present overload periods call long ratio cnite generic results hold class models time ratio diverges average number dows cnite occurs ratio diverge dows long lived dow eventually experience overload condition correspond case diverging sampling extension discussion wenow review results discuss implications analysis internet adopt reservation-capable architecture analysis addressed rigid adaptive applications beginning review note questions extent application adaptivity remain rigid utility function embodies extreme representativeofany future internet application adaptive utility function embodies fairly large utility wide range bandwidths bandwidth level reservationcapable architecture admit application represent extreme case byoverstating extent applications adapt caution rigid adaptive utility functions fact representtwo extremes continuum realitymay lie initial model showed signi ccant performance bandwidth gaps best-e bort-only reservation-capable networks rigid applications true poisson distribution whichis load model exhibits variance distributions considered wide range bandwidth prices reservations superior best-e bort complexityof reservation architecture adds total cost network adaptive applications changed picture dramatically basic model makea case reservation-capable network exponential poisson load models adaptive applications poisson model highest price levels architectures perform exponential model berences architectures small algebraic distribution doubt case bandwidth gap grows linearly function capacity price ratio whichwelfare equalized converge bandwidth cheap answer depends howmuch cost increased complexity reservations adds network extensions basic model sampling account variation performance time including retries reservation-capable architecture increased gaps architectures rigid adaptive applications berent price regimes bandwidth expensive sampling opened large gap exponential distribution adaptive applications bandwidth cheap extensions changed asymptotic behavior algebraic distribution basic model asymptotic extra bene reservation-capable networks bounded limit lim lim modiced model retries sampling limits removed performance advantages unbounded limit results make clear answer effected arrival pattern duration flows simulator drive simulation number flow generators generator start stop times average flow interarrival time maximum number concurrently active flows mix transport protocol source model token bucket filter service request ascribed flow ascribe exponentially distributed lifetimes exp model mol duration lrd sources lognormal distribution bol dmrw interarrival times flows exponentially distributed parameter choices chose instantiations source models summarized table table means time packets period transmitted back back real networks packets back back applications generate traffic faster network transmit table list settings token bucket parameters assigned source column table labeled cut rate average number packets dropped flow token bucket filter total number packets flow data queue length packets immediately dropped arriving empty token bucket column labeled max qlen shows maximum data queue length flow expect data queue infinite length assign flow data queue infinite length simulations packets arrive empty token bucket queued queue overflows recall paper fixed packet size token worth kbits data packet size shape parameter pareto distributed table instantiations source models model parameters token bucket parameters bound model pkt tkn cut max sec msec pkts sec tkns rate qlen exp exp exp poo poo farima time pareto-on sources selected observations wtsw shape parameter pareto distributed time stays paper poo sources poo model token bucket rate equals source peak rate token bucket filter reshape traffic poo model generated packets queued means source alleged times draining data queue network poo model traffic wire pareto-on flow token bucket parameters requests guaranteed service maximal queueing delay ignoring terms proportional single packet time par column table labeled lists guaranteed delay bound source assigned token bucket filter column labeled lists predictive delay bound assigned source simulate classes predictive service predictive bound msecs means class predictive service msecs class chosen token bucket parameters cases delay bounds flow predictive guaranteed services facilitates comparison utilization levels achieved predictive guaranteed services cases delays poo farima cases utilization comparison meaningful poo case predictive delay bound smaller guaranteed bound utilization gain find understates true gain farima source autoregressive process order weight degree integration resulting generated series hurst parameter order autoregressive process weight means farima traffic strong short-range dependence maintaining stationarity interarrival time periods gaussian innovation fed farima process packets standard deviation simulations tbone topology flow interarrival times exponentially distributed average milliseconds system memory limitation set average flow interarrivals simulations tbone topology seconds average holding time exp sources seconds poo farima sources lognormal distributed holding times median seconds shape parameter ran simulations seconds simulated time data presented obtained half simulation visual inspection determined simulated seconds sufficient time simulation warm simulations long-range dependent sources requesting predictive service requires longer warmup period ran simulation involving sources hours simulation time reported data seconds divide remainder section subsections show predictive service yields higher level link utilization guaranteed service provide supporting evidence results simulations homogeneous heterogeneous traffic sources single-hop multi-hop networks depending traffic burstiness utilization gain ranges order magnitude basic conclusion paper provide simulation results illustrate effect ratio network performance discussed section iii-b show larger ratio yields higher utilization reliable delay bound smaller stable delay estimate lower utilization present sample path snapshots illustrating effect finally close section discussion general allocation properties admission control algorithms flows equivalent properties original question depends large part load patterns future internet general strong case reservations poisson exponential distributions tail distributions reasonable amount provisioning makes berences architectures insigni ccant algebraic distribution low reservations yielded signi ccant bene cts case bort performance degrades wider variance load clear network loads distributions recent results selfsimilar behavior variety contexts make algebraic distributions far-fetched mighthave years ago nonetheless cnitive evidence aware results frustratingly ambiguous fundamental question architecture unambiguously point fully understand load distributions future networks face jan beran robert sherman murad taqqu walter willinger long-range dependence variable-bit-rate video tra ieee transactions communications february braden zhang berson herzog jamin resource reservation protocol rsvp version functional speci ccation technical report rfc internet engineering task force september lee breslau scott shenker best-e bort versus reservations simple comparative analysis submitted acm transactions networking june david clark scott shenker 
lixia zhang supporting real-time applications integrated services packet network architecture mechanism proceedings acm sigcomm pages august mark crovella azer bestavros self-similarity world wide web tra evidence proceedingsof sigmetrics domenico ferrari anindo banerjea hui zhang network support multimedia discussion tenet approach computer networks isdn systems july sally floyd comments measurement-based admissions control controlled-load services submitted ccr july sugih jamin peter danzig scott shenker lixia zhang ameasurement-based admission control algorithm integrated services packet networks ieee facm transactions networking february leland murad taqqu walter willinger daniel wilson self-similar nature ethernet tra extended version ieee facm transactions networking february abhayk parekh robert gallager generalized processor sharing approachto dow control integrated services networks single-node case ieee facm transactions networking june vern paxson sally floyd wide-area tra failure poisson modeling proceedings acm sigcomm pages london united kingdom august acm shenker partridge guerin speci cation guaranteed quality service rfc internet engineering task force september shenker wroclawski network element service speci ccation template technical report rfc internet engineering task force september scott shenker fundamental design issues future internet ieee journal selectedareas communications september topolcic experimental internet stream protocol version st-ii rfc sri network information center october wroclawski speci ccation controlled-load network element service rfc internet engineering task force september wroclawski rsvp ietf integrated services technical report rfc internet engineering task force september lixia zhang steve deering deborah estrin scott shenker daniel zappala rsvp resource reservation protocol ieee network magazine september poisson distribution utility rigid applications utility adaptive applications utility capacity reservations effort inherent utility capacity admission reservations control algorithms effort admission bandwidth criterion gap avoid rigid service applications commitment bandwidth violations gap adaptive viability predictive service considered source models applications network incremental topologies capacity single hop multi-hop traffic mixes capacity incremental capacity traffic capacity loads consisted identical equalizing source price models ratio requesting rigid applications service equalizing price homogeneous ratio case adaptive source models levels service heterogeneous applications case ratio price organization presentation section homogeneous sources single hop homogeneous effort sources ratio price multi-hop heterogeneous effort sources single figure hop poisson distribution heterogeneous sources utility multi-hop bandwidth homogeneous gap sources price ratio single-hop equalize case welfare homogeneous rigid sources adaptive sources applications exponential employ distribution utility kind rigid traffic applications model utility adaptive kind service table applications iii utility single-hop capacity homogeneous reservations sources simulation results model guaranteed predictive effort util utility actv capacity util actv reservations effort bandwidth gap exp rigid applications bandwidth exp gap adaptive exp poo applications poo incremental capacity farima subsequent single-hop simulations topology depicted capacity figure incremental capacity capacity source equalizing price ran ratio kinds rigid simulation applications equalizing price sources ratio requesting adaptive guaranteed service sources requesting predictive service applications results ratio price simulations shown table iii column labeled util effort ratio link price utilization effort bottleneck link figure actv exponential column distribution utility snapshot bandwidth gap average number price ratio active flows equalize concurrently welfare running rigid bottleneck adaptive link applications algebraic distribution utility column rigid applications maximum utility experienced delay adaptive predictive class packets applications column utility lists capacity ratio reservations average flow duration measurement window effort utility source capacity model reservations repeated predictive service simulations times time random seed obtain confidence intervals found confidence interval numbers tight utilization level poo sources predictive service confidence interval confidence interval maximum experience delay number reported table ceiling observed maximum mentioned section iv-b performance admission control algorithm good delay bound violation simulation run restrictive requirement table iii predictive service consistently network achieve higher level utilization guaranteed service utilization gain large sources smooth instance source model exp peak rate average rate data shows increase utilization argue theoretical upper bound utilization increase peak average ratio contrast bursty sources predictive service achieve orders magnitude higher utilization compared achievable guaranteed service source model exp bursty source infinite peak rate sends packets back back token bucket size exp flows request reservations kbps token bucket rate sources guaranteed service flows admitted mbps bottleneck link utilization target actual link utilization predictive service flows served average resulting actual link utilization homogeneous scenario class predictive service constantly oversubscribed link measurement-based admission control algorithm easily adapts lrd traffic coming flows utilization increased poo poo sources utilization gain farima sources modest source maximum time average artifact shifting discussed section iv-b obtain nonnegative values farima generated series cases achieve high levels utilization incurring delay violations test effect long times measurement-based algorithm simulated poo sources infinite duration utilization target link capacity high percentage packets missing delay bound lowering utilization target provided room accommodate traffic bursts scenarios reason conclude lrd traffic poses special challenges parameter-based admission control algorithms set utilization target achieve higher utilization scenario simulated guaranteed flows admitted table multi-hop homogeneous sources link utilization link model guaranteed predictive topology util util exp exp poo two-link exp exp poo exp poo farima exp poo farima four-link exp poo farima exp poo farima measurement-based approach homogeneous sources multi-hop case ran simulations multi-hop topologies depicted figures 
top half table shows results simulations two-link topology utilization numbers links connecting switches topology source models employed exp exp poo models simulation bottom half table shows results simulating source models exp poo farima four-link topology source model ran simulation sources request guaranteed service sources request class predictive service important result note predictive service yielded reasonable levels utilization incurring delay violations utilization levels utilization gains compared guaranteed service roughly comparable achieved single hop case heterogeneous sources single-hop case simulations heterogeneous sources simulation source model instantiations source token bucket listed table requesting predictive service requests delay bound listed table ran kinds simulation heterotable single-hop single source model multiple predictive services link utilization model gpp exp exp exp poo poo farima geneous sources single source model requesting multiple levels predictive service multiple source models requesting single class predictive service multiple source models requesting multiple levels predictive service cases compared achieved utilization achieved guaranteed service cases experimented sources request guaranteed predictive services multiple source service models involved model equal probability assigned flow simulations experienced delays respective bounds table shows utilization achieved flows source model requested classes predictive service guaranteed predictive class guaranteed predictive classes gpp case flows request predictive class assigned source model study table cases predictive classes bounds msecs requested compare numbers column table util column table iii guaranteed service presence predictive traffic invariably increases network utilization simulation results multiple source models requesting single service model table shows utilization achieved selected pairings models column headings source model pairs row shows utilization achieved guaranteed service predictive service numbers speak finally table vii show utilization numtable single-hop multiple source models single service link utilization exp exp exp exp exp poo service poo exp poo effort bandwidth gap rigid applications bandwidth gap adaptive applications incremental capacity capacity incremental capacity capacity equalizing price ratio rigid applications equalizing price ratio adaptive applications ratio price effort ratio price effort farima figure farima algebraic farima distribution utility guaranteed bandwidth gap price predictive ratio table equalize vii welfare single-hop multiple rigid source adaptive models applications 
multiple predictive services link utilization exp exp exp exp exp poo service exp farima poo poo poo farima guaranteed guar pred predictive bers flows multiple source models requesting multiple service models row shows utilization achieved flows asked guaranteed service row shows utilization half flows requests guaranteed service half requests predictive service suitable characteristics table row shows utilization achieved source requests predictive service suitable characteristics heterogeneous sources multi-hop case ran simulations source models topologies table viii show utilization level bottleneck links topologies contrast utilization achieved guaranteed service guaranteed predictive services observed low predictive service utilization link due constraint enforced admission decisions due lack traffic flows caused rejection multi-hop flows hops explain section iv-f utilization gains tbone topology pronounced topologies partly limited simulation resources drive simulations table viii singleand multi-hop source models services link utilization topology link guaranteed guaranteed predictive util util one-link wo-link our-link tbone higher offered load recall flow interarrivals simulations tbone topology average seconds order magnitude larger milliseconds topologies results measurementbased admission control algorithm provide reasonable reliability significant utilization gains conclusions hold single hop topologies smooth traffic sources multi-hop configurations long-range dependent traffic tested reasonable time verify approach exhaustive comprehensive simulation results encouraging section iii-b showed related effects admission control algorithm small results delay violations lower link utilization long depresses utilization keeping artificially heightened measured values longer effect linked flow duration flow exhibits long-range dependence effect closely linked average flow duration general results section meant canonical illustrations effect admission control algorithm provide full details simulations obtained table show average link utilization maximum experienced delay simulations flows average duration sectable effect util util util onds varied measurement window packet times packet times notice smaller yields higher utilization higher experienced delay larger reliable delay bounds expense utilization level fixed varied average flow duration table shows average link utilization maximum experienced delay values average flow duration fixed varied average flow duration seconds practically infinite simulation duration length seconds notice longer lasting flows higher achieved link utilization larger measurement periods yield lower link utilization link utilization highest ratio largest lowest ratio smallest hand smaller ratio means lower experienced delay larger means opposite lowering ratio decrease delay violation rate figures provide sample path snapshots showing effect delay link utilization note yields artificially low utilization conjunction source model yield utilization burstier sources sources longer burst time smaller larger simulated time secs delay msecs actual measured simulated time secs delay msecs actual measured fig effect experienced delay larger smaller simulated time secs utilization measd actual flows simulated time secs utilizationutilization measdmeasd actual flows fig effect link utilization unequal flow rejection rates admission control algorithms literature based violation prevention paradigm switch decides admit flow switch meet service commitments words criteria considered admission control algorithms based violation prevention paradigm service commitments violated result admission section discuss policy allocation issues arise flows completely equivalent flows characteristics service requests holding times path lengths compete admission admission control algorithms based purely violation prevention produce equilibria categories flows experiencing higher rejection rate categories identify unequal rejection rate flows traversing larger number hops higher chance rejected network flows requesting resources rejected network effect hop count flow rejection rates expected network loaded simulations multi-hop flows face increased chance denied service network simulation homogeneous sources two-link network reported table exp sources admitted guaranteed service single-hop flows true bottleneck links smaller percentage flows admitted predictive service single-hop flows effect pronounced sources request larger amount resources poo farima sources exacerbated sources longer lifetimes fewer departures network flows higher rejection rate disparity kinds flow present link phenomenon affects link utilization upstream switches switches closer source hosts yield lower utilization downstream switches observe switches carry multi-hop flows starved admission rejections downstream switches utilization numbers link tables viii consistently lower utilization links fourlink topology notice set simulations single hop flow link low utilization due constraint put link admission decisions due multi-hop flows rejected downstream switches non-consummated reservations depress utilization upstream switches illustrate flow admitted upstream switch rejected downstream switch upstream switch increased measurement estimates anticipation flow traffic traffic takes time expiration current measurement window increased values back time switch give reserved resources flows effect comparing utilization bottleneck links two-link topology reported table note presence phenomenon utilization achieved predictive service measurement-based admission control algorithm outperforms achieved guaranteed service effect resource requirements flow rejection rates sources request smaller amount resources prevent requesting 
larger amount resources entering network simulation exp exp source pair reported table guaranteed flows admitted simulation warmup period exp flows resource demanding contrast flows admitted predictive service measurement-based admission control algorithm resource demanding exp flows manifestation case sources large bucket sizes high priority class delay lower priority class affected rate bucket size higher priority flow explained section ii-a admission control algorithm reject flows large bucket size high priority smaller bucket size low priority phenomenon simulation source model exp reported table sources request classes predictive service equal probability flows admitted simulation warmup period class sources request guaranteed class predictive service flows ends guaranteed flows scenarios link utilization achieved lower achieved flows request class predictive service table iii order magnitude higher achieved flows request guaranteed service table iii unequal rejection rate phenomenon policy issue policy issues delay violations network meeting service commitments original purpose admission control resulting allocation bandwidth uneven meet policy requirements network stress unequal rejection rate phenomenon arises admission control algorithms based violation prevention paradigm fact data shows uneven allocations occur sharper contrast flows request guaranteed service admission control simple bandwidth check service commitment violations admission control criteria ensure policy goals met purpose showing policy issues highlight existence offer mechanisms implement policy choices subject future research orthogonal focus measurementbased admission control miscellaneous practical deployment considerations addressed issue adjust level conservatism automatically crucial measurement-based approaches widely deployed values parameters determined observed traffic longer time scales discussed simulated produced higher order control algorithm simulations presented paper chose simulation yielded delay bound violation simulation acceptable level utilization note measurement-based approach vulnerable spontaneous correlation sources channels air coverage major event flows suddenly burst time delay violations result aware prevent kind delay violation network predict correlations rely uncorrelated nature statistically multiplexed flows render possibility event mentioned earlier flows present large-grain flows dominate link bandwidth unpredictability individual flow behavior dictates measurement-based admission control algorithm conservative rely measurements worst-case parameters furnished source perform bandwidth check eqn maxa maxa sum reserved guaranteed rates sum reserved rates class number predictive classes fraction completely conservative case similarly delay check predictive class delay check determined section ii-d conclusion paper presented measurement based admission control algorithm consists logically distinct pieces criteria estimator admission control criteria based equivalent token bucket filter model predictive class aggregate traffic modeled conforming single token bucket filter enables calculate worst case delays straightforward manner estimator produces measured values equations representing admission control criteria shown simple measurement estimator provide reliable delay bound predictive service conclude predictive service viable alternative guaranteed service applications tolerate occasional delay violations bursty sources predictive service fairly reliable delay bounds network utilization significantly higher achievable guaranteed service appreciations extended version acm sigcomm paper jdsz benefited discussions sally floyd srinivasan keshav walter willinger improved incorporating suggestions anonymous referees adas mukherjee resource management qos guarantees long range dependent traffic proc ieee infocom apr abe soumiya traffic control method service quality assurance atm network ieee journal selected areas communications feb ber beran statistics long-memory processes york chapman hall box jenkins time series analysis forecasting control jersey prentice hall bol bolotin modeling call holding time distributions ccs network design performance analysis ieee journal selected areas communications apr bstw beran sherman taqqu willinger long-range dependence variable-bitrate video traffic ieee transactions communications conti interconnection dual bus mans architecture algorithms bandwidth allocation journal internetworking research experience march clg chong s-q ghosh predictive dynamic bandwidth allocation efficient transport real-time vbr video atm ieee journal selected areas communications jan cru cruz calculus network delay part network elements isolation ieee transactions information theory jan csz clark shenker zhang supporting real-time applications integrated services packet network architecture mechanism proc acm sigcomm pages aug url ftp parcftp parc xerox pub netresearch csz sigcomm djm dziong juda mason framework bandwidth management atm networks aggregate equivalent bandwidth estimation approach acm ieee transactions networking feb dkps degermark ohler pink schel advance reservations predicted service proc int network operating systems support digial audio video workshop pages apr dmrw duffy mcintosh rosenstein willinger statistical analysis ccsn traffic data working ccs subnetworks ieee journal selected areas communication apr flo floyd comments measurementbased admissions control controlledload service submitted computer communication review url ftp ftp lbl gov papers admit ferrari verma scheme realtime channel establishment wide-area networks ieee journal selected areas communications gan erin ahmadi naghshineh equivalent capacity application bandwidth allocation high-speed networks ieee journal selected areas communications sept gkk gibbens kelly key decision-theoretic approach call admission control atm networks ieee journal selected areas communications aug garrett willinger analysis modeling generation self-similar vbr video traffic proc acm sigcomm pages sept hir hiramatsu integration atm call admission control link capacity control distributed neural network ieee journal selected areas communications sept hlp hyman lazar pacifici separation principle scheduling admission control broadband switching ieee journal selected areas communications hos hosking modeling persistence hydrological time series fractional differencing water resources research dec haslett raftery space-time modelling long-memory dependence assessing ireland wind power resource applied statistics hui hui resource allocation broadband networks ieee journal selected areas communications dec jam jamin measurement-based admission control algorithm integrated services packet network dissertation proposal excerpts technical report usc-cs- univ southern california dept url http netweb usc jamin admctl qualsexcerpts jdsz jamin danzig shenker zhang measurement-based admission control algorithm integrated services packet networks proc acm sigcomm pages url http netweb usc jamin admctl sigcomm jszc jamin shenker zhang clark admission control algorithm predictive real-time service extended abstract proc int network operating systems support digial audio video workshop nov url http netweb usc jamin admctl nossdav kel kelly effective bandwidths multi-class queues queueing systems klivansky mukherjee longrange dependence nsfnet traffic technical report git-cc- gerogia insititue technology december lch s-q chong c-l hwang link capacity allocation network control filtered input rate high-speed networks acm ieee transactions networking feb url http mocha ece utexas sanqi papers linkcap ltww leland taqqu willinger wilson self-similar nature ethernet traffic extended version acm ieee transactions networking feb mol molina application theory probability telephone trunking problems bell system technical journal nagarajan kurose defining computing guaranteeing quality-of-service high-speed networks proc ieee infocom oon ohnishi okada noguchi flow control schemes delay loss tradeoff atm networks 
ieee journal selected areas communications dec par parekh generalized processor sharing approach flow control integrated services networks phd thesis mit lab information decision systems tech report lidstr- parts thesis published gallager acm ieee transactions networking paxson floyd wide-area traffic failure poisson modeling proc acm sigcomm pages aug extended version paper url ftp ftp lbl gov papers poisson scz shenker clark zhang scheduling service model scheduling architecture integrated services packet network url ftp parcftp parc xerox pub netresearch archfin saito shiomoto dynamic call admission control atm networks ieee journal selected areas communications sept wckg warfield chan konheim guillaume real-time traffic esitmation atm networks international teletraffic congress june wtsw willinger taqqu sherman wilson self-similarity highvariability statistical analysis ethernet lan traffic source level proc acm sigcomm pages aug zhang ferrari improving utilization deterministic service multimedia communication ieee int conf multimedia computing systems zhang knightly providing endto-end statistical performance guarantee bounding interval dependent stochastic models proc acm sigmetrics pages 
introduction routers knit constituent networks global internet creating illusion unified primary role transfer packets set input links set output links deal heterogeneous link technologies provide scheduling support differential service participate complex distributed algorithms generate globally coherent routing tables demands insatiable bandwidth internet complicate design routers found level internet routers access networks homes small businesses connect internet service provider isp routers enterprise networks link tens thousands computers campus enterprise routers backbone directly accessible end-systems link isps enterprise networks longdistance trunks rapid growth internet created challenges routers backbone enterprise access networks backbone routers capable routing high speeds links enterprise routers low cost port large number ports easy configure support qos finally access routers support heterogeneous highspeed ports variety protocols port bypass central office voice switch paper presents design issues arise classes routers section describes structure generic router section discusses design issues backbone enterprise access routers section presents recent advances trends router design finally conclude section description open problems note main topic discussion packet forwarding routing protocols create forwarding tables dealt passing components router figure abstracts architecture generic router generic router components input ports output ports switching fabric routing processor input port point attachment physical link point entry incoming packets ports instantiated line cards typically support ports switching fabric interconnects input ports output ports classify router input-queued output queued depending relative speed input ports switching fabric switching fabric bandwidth greater sum bandwidths input ports packets queued outputs router called output-queued router queues build inputs router called input-queued router output port stores packets schedules service output link finally routing processor participates routing protocols creates forwarding table packet forwarding discuss components generic router detail issues trends router design keshav sharma skeshav cornell sharma cornell department computer science cornell ithaca newyork routing processor input ports switching fabric line cards operating system management configurations software figure architecture router input port functions carries datalink layer encapsulation decapsulation intelligence incoming packet destination address forwarding table determine destination port called route lookup algorithm route lookup implemented custom hardware line card equipped general-purpose processor order provide qos guarantees port classify packets predefined service classes fourth port run datalink-level protocols slip ppp network-level protocols pptp route lookup packet output port switching fabric router input queued input ports share fabric final function input port participate arbitration protocols share common resource switching fabric implemented techniques osmkm detailed survey common switch fabric technologies today busses crossbars shared memories simplest switch fabric bus links input output ports limited capacity capacitance bus arbitration overhead sharing single critical resource unlike bus crossbar multiple simultaneous data paths fabric crossbar thought busses linked crosspoints crosspoint data input bus made output bus scheduler turn crosspoints set packets transferred parallel crossbar scheduler limits speed crossbar fabric shared-memory router incoming packets stored shared memory pointers packets switched increases switching capacity speed switch limited speed access memory unlike memory size doubles months memory access times decline year intrinsic limitation shared-memory switch fabrics output ports store packets transmitted output link implement sophisticated scheduling algorithms support priorities guarantees input ports output ports support datalink layer encapsulation decapsulation variety higher-level protocols details packet scheduling found keshav routing processor computes forwarding table implements routing protocols runs software configure manage router handles packet destination address found forwarding table line card design issues description generic router hand section turn attention design issues backbone enterprise access routers backbone routers internet tens backbones serve thousand smaller networks backbone routers interconnect enterprise networks cost shared large customer base cost wide area transmission links high cost secondary issue design backbone routers primary issues reliability speed hardware reliability backbone routers achieved techniques telephone switches hot spares dual power supplies duplicate data paths routers standard high-end backbone routers issues detail focus techniques achieve high speed routing major performance bottleneck backbone routers time route forwarding table receiving packet input port packet destination address forwarding table determine packet destination port forwarding table stores routing entries form network address mask port receiving packet address theport conceptually cycles forwarding entries entry router masks mask stored entry matches network address adds port set candidate destination ports selected destination candidate port longest mask call entry longest prefix match forexample entries routing table packet destination address matches entries set candidate destination ports packet port corresponds routing entry longest mask destination port packet port outlines reasons route hard routing table thousands entries highly inefficient match incoming packet serially entry achieve high routing speeds tightly bound worst case time required destination port incoming packet match multiple routing entries find matching entries longest match cost route lookups increases packets small packets routed large number destinations cache frequently visited destinations ineffective present representative measurements evaluate situation current backbones figure shows packet size distribution minute trace collected backbone router mci backbone nlanr approximately packets bytes long correspond tcp acknowledgment packets distribution implies current backbone routers perform large number route lookups metric route diversity size forwarding cache routes cache time period trace obtained figure nlanr find routes cache seconds cache size entries packet size distribution backbone router number active flows backbone router figure distribution packet sizes collected router mci backbone active flow data computed traces collected fix-west input-queued output-queued routers share route lookup bottleneck additional performance bottleneck recall output-queued switches run switch fabric speed greater sum speeds incoming links solved building third-generation interconnection networks leaves problem storing packets rapidly output buffers rate output buffer accessed limited dram sram access times ultimately limit speed output-queued router run problem place queueing input approach arbiter resolve contention switching fabric output queue hard design arbiters run high speeds fairly schedule switch fabric output line mckeown maw discuss strategies speeding output queued routers section addition overcoming bottlenecks performance individual routers additional design issue stability reliability routing protocol implementations affect scalability internet stability networks routers run versions protocol worse run protocols altogether slight network configuration lead undetectable problems descriptions filters export import routes interior gateway protocol bgp routing problems internet recent studies shown routing oscillations characterize current internet result small bugs protocol implementation router misconfiguration lmj enterprise routers enterprise campus networks interconnect end-systems unlike backbone networks speed cost secondary issue primary goal provide connectivity large 
number endpoints cheaply support service qualities desirable qos guarantees traffic confined local area enterprise networks built ethernet segments connected hubs bridges devices cheap easy install require configuration performance network built hubs bridges degrade network size support service differentiation contrast network built routers partitions machines multiple collision domains scales size network routers support form service differentiation allowing multiple priority levels routers tend expensive port require extensive configuration challenge build enterprise routers low cost port large number ports easy configure support qos enterprise routers additional design requirements unlike backbone networks enterprise networks carry significant amount multicast broadcast traffic carry multicast traffic efficiently backbone routers tend support protocol contrast enterprise networks deal legacy lan technologies support multiple protocols including ipx vines support features firewalls traffic filters extensive administrative security policies virtual lans finally unlike backbones link handful trunks enterprise routers provide large number ports enterprise router designers solve conflicting design goals providing rich feature set port reducing cost port easy task access routers access networks link customers home small business internet service provider isp access networks traditionally modem pools attached terminal concentrators serving large number slow-speed dialup connections simple model access network changing access networks beginning variety access technologies high-speed modems adsl cable modems telephone lines accessing internet home increased load network long connection holding time internet dialup connections creates problems switches considerable pressure access networks aware underlying telephone network bypass voice switch data calls access routers beginning provide slip ppp connection virtual private network protocols pptp ipsec protocols run router port finally technologies adsl increase bandwidth home increase load access routers trends access routers support large number heterogeneous potentially highspeed ports variety protocols operating port bypass voice switch feel access router technology state flux due recent advances technologies adsl early discuss architecture paper recent advances current trends rapid growth internet led flurry research router designs section present selection approaches observations current trends router design note warning meant exhaustive list--it sampling work rapidly changing field atm atm designed ground enable cheap switches small vcis rapidly looked fixed-size cells easy switch fast parallel fabric easy schedule contrast variable-length packets longest prefix match harder route relative difficulty reflected relative prices atm switches routers routers order magnitude expensive switched mbps bandwidth advances route lookup technology critical edge atm fast route lookup algorithms routers longest prefix match fast cheaply vcis fragmenting packets fixed-size units input ports reassembling output ports atmlike switching fabrics routers finally advances scheduling reduced cost complex scheduling algorithms sufficiently overhead scheduling variable size packets decreased future cost switch mbps bandwidth marginally higher atm decrease dominant role endpoints enterprise networks role atm rapidly diminishing atm play limited role future networks telephony bearer technology adsl high speed route lookup section major bottlenecks backbone routers compute longest prefix match incoming packet speed route lookup algorithm determined number memory accesses requires find matching route entry speed memory algorithm performs memory lookups input port memory access time time lookup route allowing million route lookups algorithm costlier memory access time port perform million lookups consideration designing forwarding table data structures time update table recent studies shown routing table slowly requiring updates minutes lmj complicated data structures optimize update routing table standard data structure store routes tree path tree root leaf corresponds entry forwarding table longest prefix match longest path tree matches destination address incoming packet stevens conceptually treebased algorithm starts root tree recursively matches children current node bits destination address stopping match found sklower worst case takes time proportional length destination address find longest prefix match key idea tree-based algorithm nodes require storage children algorithms make frugal memory expense memory lookups memory prices drop precisely wrong design decision worse commonly patricia-tree algorithm backtrack find longest match leading poor worst-case performance performance route lookup algorithms improved ways classify improvement techniques hardware-oriented techniques table compaction techniques improvements commercially valuable well-described literature descriptions meant outline non-disclosure agreements preclude greater detail hashing techniques well-known hardware-oriented solutions based content addressable memories cams caches techniques scale poorly routing table size backbone routers support large routing tables recent hardware-oriented approaches essentially combine logic memory single device drastically reducing memory access time intelligent-memory approach general conjunction software techniques hardware-oriented solution increase amount memory store routing table glm argues feasible single table -bit address current prices cost range affordability backbone routers time memory costs drop approach enterprise routers subtle problem approach table hard update changing single forwarding entry thousand memory locations updated glm describes cheap special purpose hardware perform rapid updates forwarding table table-compaction techniques algorithm bcdp exploit sparse distribution forwarding entries space network addresses build complicated compact data structure forwarding table table stored primary cache processor allowing route lookup gigabit speeds finally hash-based solutions proposed route lookup determining longest prefix match limits hashing destination address prefix finding longest match solution problem masks choosing longest mask length choice masks iterative ipatm hierarchical bits address find list prefix lengths solutions scale size destination address recent work waldvogel wvtp presented scalable hash based algorithm longest prefix match bit address log steps algorithm computes separate hash table prefix length naively searching successful hash starting longest prefix algorithm binary search prefix lengths requires hash tables markers hash failure point correct smaller-length hash table search search path forwarding entry compactly stored form rope reduces storage requirements markers addition precomputing hash tables hold forwarding entries -bit prefix mutate hash-table fly reducing number memory accesses average lookup sum fast route lookup solved problem major implications atm switches topic discuss sidebar advances switching fabrics mentioned section switching fabrics implemented crossbar shared memory bus speed crossbar fabric limited scheduler shared memory fabric memory access speeds bus bus capacitance arbitration overhead mid-eighties lot research area switch fabric design designs built advances bus speeds made unnecessary designs include wellknown banyan family fabrics delta omega fabric survey osmkm designs revived early nineties building large atm switches recent decline demand atm routers built wrapping segmentation reassembly modules atm switch fabric cores routers permanent virtual circuits established port ports longest-prefix match determines destination port packet fragmented atm cells switched atm cells reassembled output port transmission atm core router support quality service streams switching 
fabric overcome problems switching variable-size packets designs inherit drawbacks atm atm switches part good support multicast multiple vcis copies cell generated input port switch fabric overheads decrease efficiency switching fabric subtler problem arises traffic control algorithms terms packets terms cells cell-based fabrics implementing semantics required shared filters rsvp challenging task drawbacks fixed-size internal switching core widespread design technique assume existence core rest paper speeding output queues noted earlier major problem output-queued switches speed output queue accessed design techniques bottleneck overcome build wide memories load entire cell single memory cycle deploying memory elements parallel feeding cell-wide data bus extravagant memory costly memory prices continue drop year approach rapidly attractive approach building fast output queues integrate port controller queues single chip approach read write control logic access queues memory entire row time speeds greater external logic approach datapath chipset idt key idea integrate serial input output port controllers shared memory single vlsi chip serial inputs parallelized shift register entire shift register atm cell read memory parallel output port scheduler decides serve packet reads cell parallel shift register converts serial transmits switching accomplished deciding output port controller receive incoming cell memory accessed rapidly output port controller store cells single cell time line rate mbps vlsi packaging makes chip economical gbps -port switch-on-achip costs approach scale large switches datapath chips interconnected form larger buffered switch fabrics instance three-stage buffered banyan switch easily constructed datapath elements stage cell loss due simultaneous cell arrivals multiple inputs avoided integration memory element port logic intelligent port controllers idt datapath lucent atlanta mmc atms chipsets wave future input queued switches improvements speed output queues significant bottleneck avoid packet loss run faster input links avoid problem altogether building input-queued switches input-queueing deprecated headof-line blocking problem packets blocked head input queue prevent schedulable packets deeper queue accessing switch fabric maintaining per-output queues multicast widely supported backbone efforts multicast initiative ipmi change future making multicast support important feature backbone routers input head-of-line blocking completely avoided leaves problem arbitrating access switch fabric high speeds recent research suggests solvable current technology mckeown appears router bandwidth increased order magnitude moving input-queueing input-queueing suffers problems resolution packet scheduling algorithms providing quality service terms output queues clear modify algorithms simultaneously schedule output queues switch fabric complex non-trivial issue effect input port controller mimic actions entire set output port controllers conceivably transmitting packets link technology router fddi fast ethernet port router input queueing input port controller schedule packets varying transmission speeds output links accordance transmission policies disparate links input queue send packet fast ethernet port port backing collision send packet fddi port port token diversity link technologies building general-purpose input port controller challenging impossible task enhanced router services random early discard depend length output queue input-queued switch output queue length due practical problems non-trivial input-queued enterprise routers deal heterogeneous links policies practical hybrid approaches input output queuing moderate degree speedup switching fabric scheduling suppose packets arriving input ports router leave output port output trunk speed input trunk speed packets transmitted time takes arrive output port order prevent packet loss output port buffers store excess arriving packets serves packets buffer output trunk free obvious serve packets buffer order arrived buffer first-come-first-served fcfs order fcfs service trivial implement requiring router switch store single head tail pointer output trunk solution problems router give sources lower delay prevent malicious source sends unending stream packets fast causing well-behaved streams losing packets alternative service method called fair queuing solves problems albeit greater implementation cost dks fair queuing approach source sharing bottleneck link allocated ideal rate service link specifically focussing sources backlogged link instant time service rate trunk partitioned accordance set weights represent weights backlogged sources ideal service received source rate outgoing trunk fair queuing variants mechanisms serve packets output queue approximately partition trunk service rate manner versions fair queuing require packets served order arrived fair queuing expensive implement fcfs decide order serve incoming packets manage queues order carry general higher number conversations router costlier implement fair queuing fair queuing requires form conversation state stored routers exhaustive survey variants fair queueing algorithm found goyal fair queuing important properties protection well-behaved source packet losses due misbehavior sources design fair bandwidth allocation sum weights sources bounded source guaranteed minimum share link capacity finally shown source leaky-bucket regulated independent behavior sources receives bound worst-case end-toend delay reasons current routers support variant fair queueing related scheduling problem partitioning link capacity classes users wide-area trunk shared companies things equal time congestion trunk equally shared packets companies sort link-sharing requirements deal classes connections individual connections require per-class bookkeeping recent work shown extensions fair queueing compatible hierarchical link-sharing requirements gvc fast implementations algorithms provide hierarchical link sharing per-connection qos guarantees area active research bsz rbgw expect future routers provide form fair queueing output queues reducing port cost enterprise access routers support large number ports reduce cost port bare minimum cost port depends amount kind memory processing power complexity protocol communication port routing processor ports built general-purpose processors large buffers complex communication protocols tend expensive built asics smaller buffers simple communication protocols choosing asics general-purpose processors port straightforward general-purpose processors costlier extensible port functionality off-theshelf price performance ratio improves rapidly time cost makes suitable backbone routers flexibility eventually make attractive enterprise access routers hand asics cheaper provide operations specific routing traversing patricia tree lack flexibility asics overcome implementing functionality routing processor moment make sense processor-based designs backbone routers asic based designs local area time situations reverse cost port proportional type size memory port srams offer faster access times costlier drams general backbone routers srams enterprise access routers drams buffer memory parameter difficult size general rule thumb port buffers support bandwidth-delay product worth packets delay end-to-end delay bandwidth largest bandwidth tcp connections traversing router sizing tcp connections open transmission windows excessive congestive losses largest bandwidth connections internet today mbps backbone assuming conservatively connection delay buffering port buffering enterprise networks connection delay per-port buffering finally cost port determined complexity connections control path data path line card cases routing processor sends commands port switching fabric port internal buffers command packets lost re-transmission careful engineering control protocol 
reduce cost port control enterprise level management centralization enterprise campus routers control single administrator situation good idea centralize functions individual routers central route server compute loop-free routes entire enterprise load router forwarding tables similar approach loading multicast forwarding entries freeing routers burden participating complex multicast routing protocols call enterprise level management enterprise level approach makes easier implement global policies organization limit total amount resources dedicated multicast traffic mechanisms restrict traffic policers implemented router computation parameters individual policers centralized avoiding route lookups reducing cost route lookups backbone routers techniques avoid route lookups altogether backbone networks provide virtual circuit interface carrying atm sonet require edge networks translate destination address virtual circuit identifier virtual circuit identifiers integers drawn small space looked single memory access complexity longest prefix match avoided edge network distribute mapping virtual circuit identifier tag destination port router backbone achieved protocols switching tag switching deployment technique requires major change network technique essentially introduces level routing hierarchy reduce size routing tables making route lookups cheaper approach backbone routers routes destinations served backbone unknown destinations routed gateway network access point nap competing backbone providers exchange routing information packets naps means global large routing tables needed naps growth number providers nap stressed scalability border gateway protocol bgp exchange routing information peer routers nap router operating systems past routers viewed hardware devices optimized routing packets high speeds software environment typical control processor bare bones providing basic monitor growing realization router hardware commodity easy build greatest asset router vendor software parallel trend reinforces idea notion opening router architecture parties router vendors leverage create enhanced services network intense focus development router operating systems operating systems specialized run routers provide carefully controlled api underlying hardware trend continues end-users install custom software modules routers provide services firewalls traffic management policies application-specific signalling fine-grained control routing policy fairly large vocal open signalling community lobbying router vendors precisely kind access router internals opensig interesting note telephone companies provide extremely rich programming interface pbx hardware jtapi interface jtapi switching backbone tells edge mapping idea conceptually similar describe extreme variant trend dubbed active networking individual packets install software on-the-fly routers clear performance penalty approach exact recent work shows security concerns performance hit active networks tolerable environments asns open problems section identify challenging open problems router design solutions problems lead interesting tradeoffs generation routers flow identification set packets travelling internet source destination close time constituting flow aflowcanresultfromthe set packets long-lasting tcp connection set udp packets audio video session definition flows optimization pin resources cache entries set current flows identify flows on-the-fly noticing instance packets source destination addresses tcp port numbers seconds flows real-time performance guarantees identify flows matching incoming packet headers set pre-specified filters classification incoming packet fast classification algorithms algorithms section routes -bit addresses line speed easily modified fast flow classification lack generic efficient flow descriptors instance generic classifier masks source destination addresses ports protocol number requiring lookup bits packet sort classifier difficult implement high speed coming concise description classifier match classifier thousand present router open problem resource reservation internet poor support resource reservations ethernet-based lans wan access links backbone routers geared best-effort traffic support simplest priority schemes ethernets switched demand form service quality increases expect support resource reservation classes routers resource reservation hand-in-hand flow classification resources reserved behalf prespecified flows coupling makes resource reservation hard solve open problem efficient flow classifiers resource reservation additionally requires policing demand individual flow limited form segregation packet scheduling over-limit flows automatically discouraged complexity implementing fair-queueing type scheduling algorithms high speed recent work coming efficient policers rio scheme over-limit packets marked low priority preferentially discarded choice good policing algorithms pricing schemes open problem ease configuration configuring routers hard work misconfigured routers hard detect untraceable performance problems bugs configuration proxy arp routers manifest mysterious increase network delay ballew simple intuitive abstractions underlying network functionality long solving problems abstractions remain elusive configuration harder functionality limiting amount multicast traffic network requires simultaneous configuration router network interaction inconsistent configurations network-wide problems failures visually examine configuration files discover mistakes inconsistencies generation configuration tools rule-based simulation-based subsystems test configured router installing field hard interesting open problem stability large systems recall router hardware made reliable adding hot spares dual power supplies duplicate data paths contrast hardware reliability understood solved problem software reliability remains challenging open problem stability router software prerequisite reliability large network software stability hard achieve software state affected interaction features addition bgp exterior routing attribute affect calculation routes exported interior routing protocols interaction bugs vendors lmj lead persistent instabilities network simulation helpful difficult reproduce bugs implementations exact behavior nodes network solution software reliability lie adding features protocol implementations similar support multicast traceroute mrouted detect isolate problems track instability problems occur accountability introduction differential service internet necessarily accompanied pricing pricing requires router support accounting cost feasibility accounting support depends granularity accounting similar flow identification coming concise definition classifier match classifier hard concise definition account identify bill account open problem conclusions routers midst great change due customer pull technology push customers demanding higher bandwidth greater reliability lower cost greater flexibility ease configuration simultaneously technology form atm switching cores fast routelookup algorithms allowed router vendors build generation routers advances paper atm cores output queueing advanced scheduling algorithms avoiding route lookups centralized adminstration distinguishing features generation advances solved difficult problems important issues remain unresolved understanding stablility network routers critical open issue trading cost speed flexibility ease configuration challenge router designers years acknowledgments hemant kanakia ritesh ahuja helping understand real problems trends router design asns alexander shaw nettles smith active bridging proceedings acm sigcomm cannes september ballew ballew managing networks cisco routers reilly bcdp brodnik carlsson degermark pink small forwarding tables fast route lookups proceedings acm sigcomm cannes september bennett zhang hierarchical packet fair queueing algorithms proceedings acm sigcomm stanford august bsz bennett stephens zhang high speed scalable accurate implementation fair queueing algorithms atm networks icnp clark wroclawski approach serice allocations internet internet draft internet draft draftclark-diff-svc- alloctxt http ietf dks demers keshav shenker design analysis fair queueing algorithm proceedings acm sigcomm austin september floyd jacobson random early detection gateways congestion avoidance ieee acm transactions networking august 
goyal goyal packet scheduling algorithms integrated service networks phd thesis texas austin glm gupta lin mckeown routing lookups hardware memory access speeds proceedings ieee infocom march gvc goyal vin chen start-time fair queueing scheduling algorithm integrated services packet switching networks proceedings acm sigcomm august ipatm online proceeding panel discussion integration atm atm workshop washington louis november http arl wustl arl jtapi java telephony application programmer interface http java sun products jtapi index html keshav keshav engineering approach computer networking addison-wesley lin mckeown simulation switching proceedings acm sigcomm cannes september lmj labovitz malan jahanian internet routing instability proceedings acm sigcomm cannes september maw mckeown anantharam walrand achieving throughput input-queued switch proceedings ieee infocom san francisco march mckeown mckeown scheduling algorithms input-queued cell switches phd thesis california berkeley nlanr contribution packet sizes packet byte volumes mci vbns http nlanr net learn packetsize html nlanr flow counts function flow granularity fix-west http nlanr ner learn aggregation html opensig opensig spring workshop http ctr columbia opensig osmkm oie suda murata kolson miyahara survey switching techniques high-speed networks performance proceedings ieee infocom june rbgw rexford bonomi greenberg wong scalable architecture fair leaky-bucket shaping proceedings ieee infocom kobe japan slower sklower tree-based packet routing scheme berkeley unix internal memorandum california berkeley stevens stevens tcp illustrated vol addison-wesley wvtp waldvogel varghese turner plattner scalable high speed routing lookups proceedings acm sigcomm cannes september 
effects active queue management web performance long jay aikat kevin jeffay donelson smith department computer science north carolina chapel hill http unc research dirt abstract present empirical study effects active queue management aqm distribution response times experienced population web users prominent aqm schemes considered proportional integrator controller random exponential marking rem controller adaptive random early detection ared effects aqm schemes studied combination explicit congestion notification ecn major results offered loads bottleneck link capacity aqm scheme response times simple droptail fifo queue management loads link capacity greater ecn results modest improvement drop-tail aqm schemes ecn rem provide significant response time improvement offered loads link capacity load rem ecn provide response times competitive achieved unloaded network ared recommended parameter settings consistently resulted poorest response times unimproved addition ecn conclude ecn end-user performance gain realized employing aqm designs studied ecn response times significantly improved addition appears provider links operated saturation levels significant degradation user-perceived performance categories subject descriptors computer systems organization computer communication networks network protocols general terms algorithms measurement performance experimentation keywords congestion control active queue management web performance introduction motivation random early detection red algorithm ten years ago inspired focus congestion control research area active queue management aqm common goal aqm designs average queue size small routers number desirable effects including providing queue space absorb bursts packet arrivals avoiding lock-out bias effects flows dominating queue space providing lower delays interactive applications web browsing aqm designs function detecting impending queue buildup notifying sources queue router overflows designs proposed aqm differ mechanisms detect congestion type control mechanisms achieve stable operating point queue size dimension significant impact performance congestion signal delivered sender today internet dominant transport protocol tcp reacts segment loss indicator congestion signal delivered implicitly dropping packets router aqm algorithm detects queue buildup ietf proposed standard adds explicit signalling mechanism called explicit congestion notification ecn allocating bits tcp headers purpose ecn router signal congestion endsystem marking packet setting bit header work report results empirical evaluation prominent examples aqm designs proportional integrator controller random exponential marking rem controller contemporary redesign classic red controller adaptive red called ared designs differ respects attempt realize control mechanism achieves stable operating point size router queue user mechanisms determine desired operating point control mechanism simply desired target queue size choosing desired queue size represent tradeoff link utilization queuing delay short queue reduces latency router setting target queue size small reduce link utilization causing queue drain needlessly goal study foremost compare performance control theoretic aqm algorithms rem traditional randomized dropping found red performance metrics chose user-centric measures performance response times request-response transactions comprise web browsing traditional metrics achievable link utilization loss rates distribution response times experienced population web users assess user-perceived performance aqm schemes link utilization assess impact network resources interest implication ecn support performance ecn requires participation end-systems aqm scheme important quantify performance gain expense complex protocol stack migration issues end-system permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee sigcomm august karlsruhe germany copyright acm experimental platform laboratory testbed consisting large collection computers arranged emulate peering point isps operated mbps figure emulated web browsing behavior tens thousands users traffic transits link connecting isps investigated performance aqm scheme border-routers connecting isps scheme investigated ecn support variety aqm parameter settings represented range target router-queue lengths target queue length varied offered load physical link connecting isps determine aqm performance affected load results offered loads bottleneck link capacity aqm scheme provided response time performance simple drop-tail fifo queue management addition schemes resulted similar loss rates link utilization offered loads link capacity advantage employing control theoretic aqm ecn offered loads link capacity resulted modest improvement drop-tail aqm schemes web browsing response time improved responses requiring approximately milliseconds complete cost slightly lower achievable link utilization compared drop-tail note fact ecn gave performance superior rem striking result ecn rem significantly outperform drop-tail load provide response time performance competitive achieved unloaded network improved response time performance loss achievable link utilization light results additional striking result fact addition ecn improve ared performance ared consistently resulted poorest response time performance offered loads resulted lowest link utilizations conclude ecn end-user provider performance gain realized employing aqm algorithms studied ecn performance significantly improved addition experiments provide evidence provider links operated saturation levels average utilization bursty traffic sources significant degradation user-perceived performance modest decreases link utilization compared drop-tail unlike similar earlier study negative aqm view ecn results significant indicator stated goals aqm realized practice results study intriguing study nonetheless limited design space aqm schemes large algorithm typically characterized number independent parameters limited consideration aqm algorithms comparison classes algorithms based control theoretic principles based original randomized dropping paradigm red studied link carrying web-like traffic realistic mixes http tcp traffic traffic udp-based applications examined section reviews salient design principles current aqm schemes reviews major algorithms proposed section presents experimental methodology discusses generation synthetic web traffic section presents results aqm packet drops section presents results aqm ecn results discussed section conclude section summary major results background related work original red design weighted-average queue size measure congestion weighted average smaller minimum threshold min packets marked dropped average queue length minimum threshold maximum threshold max probability marking dropping packets varies linearly maximum drop probability max typically average queue length exceeds max packets marked dropped actual size queue greater max absorb transient bursts packet arrivals modification original design introduced gentle mode mark drop probability increases linearly max average queue length varies max max fixes problem original red design caused non-linearity drop probability increasing max immediately max reached weakness red consideration number flows sharing bottleneck link tcp congestion control mechanism packet mark drop reduces offered load factor number flows sharing bottleneck link red effective controlling queue length large hand red aggressive under-utilization link small feng concluded red tuned dynamic characteristics aggregate traffic link proposed self-configuring algorithm red adjusting max time average queue length falls target range min max average queue length smaller min max decreased multiplicatively reduce red aggressiveness marking dropping packets 
queue length larger max max increased multiplicatively floyd improved original adaptive red proposal replacing mimd multiplicative increase multiplicative decrease approach aimd additive increase multiplicative decrease approach provided guidelines choosing min max weight computing target average queue length red version implemented studied work referred ared includes adaptive gentle refinements original design based description misra applied control theory develop model tcp aqm dynamics model analyze red pointed limitations original red design red unstable slow responses network traffic red weighted-average queue length detect congestion loss probability feedback signal senders flawed overload situations flows suffer high delay high packet loss rate hollot simplified tcp aqm model linear system designed proportional integrator controller regulates queue length target called queue ref controller instantaneous samples queue length constant sampling frequency input drop probability computed ref ref drop probability sampling interval instantaneous sample queue length sampling-frequency close examination equation shows drop probability increases sampling intervals queue length higher target drop probability increases queue grown sample reflecting increase network traffic conversely drop probability controller reduced queue length lower target queue length decreased sample sampling interval coefficients equation depend link capacity maximum rtt expected number active flows link athuraliya proposed random exponential marking rem aqm scheme rem periodically updates congestion measure called price reflects mismatch packet arrival departure rates link difference demand service rate queue size mismatch difference actual queue length target measure computed max ref link capacity packet departures unit time congestion measure queue length packet arrival rate determined time ared control target expressed queue size mark drop probability rem defined prob constant overload situations congestion price increases due rate mismatch queue mismatch packets dropped marked signal tcp senders reduce transmission rate congestion abates congestion price reduced mismatches negative rem drop mark fewer packets senders potentially increase transmission rate easy positive rate mismatch time interval queue size increase conversely negative rate mismatch time interval drain queue rem similar rate mismatch detected comparing instantaneous queue length previous sampled drop mark probability small exponential function approximated linear function experimental methodology experiments constructed laboratory network emulates interconnection internet service provider isp networks specifically emulate peering link carries web traffic sources destinations sides peering link traffic carried isp networks evenly balanced directions laboratory network emulate configuration shown figure systems shown figure intel-based machines running freebsd edge network set machines run instances web request generator emulates browsing behavior thousands human users edge network set machines run instances web response generator creates traffic flowing response browsing requests total traffic generating machines testbed remainder paper refer machines running web request generator simply browser machines browsers machines running web response generator server machines servers browser server machines mbps ethernet interfaces attached switched vlans mbps gbps ports ethernet switches core network router machines running altq extensions freebsd altq extends ip-output queuing network interfaces include alternative queue-management disciplines altq infrastructure implement rem ared routers ghz pentium iiis memory router -sx fiber gigabit ethernet nic attached switches router additional ethernet interfaces -sx fiber gigabit ethernet nic mpbs fast ethernet nics configured create point-to-point ethernet segments connect routers shown figure conducting measurements calibrate traffic generators un-congested network static routes configured routers traffic full-duplex gigabit ethernet segment create bottleneck routers static routes reconfigured traffic flowing direction mbps ethernet segment traffic flowing opposite direction mbps ethernet segment configurations emulate full-duplex behavior typical widearea network link important factor emulating network effect end-to-end latency locally-modified version dummynet component freebsd configure out-bound packet delays browser machines emulate round-trip times tcp connection giving per-flow delays accomplished extending dummynet mechanisms regulating per-flow bandwidth include mode adding randomlychosen minimum delay packets flow minimum delay applied packets flow identified addressing -tuple minimum delay milliseconds assigned flow sampled discrete uniform distribution range milliseconds minimum maximum values distribution chosen approximate typical range internet round-trip times continental uniform distribution ensures large variance values selected range configured dummynet delays browser outbound packets simplify experimental setup data transmitted experiments flow server browser tcp conwe mbps ethernet segments static routes separate forward reverse path flows configuration ethernet hubs monitor traffic direction independently traffic gigabit link monitored passive fiber splitters monitor direction independently isp router gbps mbps ethernet switches isp browsers servers mbps isp browsers servers gbps isp router ethernet switches mbps network monitor network monitor figure experimental network setup gestion control loop server aqm react influenced total rtt asymmetry delays relative receiver side delays browsers effectively delay acks received servers round-trip times experienced tcp senders servers combination flow minimum delay additional delay introduced queues routers end systems end systems configured ensure resource constraints present delays minimal millisecond tcp window size bytes end systems widely platforms versions windows typically default windows small smaller instrumentation collect network data experiments consists monitoring programs program monitors router interface examining effects aqm algorithms creates log queue size number packets queue sampled milliseconds complete counts number packets entering queue number dropped link-monitoring machine connected links routers hubs mbps segments fiber splitters gigabit link collects locally-modified version tcpdump utility tcp headers frame traversing links processes realtime produce log link utilization selected time intervals typically milliseconds web-like traffic generation traffic drives experiments based recent largescale analysis web traffic resulting model application-level description critical elements characterize http http protocols based empirical data intended generating synthetic web workloads important property model reflects persistent http connections implemented contemporary browsers servers analysis presented distinguishes web objects top-level typically html file embedded objects image file time data gathered approximately tcp connections carrying http protocols effectively persistent request objects objects bytes transferred persistent connections model expressed empirical distributions describing elements generate synthetic http workloads elements model pronounced effects generated traffic summarized table behavioral elements web browsing emulated client-side request-generating program browser primary parameter number emulated browsing users typically hundred thousand user emulated program implements simple state machine represents user state thinking requesting web page requesting web page request made server-side portion program executing remote machine primary page requests embedded number servers number servers number embedded drawn random samples distributions browser determines usage persistent non-persistent connections connections randomly selected persistent random selection distribution requests persistent connection determine requests persistent connection parameter program number parallel tcp connections allowed behalf browsing user make 
embedded requests page parameter mimic parallel connections netscape typically internet explorer typically request message random size sampled request size distribution network instance server program message specifies number bytes server return response random sample distribution response sizes depending top-level embedded request server sends number bytes back network browser browser responsible closing connection selected number requests completed request non-persistent connections random variable greater persistent connections experiments reported server service time set response begins request message received parsed roughly models behavior web server proxy large main-memory cache hit-ratio request response pair browser program logs response time response time defined elapsed time time socket connect operation nonpersistent connection initial request persistent connection socket write operation subsequent requests persistent connection time byte response returned note response time element page total time load elements page request response pairs page completed emulated browsing user enters thinking state makes requests random period time sampled think-time distribution number page requests user makes succession server machine sampled distribution consecutive page requests number page requests completed server handle top-level request selected randomly uniformly set active servers number emulated users constant execution experiment experiment calibrations offered load experiments defined network traffic resulting emulating browsing behavior fixed-size population web users expressed long-term average throughput bits un-congested link generated user population critical elements experimental procedures calibrated performing experiments table elements http traffic model element description request size http request length bytes response size http reply length bytes top-level embedded page size number embedded file page time time retrieval successive pages persistent connection number requests persistent connection servers page number unique servers objects page consecutive page retrievals number consecutive top-level pages requested server ensuring element end-to-end path represented primary bottleneck links connecting routers limited mbps offered load network predictably controlled number emulated users parameter traffic generators ensuring resulting packet arrival time-series packet counts millisecond long-range dependent expected distribution response sizes heavytailed distribution perform calibrations configured network connecting routers eliminate congestion running gbps calibration experiments run drop-tail queues queue elements reasons choice discussed section ran instance browser program browser machines instance server program server machines browser configured emulate number active users total active users varied experiments figure shows aggregate traffic direction gbps link function number emulated users load opposite direction measured essentially plotted figure offered load expressed link throughput linear function number emulated users indicating fundamental resource limitations system generated loads easily exceed capacity mbps link data determine number emulated users generate specific offered load bottleneck link present capability subsequent experiments control offered loads network generate offered load equal capacity mbps link figure determine emulate approximately users side link note offered loads approaching saturation mbps link actual link utilization general intended offered load response times longer users wait longer generate requests generate fewer requests unit time motivation web-like traffic experiments assumption properly generated traffic exhibit demands laboratory network consistent found empirical studies real networks specifically long-range dependent lrd packet arrival process empirical data generate web traffic showed heavy-tailed distributions user times response sizes figures compare cumulative distribution function cdf complementary cumulative distribution function ccdf generated responses calibration experiments empirical distribution note figure median response size simulations approximately bytes responses large bytes generated web traffic showed heavy-tailed distributions times times response size times implies aggregate traffic generated large collection sources lrd verify lrd behavior realized experimental setup recorded tcpdumps tcp headers calibration experiments derived time series number packets bytes arriving gbps link routers millisecond time intervals time series number analysis methods aggregated variance whittle wavelets estimate hurst parameter cases confidence intervals estimates fell range significant lrd component time series experimental procedures experiment run automated procedures initializing configuring router end-system parameters server programs started browser programs browser program emulated equal number users chosen place nominal offered load unconstrained network offered loads link throughput bps browsers measured figure link throughput number emulated browsing users compared straight line cumulative probability response size bytes empirical distribution generated response sizes figure cdf empirical generated response sizes complementary cumulative probability response size bytes empirical distribution generated response sizes figure ccdf empirical generated response sizes experiments chosen represent user populations consume capacity mbps link connecting router machines consume mbps important emphasize terms load shorthand notation population web users generate long-term average load mbps gbps link experiment run minutes ensure large samples request response exchanges experiment data collected -minute interval eliminate startup effects beginning termination synchronization anomalies end experiment aqm schemes repeated times set random number seeds repetition facilitate comparisons aqm schemes experiments schemes run sets initial seeds random number generator traffic generators sampling random variables dummynet sampling minimum per-flow delays key indicator performance reporting results end-to-end response times request response pair report plots cumulative distributions response times seconds plots show results repetitions experiment noticeable differences repetitions selected experiment favorable aqm scheme consideration plots report fraction datagrams dropped link queues link utilization bottleneck link number request response exchanges completed experiment results reported table values shown means repetitions experiment aqm experiments packet drops rem chose target queue lengths evaluate packets chosen provide operating points potentially yields minimum latency potentially high link utilization values coefficients control equations recommended confirmed algorithm designers ared chose target queue lengths evaluate calculations ared parameter settings follow guidelines achieving desired target delay queue size cases set maximum queue size number packets sufficient ensure tail drops occur establish baseline evaluating effects aqm designs results conventional drop-tail fifo queue addition baseline results drop-tail queue sizes chosen aqm attempted find queue size drop-tail represent practice choice guidelines rules thumb determining allocations queue size widely debated venues including irtf end end-interest mailing list guideline appears attracted rough consensus provide buffering approximately equal times bandwidth-delay product link bandwidth expression link delay round-trip time connections sharing link general difficult determine mailing list contributors recently tended favor buffbecause space restrictions plots summary results shown load ering equivalent milliseconds link transmission speed freebsd queues allocated terms number buffer elements mbufs capacity hold datagram ethernet mtu size experimental environment link bandwidth mbps frame size bytes implies fifo queue mbufs milliseconds buffering figures give response-time performance drop-tail queue queue elements offered loads compared performance uncongested gbps link loss rates link utilizations table 
load mbps mbps link results queue size indistinguishable results uncongested link load significant degradation response times queue sizes note expected queue size elements superior responses small complete milliseconds longer queue elements performance longer responses load severe performance penalty response times shorter queue elements desirable elements figure feature found results high loads significant numbers dropped packets table flat area curves queue sizes shows impact rto granularity tcp responses timeout study made attempt empirically determine optimal queue size drop-tail queue routers elements finding drop-tail queue size involves tradeoff improving response times large number small objects versus small number large objects consume network capacity drop-tail queue elements baseline comparing aqm mechanisms corresponds targets selected aqm reasonable performance drop-tail results packet drops figure results target queue lengths offered loads load essentially difference response times target queue lengths performance close obtained un-congested network load target queue sizes provide identical results responses requiring milliseconds complete requests longer target size load shorter queue target choice improves response times shorter responses degrade response times longer responses results rem packet drops figure results rem target queue lengths offered loads load essentially difference response times target queue lengths performance close obtained un-congested network load queue performs target queue load queue continues perform slightly rem performs target queue results ared packet drops figure results ared target queue lengths offered loads results surprising contrast drop-tail rem results load show degradation relative results un-congested link load essentially difference response times target queue lengths load difference performance target queues ared degradation un-congested link substantial load settings ared indistinguishable response times poor consistently poor performance ared sets parameters recommended settings network capacity min max varying parameter settings yielded results presented recommend setting ared based experiments performance close unsatisfactory cumulative probability response time uncongested network drop-tail qlen drop-tail qlen drop-tail qlen cumulative probability response time uncongested network load qref load qref load qref load qref load qref load qref figure drop-tail performance offered load figure performance packet drops cumulative probability response time uncongested network drop-tail qlen drop-tail qlen drop-tail qlen cumulative probability response time uncongested network rem load qref rem load qref rem load qref rem load qref rem load qref rem load qref figure drop-tail performance offered load figure rem performance packet drops cumulative probability response time uncongested network drop-tail qlen drop-tail qlen drop-tail qlen cumulative probability response time uncongested network ared load thmin thmax ared load thmin thmax ared load thmin thmax ared load thmin thmax ared load thmin thmax ared load thmin thmax figure drop-tail performance offered load figure ared performance packet drops comparing schemes packet drops load schemes ared perform comparably uncongested network barely distinguishable figures compare settings based distribution response times aqm scheme offered loads comparing results aqm schemes claim response time performance cdf substantial range response times comparable remaining range load rem drop-tail provide reasonable performance responses completed milliseconds remaining responses target queue length schemes target queue good performance load load superior schemes note performance obtained target queue length aqm scheme offset performance degradation extreme load load performance schemes degrades uniformly case table presents link utilization loss ratios number completed requests experiment aqm scheme offered loads drop-tail queue slightly link utilization aqm schemes completes slightly request-response exchanges schemes load drop-tail higher loss ratios schemes loss ratios rem completes requests link utilization loads figures show responses complete seconds aqm schemes figure shows remainder distribution load conclusions drawn figures hold responses experience response times approximately seconds responses remaining responses perform drop-tail eventually ared performance approaches drop-tail superior rem handful responses aqm experiments ecn aqm schemes drop packets indirect means signaling congestion end-systems explicit congestion notification ecn packet marking scheme developed means explicitly signaling congestion end-systems signal congestion router mark packet setting bit tcp header packet marking modified subsequent routers receipt marked data segment tcp receiver mark tcp header outbound segment typically ack destined sender original marked segment receipt marked segment original sender react single segment lost send window addition sender mark outbound segment marking confirm reacted congestion complementary cumulative probability reponse time uncongested network drop-tail load qlen load qref rem load qref ared load thmin thmax figure ccdf schemes ecn load cumulative probability response time uncongested network drop-tail load qlen load qref rem load qref ared load thmin thmax figure comparison schemes load cumulative probability response time uncongested network drop-tail load qlen load qref rem load qref ared load thmin thmax figure comparison schemes load cumulative probability reponse time uncongested network drop-tail load qlen load qref rem load qref ared load thmin thmax figure comparison schemes load repeated experiments rem ared packet marking ecn packet drops offered load ecn effect response times aqm schemes figures show results loads load target queue length performs ecn target queue length change performance load ecn significantly improves performance target queue lengths rem shows significant improvement performance ecn performed rem ecn loads loads rem ecn give similar performance ecn significant effect rem performance cases contrary rem results ecn effect performance ared tested target queue lengths loads table presents link utilization loss ratios number completed requests ecn experiment ecn loss ratios difference link utilization number requests completed rem improvement ecn derives lowered loss ratios increases link utilization increases number completed requests ared improvement link utilization number completed requests loss ratios marginally ecn comparisons rem ared ecn recall load aqm scheme response time performance simple drop-tail queue result changed addition ecn compare settings rem ared combined ecn loads results drop-tail queue length included baseline comparison figures show results load rem provide response time performance surprisingly close un-congested link drop-tail load noticeable response time degradation rem results superior obtained droptail rem combined ecn substantially lower packet loss rates drop-tail link utilizations modestly lower load performance rem virtually identical marginally worse observed load artifact traffic generation model browsers generate requests frequently response times increase table shows additional requestresponse exchanges completed load load ared ecn response time performance load levels significantly worse rem shortest responses performance comparable figure shows tails response time distribution load aqm ecn drop-tail eventually response time performance crossover point occurs earlier approximately seconds responses experiencing response times longer 
seconds receive performance drop-tail ared performance eventually approaches drop-tail handful responses discussion experiments demonstrated interesting differences performance web browsing traffic control theoretic pure random-dropping aqm striking response time performance achieved rem ecn loads load response time performance surprisingly approximates achieved uncongested network approximately responses complete milliseconds approximately responses complete threshold un-congested network table loss completed requests link utilizations offered load loss ratio completed requests millions link utilization throughput mbps ecn ecn ecn ecn ecn ecn uncongested gbps network drop-tail drop-tail queue size drop-tail queue size drop-tail queue size ref ref rem ref rem ref ared min max ared min max understand distributions response times positive impact ecn figures show scatter plots response size versus response time load interpreting plots important remember median response size bytes percentile response slightly bytes figure small responses strong banding effects multiples representing effects timeouts special interest density band seconds representing effects dropped syn segment appears forces large number small responses experience multi-second response times fact regard aqm schemes addition ecn number timeouts greatly reduced enables vast majority responses experience response times proportional rtt divided window size figure observing dense triangle-shaped mass points starting origin extending outward points note existence similar triangles offset vertically multiples canonical packet loss timeout striking result performance varied substantially rem packet dropping performance gap closed addition ecn preliminary analysis rem behavior suggests ecn improving rem behavior ameliorating fundamental design problem ecn rem consistently flows cumulative probability response time uncongested network drop-tail load qlen load qref load qref ecn load qref ecn load qref cumulative probability response time uncongested network drop-tail load qlen load qref load qref ecn load qref ecn load qref figure performance ecn load figure performance ecn load cumulative probability response time uncongested network drop-tail load qlen rem load qref rem load qref rem ecn load qref rem ecn load qref cumulative probability response time uncongested network drop-tail load qlen rem load qref rem load qref rem ecn load qref rem ecn load qref figure rem performance ecn load figure rem performance ecn load cumulative probability response time uncongested network drop-tail load qlen ared load thmin thmax ared load thmin thmax ared ecn load thmin thmax ared ecn load thmin thmax cumulative probability response time uncongested network drop-tail load qlen ared load thmin thmax ared load thmin thmax ared ecn load thmin thmax ared ecn load thmin thmax figure ared performance ecn load figure ared performance ecn load experience multiple drops source congestion window forcing flows frequently recover loss tcp timeout mechanism fast recovery mechanism ecn rem simply marks packets multiple packets flow marked window timeout avoided ecn appears improve rem performance mitigating effects poor compared marking dropping decisions final point note difference performance ared aqm schemes fact response time performance consistently worse ared drop-tail exact reasons observed differences remains subject continued study experiments reported lead speculate primary factors influencing results rem operate byte mode default monitor queue length bytes packets ared byte mode packet mode recommended setting byte mode finer grain queue measurements importantly rem marking dropping probability individual packet biased factor equal ratio current packet size average maximum packet size means rem syns pure acks experience lower drop probability data segments arriving router time fewer syns acks dropped ared ared gentle mode average queue size max xmax ared drops ecn-marked packets ecn guidelines state packets dropped aqm scheme queue length threshold exceeded manner motivation rule effectively deal potential non-responsive flows ignoring congestion indications analysis rule fact counter-productive explains ared inability benefit ecn finally rem periodically sample instantaneous queue length deciding mark packets ared weighted average reliance average queue length significantly limits ared ability react effectively face highly bursty traffic web traffic generated note fact changing ared weighting factor computing average queue length order magnitude effect performance conclusions results reported draw conclusions conclusions based premise userperceived response times primary yardstick performance link utilization packet loss rates important secondary measures cumulative probability response time uncongested network drop-tail load qlen ecn load qref rem ecn load qref ared ecn load thmin thmax figure comparison schemes ecn load cumulative probability response time uncongested network drop-tail load qlen ecn load qref rem ecn load qref ared ecn load thmin thmax figure comparison schemes ecn load cumulative probability reponse time uncongested network drop-tail load qlen ecn load qref rem ecn load qref ared ecn load thmin thmax figure comparison schemes ecn load complementary cumulative probability reponse time uncongested network drop-tail load qlen ecn load qref rem ecn load qref ared ecn load thmin thmax figure ccdf schemes ecn load offered loads bottleneck link capacity aqm scheme response time performance simple drop-tail fifo queue management response times achieved mbps link substantially response times gbps link number active users generate load result changed combining aqm schemes ecn loads link capacity greater results modest improvement drop-tail aqm schemes ecn ecn rem provide significant response time improvement offered loads link capacity load rem ecn provide performance mbps link competitive achieved gbps link number active users ared recommended parameter settings consistently resulted poorest response time performance result changed addition ecn conclude ecn end-user performance gain realized employing aqm schemes studied ecn performance significantly improved near-saturation loads rem appears provider links operated capacity deploying aqm ecn providers operate links higher load levels significant degradation user-perceived performance provided rem combined ecn deployed routers ecn implemented tcp stacks endsystems acknowledgements indebted sanjeewa athuraliya sally floyd steven low vishal misra don towsley assistance performing experiments addition grateful constructive comments anonymous referees shepherd dina katabi work supported parts national science foundation grants itrccr- eiacisco systems ibm corporation athuraliya note parameter values rem reno-like algorithms http netlab caltech march athuraliya low qinghe yin rem active queue management ieee network vol braden recommendations queue management congestion avoidance internet rfc april christiansen jeffay ott smith tuning red web traffic proc acm sigcomm sept feng kandlur saha shin self-configuring red gateway proc infocom march floyd gummadi shenker adaptive red algorithm increasing robustness red active queue management http icir floyd papers adaptivered pdf august floyd jacobson random early detection gateways congestion avoidance ieee acm transactions networking vol august 
hollot misra gong towsley designing improved controllers aqm routers supporting tcp flows proc ieee infocom april rizzo dummynet simple approach evaluation network protocols acm ccr vol january kenjiro framework alternate queueing traffic management pc-unix based routers proc usenix annual technical conf orleans june misra gong towsley fluid-based analysis network aqm routers supporting tcp flows application red proc acm sigcomm ramakrishnan floyd black addition explicit congestion notification ecn rfc september smith hernandez campos jeffay ott tcp protocol headers web proc acm sigmetrics june willinger taqqu sherman wilson self-similarity high variability statistical analysis ethernet lan traffic source level ieee acm transactions networking vol february response time response size bytes response time response size bytes figure scatter plot performance ecn load figure scatter plot performance ecn load 
hash-based traceback alex snoeren craig partridge luis sanchez christine jones fabrice tchakountio stephen kent timothy strayer bbn technologies moulton street cambridge snoeren craig cej ftchakou kent strayer bbn abstract design protocol makes difficult reliably identify originator packet absence deliberate attempt disguise packet origin wide-spread packet forwarding techniques nat encapsulation obscure packet true source techniques developed determine source large packet flows date system presented track individual packets efficient scalable fashion present hash-based technique traceback generates audit trails traffic network trace origin single packet delivered network recent past demonstrate system effective space-efficient requiring approximately link capacity unit time storage implementable current next-generation routing hardware present analytic simulation results showing system effectiveness introduction today internet infrastructure extremely vulnerable motivated well-equipped attackers tools readily covertly exchanged exploit programs publicly released vulnerability assessment software degrade performance disable vital network services consequences increasingly financially disastrous all-too-frequent headlines naming recent victim attack alex snoeren mit laboratory computer science snoeren lcs mit luis sanchez bbn technologies megisto systems lsanchez megisto work sponsored defense advanced research projects agency darpa contract -cviews conclusions contained document authors interpreted representing official policies expressed implied permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee sigcomm august san diego california usa copyright acm distributed denial service attacks typically conducted flooding network links large amounts traffic widely reported forms network attacks classes attacks conducted significantly smaller packet flows fact number widely-deployed operating systems routers disabled single welltargeted packet institute accountability attacks source individual packets identified anonymous nature protocol makes difficult accurately identify true source datagram source wishes conceal network routing infrastructure stateless based largely destination addresses entity network officially responsible ensuring source address correct routers employ technique called ingress filtering limit source addresses datagrams stub network addresses belonging network routers resources examine source address incoming packet ingress filtering protection transit networks spoofed source addresses legitimately network address translators nats mobile unidirectional link technologies hybrid satellite architectures well-placed attacker generate offending packets originated techniques ingress filtering increase difficulty mounting attack transit networks dependent peers perform filtering interdependence unacceptable liability perspective motivated network secure independently systems reliably trace individual packets back sources important step making attackers systems accountable number significant challenges construction tracing system including determining packets trace maintaining privacy tracing system adversely impact privacy legitimate users minimizing cost router time spent tracking forwarding packets storage information developed source path isolation engine spie enable traceback ability identify source packet copy packet traced destination approximate time receipt historically tracing individual packets required prohibitive amounts memory spie key innovations reduce memory requirement link bandwidth unit time bloom filters storing packet digests packets spie increase network vulnerability eavesdropping spie routers efficiently determine forwarded packet time interval maintaining privacy unrelated traffic rest paper examines spie detail begin defining problem traceback section articulate desired features traceback system survey previous work section relating feature sets requirements section describes digesting process detail section presents overview spie architecture section offers practical implementation concepts section analytic simulation results evaluating spie traceback success rates discuss issues involved deploying spie section concluding section future work traceback concept traceback defined attempt clarify context spie developed section presents detailed formal definition traceback hope presenting strawman definition traceback community evaluate traceback schemes order remain consistent terminology literature packet interest nefarious term attack packet similarly destination packet victim note reasons trace source packet packets interest ill intent whatsoever assumptions important assumptions traceback system make network traffic carries packets addressed physical host duplicate packets exist network routers subverted attackers aware traced routing behavior network unstable packet size grow result tracing end hosts resource constrained traceback infrequent operation assumptions simply characteristics internet protocol packets multicast broadcast address destination causing routing infrastructure duplicate internally attacker inject multiple identical packets possibly multiple locations tracing system prepared situation multiple sources identical packet single source multiple typically identical packets assumptions speak capabilities attacker attacker gain access routers adjacent path attacker victim variety means sophisticated attacker aware characteristics network including possibility network capable tracing attack traceback system confounded motivated attacker subverts router intent subvert tracing system instability internet routing implications tracing important packets host destination traverse wildly paths result system seeks determine origins multi-packet analysis techniques prepared make sense divergent path information assumption packet size grow controversial number protocols today packet size grow technologies rely tunnels ipsec mobile increasing packet size mtu problems increases overhead sharply byte additional overhead reduces system bandwidth average packet size bytes efficient traceback system packet size grow assume end host victim attack resource-poor unable maintain substantial additional administrative state routing state packets previously received assumption observed rise special purpose devices microscopes cameras printers attached internet internal resources devoted performing primary task final assumption traceback queries infrequent important design implications implies queries handled router control path dealt forwarding path line speed auditing tasks packet forwarding support traceback executed forwarding processing audit trails infrequent respect generation goal ideally traceback system identify source piece data network framework packet smallest atomic unit data smaller division data byte instance contained unique packet optimal traceback system precisely identify source arbitrary packet larger data unit stream isolated searching packet data stream auditing system traceback system effective networks deployed source packet ingress point traceback-enabled network actual host network origin compromised routers enabled network assumes router path co-opted assist concealing packet source obvious argue desirable trace individual packets stream individual packets originated sites meeting victim paths network figure attack graph attack paths identical packets injected received victim arrows links traversed packet nodes attack path shaded attempt discern packet source entire path network path traced number non-subverted routers terminate source flow pass subverted router considered co-conspirator treated appropriately interested constructing attack path path consists router traversed packet journey source victim conspiring routers fabricate trace information path guaranteed accurate portion victim source multiple sources identified routers subverted multiple indistinguishable packets injected network sources general case traceback system construct attack graph composed attack paths instance attack packet arrived victim figure depicts network viewed victim attack graph victim attack graph false 
positives presence subverted routers attack graph identify sources emit packet argue unavoidable consequence admitting possibility subverted routers ideal traceback system produces false negatives attempting minimize false positives exonerate attacker including attacker attack graph traceback system deployed reduce privacy communications entities involved generation forwarding receipt original packet gain access packet contents utilizing part participating traceback system ideal traceback system expand eavesdropping capabilities malicious party transformations important note packets modified forwarding process addition standard decrementing time live ttl field checksum recomputation packets transformed intermediate routers packet transformation result valid processing router error malicious intent traceback system concern packet transformations resulting error malicious behavior packets resulting transformations traced point transformation transforming node fixed considered co-conspirator optimum traceback system trace packets valid transformations back source original packet valid packet transformations defined change packet state enhances network data delivery transformations occur due reasons hardware network management protocol requirements source request based transform produced packet transformations categorized packet encapsulation packet generated original packet encapsulated payload ipsec packet forwarded intermediate destination de-encapsulation packet generation packets generated direct result action router original packet icmp echo reply response icmp echo request packets forwarded processed independent original packet common packet transformations include performed rfc -compliant routers packet fragmentation option processing icmp processing packet duplication network address translation nat ip-in-ip ipsec tunneling notable forms packet transformation transformations result irrecoverable loss original packet state due stateless nature networks study wide-area traffic patterns conducted cooperative association internet data analysis caida found traffic undergoes common transformation tunneling study encompass forms transformation nat processing notable omission safe assume packet transformations account small fraction traffic traversing internet today attackers transmit packets engineered experience transformation ability trace packets undergo transformation essential feature viable traceback system related work approaches problem determining route packet flow audit flow traverses network attempt infer route based impact state network approaches increasingly difficult size flow decreases infeasible flow sizes approach single packet small flows generally measurable impact network state route inference pioneered burch cheswick considered restricted problem large packet flows proposed technique systematically floods candidate network links watching variations received packet flow due restricted link bandwidth infer flow route requires considerable knowledge network topology ability generate large packet floods arbitrary network links categorize auditing techniques classes balance resource requirements network components techniques require resources end host routing infrastructure require resources network require infrastructure support add packet processing forwarding engine routers offload computation control path routers end-host schemes auditing approaches attempt distribute burden storing state end hosts network routers notify packet destination presence route packets grow arbitrarily large schemes developed reduce amount space required send information recently proposed techniques savage bellovin explore in-band out-of-band signaling high overhead involved savage bellovin attempt provide audit information packet employs probabilistic methods sufficiently large packet flows traced providing partial information subset packets flow auditing routers enable end host reconstruct entire path traversed packet flow receiving sufficient number packets belonging flow schemes diverge methods communicate information end host savage employ packet marking scheme encodes information rarely-used fields header approach improved song perrig improve reconstruction paths authenticate encodings order avoid backwards compatibility issues increased computation required sophisticated encoding schemes employed packet marking schemes bellovin scheme extensions simply sends audit information icmp message infrastructure approaches end-host schemes require end hosts log meta data case incoming packet proves offensive alternatively network charged maintaining audit trails obvious approach auditing packet flow simply log packets points network extraction techniques discover packet path network logging requires computation router fast path implemented efficiently today router architecture sager suggests monitoring approach effectiveness logs limited amount space store today link speeds packet logs quickly grow intractable sizes short time frames oclink capable transferring seconds conduct query router links require high-speed storage requirements reduced sampling techniques similar end-host schemes down-sampling reduces probability detecting small flows alleviate security issues raised storing complete packets router ability attacker break router capture terrabytes actual traffic severe privacy implications alternatively routers tasked perform sophisticated auditing real time extracting smaller amount information packets forwarded routers support input debugging feature identifies incoming port outgoing packet set packets interest arrived history stored process activated attack packet passes due high overhead operation popular router architectures activating adverse effects traffic serviced router specialized routing main problems link testing logging methods large amount repetition required trace conducted hop-by-hop fashion requiring query router incoming link links identified process repeated upstream router techniques developed streamline automate process isps developed hoc mechanisms automatically conducting input debugging networks schnackenberg propose special intruder detection isolation protocol idip facilitate interaction routers involved traceback effort idip participating entities track packet traffic simply requires determine component attack matching description automated tools router isp support input debugging logging common today high-speed routers reasons discussed order avoid requirement stone suggests constructing overlay network connecting edge routers isp deliberately simple topology specialized routers suspicious flows dynamically rerouted special tracking network analysis approach major shortcomings attack sufficiently long-lived isp effect rerouting relevant flow terminates routing change perceptible attacker motivated attacker escape detection taking action techniques exist hide precisely changed route layer-three topology hard mask packet digesting spie source path isolation engine auditing techniques support traceback individual packets reducing storage requirements orders magnitude current logbased techniques traffic auditing accomplished computing storing -bit packet digests storing packets addition reducing storage requirements storing packet digests actual packet contents preserves traffic confidentiality preventing spie tool eavesdropping payload options destination address source address ttl protocol checksum identification fragment offset version header length type service total length figure fields packet fields gray masked digesting including type service time live ttl checksum options fields hash input packet content input hash function uniquely represent packet enable identification packet hops forwarding path time desirable limit size hash input performance reasons discussed section duffield grossglauser encountered similar requirements sampling subset forwarded packets attempt measure traffic flows similar approach masking variant packet content selecting appropriate-length prefix packet input digesting function choice invariant fields prefix length slightly figure shows packet fields included spie digesting function spie computes digests invariant portion header bytes payload frequently modified header fields masked prior digesting note obvious fields ttl tos checksum options routers rewrite option field intervals ensure packet 
appears identical steps route spie masks compensates fields computing packet digests important note invariant fields spie digesting occasionally modified packet transform section research invariant bytes packet masked header bytes payload sufficient differentiate non-identical packets figure presents rate packet collisions increasing prefix length representative traces wan trace ocgateway router lan trace active ethernet segment results similar traces number sites unique packets identical prefix length termed collision -byte prefix results collision rate approximately wide area lan unlike similar results reported duffield grossglauser fig results include unique packets exact duplicates removed packet trace close inspection packets fraction collided packets prefix length bytes wan lan figure fraction packets collide function prefix length wan trace represents packets duplicates removed collected july florida ocgateway lan trace consists million packets duplicates removed observed ethernet segment mit lab computer science wide area identical prefixes packets matching prefix lengths bytes icmp time exceeded error packets identification field set similarly packets matching prefixes bytes length tcp packets identifications set differentiated tcp sequence number acknowledgment fields markedly higher collision rate local area due lack address traffic diversity expected result significantly impact spie performance lans exist points attack graph immediately surrounding victim attacker false positives victim local network easily eliminated attack graph share gateway router event false positives source attacker spoofed source addresses missing diversity attack traffic remain vicinity true attacker definition purposes spie packets effectively distinguished invariant bytes packet bloom filters storing set digests traffic forwarded router require massive amounts storage spie space-efficient data structure bloom filter record packet digests bloom filter computes distinct packet digests packet independent uniform hash functions n-bit results index -sized bit array array initialized zeros bits set packets received figure depicts bloom filter hash functions membership tests conducted simply computing digests packet question checking bit posifurther investigation number current operating systems including recent versions linux frequently set bits bits figure packet received spie computes independent n-bit digests sets bits -bit digest table tions packet stored table bits highly packet stored set insertions caused bits set creating false positive rate false positives controlled hash functions spie places major restrictions family hash functions bloom filters member function distribute highly correlated set input values packet prefixes uniformly hash result space hash function distinct packets negationslash standard property good hash functions spie requires event packets collide hash function independent collision events functions prime prime prime negationslash intuitively implies false positives router independent false positives neighboring routers formally function fchosen random independently input packets high probability hash families called universal hash families defined carter wegman implemented variety fashions finally member functions straightforward compute high link speeds requirement impractical spie hash functions require cryptographic hardness properties difficult generate valid input packet hash create packet hash enables classes attacks fairly benign attack ensure attack packets fingerprint bloom filter router difficult multiple independent hashes router elicits packet trace reveals larger set systems attacker attack attack ensure attack packets fingerrouter router dga router router router dga scar router router router dga stm isp network figure spie network infrastructure consisting data generation agents dgas spie collection reduction agents scars spie traceback manager stm prints common case difficult attack create attack packet fingerprint non-attack packet general attack simply yields false-positive path hop hash functions change hop source path isolation engine spie-enhanced routers maintain cache packet digests recently forwarded traffic packet determined offensive intrusion detection system judged interesting metric query dispatched spie turn queries routers packet digests relevant time periods results query simulated reverse-path flooding rpf algorithm build attack graph packet source architecture tasks packet auditing query processing attack graph generation dispersed separate components spie system figure shows major architectural components spie system spie-enhanced router data generation agent dga depending type router question dga implemented deployed software agent interface card plug switching background bus separate auxiliary box connected router auxiliary interface dga produces packet digests packet departs router stores digests bit-mapped digest tables tables paged represent set traffic forwarded router interval time table annotated time interval set hash functions compute packet digests interval digest tables stored locally dga period time depending resource constraints router interest expressed traffic data time interval tables transferred spie collection reduction scar agent longer-term storage analysis scars responsible region network serving data concentration points routers scars monitor record topology area facilitate traceback packets traverse region due complex topologies today isps typically scars distributed entire network request scar produces attack graph region attack graphs scar grafted form complete attack graph spie traceback manager stm stm controls spie system stm interface intrusion detection system entity requesting packet trace request presented stm verifies authenticity request dispatches request scars gathers resulting attack graphs assembles complete attack graph completion traceback process stms reply intrusion detection systems final attack graph traceback processing traceback process begin attack packet identified intrusion detection system ids determine exceptional event occurred provide stm packet victim time attack spie places constraints ids victim expressed terms last-hop router end host attack packet identified timely fashion requirement query process starting point stems fact traceback initiated digest tables overwritten dgas time constraint directly related amount resources dedicated storage traffic digests discuss timing resource tradeoffs section receipt traceback request stm cryptographically verifies authenticity integrity entity wishing employ spie perform traceback operation properly authorized order prevent denial service attacks successful verification stm immediately asks scars domain poll respective dgas relevant traffic digests time critical poll happen digest tables resident dgas digest tables safely transferred scars traceback process longer real-time constraints beginning scar responsible victim region network stm sends query message consisting packet egress point time receipt scar responds partial attack graph packet entered region transformed possibly multiple times region attack graph terminates region managed scar case source identified nodes edge scar network region case stm sends query possibly-transformed packet scar abutting edge node process continues branches attack graph terminate source network edge spie system stm constructs composite attack graph returns intrusion detection system digest type packet data bits bits bits figure transform lookup table tlt stores sufficient information invert packet transformations spie routers table indexed packet digest specifies type transformation stores irrecoverable packet data transformation processing packets undergo valid transformation traversing 
network spie capable tracing transformations spie reconstruct original packet transformed packet transformations invertible additional information due stateless nature networks sufficient packet data recorded spie time transformation original packet reconstructed packet data chosen input digesting function determines set packet transformations spie handle spie transformations modify fields input digest function spie computes digests header bytes packet payload masks omits case options frequently updated fields digesting shown figure section hides hop-by-hop transformations digesting function forces spie explicitly handle transformations fragmentation network address translation nat icmp messages ip-in-ip tunneling security ipsec recording information reconstruct original packet transformed packet requires additional resources fortunately spie circumstances packet undergo transformation generally packet fast path router put control path relaxing timing requirements router memory constraints remain unchanged transformation information stored scalable space-efficient manner transform lookup table packet digest table collected dga spie maintains transform table interval time called transform lookup table tlt entry tlt fields field stores digest transformed packet field specifies type transformation bits sufficient uniquely identify transformation type supported spie field variable amount packet data length depends type transformation recorded space efficiency data field limited bits transformations network address translation require space transformations utilize level indirection bit transformation type field reserved indirect flag indirect flag set field tlt treated pointer external data structure information reconstruct packet indirect flag flow caching cases packets undergoing transformation related cases reduce storage requirements suppressing duplicate packet data referencing single copy required data reconstruct packet flow scheme requires spie-enabled router capable flow caching identification packets flow correlated stored appropriately order preserve alignment efficient implementations store bits packet digest resulting -bit wide tlt entries width implies distinct packet digests map tlt entry relative rarity packet transformations sparsity digest table uniformity digesting function combine make collisions extremely rare practice assuming digest table capacity roughly mpkts sram section transformation rate expected collision rate approximately packets collision occurs simply results additional transformation queried packet transformation computed including null transformation traceback continues incorrectly transformed packets exist neighboring routers contribute false nodes attack graph special-purpose gateways classes packet transformations notably nat tunneling performed large fraction packets passing gateway transform lookup table quickly grow unmanageable size instances spie considers security gateway nat functionality routers separate entity standard routing transformations handled special purpose gateway transformations require approach transformation handling transformations types gateways generally computed stateful based static rule set inverted similar fashion details implementation-specific inverting transformations straightforward sample transformations good transformation packet fragmentation avoid needing store packet payload spie supports traceback packet fragment non-first fragments traced point fragmentation fragmentbased attacks attacker subset fragments received victim packet reassembled viable attack denial service attack reassembly engine fragmentation occurs network attacker control fragments received victim victim eventually receive fragment traceback packet data recorded includes total length fragment offset fragments field properlybehaving routers create fragments bytes payload information spie invert fragmentation construct header bits payload pre-fragmented packet sufficient continue traceback observe spie record packet payload information icmp transformations inverted icmp error figure reverse path flooding starting victim router proceeding backwards attacker solid arrows represent attack path dashed arrows spie queries queries dropped routers forward packet question messages include bits offending packet careful readers concerned encapsulation inverted encapsulated packet subsequently fragmented fragments encapsulated header bits payload strictly true transformations inverted extreme cases takes sophisticated attacker packet encapsulated fragmented ensure fragment loss fragments received original header extracted reassembled payload extremely difficult attacker insure packet fragments lost packet loss flooding link requires sending large number packets extremely fragments packet successfully received decapsulator traceback graph construction scar constructs subgraph topology information region network collecting digest tables routers region scar simulates reverse-path flooding rpf examining digest tables order queried actual reverse path flood conducted topology existed time packet forwarded figure shows reverse-path flooding discover attack path querying routers important note routers queried scar cached relevant hash digests locally order query router scar computes set digests table consults table membership entry exists packet question router considered forwarded packet scar adds current node attack graph moves neighbors neighbor queried digest found table search digest table previous time period depending link latency routers scars request multiple digest tables router order assure digest time frame digest located packet arrival time considered latest time interval insures packet earlier time adjacent routers packet found digest tables relevant time period branch search tree terminated searching continues remaining routers list previously visited nodes times cycles pruned assure termination result procedure connected graph set nodes believed forwarded packet victim assuming correct operation routers graph guaranteed superset actual attack graph due digest collisions nodes attack graph actual attack graph call nodes false positives base success spie ability limit number false positives contained returned attack graph practical implementation freebsd spie prototype simulate universal hash family random member defined selecting random input vector prepend packet properties ensure digests identical packets input vectors independent -bit output considered independent -bit digests support bloom filters dimension router implementations requiring higher performance prefer universal hash families specifically tailored hardware implementation simple family amenable fast hardware implementation constructed computing crc modulo random member set indivisible polynomials order ensure hash independence router periodically generates set independent input vectors select digest functions needed bloom filter family universal hashes input vectors computed pseudorandom number generator independently seeded router increased robustness adversarial traffic input vectors changed time digest table paged resulting independence routers time periods size digest bit vector digest table varies total traffic capacity router faster routers larger vectors time period similarly optimum number hash functions varies size bit vector routers tight memory constraints compute additional digest functions provide false-positive rates compute fewer digests provide larger bit vector figure depicts implementation spie data generation agent hardware high-speed routers full discussion details architecture analysis performance presented previously briefly interface card router outfitted interface tap computes multiple independent digests packet forwarded digests passed separate spie processor implemented line card form factor external unit stores digest tables specific time periods -bit ram t-p fifo ram mux readout control processor ring buffer dram time readout signature taps signature aggregation history memory line cards spie card box figure sample spie dga hardware implementation highspeed routers time passes forwarded traffic begin fill digest tables 
paged over-saturated resulting unacceptable false-positive rates tables stored history buffer implemented large ring buffer digest tables transferred separate control processor scars stored ring buffer analysis tradeoffs involved determining optimum amount resources dedicate spie individual router network spie resource requirements expressed terms quantities number packet digest functions bloom filter amount memory store packet digests similarly spie performance characterized orthogonal dimensions length time packet digests queries issued digests cached requested scar reasonable amount time dgas discard digest tables order make room recent accuracy candidate attack graphs measured number false positives graph returned spie metrics controlled adjusting operational parameters memory storing packet digests longer time queries issued similarly digest tables lower false-positive rates yield accurate attack graphs characterize performance spie terms amount memory digest table performance false positives relate rate false positives attack graph rate false positives individual digest table relationship depends actual network topology traffic forwarded time make simplifying assumptions order derive upper bound number false positives function digest table performance theoretical bounds suppose router neighbors degree ensures digest tables false-positive rate arbitrary tuning factor simplistic analysis shows true attack graph nodes attack graph returned spie extra nodes expectation false-positive rate digest table varies time depending traffic load router amount time paged similarly tables paged strict schedule based maximum link capacity actual traffic load digest tables reach rated capacity analytic result worst case bound digest table performs strictly partially full analysis assumes set neighbors node disjoint true real networks reasonable expect false-positive rate real topologies actual utilization rates substantially lower purposes discussion arbitrarily select falsepositive rate resulting additional nodes expectation path length nodes approaching diameter internet theoretical model bound reasonable starting point turn effectiveness practice simulation results order relate false-positive rate digest table performance real topologies run extensive simulations actual network topology national tier-one isp made roughly backbone routers links ranging ocwe obtained topology snapshot average link utilization data isp network backbone week-long period end sampled periodic snmp queries averaged week simulated attack randomly selecting source victim sending attack packets constant rate packet recorded intermediate router path source destination traceback simulated starting victim router proceeding source uniformly distributed background traffic simulated selecting fixed maximum false-positive rate digest table off-path router real background traffic uniform result slight dependencies false-positive rates routers represents reasonable starting point order accurately model performance real traffic loads effective false-positive rate scaled observed traffic load router clarity non-transformed packet source destination preliminary experiments multiple sources expected distributed denial service ddos attack false positives scale linearly respect size attack graph union attack paths copy packet case experiments presented ddos attack sending identical packets multiple sources aids spie task wise attacker send distinct packets source forcing victim trace packet individually avg number false positives length attack path hops theoretical bound avg number false positives util degree avg number false positives avg number false positives degree figure number false positives spie-generated attack graph function length attack path theoretical bound plotted simulation results false-positive rates conditioned router degree degree-dependent runs considered actual link utilization assumed full utilization simulation represents average runs actual topology utilization data national tier-one isp order validate theoretical bound plotted expected number false positives function attack path length digest table performance computed show comparison results simulations isp backbone topology set maximum digest table false-positive probability prescribed figure shows false-positive rate significantly lower analytic bound significant portion disparity results low link utilizations maintained operational backbones links data set utilization rates comparing results simulation assuming full link utilization remains considerable gap analytic bound simulated performance network backbones non-linearity simulation results strong damping factor due topological structure network intuitively routers neighbors found core network peering points routers fewer neighbors found edge network suggests false positives induced core routers quickly die attack graph proceeds well-connected routers edge examine dependence vertex degree conducted simulation time removed false-positive rate dependence degree router neighbors setting digest table performance simply returning actual utilization data marked increase number false positives remains analytic bound surprising result analytic bound dependence router degree hierarchical structure isp backbones permit relaxation coupling allowing false positive rate digest tables set independently degree resulting significant space savings time memory utilization amount time queries supported directly dependent amount memory dedicated spie amount time varies depending responsiveness method identify attack packets purposes discussion assume minute reasonable amount time identify attack packet initiate traceback discussed section digest tables moved scars actual query process arbitrarily delayed length time amount memory required varies linearly total link capacity router dramatically affected dimension bloom filter bloom filters typically terms number digesting functions ratio data items stored memory capacity effective false-positive rate bloom filter bits memory store packets digest functions expressed parenleftbigg parenleftbig parenrightbig parenrightbigg parenleftbig parenrightbig tables providing effective false-positive rates capacities digesting functions readily purposes discussion bloom filter digesting functions capacity factor meaning store packets bloom filter size filter effective false-positive rate full degree-independent simulations high digest tables calibrated respect router degree luckily increasing number digesting functions bloom filters achieve significantly lower false-positive rates slight increases capacity instance false-positive rate corresponds degree-dependent simulation routers neighbors achieved digesting functions memory factor slightly greater suggest spie memory determined number packets processed average-sized packet approximately bits describe link speeds terms packets combine bloom filter factor compute rule thumb spie requires roughly total link capacity digest table storage typical low-end router oclinks results roughly storage high end core router oclinks maximum capacity mpkts sec require roughly sec digest table memory minute worth storage practice size digest table limited type memory required capacity memory consideration access times turn equally important packets recorded digest table rate commensurate arrival optimistic dram cycle time read-modifywrite cycle routers processing mpkts sec roughly current production routers support oclink oclink ocs require sram digest table current sram technology limits digest tables paged sdram order store minute worth digests section entire minute worth traffic stored unpaged digest table low link speeds timing uncertainties ocscenario hold roughly traffic data history buffer store individual digest tables observation rise important issue imperfect timing spie examine multiple packet digests router digests considered greater chance false positives advantageous make digest tables large reasonable link speeds memory access time slow 
sdram current technology digest tables capacity roughly mpkts case approximate packet service time confined interval covered digest table case expect false-positive rate increase linearly number digest tables examined high-speed routers important maintain precise timing synchronization adjacent routers examined impact typical ntp clock skew spie performance synchronization maintained small number digesting intervals significantly impacting false-positive rate discussion issues dealt spie query succeed traceback operations requested network unstable due attack triggered traceback spie communications succeed timely fashion face network congestion instability solution provide spie out-of-band channel possibly physically logically separate atm vcs links private channels ensure successful transmission granting sufficient priority spie traffic spie usefulness increases greatly widespread deployment spie construct attack graph portion packet path spie domain independent isps lack sufficient levels technical political cooperation unite spie infrastructure isps prefer stm responsible queries network case isp stm granted authority issue queries adjacent isps stms order complete traceback rare cases expose content packet employ spie case support call-backs scars provide querying ids applicable digesting function transformation information actual digesting expensive operation existence case implies querying ids grave concern place dedicate great deal resources traceback finally transformations raise additional issues related performance policy assuming packet transformations represent small percentage traffic traversing router efficient spie implementation easily handle resource requirements logging transformation information attackers view packet transformations method denial service attack spie number transformations recorded time interval bounded rate router process packet transformations spie aims handle packet transformations rate equal greater router result router spie bottleneck processing packet transformations task made easier realizes vast majority transformations occur low-to-medium speed routers sophisticated transformations tunneling nating typically customer premises equipment isps turn standard transformation handing icmp processing core routers conclusion future work developing traceback system trace single packet long viewed impractical due tremendous storage requirements saving packet data increased eavesdropping risks packet logs posed spie key contribution demonstrate single packet tracing feasible spie low storage requirements aid eavesdropping spie complete practical system deals complex problem transformations implemented high-speed routers problem proposed tracing schemes pressing challenges spie increasing window time packet successfully traced reducing amount information stored transformation handling extend length time queries conducted linearly increasing memory requirements relaxing set packets traced spie support traceback large packet flows longer periods time fashion similar probabilistic marking schemes discard packet digests expire discard probabilistically age large packet flows odds high constituent packet remain traceable longer periods time acknowledgements indebted walter milliken assistance ensuring architecture implementable today high-speed routers designing initial dga hardware prototype shown figure david karger pointed generalize hashing technique bloom filters decrease memory requirements michael mitzenmacher ron rivest provided advice digesting functions christine alvarado david andersen john jannotti allen miu anonymous reviewers feedback earlier drafts baker requirements version routers rfc ietf june bellovin icmp traceback messages internet draft ietf mar draft-bellovin-itracetxt work progress black halevi krawczyk krovetz rogaway umac fast secure message authentication proc advances cryptology crypto aug bloom space time trade-offs hash coding allowable errors communications acm july burch cheswick tracing anonymous packets approximate source proc usenix lisa dec carter wegman universal classes hash functions journal computer system sciences duffield grossglauser trajectory sampling direct traffic observation proc acm sigcomm aug fan cao almeida broder summary cache scalable wide-area web cache sharing protocol acm trans networking ferguson senie network ingress filtering defeating denial service attacks employ source address spoofing rfc ietf jan halevi krawczyk mmh software message authentication gbit rates proc workshop fast software encryption krawczyk lfsr-based hashing authentication proc advances cryptology crypto aug mccreary claffy trends wide area traffic patterns view ames internet exchange itc specialist seminar traffic modeling measurement management microsoft corporation stop tcpip sys receiving band oob data http support microsoft support articles asp national laboratory applied network research nlanr network traffic packet header traces http moat nlanr net traces traces flacrl enc paxson end-to-end internet path dynamics acm trans networking postel internet control message protocol rfc ietf sept postel internet protocol rfc ietf sept rivest message-digest algorithm rfc ietf apr sager security fun ocxmon cflowd internet working group meeting nov http caida projects ngi content security sanchez milliken snoeren tchakountio jones kent partridge strayer hardware support hash-based traceback proc darpa information survivability conference exposition june savag wetherall karlin anderson practical network support traceback proc acm sigcomm aug schnackenberg djahandari sterne infrastructure intrusion detection response proc darpa information survivability conference exposition jan song perrig advanced authenticated marking schemes traceback proc ieee infocom apr stone centertrack overlay network tracking dos floods proc usenix security symposium aug zhang massey mankin intentiondriven icmp trace-back internet draft ietf feb draftwu-itrace-intention- txt work progress 
introduction itlab learn lab overview equipment saving data editor navigate linux utilities network monitoring tcpdump ethereal copyright liebeherr rights reserved lab itl lab page spring table contents prelab lab setup lab tour equipment part saving data part copying files floppy disks part editor part unix operating system part locating configuration files linux part ping part basics tcpdump part basics ethereal checklist form itlab feedback form itlab itl lab page spring prelab review unix commands workstations itl run linux operating system assignment asks review important unix commands find online manual pages man pages http freebsd cgi man cgi change version freebsd -release red hat linux commands type command search term search return man page read commands man pwd mkdir rmdir chmod kill happen type man man linux command find size file lilo conf command determine processes running system command files names file file type file file option issue warning situation command issue directory copy file mydata directory labdata command kill pid pid number process type command directory read manual pages unix commands ping tcpdump editor familiarize text editor compared editors primitive editors work unix systems read tutorial http virginia itlab labs vi-guide html print copy quick guide http virginia itlab labs vi-reference pdf bring guide lab purposes copy file http virginia itlab labs vitest-ifcfg unix account editor perform file print final result add line delete line copy lines add end file itl lab page spring change occurrences ethereal tool ethereal powerful network analyzer website http ethereal read introduction manual pages ethereal bring lab copy guide lab answers questions result file question itl lab page spring lab vintpc vintpc vintpc ethernet hub vintpc vintpc vintpc figure configuration lab pcs connected single ethernet hub setup lab pcs connected single ethernet segment shown figure baset ethernet machines connected single hub addresses pcs configured vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc address ethernet interface cards lab ethernet interface card addresses names vintpc itl lab page spring tour equipment overview equipment lab instructor give overview equipment lab itlab internet machines itlab isolated internet experiments itl interfere network pcs unix lab computers pcs run linux machines windows installed login pcs root user rootroot password working directory directory labdata save data directory started lab session reboot machine issue command reboot part saving data lab exercises asked save data displayed monitor file exercise familiarize methods save data file note create file place file directory labdata note purge files lab session redirection operators unix operating systems easy redirecting output command file redirection operators itl lab page spring syntax command filename output command written filename file created doesn exist previous contents overwritten file exist command filename operator appends output command end supplied file viewing saving data time view data save data file time accomplished tee command syntax command tee filename output command displayed monitor written filename file created doesn exist previous contents overwritten file exists copy paste feature copy paste features x-windows copy data file select text copy highlighting left mouse button open file place cursor desired position screen enter insert working mode click left mouse buttons time paste selected text exercise methods save data save output command file named etcfiles check-off part itl lab page spring part copying files floppy disks simple save data copy data floppy disk ms-dos formatted floppy disk linux commands execute ms-dos file operations list important commands refer man pages detailed information mcd ms-dosdirectory change working directory ms-dos disk mcopy file file mcopy file dir copy ms-dos files unix mdel ms-dosfile ms-dosfiles delete multiple ms-dos file mdeltree ms-dosdirectory remove directory files subdirectories ms-dos file system mdir msdirname display contents ms-dos directory mformat drivename format dos floppy disk adds ms-dos file system low-level formatted floppy disk mmd ms-dosdirectory make ms-dos subdirectory mmove sourcefile targetdirectory move rename ms-dos file subdirectory mtype file displays contents file file exercise commands copy file etcfiles exercise floppy disk run command obtain list file systems mounted system save output command file write file floppy disk check-off part itl lab page spring part editor editor display oriented interactive text editor user create modify store files computer terminal editor found virtually unix based systems learning helpful refer guide obtained prelab complete exercises exercise command tmp bash profile labdata bash profile make copy file bash profile modify file labdata bash profile reflect execute command labdata bash profile add directory labdata environment variable path delete comment lines empty lines update lines bashrc bashrc lines bashrc bashrc echo find initial script file change occurrences bashrc profile check-off part itl lab page spring part unix operating system basic unix commands summarized man pages detailed description man displays on-line manual pages command man displays manual pages command pwd displays current working directory lists contents current directory file displays contents file file press space bar page press back press quit file file rename file file file removes file file mkdir dir creates directory named dir rmdir dir removes directory dir current directory directory file file copies content file file file file dir copies file file directory dir lists running processes column output command process number pid processes kill pid terminates process process number pid ctrl-c pressing keyboard sequence ctrl-c terminates running job finished ctrl-z ctrl-z halts current process resumes process background process exercise review commands familiar unix command check-off part itl lab page spring part locating configuration files linux unix operating systems linux number configuration files set environment variables system set linux machine router change single line configuration files studying configuration files learning network configuration options labs work redhat popular linux distribution redhat runs linux kernel version listed important configuration files redhat important modify configuration files asked lab exercise inconsiderate configuration files render machine useless note configuration files fundamentally versions unix operating system aix solaris linux freebsd structure configuration files releases unix version configuration files linux distributions redhat slackware configuration files versions unix distribution configuration files freebsd freebsd fundamental differences sysconfig network file defines global parameters network configuration hostname domain address hostname type network interfaces called device default gateway includes 
line decide machine acts router sysconfig network-scripts ifcfg-lo sysconfig network-scripts ifcfg-eth sysconfig network-scripts ifcfg-eth files define configuration network interfaces configuration file network interface files ifcfg-eth ifcfg-eth installed ethernet itl lab page spring interface cards file ifcfg-lo loopback interface hostname file host hosts file specifies mapping symbolic names addresses network devices sysconfig static-routes file settings static routing table booting machine exercise explore files editor make files files edited change host machine vintpc machine files include information machine performs forwarding save file sysconfig network-scripts ifcfg-eth lab report include answers questions exercise file saved exercise explain meaning variables settings check-off part itl lab page spring part ping simple effective tools debug networks ping utility ping utility tests host reachable technically ping command sends icmp echo request datagram interface expects icmp echo reply datagram return syntax ping flag address note linux ping sending packets interrupt command ctr-c list ping command read man pages detailed explanation ping count stop sending receiving count icmp packets flood ping outputs packets fast back hundred times whichever wait wait wait seconds sending packets numeric output symbolic names hosts record route records traversed nodes displays route addresses size send size number data bytes default display verbose output icmp packets received listed echo response exercise send ping message neighboring machines collect output file ping configured local ethernet interface loopback interface collect output file notice difference itl lab page spring lab report include measurements exercise explain difference pinging local ethernet interface loopback interface completed lab send ping messages number web servers internet collect statistics maximum round-trip delay icmp echo request reply order avoid overloading destination send ping packets machine note ping disabled unix machines case windows machine run ping ms-dos window include measurement data lab report find machine long round-trip time check-off part itl lab page spring part basics tcpdump tcpdump powerful tool network monitoring data acquisition program capture traffic network tcpdump print headers packets network interface match expression tcpdump track network problems monitor network activities exercise tcpdump tool closer network traffic generated ping messages measuring traffic address machine left-hand neighbor address ipneighbor type tcpdump host ipneighbor open window execute ping ipneighbor observe output tcpdump capture output file lab report include measurements lab report explain meaning field captured data exercise perform experiments send ping non-existing address send ping broadcast address command ping capture output ping measurements network traffic tcpdump lab report include measurements lab report interpret results machines respond broadcast ping check-off part itl lab page spring part basics ethereal ethereal visual network protocol analyzer unix windows examine data live network previously saved capture file disk ethereal read libcap capture files created tcpdump ethereal interactively capture browse network traffic view summaries detailed information packet note tcpdump ethereal itl labs exercise exercise walks steps capturing saving network traffic ethereal tool starting ethereal simply type ethereal selecting capture options display options select automatic scrolling live capture unselect enable resolution capture start select capture packets promiscuous mode select update list packets real time select automatic scrolling live capture unselect enable resolution select eth interface select infinite count type host ipneighbor filter box ipneighbor address right-hand neighbor machine capturing traffic separate window execute ping ipneighbor observe output ethereal click highlight captured packet ethereal window view headers captured traffic stopping traffic capture click stop ethernet capture itl lab page spring saving captured packets file file print save captured data plain text file select plain text file format save captured data postscript file select postscript print select file select print detail expand levels type file save file executes save operation save file floppy disk lab report include file captured data lab report describe difference files saved tcpdump part ethereal part check-off itl lab page spring checklist form itlab complete check list work laboratory exercises hand form teaching assistant leave names print turn-in prelab write prelab check-off part check-off part check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet check-off part don forget copy results floppy disk note lab machines reset 
single segment networks learn lab capture filter network traffic configure network interface networking access statistics settings netstat command arp works hackers snoop passwords network copyright liebeherr rights reserved lab itl lab page spring table content prelab lab setup lab part details tcpdump part details ethereal part arp address resolution protocol part netstat command part configuring interfaces part static mapping addresses domain names part experiment ftp telnet checklist form lab feedback form lab itl lab page spring prefab network commands unix online manual pages http freebsd cgi man cgi select version red hat linux read manual pages commands arp ifconfig netstat write syntax ifconfig command sets hardware address interface eth netmask tcpdump http freebsd cgi man cgi select red hat linux read manual pages tcpdump manual pages answer questions syntax tcpdump command collects icmp packets destination address assume interested capturing telnet packets destined address port telnet port command correct tcpdump host dst port provide correct syntax hardware interfaces identified device number eth fddi write syntax tcpdump command collects packets host host interface eth ethereal website http ethereal read introduction manual pages ethereal read capture filters display filters command line options assigned starting ethereal command capture filters capture filter specifies traffic captured ethereal tool capture filter set command line option filter expression capture start window ethereal syntax filter expression syntax tcpdump display filters default ethereal displays captured packets display filter packets meet requirements filter displayed display filter set command line syntax setting display filter syntax setting capture filter itl lab page spring setting interface command line option interface sets network interface data captured interface selected capture start window starting ethereal write syntax ethereal command default collects packets source destination address interface eth write syntax display filter selects packets destination address frame sizes greater bytes write syntax display filter selects tcp packets destination address tcp port number unix exercises login machine unix account netstat netstat unix account save results arp display arp cache machine logged save results deliverables answer problems turn answers beginning lab itl lab page spring lab vintpc vintpc vintpc ethernet hub vintpc vintpc vintpc figure configuration lab pcs connected single ethernet hub setup lab pcs connected single ethernet segment shown figure machines connected single hub addresses pcs configured vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc notation means address network prefix bits long network prefix bits corresponds netmask set netmask machines network itl lab page spring part details tcpdump acquainted tcpdump lab lab explore tcpdump detail lab firm grasp tcpdump functions exercise saving tcpdump output file view output tcpdump save output file time command tcpdump tee filename tcpdump filename tail filename start tcpdump capture syntax ping command ping ipneighbor verify output tcpdump saved file exercise measurement experiment icmp experiment explore type code field icmp packets identify function performed icmp packet task identify type code fields icmp echo request icmp echo reply messages save measurements file needed lab report start measurements execute tcpdump command prints icmp packets hexadecimal format tcpdump host ipneighbor proto icmp ipneighbor address called neighbor window ping neighbor observe output typing ping ipneighbor itl lab page spring recall ping packet host triggers transmission icmp echo request ping host responds icmp echo reply packet output tcpdump identify content type code field icmp echo reply icmp echo request packets hint icmp packets encapsulated datagrams skip bytes header icmp data lab report provide discussion results measurement exercise write tcpdump command captures tcp segments sequence numbers equal acknowledgement numbers destination address check-off itl lab page spring part details ethereal introduced ethereal lab compared tcpdump ethereal powerful mechanisms monitor analyze network traffic lab run experiments ethereal exercise simple measurement experiment exercise learn view ethereal output save libpcap type file reused tcpdump ethereal off-line analysis start ethereal set capture display options lab table selecting capture options ethereal display options select automatic scrolling live capture unselect enable resolution capture start select capture packets promiscuous mode select update list packets real time select automatic scrolling live capture unselect enable resolution select eth interface select infinite count table capture options ethereal lab type host ipneighbor filter box ipneighbor address neighbor machine start capturing process window ping neighbor machine ping ipneighbor stop capture process save results capture choosing save file menu default saved file libpcap capture file libcap files format read tcpdump ethereal measurements saved libcap format replayed time libcap files plain text files recall save data captured ethereal plain text file print menu itl lab page spring exercise working display filters experiment learn view saved capture file display filters start ethereal set display options table open file saved captured data exercise select filter button set display filter enter filter string dst ipneighbor set filter flt set filter give filter clicking saves display filter click apply apply filter current capture file observe display pane save display plain text file floppy disk repeat exercise display filter includes packets source address ipneighbor save results floppy disk exercise complex capture display filters exercise learn complicated filters restrict packets captured displayed run ethereal command start capture traffic settings exercise window execute command ping ipneighbor time start telnet session window typing telnet ipneighbor ipneighbor machine log root logged successfully log stop traffic capture apply display filters captured traffic display traffic icmp packets address itl lab page spring ipneighbor destination address source address addr ipneighbor icmp display traffic traffic address ipneighbor destination address source address addr ipneighbor tcp display traffic addition constraints previous bullet port number set addr ipneighbor tcp tcp port lab report include measurement exercise exercise captured traffic displayed subset display filters alternative approach set capture filters desired data collected ethereal write capture filters ethereal constraints display traffic icmp packets address ipneighbor destination address source address display traffic traffic address ipneighbor destination address source address display traffic addition constraints previous bullet port number set check-off itl lab page spring part arp address resolution protocol host transmits datagram datagram passed data link layer datagram encapsulated frame ethernet frame transmitted data link layer local area networks lan ethernet fddi work -byte mac addresses addresses 
address translation required converts address destination mac address destination address resolution protocol arp protocol performs translation host local area network maintains arp table entries form address mac address commands view edit arp table arp displays content arp table arp ipaddress deletes entry address ipaddress arp hostname mac address add entry arp table mac address entered hexadecimal bytes separated colons exercise simple experiment arp view arp table arp delete entries determine address machine left neighbor address ipneighbor type ethereal host ipneighbor single ping ipneighbor ping ipneighbor observe arp packets mac addresses captured ethereal run arp save results ethereal plain text file destination mac address arp request identify ethernet frame type field itl lab page spring exercise observe perform arp request non-existing host start ethereal capture filter listens packets address machine ethereal host youripaddress telnet note address exist save output ethereal plain text file pay attention time difference arp requests issued machine determine rules determine timing arp requests lab report measurements exercises discussion operations arp describe algorithm arp determine time repetitions unsuccessful arp request arp requests transmitted packets explain answer check-off itl lab page spring part netstat command command netstat displays status information network configuration output netstat dependent options netstat netstat displays information interfaces machine netstat netstat displays routing table netstat displays information tcp udp ports netstat displays statistics networking protocols exercise options netstat capture output save output floppy disk answer questions interfaces machine mtus address default router machine error rate rate collisions ethernet interface datagrams icmp packets udp packets tcp packets computer transmitted received rebooted lab report include output netstat include answers questions check-off itl lab page spring part configuring interfaces ifconfig command configure parameters network interfaces including enabling disabling interfaces setting address ifconfig command run system boots case parameters read file recall redhat configuration files network interfaces sysconfig network-scripts ifcfg-eth ifconfig command large number options ifconfig ifconfig display state interfaces ifconfig eth option disables interface eth change address disable interface ifconfig eth netmask broadcast assigns interface eth address netmask interface network bring interface broadcast address eth set exercise run ifconfig interpret output save output floppy disk verify interpret output lab instructor questions exercise explore netmask ifconfig assigns default address configuring address netmask disable interface command ifconfig interfacename configure interface command ifconfig interfacename ipaddress ipaddress listed setup beginning lab itl lab page spring run ifconfig save output floppy observe netmask interface explain ifconfig assigned netmask hint netmask derived class address exercise duplicate addresses experiment rename addresses machines renaming result duplicate addresses network change address ethernet interface system vintpc vintpc vintpc vintpc vintpc vintpc delete entries arp cache capture network traffic machine ethereal host youripaddress save output floppy ping broadcast address arp cache ethereal measurements find machines respond broadcast ping note duplicate addresses machines respond arp request explain outcome telnet machine address system write machine telnet session explain telnet connection established machine duplicate address lab report include measurements exercises discuss results include explanations questions raised reset address machine check-off itl lab page spring part static mapping addresses domain names internet network device identified -byte address easier memorize names addresses ways associate symbolic names address so-called domain names address viper virginia internet resolution domain names addresses domain system dns distributed database experiments simpler method map addresses names host file hosts dns hosts file method resolve domain names internet exercise manipulate static mapping names addresses hosts file inspect content file hosts ping address left-hand neighbor address ipneighbor ping ipneighbor repeat step symbolic names vintpc vintpc edit file hosts associate names addresses official names interfaces setup section beginning lab repeat step lab report explain static mapping names addresses impractical size internet grew large check-off itl lab page spring part experiment ftp telnet learn easy crack passwords snooping traffic ftp telnet sessions severe security problem file transfer protocol ftp login password information transmitted clear text encrypted exploited malicious users snoop passwords experiment asks sniff passwords hexadecimal dump packets ftp session captured tcpdump exercise capture traffic ftp session hosts run ethereal command filters set ethereal host localip host remoteip localip address remoteip address machine network machine type ftp remoteip data collected ethereal identify port number ftp client ftp server log root inspect packets belong ftp session setting display filter alternative method select follow tcp stream tools menu identify login password pain text payload packets exercise repeat exercise telnet program telnet security flaws check-off itl lab page spring checklist form lab complete check list work laboratory exercises hand form lab instructor leave names print turn-in prelab write prelab check-off part check-off part check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet don forget copy results floppy disk lab machines reset lab itl lab page spring feedback form lab complete feedback form end lab hand form lab instructor leave feedback anonymous put form part record difficulty grade degree difficulty range easy difficult interest level grade level interest completing part range low interest high interest time time complete part lab difficulty interest level time minutes part details tcpdump part details ethereal part arp address resolution protocol part netstat command part configuring interfaces part static mapping addresses symbolic names part experiment ftp telnet answer questions lab dislike lab make suggestion improve lab 
effectiveness route-based packet filtering distributed dos attack prevention power-law internets kihong park heejo lee network systems lab department computer sciences purdue west lafayette park hlee purdue abstract denial service dos attack internet apressingproblem inthispaper wedescribeandevaluate route-based distributed packet ltering dpf approach distributed dos ddos attack prevention show dpf achieves proactiveness scalability show intimate relationship lawnetworktopology salient features work two-fold lteroutasigni fraction spoofed packet owsand prevent attack packets reaching targets rst place ows proactively curtailed extremely sparse origin localized iptraceback small constant number candidate sites show proactive reactive performance effectscanbeachievedbyimplementingroute-based ltering onlessthan sites show complementary performance asgraph inparticular fects work supported part nsf grant eiaadditionally supported nsf grants aniani- career essand aniitr grants center education research information assurance security cerias santafeinstitute sprint andxerox additionally supported cerias heejo lee address ahnlab v-valley bldg suseo-dong kangnam-kuseoul korea permission make digital hard copies part work personal classroom granted fee provided copies made distributed pro commercial advantage copies bear notice full citation rst page copy republish post servers redistribute lists requires prior speci permission fee sigcomm august san diego california usa copyright acm introduction background denial service dos pressing problem internetasevidencedbyrecentattacksoncommercialservers isps consequent disruption services dos attacks consume resources network elements web servers routers rewalls end hosts impedes cient functioningandprovisioningofservicesinaccordancewiththeir intended purpose impact pronounced network congestion due concentrated targeted nature resource depletion clogging impactsqualityofservice qos butcana ecttheveryavailabilityofservices affectedbymultiplecompromisedhostsontheinternet provisioning system minimum occurrence ofapotentiallyvalidevent servicerequest tcpsyn packet processed ascertain validity single eventmaybe negligible multiplied large factors enabled high bandwidth modern broadbandnetworks itsimpactcanbesigni aswith ane inthe rstplace dos lies identi cation attacker admits assigningcommensuratecosts legaloreconomical tothe perpetrating entity attack instituted compromised hosts intruded attacker physical sourceofdostra ccanbeidenti thenattheveryleast invaded network element isolated shut andinsomeinstances theattacker sidentitycanbefurther traced back state information remnant compromisedsystem goals proactive prevention spoofed ippackets reaching destination reactive source identi cation iptraceback spoofed ows describe novelapproachto proactiveandreactive distributeddos ddos attack prevention route-based distributed packet ltering evaluate cacy internet autonomous system topologies route-based packet filtering ltering dpf usesroutinginformationtodetermineifapacketarrivingatarouter borderrouteratanas scribedsource destinationaddresses giventhereachability asingleascanonlyexertalimitedimpactwithrespecttoiden- ows thisissimilartothe limitationof rewallswhose lteringrulesre ectaccessconstraints local network system guarded extreme autonomous systems routers implement route-based packet ltering spoofed owscanescape butitsultimatee ectisnotmuchdi erent ltering routing route-based packet ltering occurs time scales packet forwarding discard based table look-up fast lter table update slow forwarding discard function performed close line speed subject generic processing overhead core contributions route-based dpf main strength lies fact partial coverage deployment internet topologies synergistic ltering ect achieved whosecollective rst place thebank robbers constrained public transportation systemwhoseroutes inturn cal street network topology routing policy algorithm perfect proactive protection due intrinsic connectivitypropertiesofinternettopology cannotbeachievedwith small coverage ect strong spoofed ows prevented cientlysparseand asaconsequence constantnumberofsites lessthan forinternetastopologies ppm ective iptraceback strictly speaking traceback granularity study graphs achieved serves deterrent addition facilitating reactive recovery approach applied intra-domain routergraphs topologies ourworkisthate ltering depend intimately connectivity structure theunderlyingasgraph inparticular weshowthatpowerlaw internet topology crucial facilitating small coverage strong proactive reactive ltering ect ning relevant performance metrics show route table ltering table updates potential targets dos attack large time scale route table updates lter table updates triggered thesameevents andthepreventativee ectofroute-based dpf respect protecting routers dos attack jointly alleviate control plane protection problem comprehensive study problem subject futurework lterplacement multi-path routing internet arti important feature route-based dpf scalabilitywithrespecttodistributeddosattack inppm attack site localization ciency deteriorates proportionally number attack hosts route-based dpf fractionofas sfromwhichspoofedip owscanreachother sisasmallsubset lessthan whichmakesharnessing attack sites engaging ddos attack cultforanattacker packet arriving target ces trace back origin packet importantly attacker source scanbelocalizedtowithin sites aconstant independent system size internet graphs tested ppm sampling constraints attacker distribute attack targeted common victim owsaredi implementation perspective dpf require expending ipheader bits encode link information ppm generation icmp messages messaging-based version ppm hand computing ltering tables alongside existing inter-domain routing protocols bgp nontrivial problem due destination-based structure internet routing protocols paper main contribution lies advancing scalable architecture ddos attack prevention ective internet topology architecture implementable ipinternetworks source-based routing information made routers intra-domain link-state routing protocol ripuses global topology information speci implementation approaches inter-domain protocols bgp andtheirtrade-o sarechallengingproblems rest paper organized section give summary related works section wede neroute-basedpacket ltering thekeyideas performance metrics discuss issues surroundingperformanceevaluationincludingbenchmarkingwithin- ternet topology lter placement multi-path routing section present performance results based cialnetwork topologies related work types dos attacks identi basic dos attack demanding resources target system network supply resources network bandwidth system space processes network connections host-based dos network-based ipprotocolsuite cultthreat network-based dos attacks default employ spoofingtoforgethesourceaddressofdospackets andthereby hide identity physical source previous works internet topology refer nlanr measurementdata internetasgraph detrimental impact victim nordoesitnecessarilydeterpotentialattackers number recent works studied source identi cation called iptraceback span range inlinktesting edbytracingit tracebackistypically performed manually recursively repeated upstream router originating host reached drawbacks link testing include multiple branch points slow traceback attack communication overhead duetomessageexchange tween network operators audit trail approach facilitatestracingviatra method conducive -line traceback dos attacks principal weakness high storage processing overhead incurred routers exert signi burden behavioral monitoring behavior attacker dos attack monitored identify source attacker resident local server cache duringadosattack pact attack service requests including webandicmpechorequests loggingofsuchevents activities reveal information attacker source packet-based traceback packets marked insomesense aninverse operation source routing similar iprecord route option victim information inscribed packets trace attack back source related method generating information packets separate data packets convey analogous path informationasicmptracebackmessagestothevictim inthese methods overhead form variable-length marking ortra coverheaddueto extra messaging packets incurred probabilistic packet marking bothworlds spacee ing eld processing ciency form minimal router support expense introducing uncertainty due probabilistic sampling path ectivenessofprobabilisticpacketmarkingwasanalyzedwhen eldspoofing shown attacker location localizedtowithin single-source attack improved marking schemes including inspiteofitse ciency properties ppm drawbacks spoofed packetsareallowedtoexerttheirdebilitatingin uenceonserver resources reactively curtailed bits ipheader expended inscribe link information iii uncertainty iptraceback ampli proportionally number hosts partaking distributed dos attack show route-based distributed packet ltering addition matching iptraceback prowess ofppm solvesitsthreeweaknesses packet ltering network mechanism controlling whatdatacan owtoandfromanetworka ectedroutersor rewalls filtering decisions typically made based packet content including source destination addresses andportnumbers dos attacks ingress ltering border gateways proposed limiting ipsource address spoo ingress ltering requires prolonged period broadly deployedontheinternet andeventhen itissubjecttoattacks compliant section ects route-based distributed packet filtering route-based detection discarding spoofed packets interpretedasanasgraph showninfigure toall othernodes solidarrows assumeahostbelongingtoas atthepeeringpointwith cognizant 
route topology recognize destinedtoas enter link implying source address spoofed packets discarded fromthedosattack note speci instance inspect canarriveonlink tify lter spoofed packets forwarding points system routes node attack node node address figure illustration route-based packet ltering executed node node address belonging node attacking node remark description interdomainiproutingperspective isimprecise anedge ingeneral aset peering point connections border lteringtasks ippre xes belonging destination lead erent paths topology incorporated model allowing multi-path routing ignore potentially relevant classi cation asnodesintostub multi-homed andtransitaswhereonly engage routing sense interdomainpacketforwarding whenwespeakofanasnode performingroute-based ltering itmustbeunderstoodthat althoughlogical case attack host residing whenattackingservers inas thegatewayatas ippacket source address spoofed forwarded demonstrates performing route-based ltering single site achieve routebased distributed packet ltering aims achieve synergistic proactive lteringe ofasmallnumberofasnodes thekeyobjectivesofdpf summarized maximize proactive tering spoofed ippackets bogus packets minimize number sites packets facilitates iptraceback achieve objectives minimizing number sites atwhichroute-based lteringiscarriedout intandem withobjective iii ndtheoptimumsiteswhere lteringis tobeperformed maximal semi-maximal filters undirected graph representing internet topology remark framework conclusions carried router topologies anas oflarge andperformance toasubsetr ippacket source ipaddress destination ipaddress routed assume separate network mechanism resolves selection multiple paths performance results multipathroutingarediscussedinsection lter isafunctionde nedforlink interpreted router arriving decides forward packet lter discard thepacket wecall aroute-basedpacket lterwithrespectto slight abuse notation meanthatlink isonsomepathbelongingto aroute-based lterissafe card packets potentially consistent respect judged locally link route-based lter maximal satis exists apathinr withe links maximalroute-based ltercarriesoutallthe lteringofspoofed iptra adversely ecting routingofnon-spoofedippacketsasdeterminedbyr ifaset ofroute-based lterscollectivelywere perfect inthesense tionservice lter represented table straightforward requires ingeneral space whichisanoverwhelming tablelook-up thereare semantic erences router topologies geographical distance nodes graph meaningful considerationwhenadvancinginterpretations asemi-maximal lterisamaximal lterwhichusesonly source ipaddress packet carry ltering projection words isasemimaximal lterwithrespectto braceleftbigg forsomev lteringcapabilityis ingeneral lessthanthatof maximal counterpart weloseinpotential lteringpower itturnsoutbynotmuch shown section semi-maximal lter representedbya domain feasibility practicality techniques speed-up routing table look-up optimizationswillbeneededtoa performance measures dpf filtering effect attacker victim perspectives semi maximal lter distributed executed node denote subset nodes ltering performed call coverage ratio quantify measure thecollective lteringe ectofroute-baseddpf including iptraceback set performance metrics rest paper key performancemetrics theirintuitive meaningsare proactive scalar denotes fraction spoofed ippacket reach target whereever technical reasons accuracy performance metricisdenoted reactive parameterizedby itdenotesthefractionofas true source sites performance metricisdenoted turns performance measures speci instances natural family performance measures complicated notation interpretations relevance reveal partial picture dpf performance families variables whicharethenusedtode nehigh-levelperformancemeasures including forquantifying ddos attack prevention mitigation performance denotes set nodes precisely set ipaddresses belonging node attacker spoofed source ipaddresses reach withoutbeingcut-o temsint byde nition foralla thelarger theset hasinterms forging ipsource address eld bogus address lters whereass ned attacker perspective captures victim perspective denotesthesetofnodesthatcouldhavesentanippacket spoofed source ipaddress destination address ltered nition larger packet respect true origin means ipaddress attacker outsideof tomountaspoofeddos attackaimedat figure ltering curtailing attacker ability engage spoo route-based ltering attacker residing disguise undetectable spoofed ipaddresses belonging whenattackingaserverinas withroute-based ltering atas withdistributed lteringatas andas victim attacker routes victim victim attacker routes victim figure left withroute-based ltering executed node spoofable address range attack site reduced distributed ltering ter spoofable range reduces proactive filtering measures practically useless proactive ltering ect captured ned range denotesthe fraction reached spoofed packets fromanywhere thecloser isto thefewerthenumber exposed dos attack directly meaningful interpretation spite appealingsemantic relevance wewillshowthat isnear internet topologies coverage ratio import performance measure subtle practically relevant proactive performancemeasuredescribedinsection hasthefollowingrigorousde nition sending spoofed ippackets targeted futile ltered nodes attacker wishing engage ddos attack make productive attack hosts residing autonomoussystems thisimposes anupper boundonthe distributedness ddos attack achievable attacker severely limiting closer policywise guard respect tra emanating mounting attackisfeasible aswith directly relevant semantics unlike achieves large values forinternetastopologies tive ltering sharply delineated semantics ned denotes fraction attacker-victim pairs total attacker reach thusanattackerwhose speci interest victim choose thelarger impact random ddos attacks captures reduced attack volume ratio lterable packets inaddition viewedfromthe attacker sperspective spoofable izetheattacksitetowithin locations reactive filtering measure traceback theperformancemeasuresde nedintheprevioussection ectively spoofed ippackets prevented reaching destination rst place lters perfect proactivity captured inherently cult achieve internet topologies due connectivity iscloseto ectively ltered complementing proactive performance measures reactive metric captures iptraceback sourceidenti cation ect represents fraction target autonomous systems attacked arbitrary spoofedippacket possibleattacksites theparameter meaningfulfor valuesgreaterthan iptraceback localization asmall constant spoofed ows prevented penetrating lter net spanned nodes ectively localized respect true attackorigintowithin candidatesites weachieveip traceback analogously ned withc inplaceof performance evaluation issues objectives formally route-based semi maximal distributed lter triple discussion iptraceback localization issues called uncertainty factor probabilistic packetmarking theasgraph subsetofas swhereroute-based ltering performed routing algorithm route-based dpf prime prime prime itcanbecheckedthat prime prime turn implies prime prime similar monotonicity properties hold performance metrics prime prime prime trivial lower bound evaluating ectiveness thesize ofthe lternet itsstructure androuting power-law network topology empirical evidence shows internet topology exhibitspower-lawconnectivity whichmayalsoholdfor router topologies power-law graph structure induces centers comprised stubs non-transit multi-homed andhow topologya ectsproactiveandreactive ltering performance employ internet topologiestakenfromnlanr whichhavebeenusedinother internettopology coveredpower-lawproperty inadditiontomeasuredinternetastopologies weusearti cialinternettopologygenerators benchmarking unintended side ect study reverse evaluation arti cial topology generators above-andbeyondpower-lawrelations inthecontextofdpf filter placement addition uence thesize lter net dpf performance coverage ratio selection nodes key performance variable ect choosing randomly sample uniformly randomly target coverage size isreached thecasewheret formsavertexcover itcanbe checked beingavertexcover isneitherasu cient condition prime prime implies path vertex path belongs expected property conducive enhancing performance dpf tandem thepresenceof centers inpower-lawgraphsleads expect small coverage ratio achievable lem approximation algorithms constant factor guarantee heuristic nding small vcs rst algorithm constant-factor large optimal randomization component approximation scheme runmultipletimes inourevaluations withthesmallest constituting nal output algorithm well-known heuristic rigorously isavertexcover ifeveryedgein isincident onsomenodein behavior practice oftentimes outperforms constant-factor approximation scheme heuristic greedy algorithm iteratively grows picking node covers remaining uncovered edges presence centers power-law graphs makes ndsmallvcswhich isveri weusetheminimum maximal semi-maximal filters lterswhich general powerful maximal lters comparative evaluations show replacing semi-maximal withmaximal ment proactive reactive ltering performance marginal performance erence justi semimaximal lters performing route-based dpf additiontoitsconsiderationofe ciency ingress filtering case nodes perform ingress lteringonly thenforcoverageratio ddos prevention performance ect captured wouldbe evenwhen forthe internetastopologywith iptracebackcapabilityascapturedby incursanuncertaintyof trivial number attack sites investigate thereislittle compelling reason group global internet form trusted security partnerships based mandatory ingress ltering collective performance ect islow ingress ltering erywhere isanine contrast whenas sint implementroute-baseddpf internetastopologies wealsoconsiderthecase trusted belonging reason perform ingress ltering show ect proactive reactive routing set feasible routes uenced topology addition source 
destination note prime implies prime prime forall weconsiderrouting policies separate paths necessarily disjoint nodes evaluate uence paths permitted themore easily packet elude route-based ltering spoofedsourceipaddresses thisisduetotheattacksite spoofable ipaddress space expanded weselect shortestpathsfrom case candidates pathlength wechoosethepathcoming rstinthecanonical lexicographic order give special names extremeformsofr loose andtight loose meansthat routing allowsonlyasingle routingpath anddenotethiscaseas tight performance results set-up built performance evaluation tool called dpf tion dpf cover dpf stats cover handles generation inputspeci andrank ordering dpf isthemain module whichcomputes input speci cation include lter type routingalgorithm stats takestheoutputof dpf andcomputesthevariousperformancemeasuresincluding inet brite generate arti cial proactive filtering effect limitations perfect proactivity measures fraction immune fromdosattack distributed single-source figures left show asafunctionof fordi erentcoverageandroutingcombinationsfor internetastopology figure loose rnd loose rnd loose tight rnd tight rnd tight figure internet topology left loose tight thatis immune dos attack unachievable coverage ratio circumstances plots show tight performance loose thing equal size internet vertex cover ective randomevenwithhighercoveragesrnd andrnd plots depict general trend performance evaluation purposesonly hasdirectrelevance percent nodes tight figure internet topology function maintaining property figure shows limitation achieving perfect sizes eventually positive coverageisabove perfectproactivityascapturedby isintrinsicallydi culttoattain andshould proactive filtering distributed dos measuresthefractionofas sfromwhichddosattackscannotbelaunchedsinceallspoofedpackets target detected discarded lter net ofparticipatingas putsanupperbound figure left show function loose tight aswith doesnothavea concrete relevant meaning shown depict generaltrend loose rnd loose rnd loose tight rnd tight rnd tight figure internet topology left function loose graphfor tight figure relevant plot shows internet topologies achieves years implies autonomous systems sincethenumberofas increased asmeasuredbynlanr theabsolutenumberof attack sites grown commensurately asapercentage figure internetastopology internet topologies figure left shows asafunctionof source-destination pairs tacker perspective spoofed packets emitted attack reach victim attacker enlist attack hosts ddos attack tight tight rnd percent nodes tight tight rnd figure internet topology left function intruding hosts waste ort source-destination chosen randomly proactive ltering erects barriers terms ort cost mountinge ective ddosattackswhich inturn canactas ect figure shows thecoarsestmeasure whichrepresentsthefractionofsource destination andspoofaddress triples whereahostresidingatas isabletosend anippackettotargetas observe coverage fraction forgeable triplets shrinks means addition spoof address randomly generated spoofed ippacket chance ofreachingitstarget collectively theseresultsshowthat theattacker ort resources launch successful ddos attack signi brought aboutbyroute-baseddpf sproactive lteringe ect reactive filtering effect traceback shown previous section eliminatingall spoofable ows unrealistic goal inherent culty respect internet connectivity erent consequence proactive ltering subtle complementary ect spoofed ows prevented penetrating network system localized small number sites ected bydpf lteringsu cientlymany owssothattheremaining spoofable ows form sparse subset turn facilitatessourceidenti cation iptraceback figure shows function loose tight andt rnd rnd thegeneraltrendshows vcandr tight figure left shows internetastopologiesfor weobservethatacross ispreserved loose rnd loose loose rnd tight rnd tight rnd tight figure internetastopology left loose tight attack localized candidate sites andtheonlyperformancedi erenceoccursfor iptraceback achieved instantly based speedy on-line response attacked site respect actions perpetratingattacksite ing route-based dpf proactive respect tracebacksinceasingle spoofedippacketsu cestoreveal attacker location small constant numberoflocations inppm asu cientnumberofdosattack figure left internet topologies shape withdilation factor packets received attack path reconstructed probabilistically inscribed link values ipdatagram figure shows marginal bene increasing number nodes achieving observe increasing size vertex onlyanincrementale ect thisshowsthatmuchoftheip traceback ect attained smaller vertex cover size facilitates economy coverage deployment maximal filters semi-maximal filters bydefault based semi-maximal lters ascertain potential performance loss due employing maximal lters compare figure left shows internetastopology function performing route-based dpf maximal versus semi-maximal lters tight beingvc erencein semi maximal maximal maximal semi-maximal figure internet topology left comparison maximal semi-maximal ters comparison iptraceback capability captured marginal performance erence figure compares maximal semimaximal lters fact equal small performance erence coupled space ciency warrants semi-maximal lters implementing route-baseddpf impact network topology internet topology figure showsthevertexcoversizes expressedasapercentage valuesfor internetastopologies weobservethat aswellas remaininvariantover intherestofthissection focus discuss results performance qualitatively erent size vertex cover plays important role intermediate indicator facilitator ltering performance fact smallerthevc thebetterthe small coverage ratio year figure vertex cover size internet topologies random topology generate p-random graphs connecting nodes link probability internet graph generate random graph setting speci cation values families graphs connectivity pattern year table internet topology link probability figure left shows vertex cover size generated random graphs internet topologies onaverage larger figure shows function erent topologies spite engaging nodes performing ltering performance captured signi cantly internet topology performance erenceampli recallthat internet randomgen internet figure left function comparison withinternet plot theperformancevaluesfor internetastopologies figure left stayedinvariant inet topology generator inet network topology generator generatingarti figure left shows sizes inet generated graphs internetascounterpartsfor weobservethatthe largerthanthecorrespondinginternetasgraphs figure shows asafunctionof forinet internetas andrandomgraphs weobserve asexpected year internet inetgen inetgen randomgen internet figure left sizes inet graphs internet graphs comparison inet graphwithinternet random graphs figure left shows normalized ltering performance tersetisincorporated nomatter measures ltering performance lter node relative accurate metric comparative evaluation figure left showsthatthereissigni cantdi erenceindpf ming part size erence inet topology thefact well-known graph property exhibits nontrivial withsimilarresults theinet graphs resulted marginally smaller size erence graph sizes internetastopologies fga internet inetgen figure left performance erence inetandinternet asgraphsnormalized byvcsize comparison normalized ned structure incorporated family power-law graphs accurately capture internet topological properties figure shows normalized iptraceback performance benchmark set-up incorporates size brite topology generator brite network topology generator additiontocapturingpower-lawconnectivitystructure seeksto inject spatial proximity constructive process brite speci parameters size higher plane size lower plane number nodes number edges added node node placement preferential connectivity incremental growth whenpc withwaxman probability density euclidean distance nodes maximum distance nodes whenpc anewnodeconnectstonode withprobability summationtext whered isthedegreeofnodeiandc istheset withpc theprobability connecting node summationtext thuspc considers spatial proximity focuses powerlaw structure captured node degree distribution isahybrid topology internet brite brite brite table sizes brite graphs test graphs generated options speci cation results size shown table figure left showtheperformancee ectswith respect inadditiontonotbeing power-law hasverysmallvc itsperformancewith brite generator small bug respect optionpc whichwas xed respectto iscloserthanthatofpc ternetastopologyfor issigni beingworsethan inet generator sizes large performance aresigni andinet wehave cations unsuccessful generating topologies resemble internet size ltering performanceperspectives weighting summationtext injectbothspatialanddegreesensitivityinamorecontrolled fashion increases monotonically decreases size approximated internetaswith performance signi cantly smaller whencomparedtointernetas internet fga figure left function plot ingress filtering section showed ingress ltering viable strategy achieving proactive reactive ltering performanceforddosattackprevention sinceas sbelonging represent trusted domains route-based dpf guaranteed executed border routers ingress ltering assumed carried belonging conceivable implement route-based dpf assure ingress ltering seek protect external dos attack ows 
allowing dos attacks occur figure shows proactive reactive ltering performance perform route-based dpf perform ingress ltering figure left shows figure route-based dpf ingress ltering left function internet topologies values internetastopologies weobservethatthere negationslash ontheother hand years iptraceback localize attack site locations worsethan ltering autonomous systems small constant andthusamanageablenumber figure shows values drops signi cantly higher proactive ect achievable ingress ltering interestingly performance gap roughly corresponds coverage ratio internetastopologies multi-path routing source destination easily packets elude route-based figure shows impact multi-path routing tering performance figure left shows traceback capability captured decreases gradually asimilarresult holds shown figure collectively inroutertopologies hasagradede ectonthee ectiveness ofroute-baseddpf tight loose path path path dga figure ect multi-pathrouting internet topology left tight loose discussion implementation issues important implementation concern context ipinternetworks space requirement issues shared routing table look-up computationofsemi-maximal ticipating nodes main culty arises fact iprouting destination-based approach routing table update exchanges convey informationaboutdestinationreachabilitybutnotnecessarily source reachability ospf intra-domain link state routing protocol global topology information broadcast asrequiredby route-based ltering canbecomputed thisisnotthecase forinter-domain routing protocol bgp update message aspath sequence numbers identify destination reachability starting originated ispropagated throughoutthesystem aswithrip sourcereachabilitycannotbededucedfrominformationcarriedbybgp erent rpf unicast reverse path whichcan ect ingress ltering due asymmetry inter-domain routing infer sourcereachability correctly compute source reachability route-based packet ltering context bgp minimum augmentation bgp introduction separate protocol disseminates source reachability information required forexample inthelatter abgp-likeprotocolthat propagates reverseas-path informationcommunicating source reachability destination reachability facilitate route-based lter table construction element number reverse as-path bgp receive packets source pre targeted destination ipaddress semanticsofsemi-maximal lters issues arise increased messaging overhead cost weighed potential bene derived ddos attack prevention safety tobeviolated non-spoofedpackets whichmayfailtohold atleastoccasionally source reachability information cientlysynchronized consistent withdestination ininter-domainpolicyrouting someas reachabilityinformation lems whetheritse ectare tolerable withrespecttodiscarding valid packets non-persistent ect similar areadditional ectiveimplementation cientimplementability question ipinternets bgp dominant inter-domain routing protocol route-baseddpf sachilles heel weviewthecontribution ofthispapertolieinthede damental solutions denial-of-service attack problem additional internet structure injected respect showing ltering performance depends power-law structure properties internet connectivity plement route-based dpf minimize overhead conclusion presented proactive reactive approach ddos attack prevention based route-based distributed packet ltering shown route-based dpf cacy proactively curtailing spoofed ows reachingtheirintendedtargets nospoofedip canpenetrate isintrinsicallydi culttoachieveininternet topologies maintaining sparsecoverage mitigated fact spoofed ows escape lter net localized candidate sites facilitates cient iptraceback haveshownthatthe lteringe ectachievedbyroute-based dpf sensitive underlying internet connectivity structure shown power-law facilitating cient proactive reactive ltering finding efcient implementations computing semi-maximal lters evaluating costs deployment banga druschel andj mogul resource containers serversystems inproc ofthethirdusenix acm symp implementation osdi pages feb bellovin icmptracebackmessages mar internetdraft draft-bellovin-itracetxt expires september burchandb cheswick tracinganonymous thsystems administrationconference lisa pages cert certadvisoryca- jan http cert advisories ca- html cert institute andcerias consensus attacks feb http sans ddos roadmap htm faloutsos faloutsos andc faloutsos proc ofacmsigcomm pages fergusonandd senie networkingress ltering sourceaddressspoo rfc garber computer pages apr gareyandd johnson computersand intractability aguidetothetheoryof np-completeness freemanandcompany govindananda reddy ananalysisofinternet inproc ieeeinfocom howard internet phdthesis aug jin chen ands jamin inet internet topologygenerator technicalreport cse-tr- departmentofeecs universityof michigan meadows inproc ofthe june medinaandi matta brite exiblegeneratorof internettopologies technicalreport bu-cs-tr- bostonuniversity jan morris aweaknessinthe bsdunixtcp software tbelllabs feb routingdata supportedbynfs http moat nlanr net routing rawdata nightaxisandr puppy purgatory learning http packetstorm securify papers contest rfp doc pansiotandd grad intheinternet papadimitriouandk steiglitz combinatorial optimization algorithmsandcomplexity prentice hall parkandh lee onthee ectivenessof denialofserviceattack inproc ieeeinfocom pages postel internetprotocol sept rfc sager owd nov workinggroup savage wetherall karlin andt anderson inproc ofacmsigcomm pages aug schuba krsul kuhn spa ord sundaram andd zamboni analysisofadenialof serviceattackontcp inproc ofthe ieee symp onsecurityandprivacy pages songanda perrig advancedandauthenticated technicalreport ucb csd- universityofcalifornia berkeley toappearin ieeeinfocom spatscheckandl peterson defendingagainst inproc ofthethird usenix acmsymp onoperatingsystemsdesign andimplementation osdi pages feb systems oods usingciscorouters aug http cisco warp public html team denialofservice feb techtips http cert tech tips denial service html ndrevision team intrudertoolsworkshop nov http cert reports dsit workshop pdf waxman ieee journal selected areas communications pages dec zwicky cooper chapman andd reilly associates ndedition 
enabling conferencing applications internet overlay multicast architecture yang-hua chu sanjay rao srinivasan seshan hui zhang carnegie mellon yhchu sanjay srini hzhang cmu abstract cernswithipmulticast werefertosuchan whileendsystem akeyconcern vironmentsarepromising inthispaper uenceendsystemmulticastdesign andvideoconferencing weconductan ourresultsdemonstrate plications theperformancebene tsaresigni ourresultsindicatethat numberf andbynsfundergrantnumberscareerawardncr- aniitraward aniandani- additionalsupportwas providedbyintel pretedasrepresentingtheo cialpolicies eitherexpressed orimplied ofdarpa nsf intelortheu government permission make digital hard copies part work personal classroom granted fee provided copies made distributed pro commercial advantage copies bear notice full citation rst page copy republish post servers redistribute lists requires prior speci permission fee sigcomm august san diego california usa copyright acm introduction overthelastdecade ing multi-partygames contentdistribution andbroadcastingcanbesupportedusingipmulticast ipmulticastisyetto scalability recently therehasbeen functionality whereallmulticastrelatedfunctionality packetreplication werefer inthis architecture distributedprotocol endsystemsattempttooptimizethee advantages approach ceptablylow environments internetenvironments aredynamic heterogeneousandunpredictable inthispaperwefocusonakey anenvironment classofapplications internetbasedconferencingapplicationshavereceivedagreat duringwhichexcellenttoolslike vic vat rat weredeveloped conferencingapplicationshavestringentperformancerequirements andare theynotonlyrequireahighsustainedthroughputbetweenthesourceand receivers weshow wepresenttechniques andyetremainresilientto figure end system multicast ofthesequantities ratingthemintonarada presentedin inaddition webelievethatthey couldbene tionsaswell ourtest-bedcomprisestwentymachinesthataredistributedaroundnorth america asiaandeurope bothfromthe withourscheme sourcetothatreceiver whenourtechniquesareincorporatedintonarada ofover inboththroughput andlatency finally webeginbyprovidinganoverviewofendsystemmulticastand section presents sections andresults finally wediscussourresults presentrelated work andsummarizeinsections end system multicast inendsystemmulticast castgroup organize internet forinstance considerfigure whichdepicts aphysicalnetworkwherer andr arerouters anda anddareendsystems figure showsanoverlaytree rootedatsource whilefigure alsoshowshowthis avors tures intheformer ina anorganization endhostsattachthemselves itrequiresabsolutely andallmulticast byavoidingper-group stateinrouters byipmulticastareavoided deploymentisnot anissue finally featuressuchaserror signi cantlysimpli self-organize overlay network ciently forwardsmulticastpackets multicastinthelastyear theseself-organizing agroup managementcomponent anoverlayoptimization component group management component ensures theoverlayoptimizationcomponentensuresthatthequalityoftheoverlay remainsgoodovertime formance work theoverlaycanbe modi poorlinks oneapproachis membersexplicitly yoid andovercast adoptthisapproach analternate andnarada firstthey theyconstruct reverse mesh whileintheextremecase overlaylinks inagroupconsistingofn members typicallyprotocolstry routinglow giventhatthe nalspanningtreesareconstructedfromamongtheoverlaylinkspresentinthemesh rstplace thereaderisreferredto forfurther discussionofthetreerstandmesh- rstapproaches conferencing applications overlay design sions inthissection webegin conferencingapplications performance requirements quirelowlatencies andneedto sustainhighbandwidth incontrast broadcastingand bandwidth andlatencyisnotaconcern gracefully degradable figure architectural framework supporting conferencing applications inapplicationquality thisisincontrastto letransferapplicationsthatrequirereliabledatadelivery session lengths lastingtensofminutes incontrast applicationslike letransferandsoftwaredownloadingmaybeshort-lived lastingfor thedurationofthetransfer group characteristics groups membershipcanbedynamic thisisincontrasttoapplicationslikebroadcasting source transmission patterns typically conferencingapplicationshaveasourcethattransmitsdataata xedrate thereisusuallya incontrast largescale outasession forexample ics lems forexample gestioncontrolprotocol figure isthe source links a-b c-d mbps ofconferencingapplicationsareonekeyaspectthatexistingendsystemmulti- castsystemscannotsupport inthispaper wefocuson optimizing dual metrics overlaylinksneedtobe ceiver optimizing dynamic metrics internetlatenciesand andtheoverlayneedsto frequent conferencing optimized overlays inthissection whilewebelieveourideas protocols protocol andrunsa ontopofthemesh furtherdetailsofnaradacanbefoundin dealing dual dynamic metrics bandwidthcanbedi cult lingthisproblem bywangandcrowcroft rstchoiceistooptimizethe bandwidthandlatency itisnotclearhowthis asecondapproachisto frontedwithtwocon ictingoptions onewithbetterlatency webelievethatthis prioritizationre bychoosingmultipleroutingmetricsinthedistancevectorprotocolrunning onthemesh-the bandwidth andthe latency theoverlaylink shortest widest pathalgorithmpresentedin membertriestopickthe widest highest bandwidth path toeveryothermember thesamebandwidth lowest latency pathamongallthese ture concernsofinstability scribedbelow latency theadvertised amount bandwidth thingalgorithm toproduceasmoothed estimate insteadofusingthesmoothedestimateasaroutingmetric wede thesmoothedestimateisroundeddowntothenearestbandwidthlevelfor routingpurposes timateof widthof kbps kbpsand kbps whilewemove belowthecurrentlevel matesigni thenextlevel xed sourcerate rate butalsoallowslatency erentlinkshave givenagoodqualitymesh themechanismsdescribed membersprobenon-neighborsatrandom andmayaddanew ceedsathreshold members monitorexisting links threshold theutilitygain andcostarecomputedbased degrades added dropped andthesigni canceoftheimprovement degradation metric estimation inthissection section erent mechanisms collecting forlinksthatarenot odically currentlyevery milliseconds exchangingpacketswiththeirneighborsandestimatingtheroundtriptime andthereisdata owalongameshlink wemaydirectly protocol linkswhenthereisdata owalongthem membersperiodicallyadvertisetheratesatwhichtheyaretransferringdata theneighborcomparesthisadvertisedestimate withanestimateofdatait iftheratesarecomparable bandwidth link whichinvolvestransferringdatausingtheunderlyingtransportpro- tocolfor seconds sourcerate head numberofsuchmeasurements forexample amachinebehindadsl oramodem othermember wepingthe rsthoprouter onthemember spathtotheinternet anddeterminethe inmanysituations memberb members sperformance adeterminesthequalityofb sperformancetoothermembersbyexaminingitsroutingtablewhichitobtainsusing ndthismechanismhelpfulinheterogeneousenvironments whereagood adslconnection orinaccurateduetonoiseinherentinthesemeasurements tokeep amembermayprobe amember thelast veminutes experimental evaluation canendsystemmulticastmeetthebandwidthandlatencyrequirementsofcon- toanswerthesequestions insection oftheseschemes oursistheonlyonethat ornone atall section insection twoimportantfactorsa thesecriticalfactorsare lessdemanding erent speedconstantbitrate cbr sources cbrencodingsare andmakeourevaluationconvenient erentdegreesofheterogeneity primary set andthe extended set theprimary set hosts extended setcontains hosts andhostsinasiaandeurope inadditiontothehostsin primary set intheextended set weeksonawideareatest-bed ourexperimentsmeasure thesourceandthedi erentclients wealsomeasurethe ferentoverlayschemes wevaryboththesource indi erentconditions schemes constructing overlays thenaradaprotocol anddi erfromeachotherbased wecomparethe sequential unicast toanalyzethee ciencyofascheme forconstructingoverlays bestpossibleoverlaytree weapproximatethisbythesequentialunicasttest whichmeasuresthe toeachrecipient independently intheabsenceofotherrecipients poses random dom andaddresses prop-delay-only astaticnetworkmetric inourevaluation latency-only bandwidth-only thesetwoschemes noregardtotheothermetric theyareprimarilyused bandwidth-latency structoverlays manyofourhostsareon mbpsconnections andweuse sourceratesashighas mbps topreventobviouslybad prop-delayonly pre-con gureddegree ourevaluation thathost sconnectiontotheinternet ontheotherhand bandwidth-latency thisenables nearmembers withoutapre-con gureddegreebound experimental methodology uencesthe erenttimes characteristicsmaychangeatanytimeanda ecttheperformanceofvariousexperimentsdi erently ideally weshould thisisnotpossible weinterleaveexperiments erenttimesofthe timescale fashion initially imatelythesametime bandwidthandroundtriptimemeasurementsarecollected eachexperimentlasts minutes exceptsequential unicast asdescribedinsection sequential unicast formationofaunicastpath sequence performance metrics overlaytree bandwidth throughputatthereceiver ofreceivedvideo latency thesourcetothereceivers asseenbytheapplication overlaylinks weideallywishto delaythatisdi culttoquantify wechooseto estimatetheroundtriptime rtt byrtt werefertothe andbacktothesource rttofanoverlaypath s-a-r-a-s andareideallytwicethe end-to-enddelay resource usage thismetricde nedin capturesthe toallreceivers thecostof inourevaluation weassumethecostofaphysicallinktobethepropagationdelay ofthatlink cient forexample infigure thecost delay ofphysical linkr thecostoftheoverlaylinka wede nethenormalized resource usage ofanoverlay withipmulticast isthesumofthecosts delays ofthephysicallinksofthe ceivers inourevaluation ceiver wouldconstruct cal bydoinga traceroute whileresourceusage theobjective laytreethatdi metrics itiseasyto ismuchmoredi erenthostsobserve withafewsimplemetrics meanbandwidthandlatency manceacrossdi erentreceivers dividualreceiversees aparticularschememaycreate erent overlay layout experimental run erentperformanceacrosstheruns overlaysareofanydi erentquality weneed awhole forasetof nreceivers andassigna rank toeachreceiverfrom ton isassignedarankof assignedarankof foreveryrank wegathertheresultsforthereceiverwithrankracrossallexperiments computethemean arankr theresultforrank representstheperformance inanyexperiment rank sons erentruns forexample butmany variabilitymayalsooccurduetochangesininternetconditions suchastimeofdaye ects potentiallynooverlay ourresultsinsection demonstratethatsome schemeconstructs weuseafourthmetric protocol overhead thismetricisde nedasthe cthatentersthe cthatentersthe network crequiredto keeptheoverlayconnected andtheprobetra candactive process implementation issues runningattheuserlevel andby optimizingthecode wehaveusedtfrc astheunderlyingtransportprotocoloneachoverlaylink asdiscussed insection tfrcisrate-controlledudp andachieves tcp-friendlybandwidths itdoesnotsu erdelaysassociatedwithtcpsuchasretransmissiondelays andqueueing delaysatthesenderbu experimental results runinsection section andsection presents results typical run andhowthequalityofthe overlayvarieswithtime aweek-dayafternoon usingthe primary set ofmachines andatasourcerateof mbps thesourcehostisat ucsb figure asafunctionoftime sourceucsb secondsfor theoverlaytoimprove goodbandwidth afterabout seconds andformostof thesessionfromthistimeon themeanbandwidthobserved thisindicates thesession figure averagedacross themeanrttisabout msafterabout seconds andremainslowerthanthis figures showthatinthe rstfewminutesofthe session frequentintervals formation inmostofourruns giventhis wegather ofourexperiments scheme seconds ananalysis alinkintheoverlaytree theoverlayisabletoadapt bandwidth kbps time seconds figure bandwidth averaged receivers function time rtt time seconds figure rtt averaged receivers function time asindicatedbythe andrecoversin seconds varyduringasession figure plotsthecumulativedistributionoftherttestimatestoeveryreceiver foreach receiver eachcurve andeachpointindicates forallreceivers whileover assuming thisindicates msmostofthe time andlessthan msalmostallthetime comparison schemes overlays cumulative percentage rtt figure cumulative distribution rtt curve receiver primary set anda sourcerateof mbps ofhostsinthe primary set cansustainthroughputsof mbps tiallyworkreasonablywell weconsidertheprimary set butatasourcerateof mbps thisenvironmentis fewer creasedsourcerateandthus severalhosts mbpsconnections thehost schemesthatworkwellat mbpspotentiallyworklesswellat mbps finally tostressour scheme bandwidth-latency extended set andassumingasourcerateof mbps webelieveour primary set mbps source rate figure erentschemes scheme averagedacrossallruns theerror-barsshowthe standarddeviation thustheydonotindicatecon dencein themean mayinvolve forexample rank withtherandom scheme receivesabandwidthof alittlelowerthan kbpsonaverage weusethesame make observations sequential unicast getclosetothesourcerate asindicatedbyoneofthetop lineswithadipatrank bothbandwidth-latency andbandwidth-only unicast thecurvesareslightlyo presentation bandwidth kbps rank sequential unicast bandwidth-latency bandwidth-only random figure bandwidth versus rank mbps source rate primary set machines rtt rank sequential unicast bandwidth-latency bandwidth-only random figure rtt versus rank mbps source rate primary set machines chineinanyrunreceives kbpsonaverage interestingly sequential unicast giesininternetrouting random onaverage theworstperformingmachinewiththerandom scheme rank ameanbandwidthofabout kbps theperformanceofrandom largestandarddeviation mancewith random eveninrelativelywellconnectedsettings figure bandwidth kbps rank sequential unicast bandwidth-latency latency-only prop-delay-only figure bandwidth versus rank mbps source rate primary set ofexperiments sequential unicast bandwidth-latency isgoodatoptimizing theoverlayfordelay anrttofabout msonaverage bothrandom bandwidth-only performconsiderablyworse random resultsinanrttofabout msfortheworst machineonaverage bandwidth-only resultsinanrttof bothbandwidth-only andrandom canhave inaddition random particularlyneartheparticipatingendhosts whilebandwidth-only maybene 
delay latencyonly underthissetting ndthattheyperformssimilarlytobandwidth-latency inrtt andslightlyworsein bandwidth eveninverysimplesettings primary set mbps source rate inthissection betweenbandwidth-latency andtwodelay-basedschemes prop-delay-only andlatency-only figures present ferentschemes mbps asindicatedbythe sequential-unicast test bandwidthlatency canoutperformsequential unicast formachineswithlower rank andpropdelay-only performpoorlyinbandwidth formachinesof rank bandwidth-latency canoutperform prop-delayonly latency-only byover kbps propdelay-only andlatency-only canprovidereasonableperformanceatsourceratesof mbps theyareunableto mbpswith thesamesetofmachines rtt rank sequential unicast bandwidth-latency latency-only prop-delay-only figure rtt versus rank mbps source rate primary set fromtheperspectiveofrtt ndthat bandwidthlatency latencyonly schemes achieve performance close sequential unicast surprisingly prop-delay-only achievesrttsatleast msmorethan bandwidth-latency formachinesoflowerrank andthus thisisbecause thisobservationbecomesparticularlyimportantinourenvironment wheremanyhostsarebehind mbpsconnections host gureddegree boundsrecommendedin thisstrategyisnotcapableofdealingwithdynamiccross-tra incontrast dynamicnatureof bandwidth-latency latency-only inthisenvironment bandwidth-latency buttherttresultsareworse finally prop-delay-only whileanalyzingtheperformanceofdelaybasedschemes extended set mbps source rate primary set goodperformancerequiresconsideringbothbandwidthandlatencyas tofurtheremphasizethe count representedbytheextended set figures plotthe ofinterest thesequential unicast ciesfromthesource thesetweconsider bandwidth-latency tothe sequential unicast test apartfromthelesswellconnectedhosts ranks allothermembersgetbandmean bandwidth kbps rank sequential unicast bandwidth-latency bandwidth-only latency-only figure bandwidth versus rank mbps source rate extended set machines rtt rank sequential unicast bandwidth-latency latency-only bandwidth-only figure rtt versus rank mbps source rate extended set machines widthsofatleast mbps andseerttsoflessthan onaverage forranks bandwidth-latency isableto formancethan sequential unicast aparticularlystriking onlyoneofwhich ourruns toachievesigni theothermachineintaiwan weobservethat bandwidth-only resultsinhigh rtt latency-only forexample formachinesofrank bandwidth-latency kbpsmorethanlatencyonly mslowerthan bandwidth-only bandwidth-latency hassmaller standarddeviations widthandlatency finally weobservethat bandwidthlatency inbandwidth andtolatency-only inrttindicatingthat experimentsetup primary primary extended mbps mbps mbps unicast random latency-only bandwidth-only bandwidth-latency min-span table average normalized resource usage schemes summary comparison results cientoverlaysoptimizedforbothbandwidthandlatency asrequired eveninextremelyheterogeneousenvironments bandwidth-latency hasperformance comparabletosequential unicast andsometimesperforms notonlyinbandwidth butalsoinlatencies goodbandwidthperformance especiallyathighersource rates conversely theseresultsindicate theinternet network level metrics table section schemesfordi determinedasexplained insection withavalueof representinganoverlaytreethathasthesameresourceusage asipmulticast weconsiderthe ientsrootedatthesource andschemessuchas random highresourceusage widthalone bandwidth-only makelesse cientuseofnetworkresourcescomparedtoprotocolssuchas bandwidthlatency andlatency-only rics theresourceusagewith bandwidth-latency whichre ectsthecostin finally theresource usagewith bandwidth-latency increaseswithsourcerate experimentsetup primary primary extended mbps mbps mbps averageoverhead bandwidth overhead probes dueto table average overhead bandwidth-latency breakdown overhead intheprimary set members thecompletegraph andastable shows deedmakease cient thanipmulticast aree itisnotclearthat theyaree table section involvedin bandwidth-latency alongwithabreakdownof acrossall settings low morethan oftheoverheadisdueto othersources ofoverheadcontributejust oftheoverhead motemembers thiscon ofbandwidthprobes introducedinsection areabletoreducearound minuteperiod inexperimentswiththe extended set hostsinasiaandeurope ing wepresent adapting network dynamics section overlaysneedtoadaptby inthis section andstudythefactorsthat tostudytheseissues theinternetwherewearti andevaluatehow ourstudy overlayscheme bandwidth kbps time seconds switch umass switch unc inject congestion lower estimate ucsb udel figure demonstrating adaptation network congestion controlled experiment mary set thesource locatedatucsb sendscbrtra mbps werandomly choosea victim fromamongthereceivers andsimulatea wesimulatecongestionbyrandomlydropping ofthepacketsattheparent ingnetworkcongestion ahighlossrate manceofthatlink asaresult thebandwidthreceivedby thevictimdropssharply ifthevictimisnota leafintheoverlaytree allthe descendants ofthevictim willsu ectsofcongestion tobandwidthchangesalone periment figure asafunctionoftime ofinterest inthisexperiment amachineatu delaware udel victim congestion introduced attime andudel width udelstartsobservinggoodperformance secondslater formally weconsiderareceivertohave recovered fromcongestionwhenit ofthestable bandwidth seconds isintroduced wede nerecovery time asthetimeittakes forahosttorecover protocol asfollows detection time eventitshouldadaptto inourscheme weconsidercongescumulative probability time seconds recovery time detection time reaction time repair time figure cumulative distribution recovery time components victim hosts section inthisexperiment thedetectiontimeis seconds reaction time takestomakethe detected inthisexperiment udelswitchestothehost umassin seconds repair time rstparentchange inthisexperiment udelswitchestothehostunc secondsafterswitchingtoumass thereactionandrepairtimeshowevermeasurehowquicklyour controlled experiments experiments andanaverageof descendantsintheother experiments figure weconsider formostofthecases recoverytimeisbetween seconds thelargestcontributory factorisdetectiontime whichisusuallybetween seconds incontrast relativelyshort andtwodi erent mostofthecases themeshasitsnewparent neighbors afewcaseshowever era betterpathtothesource insuchcasesthevictim andthis processcantakelonger finally weobservethattherepair timeiszeroformorethan ofthecases thisindicates adaptationprocess cumulative percentage recovery time seconds victims descendants difference figure cumulative recovery time victims descendants erence asthedi periment apositivedi figure showsthecumulativedistributionoftherecoverytimeofthedescendants andthevictims aswellasthedi erence weobservethat exhibitsimilartrends morethan ofdescendantsrecoveratthesametimeastheirrespectivevictims asshownbythedi erencecurve furtheranalysisindicates thatabout ofparent ingeneral thedetection timesarearound seconds ourdesignchoicehas beenmotivatedbytwocon ictingconcerns iftheoverlay duration thebene iftheoverlay adaptstooslowly theapplicationswouldsu eraperformancepenaltyduringthetransientperiod althoughwe wellinpractice groundedona netcongestion discussion vironments toachievegoodperformance itisimportantthatoverlaysdynamicallyadapttobothbandwidth andlatency inthefuture ferencing timatepathbandwidths becostly forgroupsaslargeas twentymembers intheabsenceofinitialnetworkinformation self-organizingprotocolsmusttakesometimetodiscovernetworkcharacteris- ticsandconvergetoe cientoverlays currentlytheconvergencetimeisabout minutes whilethismaybeacceptableinconferencingapplicationswhichtypicallyhave alongduration applications finally seconds tradeo bilityofoverlaytopology environments environments asmentionedinsection endsystemmulticastoccurs avors peer-to-peerarchitectures thediscussioninthis ratherthanthespeci cway service mationacrossgroups thisallowsproxiestoexploitpasthistoryofnetworkperformance sharingofnetworkinformation overlays athirdadvantageof networkmoreeasily finally proxiesarethenaturalcoordinationpointsformanaging network resourcesamong whencongestionoccurs tages supportmillionsofgroups thisisbecauseeachendhost itactuallyparticipates tectures whereeachrecipientgets potentiallyredundant withafraction ofthedata owingalonganygivenpath thismulti-path inthispaper paths doesnotradicallya recipient datadeliverycanbe rorcorrection concurrently including potentiallypoor linksforwhichno thisinturnminimizestheneedforactivebandwidthmeasurements andcan related work severalstudies toourknowledge thisisthe environment centlyinanoverlaysetting gossamer narada yoid andmostrecently bayeux haveonlyconsidered delaybasedmetrics theyhavenotaddressedimportantissuespertainingtothedynamicnatureofthese metrics overcast asourresultssuggest consideringboth moree cing applicationperformance almi almi minimumspanningtreesaree cientfromthenetworkperspective applicationperspective summary geneousinternetsettings set atsourceratesofboth mbps mosthosts areabletosustainover ofthesourcerateonaverage inextremely extended set themean receiver forexample inexperimentswiththe extended set bandwidthlatency canprovide severalranks metricslikerandom performmuchworse forgroupswith members theyaredesigned toadaptatthetimescaleof seconds adaptation atthistimescalemaybesu cientinlessdynamicenvironments ourtechniques weconsider andmechanismsfor acknowledgements iments wethankjasonflinn jungao jorjetajetchevaandthe presentationofthepaper binomial inproc ieee infocom april chawathe scattercast anarchitecturefor service fall thesis chu rao andh zhang acaseforend systemmulticast inproceedings acm sigmetrics june deering extendedlans inproceedings acm sigcomm august floyd handley padhye andj widmer applications inproceedings acm sigcomm august francis yoid http aciri yoid april hardman sasse handley anda watson inproceedings inet june jacobsonands mccanne visualaudiotool vat http www-nrg lbl gov vat jannotti ord johnson kaashoek andj toolejr overcast reliable inproceedings fourth symposium operating system design implementation osdi october mccanneandv jacobson vic exible frameworkforpacketvideo inacm multimedia november pendarakis shi verma andm waldvogel almi inproceedings usenix symposium internet technologies systems usits march savage collins man snell anderson theend-to-ende ectsofinternetpath selection inproceedings acm sigcomm august zhuang zhao joseph katz kubiatowicz bayeux proceedings nossdav tananda zakhor transportprotocol inieee trans multimedia vol june wangandj crowcroft bandwidth-delaybased routingalgorithms inieee globecom november 
multiple segment networks static routing learn lab turn computer multiple interfaces router set static routing icmp messages update routing table entries work subnet masks interpret ping traceroute tcpdump measurements determine setup route copyright liebeherr rights reserved lab itl lab page spring table content prelab lab setup lab part setting network topology part configuring network interfaces part setting routing tables part icmp redirect part changing netmasks checklist form lab feedback form lab itl lab page spring prelab refer textbook answer questions static routing advantageous dynamic routing router host reachable interfaces compare routers hosts defining characteristic router give detailed response generate icmp redirect messages routers hosts exercises require access unix account command ping similar traceroute displays route datagrams ping traceroute approaches gather information describe traceroute ping gather information default maximum ttl time live field traceroute outgoing probe packets traceroute displays output hop encountered traceroute print output difference ethernet switch hub read article understanding addressing wanted chuck semeria http nsc html answer questions network prefix subnetting subnetmask router subnetmask destination address network prefix address host address maximum number hosts network organization assigned network number create subnets supports hosts subnet maximum number subnets setup explain answer address address highest significant bit dealing class address network prefix class address bits long inconsistent give explanation deliverables submit answers problems beginning lab itl lab page spring lab lab set machines configuration shown figure workstation configured router send traffic routers logical topology address configuration shown figure vintpc ethernet switch hub ethernet switch hub ethernet switch hub ethernet switch hub vintpc vintpc vintpc vintpc vintpc figure network topology lab vintpc vintpc vintpc vintpc vintpc vintpc figure logical configuration addresses itl lab page spring table shows address assignment network interfaces machine machine bottom ethernet interface eth top ethernet interface eth vintpc vintpc vintpc vintpc vintpc vintpc table addresses itl lab page spring setup lab network setup multiple segments workstations ethernet switches hubs build network shown figure configure interfaces machines manually set routing tables correct values note exercises lab require coordinate groups note started reboot machine recall lab save data files save files directory labdata save files floppy disk end lab files prepare lab report part setting network topology exercise set machines shown figure lab instructor cables connectors advice determine figure figure table ethernet hubs switches machine connected coordinate activities groups working ethernet network network setup verify setup correct machine ethernet network interface cards note hubs ethernet cards connected check connecting cables itl lab page spring part configuring network interfaces unix systems network interface combination letters number letters type interface number distinguish interfaces type lab ethernet interfaces type names eth bottom interface eth top interface exercise configure addresses ethernet interfaces guidelines setting addresses network addresses network prefix including subnet number bits netmask set addressing convention bytes address identical machines byte identifies network byte identifies host machines addresses network vintpc vintpc vintpc vintpc vintpc vintpc hint running ethereal machine multiple network interfaces multiple interfaces run ethereal interface snoop traffic argument listen traffic eth interface type ethereal eth exercise ifconfig command set ethernet interfaces figure table find correct address interface machine itl lab page spring display content routing table host configuring interfaces save data ping machine networks connected ping ing machine networks result transmission icmp packets disable interface change address netmask disable interface ifconfig interfacename change netmask address interface correct configuration syntax ifconfig interfacename ipaddress broadcast bcaddr netmask ntmaddr setting interfaces ping machines connected networks hint machine ping setup response machine ping ing ethereal find problem configuration machine exercise assigning address interface predictable consequence losing packets destined address problem ifconfig mechanism create alias addresses ifconfig interfacename ipaddress broadcast bcaddr netmask ntmaddr unsigned integer create alias interface eth address typing ifconfig eth broadcast netmask change address interfaces address differs byte vintpc change address create alias address rule broadcast netmask addresses address ifconfig command output save result file itl lab page spring telnet machine ping machine address vintpc telnet vintpc send ping capture output ethereal include results lab report create alias address interfaces choose alias network host instance create alias interface address telnet network interface alias ping modified interface alias created capture results ethereal neighbor successfully ping machine note create aliases syntax delete aliases ifconfig interfacename ifconfig interfacename del ipaddress modifications made configuration interfaces reset reboot machine make permanent update revise configuration files network interfaces interface eth edit file sysconfig network-scripts ifcfg-eth add follow lines device eth bootproto static broadcast ipaddr netmask network onboot lab report include measurements exercises lab report include answers questions posted steps restore made interfaces check-off itl lab page spring part setting routing tables part lab configure routing tables hosts recall router address receives datagram destination address router forward packet network host address receives datagram destination address host discard packet converting host router consists enabling forwarding unix system changing single line configuration file redhat system configuration file sysconfig network system router file line forward ipv host line doesn exist reads forward ipv note files redhat refer routing setup sysconfig network gateway gatewaydev eth set default gateway forward ipv set host gateway sysconfig static-routes set static routing table eth net netmask eth net netmask change entry effect reboot exercise exercise set routing table local machine task completed send ping hosts modify routing table entries verify forwarding enabled modify configuration files reboot system configuring routing table testing routes commands route set modify delete entries routing table examples route add -net netmask itl lab page spring route add -host netmask route del -host route add net dev eth route add default netstat display content routing table netstat -rs display routing statistics ping testing host reached note ping records route traceroute display route destination debugging successful ping host router routing tables correctly set routers forward backward direction command ethereal debugging set arguments ethereal filter traffic interested groups workstation filter traffic window ethereal tcpdump lab report describe problems encountered setting routing table solved problems potential problem setting routing tables manually routing loops occur describe configuration scenario configuration figure routing loop result performance network exercise destination address routes added host route add -net netmask route add net 
netmask route add host netmask case multiple matches destination address task determine rules router host resolve multiple matches routing table itl lab page spring perform experiments modify routing table system determine system handles multiple matches routing table construct scenarios routing tables matches network network prefixes length simultaneous match host entry network entry save output routing table floppy lab report routing table saved exercise explain resolves multiple matches routing table difference exit interface hop address routing table traceroute calculate round-trip-time rtt packets check-off itl lab page spring part icmp redirect icmp redirect messages router host packet forwarded router linux icmp redirect results change routing cache host command route display routing cache vintpc sends packets destination vintpc opposed vintpc vintpc sends icmp redirect vintpc icmp redirect informs vintpc send packets destination vintpc exercise setup routing table provokes transmission icmp redirect message ethereal capture icmp packets observe network traffic contents routing table cache icmp redirect messages save data files lab report describe outcome experiment include measurements explain vintpc packets destined network forwarded check part changing netmasks part lab test effects changing netmask network configuration exercise setup interfaces network vintpc vintpc vintpc network vintpc vintpc vintpc figure group responsible setting interface interfaces setup ping machines machines network save results floppy network perform operations vintpc send ping messages vintpc vintpc itl lab page spring vintpc send ping messages vintpc vintpc vintpc send ping messages vintpc vintpc network perform operations vintpc send ping messages vintpc vintpc vintpc send ping messages vintpc vintpc determine ping operations successful explain results ethernet vintpc vintpc vintpc adress netmask ethernet vintpc vintpc vintpc adress netmask figure network topology lab lab report measurements explain results exercise ping operations successful unsuccessful check itl lab page spring checklist form lab complete check list work laboratory exercises hand form lab instructor leave names print turn-in prelab write prelab check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet don forget copy results floppy disk lab machines reset lab itl lab page spring feedback form lab complete feedback form end lab hand form lab instructor leave feedback anonymous put form exercise record difficulty grade degree difficulty range easy difficult interest level grade level interest completing exercise range low interest high interest time time complete part lab difficulty interest level time minutes part setting network topology part configuring network interfaces part setting routing tables part icmp redirect part changing netmasks answer questions lab dislike lab make suggestion improve lab 
configuring commercial router learn lab setup commercial router cisco copyright liebeherr rights reserved lab itl lab page spring table content prelab lab setup lab part connecting serial console port part command modes ios part ios commands display current status part ios commands set address part setting static routing table entries part ios commands postlab checklist lab feedback form lab itl lab page spring prelab lab work cisco routers cisco web page cisco find types number interfaces cisco router provide description interfaces cisco routers vintlab running ios version operating system read ios http cisco univercd doc product software ios index htm web page answer questions routing protocols supported ios briefly describe online feature ios user interface works command disables forwarding cisco router command change mtu maximum transmission unit cisco router unix utility called kermit lab connect pcs cisco routers sentences describe kermit list major features kermit program kermit webpage http columbia kermit find information difference null-modem cable called cross-over roll-over cable straight serial cable differentiate cisco web site wealth information http cisco warp public visit web site explanation http freebsd handbook term html website http cisco univercd doc product software ios cbook cintrfc htm read network interfaces cisco routers answer question command begin configuring hssi interface high speed serial interface cisco router assume interface port slot deliverables answer problems turn answers beginning lab itl lab page spring lab lab configure cisco series router access routers console ports terminal emulation software kermit pcs access console ports router pcs study topology figure vintpc vintpc vintpc hssi fsi fddi itl- itl- itl- hssi fsi fddi hssi fsi fddi figure network topology routers note lab cisco routers involved work groups break group work shifts setup lab machine connected dedicated router serial cable connection connector router end cisco routers end connection note serial interface routers connected point-to-point links point-to-point links hssi fsi fddi ethernet itl lab page spring part connecting serial console port couple minutes study router connected table guideline connect correct router computer router vintpc itl- vintpc itl- vintpc itl- exercise identify router machine connected make connection cable supplied lab instructor serial interfaces select exercise connecting router kermit follow guidelines establish terminal connection console port router terminal console type commands access console port directly connected router run kermit program machine command prompt type kermit brings prompt similar root c-kermit step select communication device interface connect router direct serial connection router select serial interface make physical connection device names serial interfaces cua interface cua interface set line command select correct device set line dev cua set line dev cua connect device issuing command connect itl lab page spring connection successful command prompt user exec prompt router router-name state run small set commands telnet ping trace view change configuration router enter privileged exec mode covered check prompt itl lab page spring part command modes ios part perform number simple exercises cisco routers goal exercises make familiar configuration commands cisco series routers cisco operating system cisco internetwork operating system ios routers minor version differences common standard command language routing equipment work routers company nortel lucent learn command language ios interface similar unix dos command shell type commands prompt notable difference ios set command modes functions configuring network interface performed specific command mode part lab presents command modes ios learn enter leave modes refer figure table summary ios command modes command modes user exec mode user mode entering user mode requires login password accessing router console port login password required mode limited number commands executed configuration parameters read modified privileged exec mode enable mode similar root privileges unix machine entering privileged exec mode requires password state read configuration files reboot router configure parameters router proceed privileged exec mode global interface configuration modes global configuration mode mode global system parameters modified interface configuration mode parameters specific interface modified ios commands command mode typing question mark list commands options itl- lists commands time itl- configure lists arguments configure command part lab walk command modes mode type obtain list commands mode save results file itl lab page spring global configuration mode config privileged exec mode sub-configuration mode config-if configuration command enable disable ctrl-z end exit interface type number exit global config command configure term logoff login access console port user exec mode logged exit ctrl-z end exit figure ios command modes mode usage enter mode leave mode prompt user exec basic commands change system parameters ping telnet traceroute telnet address router requires terminal password direct serial connection console port require password exit router-name privileged exec set operating parameters permission enter global configuration mode enable requires additional enable password disabl router-name global configuration change system wide configuration parameters enter interface configuration mode configure term ctrl-z router-name config interface configuration modify configuration interface note mode enabled separately interface interface type number interface fddi exit router-name config-if table summary command modes usage itl lab page spring user exec mode user mode completed part logged router user mode command prompt so-called user exec prompt router-name router-name assigned router itl- lab manual logoff typing itl- exit commands execute user mode prompt change configuration parameters run commands similar unix commands ping telnet trace complete list command user mode typing itl- itl lab page spring privileged exec mode enable mode order change configuration router system administrator mode similar root unix system cisco ios mode called privileged exec mode enable mode connecting system change privileged mode typing itl- enable system password privileged mode password enable secret enable password provide password login successful command prompt itl- state query set operation configuration router leave privileged exec mode typing itl- disable logoff completely typing itl- exit complete list commands typing itl- exercise run commands displaying configuration system save output obtain list interfaces system typing write term display information interfaces system typing show interfaces display list fddi interfaces command show interfaces fddi display information single interface router hssi interface slot port typing command show interfaces hssi display routing table command show route find command display show protocol statistics save output reboot router command reload observe output router restarts itl lab page spring global configuration 
mode modify system wide configuration parameters addresses routing algorithms routing table global configuration mode enter configuration mode privileged exec mode typing itl- configure terminal argument terminal tells router entering configuration commands terminal console alternatives configure network configure memory command prompt global configuration mode itl- config type global configuration commands add remove routing table entries setting routing table entries commands workstations route destination address hop address adds route network gateway address destination address gateway hop address leave global configuration mode typing ctrl-z itl- config complete list command typing itl- exercise add routing table entry successful itl lab page spring interface configuration mode modify configuration parameters specific interface enter interface configuration mode global configuration mode enter mode cisco routers interfaces fddi fiber distributed data interface atm asynchronous transfer mode hssi high-speed serial interface fsi fast serial interface fast ethernet ethernet mbps mbps ethernet configure interface routers slot port number addition interface routers support types interfaces slot multiple interfaces type slot port numbers note interface names cisco routers interfaces structure type slot port examples ethernet atm hssi interpretation interface ethernet ethernet interface interface card interface card inserted slot number router interface card ethernet interfaces identified port number interface ethernet interface port enter interface configuration mode interface enter keyword interface interface routers enter configuration mode hssi port slot type itl- config interface hssi interface configuration mode prompt itl- config-if type commands configure interface complete list commands typing itl- config-if enable disable interfaces itl- config-if shutdown itl lab page spring enables interface itl- config-if shutdown disables interface return global configuration mode typing itl- config-if exit note interface configuration mode specific interface type global configuration command reenter global configuration mode exercise exercise displayed list interfaces router show interfaces back list verify identify names locations slot port number interfaces router refer topology shown figure task identify interfaces connected point-to-point links shown figure lab instructor write names interfaces connected groups consistent view interface router itl- connects interface router itl- interface router itl- connects interface router itl- interface router itl- connects interface router itl- lab report include measurements exercise discuss results check part itl lab page spring part ios commands display current status important commands execute cisco router display status router privileged exec mode execute commands write terminal display current configuration show interfaces display details configuration interfaces show configuration display startup configuration show route display current routing table show protocols lists protocols running system interfaces protocol configured version ios cisco replacing commands write terminal show config intuitive commands show running-config replaces write terminal show startup-config replaces show config cisco routers versions work exercise execute commands show configuration show protocols save results file lab report include saved data discuss output check part itl lab page spring part ios commands set address set change address interface enter interface configuration mode interface configure hssi interface routers case interface slot port enable configure term interface hssi set address syntax address exercise perform operations setup addresses routers configure interfaces routers connected routers assign addresses router interface configure address itl- interface connected itl- itl- interface connected itl- itl- interface connected itl- itl- interface connected itl- itl- interface connected itl- itl- interface connected itl- netmask configurations commands learned experiment save data shows setup configured interface itl lab page spring important make fddi hssi cables connected correct interfaces trace equivalent traceroute unix systems command send packet routers routers configured communicate save output trace command file lab report include saved data discuss output check part itl lab page spring part setting static routing table entries configuration mode add remove routing table entries setting static routing table entries unix commands command route destination address hop address adds route network gateway address destination address gateway hop address command route destination address hop address deletes route routing table exercise setup static routing table entry result routing loop ensure command trace successful set entry routing table router subnet router isn directly connected set routing table destination network hop router router itl- itl- itl- router itl- itl- itl- router itl- itl- itl- commands learned part lab save content routing table modification display modified routing table save output send packet network packet run loop traceroute non-existing host trace save output loop lab report include saved data discuss output describe purpose commands interface configuration mode description bandwidth mac-address reset made lab remove routing table entries disable interfaces check itl lab page spring part ios commands postlab lab report part explain ios commands command arguments shown italics write memory copy running-config startup-config show version shutdown shutdown show startup-config show terminal show protocols show running config show processes cpu show route show protocols show ospf show interfaces show flash show environment show clock show config router rip router ospf router igrp router eigrp reload quit resume passive interface network net network net login logout rip send receive version rip send receive version route netaddr netmask route netaddr netmask domain lookup domain lookup itl lab page spring interface int-name hostname hostname exit end disable copy startup-config running-config copy running-config startup-config copy bandwidth bandwidth itl lab page spring checklist lab complete check list work laboratory exercises hand form lab instructor leave names print turn-in prelab write prelab check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet don forget copy results floppy disk lab machines reset lab itl lab page spring feedback form lab complete feedback form end lab hand form lab instructor leave feedback anonymous put form exercise record difficulty grade degree difficulty range easy difficult interest level grade level interest completing exercise range low interest high interest time time complete part lab difficulty interest level time minutes part setting network topology part configuring network interfaces part ios commands display current status part ios commands set address part setting routing table entries answer questions lab dislike lab make suggestion improve lab 
transport layer protocols udp tcp learn lab udp tcp react fragmentation detailed throughput measurements tcp connection tcp interactive data flow tcp bulk data flow tcp schedules retransmissions copyright liebeherr rights reserved lab itl lab page spring table content prelab lab setup lab part setting network topology routing table part learning ttcp part mtu fragmentation part tcp connection management part tcp data exchange part tcp retransmission throughput measurement check list lab feedback form lab itl lab page spring prelab itlab web page virginia itlab prelab tcp download man file ttcp ttcp-man doc ttcp-man txt read man file ttcp provide syntax ttcp command client server executes scenario tcp server tcp client tcp server waiting port number connection request client connects server transmits bytes server write operations bytes lab exercises capture traffic subsequently process visualize captured data tcpdump awk script gnuplot ethereal data capture tcpdump ethereal processing data awk visualization data performed gnuplot prelab exercises familiar awk gnuplot login computer unix account read man page awk solve problems assume file named test data columns integers provide syntax awk extracting field row input file test data file virginia itlab prelab tcpdump data file traffic tcp connection transfers file write awk script takes file generates file shown virginia itlab prelab plot data file plot data columns column timestamp data segment transmitted column relative sequence numbers highest sequence number transmitted segment divided timestamp normalized timestamp time sec sequence numbers normalized start byte transfer awk script skip acknowledgement packets packets flag refer tutorial gnuplot http uni gnuplot lab gnuplot generating modifying plots set gnuplot commands plot results content file plot data set xtics set ytics data capture process data visualization itl lab page spring set xlabel time sec set ylabel bytes set terminal plot plot data title bytes transmitted linespoints explain command detail suppose gnuplot commands type commands set xrange set yrange replot explain commands suppose gnuplot commands type commands set terminal post eps color times-roman set output test eps replot set terminal replot result execute sequence commands file virginia itlab prelab plot data submit printout result answer questions tcp decide segment size data packet icmp error generated router fragment datagram bit set tcp sender learn mtu deliverables answer problems turn answers beginning lab itl lab page spring lab lab involves workstations ethernet hubs cisco routers itl- hssi fsi ethernet ethernet hub ethernet hub ethernet hub ethernet hub ethernet hub itl- fddi fddi figure network topology lab vintpc fddi fddi itl- ethernet ethernet ethernet vintpc vintpc vintpc vintpc ethernet ethernet vintpc itl- fddi fddi hssi fsi ethernet figure logical configuration addresses itl lab page spring setup lab interfaces pcs setup shown table machine ethernet interface eth ethernet interface eth fddi interface fddi vintpc vintpc vintpc vintpc vintpc vintpc table addresses addresses routers shown table machine interface type interface type itl- fddi hssi fsi ethernet itl- fddi hssi fsi ethernet table addresses cisco routers itl lab page spring part setting network topology routing table exercise verify machines cables setup shown figure setup correct coordinate lab instructor groups setup machines properly exercise verify network interfaces setup shown table setup correct reconfigure interfaces addresses interfaces cisco shown table make change netmask time make change interface address exercise set routing tables machine shown table ping interface local ethernet network routers remote ethernet networks machine destination network gateway vintpc default vintpc default vintpc default vintpc default vintpc default vintpc default traceroute test routing tables properly setup vintpc traceroute show route hops vintpc vintpc check-off itl lab page spring part learning ttcp unix utility ttcp tests tcp udp throughput network tcpdump ethereal ttcp debugging network related problems running ttcp requires setup ttcp receiving process ttcp receiver ttcp sending process ttcp sender start ttcp receiver tcp mode remote machine telnet remote machine execute command ttcp lbuflen nnumbufs pport start tcp sending process local machine run command ttcp lbuflen nnumbufs pport host execute ttcp udp mode receiving sending processes started ttcp lbuflen nnumbufs pport ttcp lbuflen nnumbufs pport host exercise transmit tcp data experiment ttcp command sending packets neighbors tcp mode setup scenario ttcp receiver sets server waits port ttcp sender establishes client sends data server default server discards received data finishing transmission data server client processes closed ethereal capture packets save results file address neighbors telnet neighbor start ttcp receiver ttcp local machine type ttcp ipneighbor ipneighbor address neighbor machine itl lab page spring exercise transmit udp data basically repeat previous exercise udp transport protocol ethereal capture packets save results file telnet neighbor machine execute command ttcp local machine execute command ttcp ipneighbor lab report data captured ethereal answer questions include captured data report packets exchanged examples range size data sending packet check-off part part mtu fragmentation study effect fragmentation udp tcp traffic exercise ttcp send udp traffic machines ethereal capture traffic run experiments send udp datagrams machine remote machine ethernet segment increase size datagrams argument ttcp fragmentation occurs determine maximum size udp datagram machines send receive fragmentation save data captured packets fragmentation itl lab page spring ethereal output determine datagrams values fields header fragmentation identification fragment offset don fragment bit exercise modify mtu network interface ifconfig command ifconfig eth mtu sets mtu interface eth bytes asked observe tcp discovers maximum allowed datagram size mtu route sender receiver process called path mtu discovery tcp segments datagrams don fragment bit set router fragment datagram bit set discards datagram generates icmp unreachable message includes mtu required receiving icmp error message tcp reduces segment size required mtu modify mtu interfaces shown table modify mtu local machine coordinate groups mtu settings remote machines mtu eth mtu eth vintpc vintpc vintpc vintpc vintpc vintpc ttcp generate tcp traffic ethereal measure traffic remote machine ttcp local machine ttcp iprem source destination tcp traffic interfaces observe ethereal shown table source destinations assigned tcp traffic intermediate router fragment datagram refer figure determine path tcp traffic note mtu interfaces source destination intermediate routers path start ethereal interfaces machine set filters capture tcp data measure itl lab page spring source destination vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc 
vintpc vintpc vintpc vintpc vintpc lab report provide answers questions posted exercises saved data answer questions include data report observed fragmentation describe fields ethereal output give explanation icmp unreachable fragmentation required error generated bit set datagrams observed icmp unreachable fragmentation required error message describe message path mtu discovery explain tcp connection local network exhibit fragmentation udp connection reset mtu default check-off itl lab page spring part tcp connection management exercise study tcp connection management exercise decide remote machine establish telnet connection start ethereal capture packets transmitted telnet connection save captured data file establish telnet connection telnet remoteip discard remoteip address remote machine login prompt appears type ctrland type quit terminate connection lab report captured data explain detail steps performed tcp connection establishment termination include captured tcp headers -way handshake segments involved closing tcp connection maximum segment size tcp connection initial sequence numbers telnet client telnet server check-off itl lab page spring part tcp data exchange exercise observe tcp data exchange interactive data flow bulk data flow exercise interactive data transfer choose remote machine address remoteip start ethereal session captures traffic machine machine address remoteip login remote machine address remoteip rlogin remoteip start type characters window rlogin session observe number packets exchanged machines keystroke note time acks local machine save captured ethereal data file exercise bulk data transfer start ethereal session capture ftp traffic local machine remote machine start ftp session remote machine transfer large file observe behavior machines sender transmits window data burst waits acknowledged determine rules receiver transmitting acks sender save captured ethereal data file lab report captured data answer questions observe delayed acknowledgments rlogin session observe delayed acknowledgments ftp session maximum time acks delayed measurements ftp session range advertised window receiver file detect rule setting advertised window tcp flags observe captured packets explain role tcp flags differently rlogin data segments ftp data segments explain describe explain tos bits set headers rlogin ftp session explain differences check-off itl lab page spring part tcp retransmission throughput measurement part observe error correction features tcp ttcp measure throughput tcp transmission machines tcpdump capture data tcpdump syntax tcpdump eth expression tee filename -tt unformatted timestamps eth specifies interface expression boolean expression describes capture filter recall tee filename writes results captured data monitor file exercise tcp throughput measurement ttcp send tcp traffic machine address remoteip start tcpdump options determine interface machine data flowing set capture filter capture traffic local machine remote machine save tcpdump data file start ttcp session remote machine ttcp local machine ttcp remoteip table assignment remote machines remote machine vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc ttcp session terminates run awk script file filtertcpdump awk awk script performs operations problem prelab scripts takes input tcpdump output traffic capture single tcp connection generates file row itl lab page spring tcp segment transmission row columns timestamp highest sequence number transmitted segment execute awk script awk root lab filtertcpdump awk filename output data filename file saved tcpdump output verify resulting file desired format gnuplot visualize data file output data start gnuplot session simply typing gnuplot execute commands generating plot data file modifying ranges axes plot annotate plot add labels axis add title save plots postscript file commands prelab exercises generate plots save plots postscript files provide answers questions make labels plots correctly annotated previous exercise generate save plot shows rate data transmission experiment approximate data rate transmission ttcp sender measured bits observe visualized data short time periods observe data transmitted bursts periods rapid transmissions multiple segments time periods transmission takes place answer questions range burst sizes typical size burst typical distance bursts explain factors determine sizes bursts delay bursts present plot shows operation slow start congestion avoidance itl lab page spring exercise comparison udp tcp throughput repeat previous exercise udp transmission start ttcp session remote machine ttcp local machine ttcp remoteip generate plot save plots postscript files shows rate data transmission experiment approximate data rate transmission ttcp sender measured bits compare results exercise compare pattern udp datagram transmissions burst pattern tcp segment transmission experiment differences generate plot shows burst pattern udp transmissions short period time exercise tcp retransmission setup experiment similar previous setup tcpdump filters set start ttcp session parameters remote machine ttcp local machine ttcp remoteip remote pcs table assignment remote machines remote machine vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc transmission ongoing disconnect ethernet cable machine ttcp traffic flowing approximately minute reconnect ethernet cable itl lab page spring generate plots save plots postscript files provide answers questions make labels plots correctly annotated present plot shows rate data transmission experiment approximate data rate transmission ttcp sender measured bits compare results plots exercise generate plot enables observe retransmission attempts disconnected cables time reconnected cable data rate reached level observe cables disconnected addition retransmission attempts cables disconnected determine packet losses retransmission attempts lab report include plots provide answers questions posed exercises include discussion requested check-off itl lab page spring check list lab complete check list work laboratory exercises hand form lab instructor leave names print turn-in prelab pledge check-off part prelab check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet don forget copy results floppy disk lab machines reset lab itl lab page spring feedback form lab complete feedback form end lab hand form lab instructor leave feedback anonymous put form exercise record difficulty grade degree difficulty range easy difficult interest level grade level interest completing exercise range low interest high interest time time complete part lab difficulty interest level time minutes part setting network topology routing table part learning ttcp part mtu fragmentation part tcp connection management part tcp data exchange part tcp retransmission throughput measurements answer questions lab dislike lab make suggestion improve lab 
resilient overlay networks david andersen hari balakrishnan frans kaashoek robert morris mit laboratory computer science ron nms lcs mit http nms lcs mit ron abstract resilient overlay network ron architecture distributed internet applications detect recover path outages periods degraded performance seconds improving today wide-area routing protocols minutes recover ron application-layer overlay top existing internet routing substrate ron nodes monitor functioning quality internet paths information decide route packets directly internet ron nodes optimizing application-specific routing metrics results sets measurements working ron deployed sites scattered internet demonstrate benefits architecture instance -hour sampling period march twelve-node ron significant outages lasting thirty minutes measured paths ron routing mechanism detect recover route twenty seconds average showing methods fault detection recovery work discovering alternate paths internet ron improve loss rate latency throughput perceived data transfers transfers doubled tcp throughput transfers loss probability reduced found forwarding packets intermediate ron node sufficient overcome faults improve performance cases improvements area fault detection recovery demonstrate benefits moving control routing hands end-systems introduction internet organized independently operating autonomous systems peer architecture detailed routing information maintained single research sponsored defense advanced research projects agency darpa space naval warfare systems center san diego contract permission make digital hard copies part work personal classroom granted fee provided copies made distributed profit commercial advantage copies bear notice full citation page copy republish post servers redistribute lists requires prior specific permission fee acm symp operating systems principles sosp october banff canada copyright acm constituent networks operated network service provider information shared providers heavily filtered summarized border gateway protocol bgprunning border routers internet scale millions networks wide-area routing scalability cost reduced fault-tolerance end-to-end communication internet hosts cost arises bgp hides topological details interests scalability policy enforcement information traffic conditions damps routing updates potential problems arise prevent large-scale oscillations result bgp fault recovery mechanisms minutes routes converge consistent form times path outages lead significant disruptions communication lasting tens minutes result today internet vulnerable router link faults configuration errors malice week problem affecting connectivity provided internet service providers isps resilient overlay networks rons remedy problems distributed applications layer resilient overlay network underlying internet routing substrate nodes comprising ron reside variety routing domains cooperate forward data behalf pair communicating nodes ron independently administrated configured routing domains rarely share interior links generally fail independently result underlying topology physical path redundancy ron find paths nodes wide-area routing internet protocols bgpcannot main goal ron enable group nodes communicate face problems underlying internet paths connecting ron detects problems aggressively probing monitoring paths connecting nodes underlying internet path path ron node involved forwarding path internet path ron forward packet ron nodes practice found ron route failures intermediate hop ron nodes exchange information quality paths routing protocol build forwarding tables based variety path metrics including latency packet loss rate throughput ron node obtains path metrics combination active probing experiments passive observations on-going data transfers implementation ron explicitly designed limited size fifty nodes facilitate aggressive path maintenance probing excessive bandwidth overhead cci aros utah cmu lulea mit cable cisco cornell nyu cable dsl pdi mazu figure current sixteen-node ron deployment sites universities usa european universities shown broadband home internet hosts connected cable dsl located isp corporations usa ron recover problems underlying internet seconds minutes goal ron integrate routing path selection distributed applications tightly traditionally integration includes ability consult applicationspecific metrics selecting paths ability incorporate application-specific notions network conditions constitute fault result rons variety ways multimedia conferencing program link directly ron library transparently forming overlay participants conference loss rates delay jitter applicationobserved throughput metrics choose paths administrator ron-based router application form overlay network multiple lans overlay vpn idea extended develop overlay isp formed linking ron points presence traditional isps buying bandwidth ron routing machinery overlay isp provide resilient failure-resistant internet service customers goal ron provide framework implementation expressive routing policies govern choice paths network ron facilitates classifying packets categories implement notions acceptable enforce forwarding rate controls paper describes design implementation ron presents experiments evaluate ron good idea conduct evaluation demonstrate benefits ron deployed working sixteen-node ron sites sprinkled internet figure ron client experiment resilient forwarder compare connections pairs nodes running ron running straight internet collected weeks worth experimental results path outages performance failures present detailed analysis separate datasets twelve nodes measured march sixteen nodes measured datasets found ron route significant outages implementation takes seconds average detect route path failure face active denial-of-service attack path found benefits quick fault detection successful recovery realized public internet depend existence non-commercial private networks internet backbone interconnects educational institutions ability determine enabled ron policy routing feature expression implementation sophisticated policies determine paths selected packets found ron successfully routed performance failures loss probability improved samples end-to-end communication latency reduced samples tcp throughput doubled samples addition found cases ron loss latency throughput-optimizing path selection mechanisms chose paths nodes suggesting application-specific path selection techniques practice noteworthy finding experiments analysis cases forwarding packets intermediate ron node sufficient recovering failures improving communication latency related work knowledge ron wide-area network overlay system detect recover path outages periods degraded performance seconds ron builds previous studies quantify end-to-end network reliability performance ip-based routing techniques fault-tolerance overlay-based techniques enhance performance internet performance studies labovitz combination measurement analysis show inter-domain routers internet tens minutes reach consistent view network topology fault primarily routing table oscillations bgp complicated path selection process find period delayed convergence end-to-end communication adversely affected fact outages order minutes active tcp connections connections established state outstanding data terminate tcp receive acknowledgment outstanding data find part convergence delays fixed deployed bgp implementations long delays temporary oscillations fundamental consequence bgp path vector routing protocol paxson probe experiments show routing pathologies prevent selected internet hosts communicating time averaged long time period percentage improved time labovitz find examining routing table logs internet backbones considered routes time routes time find path outages minutes repair heavy-tailed duration recently chandra find active probing detected failures seconds hours minutes failure durations heavy-tailed long seconds repaired findings augur mission-critical services require higher degree end-to-end communication availability detour measurement study made observation paxson data collected times path selection wide-area internet suboptimal standpoint end-to-end latency packet loss rate tcp throughput study showed 
potential longterm benefits detouring packets node comparing long-term average properties detoured paths internetchosen paths network-layer techniques work performance-based faulttolerant routing single routing domain practical mechanisms wide-area internet recovery outages badly performing paths lacking today wide-area bgprouting based largely hop-counts early arpanet routing dynamic responding current delay utilization network arpanet evolved delayand congestionbased distributed shortest path routing algorithm diversity size today decentralized internet necessitated deployment protocols perform aggregation fewer updates result unlike interior routing protocols bgprouting optimizes scalable operation treating vast collections subnetworks single entity global routing purposes bgpis summarize aggregate enormous amounts routing information format scales hundreds millions hosts prevent costly route oscillations bgpexplicitly damps routes aggregation damping provide good scalability interfere rapid detection recovery faults occur ron handles leaving scalable operation underlying internet substrate moving fault detection recovery higher layer overlay capable faster response worry scalability oft-cited solution achieving fault-tolerant network connectivity smallor medium-sized customer multi-home advertising customer network multiple isps idea outage isp leave customer connected solution generally achieve fault detection recovery seconds degree aggregation achieve wide-area routing scalability limit size routing tables isps accept routing announcements fewer contiguous addresses netblock small companies fault-tolerance require large address block effectively multi-home alternative provider-based addressing organization addresses multiple providers requires handling distinct sets addresses hosts unclear on-going connections address set seamlessly switch failure model overlay-based techniques overlay networks idea fact internet developed overlay telephone network internet overlays designed past purposes including providing osi network-layer connectivity easing multicast deployment mbone providing ipv connectivity -bone x-bone recent infrastructure project designed speed deployment ip-based overlay networks management functions mechanisms insert packets overlay support fault-tolerant operation application-controlled path selection overlay networks designed efficient fault detection recovery designed end-to-end performance detour framework motivated potential long-term performance benefits indirect routing in-kernel packet encapsulation routing architecture designed support alternate-hop routing emphasis high performance packet classification routing ip-in-ip encapsulation send packets alternate paths ron shares detour idea routing nodes work differs detour significant ways ron seeks prevent disruptions end-to-end communication face failures ron takes advantage underlying internet path redundancy time-scales seconds reacting responsively path outages performance failures ron designed application-controlled routing overlay ron closely tied application ron readily integrates application-specific path metrics path selection policies present analyze experimental results real-world deployment ron demonstrate fast recovery failure improved latency loss-rates short time-scales alternative design ron generic overlay infrastructure x-bone port standard network routing protocol ospf rip low timer values improve resilience internet communications reasons reliable low-overhead outage detection module required distinguish packet losses caused congestion error-prone links legitimate problems path generic network-level routing protocols utilize application-specific definitions faults content delivery networks cdns overlay techniques caching improve performance content delivery specific applications http streaming video functionality provided ron ease future cdn development providing routing components required services design goals design ron seeks meet main design goals failure detection recovery seconds tighter integration routing path selection application iii expressive policy routing fast failure detection recovery today wide-area internet routing system based bgpdoes handle failures network perspective define kinds failures link failures occur router link connecting routers fails software error hardware problem link disconnection path failures occur variety reasons including denial-of-service attacks bursts traffic high degree packet loss high variable latencies applications perceive failures ways outages performance failures link failures extreme path failures outages average packet loss rate sustained period minutes high higher causing protocols including tcp degrade orders magnitude performance failures extreme throughput latency loss-rates degrade factor bgptakes long time order minutes converge valid route link failure outage contrast ron goal detect recover outages performance failures seconds compounding problem ip-layer protocols bgpcannot detect problems packet floods persistent congestion links paths greatly degrade end-to-end performance long link deemed live bgp session alive bgp as-pathbased routing continue route packets faulty path path provide adequate performance application mbps bbnqwest uunet mediaone mbps mbps private peering mbps mbps cable modem private peering mbps arosnet utah mitvbns internet figure internet interconnections complex dotted links private announced globally tighter integration applications failures faults application-specific notions network conditions fatal application acceptable adaptive instance udp-based internet audio application good packet-level error correction work loss rates larger loss rate bulk transfer application tcp continue work tcp adaptation mechanisms albeit lower performance loss rates tcp essentially unusable times packets ron applications independently define react failures addition applications prioritize metrics latency throughput low loss latency path selection construct metrics select paths routing system optimize metrics simultaneously path one-second latency throughput path degree latency unacceptable interactive application ron goal applications influence choice paths single metric plan explore multi-criteria path selection future expressive policy routing policy routing enforcement acceptable policies today approaches primitive cumbersome instance bgpis incapable expressing finegrained policies aimed users hosts lack precision reduces set paths case failure inhibits innovation carefully targeted policies end-to-end per-user rate controls enforcement acceptable policies aups based packet classification rons typically run powerful end-points well-suited providing fine-grained policy routing figure shows as-level network connectivity ron hosts full graph hosts traverses autonomous systems figure hint considerable underlying path redundancy internet reason ron works shows situations bgp blunt policy expression inhibits fail-over aros-uunet connection failed users aros unable reach mit authorized utah network resources impossible announce bgp route users utah-mit link completely private external probes data node node performance database node probes forwarder router probes forwarder router probes forwarder router conduits conduits conduits figure ron system architecture data enters ron ron clients conduit entry node node ron forwarder consults router determine path packet sends node path selection entry node tags packet simplifying forwarding path nodes packet reaches ron exit node forwarder hands output conduit passes data client choose paths ron nodes monitor quality virtual links active probing passive observation ron nodes link-state routing protocol disseminate topology virtual-link quality overlay network design conceptual design ron shown figure simple ron nodes deployed locations internet form application-layer overlay cooperatively route packets ron node monitors quality internet paths nodes information intelligently select paths packets internet path nodes called virtual link discover topology overlay network obtain information virtual links topology ron node participates routing protocol exchange information variety quality metrics ron design supports routing multiple intermediate nodes results section show intermediate ron node sufficient 
time parts design focus finding paths single intermediate ron node software architecture program communicates ron software node ron client overlay network defined single group clients collaborate provide distributed service application group clients service-specific routing metrics deciding forward packets group design accommodates variety ron clients ranging generic packet forwarder improves reliability packet delivery multi-party conferencing application incorporates application-specific metrics route selection ron client interacts ron api called conduit client send receive packets data path node receives packet conduit classifies determine type path low-latency highthroughput node called entry node determines path topology table encapsulates packet ron header tags information simplifies forwarding downstream ron nodes forwards subsequent ron node simply determines forwarding hop based destination address tag final ron node delivers packet ron application called exit node conduits access ron functions send pkt dst ron node forward packet destination ron node ron direct internet path ron delivery udp best-effort unreliable recv pkt ron callback function called packet arrives client program callback invoked ron conduit matches type packet ron header set types preregistered client joins ron ron packet type demultiplexing field incoming packets basic ron functionality provided forwarder object implements functions timer registration callback mechanism perform periodic operations similar service network socket data availability client instantiate forwarder hand modules ron router ron membership manager ron router implements routing protocol ron membership manager implements protocol maintain list members ron default ron ron router membership manager modules clients ron routers membership managers exchange packets ron forwarding service direct paths feature system beneficial messages forwarded underlying paths fail routing path selection routing process building forwarding tables choose paths packets ron entry node control subsequent path selection traditional datagram networks node tags packet ron header identifier identifies flow packet belongs subsequent routers attempt flow path barring significant link tagging ipv flow helps support multi-hop routing speeding forwarding path intermediate nodes helps tie packet flow chosen path making performance predictable basis future support multi-path routing ron tagging entry node application maximum control network considers flow small size ron relative internet maintain information multiple alternate routes select path suits ron client client-specified routing metric default maintains information specific metrics virtual link latency packet loss rate iii throughput obtained bulk-transfer tcp connection end-points virtual link ron clients override defaults metrics ron library constructs forwarding table pick good paths router builds forwarding tables combination policy routing chosen routing metric link-state dissemination default ron router link-state routing protocol disseminate topology information routers turn build forwarding tables node -node ron virtual links node router periodically requests summary information performance metrics nodes local performance database disseminates view information ron forwarding mesh ensure routing information propagated event path outages heavy loss periods ron routing protocol ron client well-defined ron packet type leads attractive property time ron router incomplete information paths ron ron nodes unavailable path evaluation selection ron routers algorithm determine path alive set algorithms evaluate potential paths responsibility metric evaluators provide number quantifying good path metric numbers relative compared numbers evaluator important aspects path evaluation mechanism data links combined single path formula evaluate path ron router implements outage detection determine virtual link node working active probing mechanism detecting loss probe normal low-frequency probing replaced sequence consecutive probes quick succession spaced seconds probes row elicit response path considered dead response subsequent higher-frequency probes canceled paths experiencing outages rated packet loss rate history path outage lose path experiencing outage frequency probing permit trade-off outage detection time bandwidth consumed low-frequency probing process section investigates default ron router implements routing metrics latency-minimizer loss-minimizer tcp throughput-optimizer latency-minimizer forwarding table computed computing exponential weighted moving average ewma round-trip latency samples parameter link latency estimate updated means current latency estimate based recent sample number similar values suggested tcp round-trip time estimator ron path latency sum individual virtual link latencies estimate loss rates ron average probe samples current average floyd found estimator ewma retains memory samples obtained distant past improve estimator unequally weighting samples loss metrics multiplicative path assume losses independent probability success entire path roughly equal probability surviving hops individually ron attempt find optimal throughput paths strives avoid paths low throughput good alternatives time-varying unpredictable nature bandwidth internet paths goal standpoint improving reliability path selection face performance failures avoiding bad paths important optimizing eliminate small throughput differences paths characterization utility received programs bandwidths determine good path selection threshold bandwidth reduction reduce utility programs threshold falls typical variation observed path time-scales tens minutes concentrate avoiding throughput faults order magnitude throughput-intensive applications typically tcp tcplike congestion control throughput optimizer focuses type traffic performance bulk tcp transfer function round-trip latency packet loss rate observes throughput optimization combines latency loss metrics simplified version tcp throughput equation upper-bound tcp throughput granularity loss rate detection throughput equation sensitive lower loss rates set minimum packet loss rate prevent infinite bandwidth prevent large route oscillations single packet losses formula one-way end-to-end packet loss probability end-to-end round-trip time estimated hop-by-hop samples non-linear combination loss round-trip time makes scoring difficult optimize standard shortest-path algorithms instance tcp throughput nodes node smaller tcp throughputs complicated search algorithms employed handle ron routing takes advantage resulting simplicity single-intermediate paths considered obtain throughput-optimized paths probe samples give two-way packet loss probability estimate one-way loss probability unrealistically paths assuming symmetric loss rates solving resulting quadratic equation assuming losses independent paths maximum absolute error one-way loss rate estimate occurs loss direction resulting error equal assuming minimum loss rate ensures choosing high-quality links loss rate estimate true large loss rates highly asymmetric loss patterns method disregard potentially good path reverse direction path high loss rate benefits avoiding high loss rate path outweigh cost missing good link intend remedy problem explicitly estimating one-way loss rates method throughput comparison equation faults instance slow unused bottleneck link path observe packet losses probes lost equation predict unreasonably high bandwidth estimate tackling send pairs probe packets estimate upper-bound link bandwidth noninvasive probes predict throughput oscillating rapidly multiple paths harmful applications sensitive packet reordering delay jitter evaluation metrics applies smoothing avoid flapping equal routes ron routers employ hysteresis based analysis snapshots ron node link-state table chose apply simple hysteresis bonus good route metrics simple method appears 
provide reasonable trade-off responsiveness underlying paths unnecessary route flapping performance database pdb callback metrics app metrics throughput loss latency performance database samples request callback client client probers pdb update pdb request system figure ron performance database make good routing decisions ron detailed performance information impractical send large performance histories participants ron reliable performance repository handle participants crash reboot rejoin ron measurement data noisy clients ways data instance outage detector packets successfully seconds throughput improver interested longer-term packet loss average system flexible summarization mechanism support requirements ron node local group nodes separate performance database store samples figure database generalization spand supporting data types summarization mechanisms sources information clients agree class data meaning values inserted database probes insert data database calling pdb update class src dst type src dst fields addresses sampled data policy routing ron users administrators define types traffic allowed network links traditional internet policy routing type typically defined packet source destination addresses ron generalizes notion include information packet ron separates policy routing components classification routing table formation packet enters ron classified policy tag tag perform lookups set routing tables ron router separate set routing tables constructed policy re-running routing computation removing links disallowed policy routing computation computes shortest path ron node nodes metric construction applies multi-hop single-hop indirection standard shortest-paths algorithm work metrics specifically tcp throughput implementation section specific single-hop indirection result running table construction multi-level routing tables shown figure construction routing tables production packet tags facilitated policy classifier component policy classifier produces permits function determines policy allowed virtual link conduit-specific data classifier module helps ron node decide policy incoming packet packets commercial site allowed internet educational backbone received packet site mit ron node data classifier hop dst policy demux routing lookup routing pref demux router forwarder hop netfrom net figure forwarding control data paths forwarder passes packet header routing table checkes valid flow cache entry exists performs levels lookups level based policy type based routing preference hash lookup hops indexed destination flow version hop limit routing flags ron source address ron destination address source port dest port packet type policy tag figure ron packet header routing flags flow set input conduit packet type demultiplexing key indicating conduit protocol receiver module determine policy set tag packet subsequent ron nodes examine policy tag reclassifying packet designed policy mechanisms exclusive cliques general policies exclusive clique data originating destined members clique traverse interclique links mimics instance educational policy internet backbone policy classifier takes list networks subnet masks match general policy component powerful accepts bpf-like packet matcher list links denied policy returns policy matches packet fields stored bpf-based information address policy composition users create composed versions policies general policy component section discuss abuse aups network transit policies data forwarding forwarder ron node examines incoming packet determine destined local client remote destination requires delivery forwarder passes ron packet header routing table shown figure ron packet header shown figure inspired design ipv ron support simply ip-in-ip encapsulation ron header ron fragment packets inform applications exceed maximum transmission unit mtu ipv applications perform end-to-end path mtu discovery ron policy tag interpreted forwarders decide network routing policies apply packet packet destined local node forwarder packet type field demultiplex packet ron client packet flow valid flow cache entry forwarder short-cuts routing process entry routing table lookup occurs stages stage examines policy tag locates proper routing preference table routing preference table policy tag policy adherence supersedes routing preferences lookup procedure examines routing preference flags find compatible route selection metric packet flags examined flag understood router directs packet table ron routers understand basic system metrics latency loss throughput shared ron environment support users client-defined metrics provide good default metrics lookup routing preference table leads hash table next-hops based destination ron node entry next-hop table returned forwarder places packet network destined hop bootstrap membership management addition allowing clients define membership mechanisms ron system membership managers simple static membership mechanism loads peers file dynamic announcement-based soft-state membership protocol bootstrap dynamic membership protocol node identity peer ron node neighbor broadcast existence flooder special ron client implements generalpurpose resilient flooding mechanism ron forwarder main challenge dynamic membership protocol avoid confusing path outage node left ron node builds periodically minutes average implementation floods nodes list peer ron nodes node heard peer sixty minutes assumes peer longer participating ron observe mechanism nodes ron non-functioning direct internet path long periods time long path ron nodes left overhead broadcasting minuscule compared traffic caused active probing routing updates limited size ron resulting robustness high node receives copies peer list node redundancy node deleted node view ron node genuinely partitioned hour node ron ron node re-bootstrap well-known peer long partition implementation ron system implemented user-level flexible set libraries user-level ron clients link client pick choose components suits provide specific client ron library describe implementation resilient forwarder forwarder improves packet delivery modification transport protocols applications running end-nodes architecture resilient forwarder shown figure ron udp forward data tcp reliable byte-stream mismatched ron clients ip-based encapsulation divert socket routing pref demux latency loss hop dst udp type demux local data protocols conduits recv send policy demux vbns defaultrouter route lookup flags policy conduit fragment classify encapsulate local forwarder raw socket icmp emit outbound freebsd networking ron nodes fromlocal site figure resilient forwarder packets enter system freebsd divert sockets handed ron forwarder hop packet arrives destination conduit writes packet local raw socket re-enters processing restrict application-specific forwarding capabilities ron core services run special kernel support elevated privileges conduit entry node client gateway ron classifies packet classification clientspecific labels packet information decides routing metric route packet ron forwarder conduit label dns http traffic latency-sensitive ftp traffic throughput-intensive downstream ron forwarders routing metric packet type non-entry ron nodes route packet based attached label destination packet design ensures clientand application-specific routing functions occur entry exit conduits forwarding inside ron independent client-specific logic addition reducing per-packet overhead intermediate nodes localizes client-specific computation required packet means ron node implementing forwarder participate overlay conferencing application improve reliability data delivery conference conference node conduits implement application-specific methods label packets forwarder routing metrics conference packets forwarder implemented resilient forwarder freebsd divert sockets 
automatically send traffic ron emit end resilient forwarder classification encapsulation decapsulation packets special conduit called conduit top figure routers ron routers implement router virtual interface single function call lookup pkt mypkt ron library trivial static router dynamic router routes based metric optimizations dynamic router extensible linking set metric descriptions metric descriptions provide evaluation function returns score link list metrics routing table generate propagate implementation routing table creation specific single-hop indirection eliminates flow cache algorithm fills multi-level routing table bottom figure makeroutingtable policies metrics peers foreach policies foreach metrics foreach peers foreach peers permitsa permitsa evala table implemented clique classifier discussed section implementing general policy classifier provide classifiers resilient forwarder monitoring virtual links record success rtt node node binitial ping response response time time time time record success rtt figure active prober probing mechanism packets participants rtt sample requiring synchronized clocks ron node -node ron monitors virtual links randomized periodic probes active prober component maintains copy peers table probe time field peer field expires prober sends small udp probe packet remote peer probe packet random -bit process prober shown figure node receives initial probe request peer sends response peer resets probe timer peer originating node sees response sends response back peer sides reachability rtt information packets probing protocol implemented ron client communicates performance database implemented standalone application running berkeley backend simple udp-based protocol ron successfully detect recover complete outages periods sustained high loss rates ron takes seconds average route failure face flooding attack ron successfully routed bad throughput failures doubling tcp throughput samples samples ron reduced loss probability single-hop route indirection captured majority benefits ron deployment outage recovery latency optimization table major results measurements ron testbed evaluation goal ron system overcome path outages performance failures introducing excessive overhead failure modes section present evaluation ron meets goals evaluate performance resilient forwarder ron outage detection loss latency throughput optimization evaluation main parts study ron ability detect outages recover quickly investigate performance failures ron ability improve loss rate latency throughput badly performing paths finally investigate important aspects ron routing showing effectiveness one-intermediate-hop strategy compared general alternatives stability rongenerated routes table summarizes key findings methodology results experiments wide-area ron deployed internet sites paths hosts -site ron deployment table shows location sites experiments analyze distinct datasets nodes distinct paths nodes distinct paths traceroute data shows traversed distinct inter-as links inter-as links traversed scaling path diversity suggests small numbers confederating hosts expose large number internet paths examination claim experiments results typical representative deployment present analyze demonstrate kinds gains realize rons host sites internet -connected educational sites found high-speed experimental network presents opportunities path improvement public internet demonstrate policy routing module works make measurements closer internet hosts general observe measurements reported policy prohibited sending traffic commercial sites internet instance packet travel utah cornell nyu arostoutahto nyu consistent aup internet precludes commercial traffic result measurements path improvements involving commercial site description aros isp salt lake city cci salt lake city cisco-ma waltham cmu pittsburgh cornell ithaca lulea lulea sweden ma-cable mediaone cable cambridge mit cambridge ca-t foster city nyu york utah salt lake city vu-nl vrije univ amsterdam netherlands additional hosts dataset or-dsl dsl corvallis nc-cable mediaone cable durham pdi palo alto mazu boston table hosts sixteen-node ron deployment study detail determine effectiveness ron practice asterisks universities internet backbone european universities lulea vu-nl classified non-internet commercial links reliable internet links raw measurement data paper consists probe packets throughput samples traceroute results probe ron node independently repeated steps pick random node pick probe-type round-robin selection send probe node delay random time interval seconds characterizes paths analyze million packet departure arrival times collected hours march march produces million individual rtt one-way loss jitter data samples calculated time-averaged samples averaged -minute duration throughput samples mbyte bulk transfers seconds whichever sooner recording time power worth data duration transfer data collected hours consists million packet arrival departure times space constraints present path outage analysis performance failure results similar ron hosts intel celeron -based machines running freebsd ram disk space processing capability host bottleneck wide-area experiments measurement data http nms lcs mit ron overcoming path outages precisely measuring path outage harder possibility define outage length time packets path yardstick ranges time tcp implementations time shut connection vary seconds hosts study number samples averages large expect hosts continually present details documentation accompanying data solaris versions seconds bsds metric characterizes batch applications fail experience users running interactive applications lower threshold declaring internet connectivity dead problem small time-scale definition robustly measuring differentiating high packet loss rate true disconnections hard distributed applications suffer case assert operationally define path outage length time packet lossrate larger threshold define observed packet loss rate averaged interval larger path values order minutes measured larger degrades tcp performance orders magnitude forcing tcp frequent timeout-based retransmissions minute avg internet loss rate minute avg ron loss rate samples overlapping points internet loss line ron loss line figure packet loss rate averaged -minute intervals direct internet paths ron paths dataset points horizontal line points abovea including overlapping points contrast ron loss optimizing router avoided failures experienced -minute loss-rate larger ron route situations figure shows scatterplot improvement loss-rate averaged achieved ron measurements identify outages points line parallel horizontal axis signifies condition bad kill applications points line parallel vertical axis scatterplot conceals data lowerleft corner revisit data form cdf figure section precise number times equal shown table statistics obtained calculating -minute loss-rate averages -hour subset packet trace involving communication paths count ron win time-averaged loss rate internet loss rate ron change ron loss analogously defined find number complete communication outages dataset means instances sampled paths loss rate numbers table number link routing failures observed internet sampled paths number failures lower multiple -minute averaged samples loss rate result problem higher time-averaged loss rate resulted multiple link outages minutes emphasize internet paths improve non-internet connection performance fact vast majority problems corrected ron involved commercial internet connections shown brackets number outages remove internet paths consideration loss rate ron win change ron loss table outage data ron win means loss rate direct internet path ron loss rate numbers brackets show contribution total outage number 
eliminating typically reliable internet paths reflects public internet numbers percentage outages table noticeably higher showing variability path reliability internet today -minute samples samples loss rate ron win change ron loss table outage data results show ron offers substantial improvements large fraction outages infallible picking path lower outage rates ron outage detection path selection machinery successfully route outage situations revealing suggests outages edge links connecting site internet path diversity allowed ron provide connectivity outage situations overcome remaining due individual sites unreachable site ron situation ron made things worse loss direct direct outage ron packet success rate packet success rate minute avgs time cisco world cisco mit worst ron loss figure lower figure shows outage ciscoma places internet notch represents -minute loss rate sample notches horizontal axis bottom show -minute outage ron route outage cisco-ma packet loss rate mit unaffected time view data observe total path hours represented path-hours complete outage loss rate hours tcp-perceived outage loss rate ron routed situations similarly represents path-hours path-hours complete outage hours tcpperceived outage ron route path-hours complete outage ath-hours tcp-perceived outage amounting complete outages tcpperceived outages encountered numerous outages shorter duration typically minutes consistent bgp detection recovery time scales recover faster outage recovery figure shows -minute interval packets made cisco-ma internet notice notches horizontal axis lower figure ron sites site connectivity time mit ron detect successfully route packets cisco-ma commercial ron sites combination internet policy consideration single-hop indirection meant ron provide connectivity cisco-ma non-mit educational institutions paths cisco-maa mita cmu precluded policy valid paths cisco-maa mita nc-cablea cmu considered long overhead outage detection time implementation resilient forwarder adds rate direct path almost-partitioned site loss rate fraction samples difference ron non-ron loss rate latency loss tradeoffs improve loss rate loss optimized latency optimized figure cumulative distribution function cdf improvement loss rate achieved ron samples detect unidirectional loss averaged intervals microseconds latency packet delivery increases memory bandwidth required forward data overhead primarily due divert sockets obtain data envision untuned prototype high-speed links capable forwarding mbps frequency routing probing updates leads tradeoff overhead responsiveness path failure protocol shown figure ron probes node seconds random jitter toa extra seconds average time probes seconds probe returned seconds lost ron node sends routing update ron node seconds average implementation values seconds seconds seconds probe loss occurs probe packet immediately maximum quick probes consecutive probe losses path process detects outage minimum seconds scheduled probe outage occurs maximum seconds average outage detection time seconds sending packets node introduces potential failure coupling communicating nodes indirect node present ordinary internet communications avoid inducing outages nodes crashing offline ron responsive detecting failed peer recovering remote virtual-link failure indirect host destination requires indirect host detect virtual link failure send routing update assuming small transmission delays single remote virtual-link failure takes average additional amount time seconds average total seconds high packet loss rates internet paths hosts multiple virtual-link failures increase duration time detect failed path suggests passive monitoring in-use links improve single-virtual-link failure recovery case considerably traffic flowing virtual link treated probes ron probe packets bytes long probe traffic figure received node -node ron abouta bytes sec ron routing traffic bytes header information bytes information describe path peer node sees bytes sec routing traffic bandwidth consumed traffic ron sizes default timer intervals shown nodes nodes nodes nodes nodes kbps kbps kbps kbps kbps ron nodes kbps active probing overhead recovery seconds combining probing routing traffic delaying updates consolidate routing announcements sending updates virtual link properties change past threshhold reduce amount overhead traffic growth total traffic caused guarantee virtual links ron monitored overhead reasonable classes applications require recovery failures seconds kbps typically bandwidth today broadband internet links cost achieving benefits fault recovery ron developing techniques preserve recovery times consuming bandwidth handling packet floods measure recovery time controlled conditions evaluate effectiveness ron routing flood-induced outage conducted tests utah network emulation testbed intel piii mhz machines quiescent mbps switched ethernet intel etherexpress pro interfaces network topology emulated hosts connected triangle kbps latency links pair indirect routing node latencies made preferable direct path figure shows receiver-side tcp sequence traces bulk transfers leftmost trace uninterrupted tcp transfer finishes seconds middle trace shows transfer running ron flooding attack beginning seconds ron recovers quickly taking seconds reroute connection node connection proceeds consistent expectation recovery seconds rightmost trace horizontal dots shows non-ron tcp connection flooding attack tcp traffic slow rate bgp marked link analysis stability bgp congested networks suggests bgp recovery times order magnitude larger ron bgp route change simply end carrying flooding traffic links opinion overhead necessarily excessive packets today internet tcp acknowledgments typically tcp data segment overhead packets reliability congestion control similarly ron active probes viewed overhead achieve rapid recovery failures tcp sequence time successful tcp packet tcp flood tcp ron flood tcp figure receiver-side tcp sequence trace connection rerouted ron flooding attack primary link ron recovers seconds ron connection unable packets crawl link technically working flooding direction direction forward data traffic ron routed returning ack traffic flooded link bgp declared link dead eliminated perfectly usable reverse link experiment shows advantage independent client-specific nature ron dealing friendly traffic ron route avoid re-routing flooding traffic general bgp route change overcoming performance failures section analyze detail improvements loss-rate latency throughput provided ron mention higher-order improvements observed loss rate figure summarizes observed loss rate results previously shown scatterplot figure cdf ron improved loss rate time improvement loss rate absolute terms substantial applications tcp closer analysis found outage detection component ron routing instrumental detecting bad situations promptly triggering path figure shows ron improve performance tiny noticeable portion cdf left region showing ron make loss rates worse reasons ron longer-term average packet loss rate determine low-loss routes mispredict period link loss rates change importantly ron router bi-directional information optimize uni-directional loss rates instance found path mit cci highly asymmetric loss rate led significant improvements due ron mita cci path infrequent occurrences loss rate ccia mit path made worse ron modify loss-rate estimator explicitly monitor uni-directional loss rates samples experienced improvement loss rate latency fraction samples latency rondirect ron overhead increases latency fast paths ron improves latency tens hundreds slower 
paths figure -minute average latencies direct internet path ron shown cdf -min avg internet latency -min avg ron latency samples figure data figure dots line signify cases ron latency lower direct internet latency clustering banding samples shows latency improvements shown figure host-host pairs figure shows cdf five-minute-averaged roundtrip latency samples collected communicating paths bold ron line generally dotted internet line showing ron reduces communication latency cases additional hop user-level encapsulation ron improves latency tens hundreds milliseconds slower paths averaged samples improvements figure shows data scatterplot internet round-trip latencies direct internet paths points scatterplot clustered bands showing improvements achieved node pairs times shows improvements figure small number paths averaged samples improvements long outages ron find paths direct path non-existent eliminated samples tcp throughput ron improves tcp throughput communicating nodes cases ron throughput-optimizing router attempt detect change routes obtain small throughput underlying internet throughput stable paths seeks obtain improvement throughput ron path compare throughput-optimized ron path direct internet path repeatedly sequential throughput samples ron paths compared ratio average throughput achieved ron average throughput achieved directly internet figure shows distribution ratios paired quartets throughput samples received direct-path throughput ron samples doubled throughput fact samples increased throughput factor samples improved factor periods intermittent internet connectivity failures fraction samples ratio ron throughput direct throughput logscale increase ron samples decrease ron samples samples figure cdf ratio throughput achieved ron achieved directly internet shown samples ron markedly improved throughput near-outage conditions ron routing behavior instrumented ron node output link-state routing table seconds average random jitter avoid periodic effects analyzed -hour time-series trace individual snapshots table pairwise routes ron path lengths outage results show ron single-hop indirection worked avoiding problematic paths problem direct internet path nodes link highly congested working long ron node internet path internet path ron single-hop indirection suffice paths ron nodes traverse paths ron node traverse ron overcome outage intersection set nodes ron reachable traversing set nodes ron reached traversing null single-hop indirection overcome failure found underlying internet topology connecting deployed ron nodes redundancy faults occur solitary edge link connecting site internet intersection sets non-null noted section policy routing make links unusable consideration longer paths provide recovery single-hop indirection suffices latency-optimizing ron found comparing single-hop indirection general shortest-paths algorithm link-state trace direct internet path provided average latency time addition remaining time ron overlay routing involved shortest path involved intermediate node essentially time simple idealized model explanation source node destination node ron nodes denote probability lowest-latency path node node ron direct internet path similarly denote bya probability lowest-latency path node ron direct link connecting show small values probabilities independence assumptions justufiable ron nodes lead intermediate hop providing lowest-latency paths time probability single-intermediate ron path optimal latency direct path optimal happen nodes direct-internet shortest path implies probability direct path single-hop intermediate path optimal path case making probability close fact small values happen optimal path direct path intermediate ron hop probability made arbitrarily close suitable ron route stability dynamic measurement-based routing system ron creates potential instability route flapping simulated ron path selection algorithms link-state trace investigate route stability column table shows number path occurred function hysteresis triggering path change columns show persistence ron route obtained calculating number consecutive samples route remained unchanged average time samples seconds median run-length hysteresis seconds sampling frequency link-state information preclude undetected interim longer run-lengths reasonable stability good probability hysteresis values provide good trade-off stability responsiveness random process row shows expected number route routes flapping random application-specific path selection analyze effects no-internet policy considered latency optimization outage avoidance hysteresis avg med max random process table number path run-lengths routing persistence hysteresis values situations ron latencyloss- throughput-optimizing routers pick paths ron find lower-latency path cci ma-cable times loss rate cci ma-cable mit cisco-ma direct loss loss lat-opt loss loss loss-opt loss contrast mit cisco-ma ron latency optimizer made latency worse outage detector triggered frequently loss-optimizing router reduced loss rate significantly cost five-fold increase latency existence trade-offs frequently occur global internet lack single obvious optimal path reinforces belief flexible application-informed routing system benefit applications discussion section discusses common criticisms rons relating routing policy scalability operation network address translators nats firewalls ron creates possibility misuse violation aups bgp transit policies ron flexible policy mechanism users implement network policies permitted bgp rons deployed small groups cooperating entities find backdoors networks permission authorized user network users violate network policy today dealt human level remain unchanged ron deployment positive side overlay isp buys bandwidth traditional isps routes data ron express enforce sophisticated policy routes preventing misuse established ron requires cryptographic authentication access controls implemented participating ron implies trust participants forward data correctly abuse forwarding rons small consequences forming ron malicious entity resolved administrative technological level widespread deployment rons require mechanisms detect misbehaving ron peers design present scales nodes assert important distributed applications benefit corporation tens sites world greatly improve reachability sites ron-based vpn expensive dedicated links multi-person collaborations smaller hundred participants ron-based conferencing application provide availability performance participants potential criticism ron work limited settings start widely popular shown paper ron design trades scalability improved reliability enables aggressive maintenance exploration alternate paths facilitating prompt outage detection recovery rons popular expect fundamental trade-off change expect rons co-existing competing internet paths understanding interactions investigating routing stability internet rons area future work nats problems ron problem relates naming host nat globally reachable address dns solve problem cache reply address port pair host nat ron node receives packet address globally visible ron address globally visible address porta receiving node creates entry reach ron node send port ron probe traffic suffice nat port-mapping entry alive problem posed nats hosts nats communicate directly ron perceive outage attempt route establish connectivity hosts result sub-optimal routing conclusion paper showed resilient overlay network ron greatly improve reliability internet packet delivery detecting recovering outages path failures quickly current inter-domain routing protocols ron works deploying nodes internet routing domains cooperatively route packets ron applicationlayer overlay network nodes ron monitor quality underlying internet information route packets application-specified routing metrics direct internet path ron nodes studied benefits ron evaluating datasets collected sixteen-node wide-area deployment found ron overcome hundred significant observed outages implementation takes seconds 
average detect recover fault significantly minutes bgprons overcome performance failures substantially improving loss rate latency tcp throughput badly performing internet paths noteworthy finding experiments forwarding packets intermediate ron node sufficient fault recovery latency improvements results suggest ron good platform variety resilient distributed internet applications developed addition ron platform researchers developing routing protocols test evaluate schemes real-world conditions acknowledgments grateful people institutions hosted ron sites biesele bot chang cutler finley jung larzon mazieres miller north pohlabel van renesse sanders shira sit jay lepreau group utah network emulation testbed david karger discussions ron john jannotti david tennenhouse shepherd sosp reviewers provided comments improved paper andersen resilient overlay networks master thesis massachusetts institute technology balakrishnan seshan stemm katz analyzing stability wide-area network performance proc acm sigmetrics seattle june chandra dahlin gao nayate end-to-end wan service availability proc usits san francisco clark policy routing internet protocols internet engineering task force rfc collins detour framework packet rerouting master thesis washington oct eriksson mbone multicast backbone communications acm floyd handley padhye widmer equation-based congestion control unicast applications proc acm sigcomm stockholm sweden sept goyal guerin rajan predicting tcp throughput non-invasive data unpublished http seas upenn guerin tcp model pdf guardini fasano girardi ipv operational experience bone proc internet society inet conf yokohama japan july http isoc inet cdproceedings htm hagens hall rose internet subnetwork experimentation osi network layer internet engineering task force feb rfc khanna zinky revised arpanet routing metric proc acm sigcomm austin sept labovitz ahuja bose jahanian delayed internet routing convergence proc acm sigcomm stockholm sweden september labovitz malan jahanian internet routing instability ieee acm transactions networking mccanne jacobson bsd packet filter architecture user-level packet capture proc winter usenix conference san diego jan north american network operators group mailing list archive http cctec maillists nanog padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation proc acm sigcomm vancouver canada september partridge flow label field ipv internet engineering task force rfc paxson end-to-end routing behavior internet proc acm sigcomm stanford aug paxson end-to-end internet packet dynamics proc acm sigcomm cannes france sept postel transmission control protocol internet engineering task force september rfc rekhter border gateway protocol bgpinternet engineering task force rfc savage anderson detour case informed internet routing transport ieee micro jan savage collins hoffman snell anderson end-to-end effects internet path selection proc acm sigcomm boston seshan stemm katz spand shared passive network performance discovery proc usits monterey december shaikh kalampoukas varma dube routing stability congested networks experimentation analysis proc acm sigcomm stockholm sweden touch hotz x-bone proc global internet mini-conference sydney australia nov 
lab exercise configuring bgp peering encourage complete exercises practice skills configuring bgp interconnect networks protocol objective configure bgp configuration scenario requirements requirements configure router initial requirements performed lab prepare addressing requirement network subnets subnetting table page lab exercise configure ethernet serial interface instructed address initial scenario bgp protocol autonomous system peering asn scenario configuring bgp protocol ospf routers connectivity scenario internal bgp peering configure routers run bgp protocol internal network address group provide address routers connectivity re-subnet smaller subnets create subnet point-to-point connection subnet router network group group configure loopback interface assign address group group group asn run bgp inside network group group test configuration verify working ibgp network lab setup verify configuration routing process working properly typing commands show route check routing table bgp show bgp table bgp summary check bgp peering summary bgp neighbour check neighbour list group group configure router sample configuration configuring router internal bgp peering setting router hostname follow steps made lab exercise setting router hostname setting router serial interface privilege mode type commands applies router interface dce cable router configure terminal router config interface serial router config-if clock rate router config-if address router config-if shutdown enable interface setting router ethernet interface privilege mode type commands router configure terminal router config interface ethernet router config-if address router config-if shutdown enable interface configuring internal bgp peering corporate lan corporate lan serial address serial address type router bgp command router user exec mode configure bgp protocol note assigned asn group router configure terminal router config router bgp asn router config-router network network number mask network mask router configure terminal config router bgp config-router network mask network subnet announce peer config-router neighbour remote-as router asn loopback address router configure terminal config router bgp config-router network mask network subnet announce peer config-router neighbour remote-as router asn loopback address verify configuration routing process working properly typing commands show bgp summary check bgp summary table bgp neighbour check neighbour list route check routing table bgp announcement view configuration type show config terminal show run loopback address loopback address ebgp network lab setup verify configuration routing process working properly typing commands show route check routing table bgp show bgp table bgp summary check bgp peering summary bgp neighbour check neighbour list scenario external bgp peering configure routers run bgp protocol autonomous network address group provide address routers connectivity re-subnet smaller subnets create subnet point-to-point connection subnet router network configure loopback interface assign address select asn router belonging group configure bgp protocol routers configure ibgp establish bgp external peers configure neighbor peering select correct asn peers note establish external peering routers peer serial address bgp neighbor configuration peering ethernet test configuration verify working configure router sample configuration configuring router external bgp peering setting router hostname follow steps made lab exercise setting router hostname setting router serial interface privilege mode type commands applies router interface dce cable router configure terminal router config interface serial router config-if clock rate router config-if address router config-if shutdown enable interface setting router ethernet interface privilege mode type commands router configure terminal router config interface ethernet router config-if address router config-if shutdown enable interface configuring external bgp peering setting address routers configure bgp corporate lan corporate lan serial address serial address loopback address loopback address type router bgp command router user exec mode configure ospf route note group number process student configure terminal student config router bgp asn student config-router network network number mask network mask router configure terminal config router bgp config-router network mask network subnet announce peer config-router neighbour remote-as router asn serial address router configure terminal config router bgp note config-router network mask network subnet announce peer config-router neighbour remote-as router asn serial address verify configuration routing process working properly typing commands show bgp summary check bgp summary table bgp neighbour check neighbour list route check routing table bgp announcement view configuration type show config terminal show run combining ospf bgp network lab setup verify configuration routing process working properly typing commands show route check routing table bgp show bgp table bgp summary check bgp peering summary bgp neighbour check neighbour list scenario ospf bgp configure routers run ospf bgp protocol run network address group provide address routers connectivity re-subnet smaller subnets create subnet point-to-point connection subnet router network configure loopback interface assign address select asn router belonging group configure bgp protocol routers configure ibgp establish bgp external peers configure neighbor peering select correct asn peers note establish external peering routers peer serial address bgp neighbor configuration peering ethernet test configuration verify working configure router sample configuration configuring router ospf bgp routing setting router hostname follow steps made lab exercise setting router hostname setting router serial interface privilege mode type commands applies router interface dce cable router configure terminal router config interface serial router config-if clock rate router config-if address router config-if shutdown enable interface setting router ethernet interface privilege mode type commands router configure terminal router config interface ethernet router config-if address router config-if shutdown enable interface configuring ospf bgp setting address routers configure ospf bgp sample configuration ospf configuration router configure terminal corporate lan corporate lan serial address serial address loopback address loopback address router config router ospf process router config-router network network number ospf wildcard bits area bgp configuration router configure terminal router config router bgp asn router config-router network network number mask network mask router ospf configuration configure terminal config router ospf serial interface network config-router network area ethernet interface network config-router network area loopback interface network config-router network area bgp configuration configure terminal config router bgp config-router network mask network subnet announce peer config-router neighbour remote-as router asn serial address router ospf configuration configure terminal config router ospf serial interface network config-router network area ethernet interface network config-router network area loopback interface network config-router network area bgp configuration configure terminal config router bgp note config-router network mask network subnet announce peer config-router neighbour remote-as router asn serial address verify configuration routing process working properly typing commands show route check routing table ospf neighbour check neighbour list ospf database check database summary 
list show bgp summary check bgp summary table bgp neighbour check neighbour list route check routing table bgp announcement save configuration view configuration type show config terminal show run subnetting table number bits borrowed host portion subnet mask effective subnets number hosts subnet number subnet mask bits 
introduction itlab learn lab overview equipment saving data editor navigate linux utilities network monitoring tcpdump ethereal copyright liebeherr rights reserved lab itl lab page spring table contents prelab lab setup lab tour equipment part saving data part copying files floppy disks part editor part unix operating system part locating configuration files linux part ping part basics tcpdump part basics ethereal checklist form itlab feedback form itlab itl lab page spring prelab review unix commands workstations itl run linux operating system assignment asks review important unix commands find online manual pages man pages http freebsd cgi man cgi change version freebsd -release red hat linux commands type command search term search return man page read commands man pwd mkdir rmdir chmod kill happen type man man linux command find size file lilo conf command determine processes running system command files names file file type file file option issue warning situation command issue directory copy file mydata directory labdata command kill pid pid number process type command directory read manual pages unix commands ping tcpdump editor familiarize text editor compared editors primitive editors work unix systems read tutorial http virginia itlab labs vi-guide html print copy quick guide http virginia itlab labs vi-reference pdf bring guide lab purposes copy file http virginia itlab labs vitest-ifcfg unix account editor perform file print final result add line delete line copy lines add end file itl lab page spring change occurrences ethereal tool ethereal powerful network analyzer website http ethereal read introduction manual pages ethereal bring lab copy guide lab answers questions result file question itl lab page spring lab vintpc vintpc vintpc ethernet hub vintpc vintpc vintpc figure configuration lab pcs connected single ethernet hub setup lab pcs connected single ethernet segment shown figure baset ethernet machines connected single hub addresses pcs configured vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc address ethernet interface cards lab ethernet interface card addresses names vintpc itl lab page spring tour equipment overview equipment lab instructor give overview equipment lab itlab internet machines itlab isolated internet experiments itl interfere network pcs unix lab computers pcs run linux machines windows installed login pcs root user rootroot password working directory directory labdata save data directory started lab session reboot machine issue command reboot part saving data lab exercises asked save data displayed monitor file exercise familiarize methods save data file note create file place file directory labdata note purge files lab session redirection operators unix operating systems easy redirecting output command file redirection operators itl lab page spring syntax command filename output command written filename file created doesn exist previous contents overwritten file exist command filename operator appends output command end supplied file viewing saving data time view data save data file time accomplished tee command syntax command tee filename output command displayed monitor written filename file created doesn exist previous contents overwritten file exists copy paste feature copy paste features x-windows copy data file select text copy highlighting left mouse button open file place cursor desired position screen enter insert working mode click left mouse buttons time paste selected text exercise methods save data save output command file named etcfiles check-off part itl lab page spring part copying files floppy disks simple save data copy data floppy disk ms-dos formatted floppy disk linux commands execute ms-dos file operations list important commands refer man pages detailed information mcd ms-dosdirectory change working directory ms-dos disk mcopy file file mcopy file dir copy ms-dos files unix mdel ms-dosfile ms-dosfiles delete multiple ms-dos file mdeltree ms-dosdirectory remove directory files subdirectories ms-dos file system mdir msdirname display contents ms-dos directory mformat drivename format dos floppy disk adds ms-dos file system low-level formatted floppy disk mmd ms-dosdirectory make ms-dos subdirectory mmove sourcefile targetdirectory move rename ms-dos file subdirectory mtype file displays contents file file exercise commands copy file etcfiles exercise floppy disk run command obtain list file systems mounted system save output command file write file floppy disk check-off part itl lab page spring part editor editor display oriented interactive text editor user create modify store files computer terminal editor found virtually unix based systems learning helpful refer guide obtained prelab complete exercises exercise command tmp bash profile labdata bash profile make copy file bash profile modify file labdata bash profile reflect execute command labdata bash profile add directory labdata environment variable path delete comment lines empty lines update lines bashrc bashrc lines bashrc bashrc echo find initial script file change occurrences bashrc profile check-off part itl lab page spring part unix operating system basic unix commands summarized man pages detailed description man displays on-line manual pages command man displays manual pages command pwd displays current working directory lists contents current directory file displays contents file file press space bar page press back press quit file file rename file file file removes file file mkdir dir creates directory named dir rmdir dir removes directory dir current directory directory file file copies content file file file file dir copies file file directory dir lists running processes column output command process number pid processes kill pid terminates process process number pid ctrl-c pressing keyboard sequence ctrl-c terminates running job finished ctrl-z ctrl-z halts current process resumes process background process exercise review commands familiar unix command check-off part itl lab page spring part locating configuration files linux unix operating systems linux number configuration files set environment variables system set linux machine router change single line configuration files studying configuration files learning network configuration options labs work redhat popular linux distribution redhat runs linux kernel version listed important configuration files redhat important modify configuration files asked lab exercise inconsiderate configuration files render machine useless note configuration files fundamentally versions unix operating system aix solaris linux freebsd structure configuration files releases unix version configuration files linux distributions redhat slackware configuration files versions unix distribution configuration files freebsd freebsd fundamental differences sysconfig network file defines global parameters network configuration hostname domain address hostname type network interfaces called device default gateway includes 
line decide machine acts router sysconfig network-scripts ifcfg-lo sysconfig network-scripts ifcfg-eth sysconfig network-scripts ifcfg-eth files define configuration network interfaces configuration file network interface files ifcfg-eth ifcfg-eth installed ethernet itl lab page spring interface cards file ifcfg-lo loopback interface hostname file host hosts file specifies mapping symbolic names addresses network devices sysconfig static-routes file settings static routing table booting machine exercise explore files editor make files files edited change host machine vintpc machine files include information machine performs forwarding save file sysconfig network-scripts ifcfg-eth lab report include answers questions exercise file saved exercise explain meaning variables settings check-off part itl lab page spring part ping simple effective tools debug networks ping utility ping utility tests host reachable technically ping command sends icmp echo request datagram interface expects icmp echo reply datagram return syntax ping flag address note linux ping sending packets interrupt command ctr-c list ping command read man pages detailed explanation ping count stop sending receiving count icmp packets flood ping outputs packets fast back hundred times whichever wait wait wait seconds sending packets numeric output symbolic names hosts record route records traversed nodes displays route addresses size send size number data bytes default display verbose output icmp packets received listed echo response exercise send ping message neighboring machines collect output file ping configured local ethernet interface loopback interface collect output file notice difference itl lab page spring lab report include measurements exercise explain difference pinging local ethernet interface loopback interface completed lab send ping messages number web servers internet collect statistics maximum round-trip delay icmp echo request reply order avoid overloading destination send ping packets machine note ping disabled unix machines case windows machine run ping ms-dos window include measurement data lab report find machine long round-trip time check-off part itl lab page spring part basics tcpdump tcpdump powerful tool network monitoring data acquisition program capture traffic network tcpdump print headers packets network interface match expression tcpdump track network problems monitor network activities exercise tcpdump tool closer network traffic generated ping messages measuring traffic address machine left-hand neighbor address ipneighbor type tcpdump host ipneighbor open window execute ping ipneighbor observe output tcpdump capture output file lab report include measurements lab report explain meaning field captured data exercise perform experiments send ping non-existing address send ping broadcast address command ping capture output ping measurements network traffic tcpdump lab report include measurements lab report interpret results machines respond broadcast ping check-off part itl lab page spring part basics ethereal ethereal visual network protocol analyzer unix windows examine data live network previously saved capture file disk ethereal read libcap capture files created tcpdump ethereal interactively capture browse network traffic view summaries detailed information packet note tcpdump ethereal itl labs exercise exercise walks steps capturing saving network traffic ethereal tool starting ethereal simply type ethereal selecting capture options display options select automatic scrolling live capture unselect enable resolution capture start select capture packets promiscuous mode select update list packets real time select automatic scrolling live capture unselect enable resolution select eth interface select infinite count type host ipneighbor filter box ipneighbor address right-hand neighbor machine capturing traffic separate window execute ping ipneighbor observe output ethereal click highlight captured packet ethereal window view headers captured traffic stopping traffic capture click stop ethernet capture itl lab page spring saving captured packets file file print save captured data plain text file select plain text file format save captured data postscript file select postscript print select file select print detail expand levels type file save file executes save operation save file floppy disk lab report include file captured data lab report describe difference files saved tcpdump part ethereal part check-off itl lab page spring checklist form itlab complete check list work laboratory exercises hand form teaching assistant leave names print turn-in prelab write prelab check-off part check-off part check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet check-off part don forget copy results floppy disk note lab machines reset 
lab exercise configuring bgp peering encourage complete exercises practice skills configuring bgp interconnect networks protocol objective configure bgp configuration scenario requirements requirements configure router initial requirements performed lab prepare addressing requirement network subnets subnetting table page lab exercise configure ethernet serial interface instructed address initial scenario bgp protocol autonomous system peering asn scenario configuring bgp protocol ospf routers connectivity scenario internal bgp peering configure routers run bgp protocol internal network address group provide address routers connectivity re-subnet smaller subnets create subnet point-to-point connection subnet router network group group configure loopback interface assign address group group group asn run bgp inside network group group test configuration verify working ibgp network lab setup verify configuration routing process working properly typing commands show route check routing table bgp show bgp table bgp summary check bgp peering summary bgp neighbour check neighbour list group group configure router sample configuration configuring router internal bgp peering setting router hostname follow steps made lab exercise setting router hostname setting router serial interface privilege mode type commands applies router interface dce cable router configure terminal router config interface serial router config-if clock rate router config-if address router config-if shutdown enable interface setting router ethernet interface privilege mode type commands router configure terminal router config interface ethernet router config-if address router config-if shutdown enable interface configuring internal bgp peering corporate lan corporate lan serial address serial address type router bgp command router user exec mode configure bgp protocol note assigned asn group router configure terminal router config router bgp asn router config-router network network number mask network mask router configure terminal config router bgp config-router network mask network subnet announce peer config-router neighbour remote-as router asn loopback address router configure terminal config router bgp config-router network mask network subnet announce peer config-router neighbour remote-as router asn loopback address verify configuration routing process working properly typing commands show bgp summary check bgp summary table bgp neighbour check neighbour list route check routing table bgp announcement view configuration type show config terminal show run loopback address loopback address ebgp network lab setup verify configuration routing process working properly typing commands show route check routing table bgp show bgp table bgp summary check bgp peering summary bgp neighbour check neighbour list scenario external bgp peering configure routers run bgp protocol autonomous network address group provide address routers connectivity re-subnet smaller subnets create subnet point-to-point connection subnet router network configure loopback interface assign address select asn router belonging group configure bgp protocol routers configure ibgp establish bgp external peers configure neighbor peering select correct asn peers note establish external peering routers peer serial address bgp neighbor configuration peering ethernet test configuration verify working configure router sample configuration configuring router external bgp peering setting router hostname follow steps made lab exercise setting router hostname setting router serial interface privilege mode type commands applies router interface dce cable router configure terminal router config interface serial router config-if clock rate router config-if address router config-if shutdown enable interface setting router ethernet interface privilege mode type commands router configure terminal router config interface ethernet router config-if address router config-if shutdown enable interface configuring external bgp peering setting address routers configure bgp corporate lan corporate lan serial address serial address loopback address loopback address type router bgp command router user exec mode configure ospf route note group number process student configure terminal student config router bgp asn student config-router network network number mask network mask router configure terminal config router bgp config-router network mask network subnet announce peer config-router neighbour remote-as router asn serial address router configure terminal config router bgp note config-router network mask network subnet announce peer config-router neighbour remote-as router asn serial address verify configuration routing process working properly typing commands show bgp summary check bgp summary table bgp neighbour check neighbour list route check routing table bgp announcement view configuration type show config terminal show run combining ospf bgp network lab setup verify configuration routing process working properly typing commands show route check routing table bgp show bgp table bgp summary check bgp peering summary bgp neighbour check neighbour list scenario ospf bgp configure routers run ospf bgp protocol run network address group provide address routers connectivity re-subnet smaller subnets create subnet point-to-point connection subnet router network configure loopback interface assign address select asn router belonging group configure bgp protocol routers configure ibgp establish bgp external peers configure neighbor peering select correct asn peers note establish external peering routers peer serial address bgp neighbor configuration peering ethernet test configuration verify working configure router sample configuration configuring router ospf bgp routing setting router hostname follow steps made lab exercise setting router hostname setting router serial interface privilege mode type commands applies router interface dce cable router configure terminal router config interface serial router config-if clock rate router config-if address router config-if shutdown enable interface setting router ethernet interface privilege mode type commands router configure terminal router config interface ethernet router config-if address router config-if shutdown enable interface configuring ospf bgp setting address routers configure ospf bgp sample configuration ospf configuration router configure terminal corporate lan corporate lan serial address serial address loopback address loopback address router config router ospf process router config-router network network number ospf wildcard bits area bgp configuration router configure terminal router config router bgp asn router config-router network network number mask network mask router ospf configuration configure terminal config router ospf serial interface network config-router network area ethernet interface network config-router network area loopback interface network config-router network area bgp configuration configure terminal config router bgp config-router network mask network subnet announce peer config-router neighbour remote-as router asn serial address router ospf configuration configure terminal config router ospf serial interface network config-router network area ethernet interface network config-router network area loopback interface network config-router network area bgp configuration configure terminal config router bgp note config-router network mask network subnet announce peer config-router neighbour remote-as router asn serial address verify configuration routing process working properly typing commands show route check routing table ospf neighbour check neighbour list ospf database check database summary 
list show bgp summary check bgp summary table bgp neighbour check neighbour list route check routing table bgp announcement save configuration view configuration type show config terminal show run subnetting table number bits borrowed host portion subnet mask effective subnets number hosts subnet number subnet mask bits 
configuring commercial router learn lab setup commercial router cisco copyright liebeherr rights reserved lab itl lab page spring table content prelab lab setup lab part connecting serial console port part command modes ios part ios commands display current status part ios commands set address part setting static routing table entries part ios commands postlab checklist lab feedback form lab itl lab page spring prelab lab work cisco routers cisco web page cisco find types number interfaces cisco router provide description interfaces cisco routers vintlab running ios version operating system read ios http cisco univercd doc product software ios index htm web page answer questions routing protocols supported ios briefly describe online feature ios user interface works command disables forwarding cisco router command change mtu maximum transmission unit cisco router unix utility called kermit lab connect pcs cisco routers sentences describe kermit list major features kermit program kermit webpage http columbia kermit find information difference null-modem cable called cross-over roll-over cable straight serial cable differentiate cisco web site wealth information http cisco warp public visit web site explanation http freebsd handbook term html website http cisco univercd doc product software ios cbook cintrfc htm read network interfaces cisco routers answer question command begin configuring hssi interface high speed serial interface cisco router assume interface port slot deliverables answer problems turn answers beginning lab itl lab page spring lab lab configure cisco series router access routers console ports terminal emulation software kermit pcs access console ports router pcs study topology figure vintpc vintpc vintpc hssi fsi fddi itl- itl- itl- hssi fsi fddi hssi fsi fddi figure network topology routers note lab cisco routers involved work groups break group work shifts setup lab machine connected dedicated router serial cable connection connector router end cisco routers end connection note serial interface routers connected point-to-point links point-to-point links hssi fsi fddi ethernet itl lab page spring part connecting serial console port couple minutes study router connected table guideline connect correct router computer router vintpc itl- vintpc itl- vintpc itl- exercise identify router machine connected make connection cable supplied lab instructor serial interfaces select exercise connecting router kermit follow guidelines establish terminal connection console port router terminal console type commands access console port directly connected router run kermit program machine command prompt type kermit brings prompt similar root c-kermit step select communication device interface connect router direct serial connection router select serial interface make physical connection device names serial interfaces cua interface cua interface set line command select correct device set line dev cua set line dev cua connect device issuing command connect itl lab page spring connection successful command prompt user exec prompt router router-name state run small set commands telnet ping trace view change configuration router enter privileged exec mode covered check prompt itl lab page spring part command modes ios part perform number simple exercises cisco routers goal exercises make familiar configuration commands cisco series routers cisco operating system cisco internetwork operating system ios routers minor version differences common standard command language routing equipment work routers company nortel lucent learn command language ios interface similar unix dos command shell type commands prompt notable difference ios set command modes functions configuring network interface performed specific command mode part lab presents command modes ios learn enter leave modes refer figure table summary ios command modes command modes user exec mode user mode entering user mode requires login password accessing router console port login password required mode limited number commands executed configuration parameters read modified privileged exec mode enable mode similar root privileges unix machine entering privileged exec mode requires password state read configuration files reboot router configure parameters router proceed privileged exec mode global interface configuration modes global configuration mode mode global system parameters modified interface configuration mode parameters specific interface modified ios commands command mode typing question mark list commands options itl- lists commands time itl- configure lists arguments configure command part lab walk command modes mode type obtain list commands mode save results file itl lab page spring global configuration mode config privileged exec mode sub-configuration mode config-if configuration command enable disable ctrl-z end exit interface type number exit global config command configure term logoff login access console port user exec mode logged exit ctrl-z end exit figure ios command modes mode usage enter mode leave mode prompt user exec basic commands change system parameters ping telnet traceroute telnet address router requires terminal password direct serial connection console port require password exit router-name privileged exec set operating parameters permission enter global configuration mode enable requires additional enable password disabl router-name global configuration change system wide configuration parameters enter interface configuration mode configure term ctrl-z router-name config interface configuration modify configuration interface note mode enabled separately interface interface type number interface fddi exit router-name config-if table summary command modes usage itl lab page spring user exec mode user mode completed part logged router user mode command prompt so-called user exec prompt router-name router-name assigned router itl- lab manual logoff typing itl- exit commands execute user mode prompt change configuration parameters run commands similar unix commands ping telnet trace complete list command user mode typing itl- itl lab page spring privileged exec mode enable mode order change configuration router system administrator mode similar root unix system cisco ios mode called privileged exec mode enable mode connecting system change privileged mode typing itl- enable system password privileged mode password enable secret enable password provide password login successful command prompt itl- state query set operation configuration router leave privileged exec mode typing itl- disable logoff completely typing itl- exit complete list commands typing itl- exercise run commands displaying configuration system save output obtain list interfaces system typing write term display information interfaces system typing show interfaces display list fddi interfaces command show interfaces fddi display information single interface router hssi interface slot port typing command show interfaces hssi display routing table command show route find command display show protocol statistics save output reboot router command reload observe output router restarts itl lab page spring global configuration 
mode modify system wide configuration parameters addresses routing algorithms routing table global configuration mode enter configuration mode privileged exec mode typing itl- configure terminal argument terminal tells router entering configuration commands terminal console alternatives configure network configure memory command prompt global configuration mode itl- config type global configuration commands add remove routing table entries setting routing table entries commands workstations route destination address hop address adds route network gateway address destination address gateway hop address leave global configuration mode typing ctrl-z itl- config complete list command typing itl- exercise add routing table entry successful itl lab page spring interface configuration mode modify configuration parameters specific interface enter interface configuration mode global configuration mode enter mode cisco routers interfaces fddi fiber distributed data interface atm asynchronous transfer mode hssi high-speed serial interface fsi fast serial interface fast ethernet ethernet mbps mbps ethernet configure interface routers slot port number addition interface routers support types interfaces slot multiple interfaces type slot port numbers note interface names cisco routers interfaces structure type slot port examples ethernet atm hssi interpretation interface ethernet ethernet interface interface card interface card inserted slot number router interface card ethernet interfaces identified port number interface ethernet interface port enter interface configuration mode interface enter keyword interface interface routers enter configuration mode hssi port slot type itl- config interface hssi interface configuration mode prompt itl- config-if type commands configure interface complete list commands typing itl- config-if enable disable interfaces itl- config-if shutdown itl lab page spring enables interface itl- config-if shutdown disables interface return global configuration mode typing itl- config-if exit note interface configuration mode specific interface type global configuration command reenter global configuration mode exercise exercise displayed list interfaces router show interfaces back list verify identify names locations slot port number interfaces router refer topology shown figure task identify interfaces connected point-to-point links shown figure lab instructor write names interfaces connected groups consistent view interface router itl- connects interface router itl- interface router itl- connects interface router itl- interface router itl- connects interface router itl- lab report include measurements exercise discuss results check part itl lab page spring part ios commands display current status important commands execute cisco router display status router privileged exec mode execute commands write terminal display current configuration show interfaces display details configuration interfaces show configuration display startup configuration show route display current routing table show protocols lists protocols running system interfaces protocol configured version ios cisco replacing commands write terminal show config intuitive commands show running-config replaces write terminal show startup-config replaces show config cisco routers versions work exercise execute commands show configuration show protocols save results file lab report include saved data discuss output check part itl lab page spring part ios commands set address set change address interface enter interface configuration mode interface configure hssi interface routers case interface slot port enable configure term interface hssi set address syntax address exercise perform operations setup addresses routers configure interfaces routers connected routers assign addresses router interface configure address itl- interface connected itl- itl- interface connected itl- itl- interface connected itl- itl- interface connected itl- itl- interface connected itl- itl- interface connected itl- netmask configurations commands learned experiment save data shows setup configured interface itl lab page spring important make fddi hssi cables connected correct interfaces trace equivalent traceroute unix systems command send packet routers routers configured communicate save output trace command file lab report include saved data discuss output check part itl lab page spring part setting static routing table entries configuration mode add remove routing table entries setting static routing table entries unix commands command route destination address hop address adds route network gateway address destination address gateway hop address command route destination address hop address deletes route routing table exercise setup static routing table entry result routing loop ensure command trace successful set entry routing table router subnet router isn directly connected set routing table destination network hop router router itl- itl- itl- router itl- itl- itl- router itl- itl- itl- commands learned part lab save content routing table modification display modified routing table save output send packet network packet run loop traceroute non-existing host trace save output loop lab report include saved data discuss output describe purpose commands interface configuration mode description bandwidth mac-address reset made lab remove routing table entries disable interfaces check itl lab page spring part ios commands postlab lab report part explain ios commands command arguments shown italics write memory copy running-config startup-config show version shutdown shutdown show startup-config show terminal show protocols show running config show processes cpu show route show protocols show ospf show interfaces show flash show environment show clock show config router rip router ospf router igrp router eigrp reload quit resume passive interface network net network net login logout rip send receive version rip send receive version route netaddr netmask route netaddr netmask domain lookup domain lookup itl lab page spring interface int-name hostname hostname exit end disable copy startup-config running-config copy running-config startup-config copy bandwidth bandwidth itl lab page spring checklist lab complete check list work laboratory exercises hand form lab instructor leave names print turn-in prelab write prelab check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet don forget copy results floppy disk lab machines reset lab itl lab page spring feedback form lab complete feedback form end lab hand form lab instructor leave feedback anonymous put form exercise record difficulty grade degree difficulty range easy difficult interest level grade level interest completing exercise range low interest high interest time time complete part lab difficulty interest level time minutes part setting network topology part configuring network interfaces part ios commands display current status part ios commands set address part setting routing table entries answer questions lab dislike lab make suggestion improve lab 
single segment networks learn lab capture filter network traffic configure network interface networking access statistics settings netstat command arp works hackers snoop passwords network copyright liebeherr rights reserved lab itl lab page spring table content prelab lab setup lab part details tcpdump part details ethereal part arp address resolution protocol part netstat command part configuring interfaces part static mapping addresses domain names part experiment ftp telnet checklist form lab feedback form lab itl lab page spring prefab network commands unix online manual pages http freebsd cgi man cgi select version red hat linux read manual pages commands arp ifconfig netstat write syntax ifconfig command sets hardware address interface eth netmask tcpdump http freebsd cgi man cgi select red hat linux read manual pages tcpdump manual pages answer questions syntax tcpdump command collects icmp packets destination address assume interested capturing telnet packets destined address port telnet port command correct tcpdump host dst port provide correct syntax hardware interfaces identified device number eth fddi write syntax tcpdump command collects packets host host interface eth ethereal website http ethereal read introduction manual pages ethereal read capture filters display filters command line options assigned starting ethereal command capture filters capture filter specifies traffic captured ethereal tool capture filter set command line option filter expression capture start window ethereal syntax filter expression syntax tcpdump display filters default ethereal displays captured packets display filter packets meet requirements filter displayed display filter set command line syntax setting display filter syntax setting capture filter itl lab page spring setting interface command line option interface sets network interface data captured interface selected capture start window starting ethereal write syntax ethereal command default collects packets source destination address interface eth write syntax display filter selects packets destination address frame sizes greater bytes write syntax display filter selects tcp packets destination address tcp port number unix exercises login machine unix account netstat netstat unix account save results arp display arp cache machine logged save results deliverables answer problems turn answers beginning lab itl lab page spring lab vintpc vintpc vintpc ethernet hub vintpc vintpc vintpc figure configuration lab pcs connected single ethernet hub setup lab pcs connected single ethernet segment shown figure machines connected single hub addresses pcs configured vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc vintpc itl vintpc notation means address network prefix bits long network prefix bits corresponds netmask set netmask machines network itl lab page spring part details tcpdump acquainted tcpdump lab lab explore tcpdump detail lab firm grasp tcpdump functions exercise saving tcpdump output file view output tcpdump save output file time command tcpdump tee filename tcpdump filename tail filename start tcpdump capture syntax ping command ping ipneighbor verify output tcpdump saved file exercise measurement experiment icmp experiment explore type code field icmp packets identify function performed icmp packet task identify type code fields icmp echo request icmp echo reply messages save measurements file needed lab report start measurements execute tcpdump command prints icmp packets hexadecimal format tcpdump host ipneighbor proto icmp ipneighbor address called neighbor window ping neighbor observe output typing ping ipneighbor itl lab page spring recall ping packet host triggers transmission icmp echo request ping host responds icmp echo reply packet output tcpdump identify content type code field icmp echo reply icmp echo request packets hint icmp packets encapsulated datagrams skip bytes header icmp data lab report provide discussion results measurement exercise write tcpdump command captures tcp segments sequence numbers equal acknowledgement numbers destination address check-off itl lab page spring part details ethereal introduced ethereal lab compared tcpdump ethereal powerful mechanisms monitor analyze network traffic lab run experiments ethereal exercise simple measurement experiment exercise learn view ethereal output save libpcap type file reused tcpdump ethereal off-line analysis start ethereal set capture display options lab table selecting capture options ethereal display options select automatic scrolling live capture unselect enable resolution capture start select capture packets promiscuous mode select update list packets real time select automatic scrolling live capture unselect enable resolution select eth interface select infinite count table capture options ethereal lab type host ipneighbor filter box ipneighbor address neighbor machine start capturing process window ping neighbor machine ping ipneighbor stop capture process save results capture choosing save file menu default saved file libpcap capture file libcap files format read tcpdump ethereal measurements saved libcap format replayed time libcap files plain text files recall save data captured ethereal plain text file print menu itl lab page spring exercise working display filters experiment learn view saved capture file display filters start ethereal set display options table open file saved captured data exercise select filter button set display filter enter filter string dst ipneighbor set filter flt set filter give filter clicking saves display filter click apply apply filter current capture file observe display pane save display plain text file floppy disk repeat exercise display filter includes packets source address ipneighbor save results floppy disk exercise complex capture display filters exercise learn complicated filters restrict packets captured displayed run ethereal command start capture traffic settings exercise window execute command ping ipneighbor time start telnet session window typing telnet ipneighbor ipneighbor machine log root logged successfully log stop traffic capture apply display filters captured traffic display traffic icmp packets address itl lab page spring ipneighbor destination address source address addr ipneighbor icmp display traffic traffic address ipneighbor destination address source address addr ipneighbor tcp display traffic addition constraints previous bullet port number set addr ipneighbor tcp tcp port lab report include measurement exercise exercise captured traffic displayed subset display filters alternative approach set capture filters desired data collected ethereal write capture filters ethereal constraints display traffic icmp packets address ipneighbor destination address source address display traffic traffic address ipneighbor destination address source address display traffic addition constraints previous bullet port number set check-off itl lab page spring part arp address resolution protocol host transmits datagram datagram passed data link layer datagram encapsulated frame ethernet frame transmitted data link layer local area networks lan ethernet fddi work -byte mac addresses addresses 
address translation required converts address destination mac address destination address resolution protocol arp protocol performs translation host local area network maintains arp table entries form address mac address commands view edit arp table arp displays content arp table arp ipaddress deletes entry address ipaddress arp hostname mac address add entry arp table mac address entered hexadecimal bytes separated colons exercise simple experiment arp view arp table arp delete entries determine address machine left neighbor address ipneighbor type ethereal host ipneighbor single ping ipneighbor ping ipneighbor observe arp packets mac addresses captured ethereal run arp save results ethereal plain text file destination mac address arp request identify ethernet frame type field itl lab page spring exercise observe perform arp request non-existing host start ethereal capture filter listens packets address machine ethereal host youripaddress telnet note address exist save output ethereal plain text file pay attention time difference arp requests issued machine determine rules determine timing arp requests lab report measurements exercises discussion operations arp describe algorithm arp determine time repetitions unsuccessful arp request arp requests transmitted packets explain answer check-off itl lab page spring part netstat command command netstat displays status information network configuration output netstat dependent options netstat netstat displays information interfaces machine netstat netstat displays routing table netstat displays information tcp udp ports netstat displays statistics networking protocols exercise options netstat capture output save output floppy disk answer questions interfaces machine mtus address default router machine error rate rate collisions ethernet interface datagrams icmp packets udp packets tcp packets computer transmitted received rebooted lab report include output netstat include answers questions check-off itl lab page spring part configuring interfaces ifconfig command configure parameters network interfaces including enabling disabling interfaces setting address ifconfig command run system boots case parameters read file recall redhat configuration files network interfaces sysconfig network-scripts ifcfg-eth ifconfig command large number options ifconfig ifconfig display state interfaces ifconfig eth option disables interface eth change address disable interface ifconfig eth netmask broadcast assigns interface eth address netmask interface network bring interface broadcast address eth set exercise run ifconfig interpret output save output floppy disk verify interpret output lab instructor questions exercise explore netmask ifconfig assigns default address configuring address netmask disable interface command ifconfig interfacename configure interface command ifconfig interfacename ipaddress ipaddress listed setup beginning lab itl lab page spring run ifconfig save output floppy observe netmask interface explain ifconfig assigned netmask hint netmask derived class address exercise duplicate addresses experiment rename addresses machines renaming result duplicate addresses network change address ethernet interface system vintpc vintpc vintpc vintpc vintpc vintpc delete entries arp cache capture network traffic machine ethereal host youripaddress save output floppy ping broadcast address arp cache ethereal measurements find machines respond broadcast ping note duplicate addresses machines respond arp request explain outcome telnet machine address system write machine telnet session explain telnet connection established machine duplicate address lab report include measurements exercises discuss results include explanations questions raised reset address machine check-off itl lab page spring part static mapping addresses domain names internet network device identified -byte address easier memorize names addresses ways associate symbolic names address so-called domain names address viper virginia internet resolution domain names addresses domain system dns distributed database experiments simpler method map addresses names host file hosts dns hosts file method resolve domain names internet exercise manipulate static mapping names addresses hosts file inspect content file hosts ping address left-hand neighbor address ipneighbor ping ipneighbor repeat step symbolic names vintpc vintpc edit file hosts associate names addresses official names interfaces setup section beginning lab repeat step lab report explain static mapping names addresses impractical size internet grew large check-off itl lab page spring part experiment ftp telnet learn easy crack passwords snooping traffic ftp telnet sessions severe security problem file transfer protocol ftp login password information transmitted clear text encrypted exploited malicious users snoop passwords experiment asks sniff passwords hexadecimal dump packets ftp session captured tcpdump exercise capture traffic ftp session hosts run ethereal command filters set ethereal host localip host remoteip localip address remoteip address machine network machine type ftp remoteip data collected ethereal identify port number ftp client ftp server log root inspect packets belong ftp session setting display filter alternative method select follow tcp stream tools menu identify login password pain text payload packets exercise repeat exercise telnet program telnet security flaws check-off itl lab page spring checklist form lab complete check list work laboratory exercises hand form lab instructor leave names print turn-in prelab write prelab check-off part check-off part check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet don forget copy results floppy disk lab machines reset lab itl lab page spring feedback form lab complete feedback form end lab hand form lab instructor leave feedback anonymous put form part record difficulty grade degree difficulty range easy difficult interest level grade level interest completing part range low interest high interest time time complete part lab difficulty interest level time minutes multiple segment networks static routing learn lab turn computer multiple interfaces router set static routing icmp messages update routing table entries work subnet masks interpret ping traceroute tcpdump measurements determine setup route copyright liebeherr rights reserved lab itl lab page spring table content prelab lab setup lab part setting network topology part configuring network interfaces part setting routing tables part icmp redirect part changing netmasks checklist form lab feedback form lab itl lab page spring prelab refer textbook answer questions static routing advantageous dynamic routing router host reachable interfaces compare routers hosts defining characteristic router give detailed response generate icmp redirect messages routers hosts exercises require access unix account command ping similar traceroute displays route datagrams ping traceroute approaches gather information describe traceroute ping part details tcpdump part details ethereal part arp address resolution protocol part netstat command part configuring interfaces part static mapping addresses symbolic names part experiment ftp telnet answer questions lab dislike lab make suggestion improve lab 
gather information default maximum ttl time live field traceroute outgoing probe packets traceroute displays output hop encountered traceroute print output difference ethernet switch hub read article understanding addressing wanted chuck semeria http nsc html answer questions network prefix subnetting subnetmask router subnetmask destination address network prefix address host address maximum number hosts network organization assigned network number create subnets supports hosts subnet maximum number subnets setup explain answer address address highest significant bit dealing class address network prefix class address bits long inconsistent give explanation deliverables submit answers problems beginning lab itl lab page spring lab lab set machines configuration shown figure workstation configured router send traffic routers logical topology address configuration shown figure vintpc ethernet switch hub ethernet switch hub ethernet switch hub ethernet switch hub vintpc vintpc vintpc vintpc vintpc figure network topology lab vintpc vintpc vintpc vintpc vintpc vintpc figure logical configuration addresses itl lab page spring table shows address assignment network interfaces machine machine bottom ethernet interface eth top ethernet interface eth vintpc vintpc vintpc vintpc vintpc vintpc table addresses itl lab page spring setup lab network setup multiple segments workstations ethernet switches hubs build network shown figure configure interfaces machines manually set routing tables correct values note exercises lab require coordinate groups note started reboot machine recall lab save data files save files directory labdata save files floppy disk end lab files prepare lab report part setting network topology exercise set machines shown figure lab instructor cables connectors advice determine figure figure table ethernet hubs switches machine connected coordinate activities groups working ethernet network network setup verify setup correct machine ethernet network interface cards note hubs ethernet cards connected check connecting cables itl lab page spring part configuring network interfaces unix systems network interface combination letters number letters type interface number distinguish interfaces type lab ethernet interfaces type names eth bottom interface eth top interface exercise configure addresses ethernet interfaces guidelines setting addresses network addresses network prefix including subnet number bits netmask set addressing convention bytes address identical machines byte identifies network byte identifies host machines addresses network vintpc vintpc vintpc vintpc vintpc vintpc hint running ethereal machine multiple network interfaces multiple interfaces run ethereal interface snoop traffic argument listen traffic eth interface type ethereal eth exercise ifconfig command set ethernet interfaces figure table find correct address interface machine itl lab page spring display content routing table host configuring interfaces save data ping machine networks connected ping ing machine networks result transmission icmp packets disable interface change address netmask disable interface ifconfig interfacename change netmask address interface correct configuration syntax ifconfig interfacename ipaddress broadcast bcaddr netmask ntmaddr setting interfaces ping machines connected networks hint machine ping setup response machine ping ing ethereal find problem configuration machine exercise assigning address interface predictable consequence losing packets destined address problem ifconfig mechanism create alias addresses ifconfig interfacename ipaddress broadcast bcaddr netmask ntmaddr unsigned integer create alias interface eth address typing ifconfig eth broadcast netmask change address interfaces address differs byte vintpc change address create alias address rule broadcast netmask addresses address ifconfig command output save result file itl lab page spring telnet machine ping machine address vintpc telnet vintpc send ping capture output ethereal include results lab report create alias address interfaces choose alias network host instance create alias interface address telnet network interface alias ping modified interface alias created capture results ethereal neighbor successfully ping machine note create aliases syntax delete aliases ifconfig interfacename ifconfig interfacename del ipaddress modifications made configuration interfaces reset reboot machine make permanent update revise configuration files network interfaces interface eth edit file sysconfig network-scripts ifcfg-eth add follow lines device eth bootproto static broadcast ipaddr netmask network onboot lab report include measurements exercises lab report include answers questions posted steps restore made interfaces check-off itl lab page spring part setting routing tables part lab configure routing tables hosts recall router address receives datagram destination address router forward packet network host address receives datagram destination address host discard packet converting host router consists enabling forwarding unix system changing single line configuration file redhat system configuration file sysconfig network system router file line forward ipv host line doesn exist reads forward ipv note files redhat refer routing setup sysconfig network gateway gatewaydev eth set default gateway forward ipv set host gateway sysconfig static-routes set static routing table eth net netmask eth net netmask change entry effect reboot exercise exercise set routing table local machine task completed send ping hosts modify routing table entries verify forwarding enabled modify configuration files reboot system configuring routing table testing routes commands route set modify delete entries routing table examples route add -net netmask itl lab page spring route add -host netmask route del -host route add net dev eth route add default netstat display content routing table netstat -rs display routing statistics ping testing host reached note ping records route traceroute display route destination debugging successful ping host router routing tables correctly set routers forward backward direction command ethereal debugging set arguments ethereal filter traffic interested groups workstation filter traffic window ethereal tcpdump lab report describe problems encountered setting routing table solved problems potential problem setting routing tables manually routing loops occur describe configuration scenario configuration figure routing loop result performance network exercise destination address routes added host route add -net netmask route add net 
netmask route add host netmask case multiple matches destination address task determine rules router host resolve multiple matches routing table itl lab page spring perform experiments modify routing table system determine system handles multiple matches routing table construct scenarios routing tables matches network network prefixes length simultaneous match host entry network entry save output routing table floppy lab report routing table saved exercise explain resolves multiple matches routing table difference exit interface hop address routing table traceroute calculate round-trip-time rtt packets check-off itl lab page spring part icmp redirect icmp redirect messages router host packet forwarded router linux icmp redirect results change routing cache host command route display routing cache vintpc sends packets destination vintpc opposed vintpc vintpc sends icmp redirect vintpc icmp redirect informs vintpc send packets destination vintpc exercise setup routing table provokes transmission icmp redirect message ethereal capture icmp packets observe network traffic contents routing table cache icmp redirect messages save data files lab report describe outcome experiment include measurements explain vintpc packets destined network forwarded check part changing netmasks part lab test effects changing netmask network configuration exercise setup interfaces network vintpc vintpc vintpc network vintpc vintpc vintpc figure group responsible setting interface interfaces setup ping machines machines network save results floppy network perform operations vintpc send ping messages vintpc vintpc itl lab page spring vintpc send ping messages vintpc vintpc vintpc send ping messages vintpc vintpc network perform operations vintpc send ping messages vintpc vintpc vintpc send ping messages vintpc vintpc determine ping operations successful explain results ethernet vintpc vintpc vintpc adress netmask ethernet vintpc vintpc vintpc adress netmask figure network topology lab lab report measurements explain results exercise ping operations successful unsuccessful check itl lab page spring checklist form lab complete check list work laboratory exercises hand form lab instructor leave names print turn-in prelab write prelab check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet don forget copy results floppy disk lab machines reset lab itl lab page spring feedback form lab complete feedback form end lab hand form lab instructor leave feedback anonymous put form exercise record difficulty grade degree difficulty range easy difficult interest level grade level interest completing exercise range low interest high interest time time complete part lab difficulty interest level time minutes part setting network topology part configuring network interfaces part setting routing tables part icmp redirect part changing netmasks answer questions lab dislike lab make suggestion improve lab 
transport layer protocols udp tcp learn lab udp tcp react fragmentation detailed throughput measurements tcp connection tcp interactive data flow tcp bulk data flow tcp schedules retransmissions copyright liebeherr rights reserved lab itl lab page spring table content prelab lab setup lab part setting network topology routing table part learning ttcp part mtu fragmentation part tcp connection management part tcp data exchange part tcp retransmission throughput measurement check list lab feedback form lab itl lab page spring prelab itlab web page virginia itlab prelab tcp download man file ttcp ttcp-man doc ttcp-man txt read man file ttcp provide syntax ttcp command client server executes scenario tcp server tcp client tcp server waiting port number connection request client connects server transmits bytes server write operations bytes lab exercises capture traffic subsequently process visualize captured data tcpdump awk script gnuplot ethereal data capture tcpdump ethereal processing data awk visualization data performed gnuplot prelab exercises familiar awk gnuplot login computer unix account read man page awk solve problems assume file named test data columns integers provide syntax awk extracting field row input file test data file virginia itlab prelab tcpdump data file traffic tcp connection transfers file write awk script takes file generates file shown virginia itlab prelab plot data file plot data columns column timestamp data segment transmitted column relative sequence numbers highest sequence number transmitted segment divided timestamp normalized timestamp time sec sequence numbers normalized start byte transfer awk script skip acknowledgement packets packets flag refer tutorial gnuplot http uni gnuplot lab gnuplot generating modifying plots set gnuplot commands plot results content file plot data set xtics set ytics data capture process data visualization itl lab page spring set xlabel time sec set ylabel bytes set terminal plot plot data title bytes transmitted linespoints explain command detail suppose gnuplot commands type commands set xrange set yrange replot explain commands suppose gnuplot commands type commands set terminal post eps color times-roman set output test eps replot set terminal replot result execute sequence commands file virginia itlab prelab plot data submit printout result answer questions tcp decide segment size data packet icmp error generated router fragment datagram bit set tcp sender learn mtu deliverables answer problems turn answers beginning lab itl lab page spring lab lab involves workstations ethernet hubs cisco routers itl- hssi fsi ethernet ethernet hub ethernet hub ethernet hub ethernet hub ethernet hub itl- fddi fddi figure network topology lab vintpc fddi fddi itl- ethernet ethernet ethernet vintpc vintpc vintpc vintpc ethernet ethernet vintpc itl- fddi fddi hssi fsi ethernet figure logical configuration addresses itl lab page spring setup lab interfaces pcs setup shown table machine ethernet interface eth ethernet interface eth fddi interface fddi vintpc vintpc vintpc vintpc vintpc vintpc table addresses addresses routers shown table machine interface type interface type itl- fddi hssi fsi ethernet itl- fddi hssi fsi ethernet table addresses cisco routers itl lab page spring part setting network topology routing table exercise verify machines cables setup shown figure setup correct coordinate lab instructor groups setup machines properly exercise verify network interfaces setup shown table setup correct reconfigure interfaces addresses interfaces cisco shown table make change netmask time make change interface address exercise set routing tables machine shown table ping interface local ethernet network routers remote ethernet networks machine destination network gateway vintpc default vintpc default vintpc default vintpc default vintpc default vintpc default traceroute test routing tables properly setup vintpc traceroute show route hops vintpc vintpc check-off itl lab page spring part learning ttcp unix utility ttcp tests tcp udp throughput network tcpdump ethereal ttcp debugging network related problems running ttcp requires setup ttcp receiving process ttcp receiver ttcp sending process ttcp sender start ttcp receiver tcp mode remote machine telnet remote machine execute command ttcp lbuflen nnumbufs pport start tcp sending process local machine run command ttcp lbuflen nnumbufs pport host execute ttcp udp mode receiving sending processes started ttcp lbuflen nnumbufs pport ttcp lbuflen nnumbufs pport host exercise transmit tcp data experiment ttcp command sending packets neighbors tcp mode setup scenario ttcp receiver sets server waits port ttcp sender establishes client sends data server default server discards received data finishing transmission data server client processes closed ethereal capture packets save results file address neighbors telnet neighbor start ttcp receiver ttcp local machine type ttcp ipneighbor ipneighbor address neighbor machine itl lab page spring exercise transmit udp data basically repeat previous exercise udp transport protocol ethereal capture packets save results file telnet neighbor machine execute command ttcp local machine execute command ttcp ipneighbor lab report data captured ethereal answer questions include captured data report packets exchanged examples range size data sending packet check-off part part mtu fragmentation study effect fragmentation udp tcp traffic exercise ttcp send udp traffic machines ethereal capture traffic run experiments send udp datagrams machine remote machine ethernet segment increase size datagrams argument ttcp fragmentation occurs determine maximum size udp datagram machines send receive fragmentation save data captured packets fragmentation itl lab page spring ethereal output determine datagrams values fields header fragmentation identification fragment offset don fragment bit exercise modify mtu network interface ifconfig command ifconfig eth mtu sets mtu interface eth bytes asked observe tcp discovers maximum allowed datagram size mtu route sender receiver process called path mtu discovery tcp segments datagrams don fragment bit set router fragment datagram bit set discards datagram generates icmp unreachable message includes mtu required receiving icmp error message tcp reduces segment size required mtu modify mtu interfaces shown table modify mtu local machine coordinate groups mtu settings remote machines mtu eth mtu eth vintpc vintpc vintpc vintpc vintpc vintpc ttcp generate tcp traffic ethereal measure traffic remote machine ttcp local machine ttcp iprem source destination tcp traffic interfaces observe ethereal shown table source destinations assigned tcp traffic intermediate router fragment datagram refer figure determine path tcp traffic note mtu interfaces source destination intermediate routers path start ethereal interfaces machine set filters capture tcp data measure itl lab page spring source destination vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc 
vintpc vintpc vintpc vintpc vintpc lab report provide answers questions posted exercises saved data answer questions include data report observed fragmentation describe fields ethereal output give explanation icmp unreachable fragmentation required error generated bit set datagrams observed icmp unreachable fragmentation required error message describe message path mtu discovery explain tcp connection local network exhibit fragmentation udp connection reset mtu default check-off itl lab page spring part tcp connection management exercise study tcp connection management exercise decide remote machine establish telnet connection start ethereal capture packets transmitted telnet connection save captured data file establish telnet connection telnet remoteip discard remoteip address remote machine login prompt appears type ctrland type quit terminate connection lab report captured data explain detail steps performed tcp connection establishment termination include captured tcp headers -way handshake segments involved closing tcp connection maximum segment size tcp connection initial sequence numbers telnet client telnet server check-off itl lab page spring part tcp data exchange exercise observe tcp data exchange interactive data flow bulk data flow exercise interactive data transfer choose remote machine address remoteip start ethereal session captures traffic machine machine address remoteip login remote machine address remoteip rlogin remoteip start type characters window rlogin session observe number packets exchanged machines keystroke note time acks local machine save captured ethereal data file exercise bulk data transfer start ethereal session capture ftp traffic local machine remote machine start ftp session remote machine transfer large file observe behavior machines sender transmits window data burst waits acknowledged determine rules receiver transmitting acks sender save captured ethereal data file lab report captured data answer questions observe delayed acknowledgments rlogin session observe delayed acknowledgments ftp session maximum time acks delayed measurements ftp session range advertised window receiver file detect rule setting advertised window tcp flags observe captured packets explain role tcp flags differently rlogin data segments ftp data segments explain describe explain tos bits set headers rlogin ftp session explain differences check-off itl lab page spring part tcp retransmission throughput measurement part observe error correction features tcp ttcp measure throughput tcp transmission machines tcpdump capture data tcpdump syntax tcpdump eth expression tee filename -tt unformatted timestamps eth specifies interface expression boolean expression describes capture filter recall tee filename writes results captured data monitor file exercise tcp throughput measurement ttcp send tcp traffic machine address remoteip start tcpdump options determine interface machine data flowing set capture filter capture traffic local machine remote machine save tcpdump data file start ttcp session remote machine ttcp local machine ttcp remoteip table assignment remote machines remote machine vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc ttcp session terminates run awk script file filtertcpdump awk awk script performs operations problem prelab scripts takes input tcpdump output traffic capture single tcp connection generates file row itl lab page spring tcp segment transmission row columns timestamp highest sequence number transmitted segment execute awk script awk root lab filtertcpdump awk filename output data filename file saved tcpdump output verify resulting file desired format gnuplot visualize data file output data start gnuplot session simply typing gnuplot execute commands generating plot data file modifying ranges axes plot annotate plot add labels axis add title save plots postscript file commands prelab exercises generate plots save plots postscript files provide answers questions make labels plots correctly annotated previous exercise generate save plot shows rate data transmission experiment approximate data rate transmission ttcp sender measured bits observe visualized data short time periods observe data transmitted bursts periods rapid transmissions multiple segments time periods transmission takes place answer questions range burst sizes typical size burst typical distance bursts explain factors determine sizes bursts delay bursts present plot shows operation slow start congestion avoidance itl lab page spring exercise comparison udp tcp throughput repeat previous exercise udp transmission start ttcp session remote machine ttcp local machine ttcp remoteip generate plot save plots postscript files shows rate data transmission experiment approximate data rate transmission ttcp sender measured bits compare results exercise compare pattern udp datagram transmissions burst pattern tcp segment transmission experiment differences generate plot shows burst pattern udp transmissions short period time exercise tcp retransmission setup experiment similar previous setup tcpdump filters set start ttcp session parameters remote machine ttcp local machine ttcp remoteip remote pcs table assignment remote machines remote machine vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc vintpc transmission ongoing disconnect ethernet cable machine ttcp traffic flowing approximately minute reconnect ethernet cable itl lab page spring generate plots save plots postscript files provide answers questions make labels plots correctly annotated present plot shows rate data transmission experiment approximate data rate transmission ttcp sender measured bits compare results plots exercise generate plot enables observe retransmission attempts disconnected cables time reconnected cable data rate reached level observe cables disconnected addition retransmission attempts cables disconnected determine packet losses retransmission attempts lab report include plots provide answers questions posed exercises include discussion requested check-off itl lab page spring check list lab complete check list work laboratory exercises hand form lab instructor leave names print turn-in prelab pledge check-off part prelab check-off part check-off part check-off part check-off part check-off part turn-in feedback sheet don forget copy results floppy disk lab machines reset lab itl lab page spring feedback form lab complete feedback form end lab hand form lab instructor leave feedback anonymous put form exercise record difficulty grade degree difficulty range easy difficult interest level grade level interest completing exercise range low interest high interest time time complete part lab difficulty interest level time minutes part setting network topology routing table part learning ttcp part mtu fragmentation part tcp connection management part tcp data exchange part tcp retransmission throughput measurements answer questions lab dislike lab make suggestion improve lab 
effectiveness route-based packet filtering distributed dos attack prevention power-law internets kihong park heejo lee network systems lab department computer sciences purdue west lafayette park hlee purdue abstract denial service dos attack internet apressingproblem inthispaper wedescribeandevaluate route-based distributed packet ltering dpf approach distributed dos ddos attack prevention show dpf achieves proactiveness scalability show intimate relationship lawnetworktopology salient features work two-fold lteroutasigni fraction spoofed packet owsand prevent attack packets reaching targets rst place ows proactively curtailed extremely sparse origin localized iptraceback small constant number candidate sites show proactive reactive performance effectscanbeachievedbyimplementingroute-based ltering onlessthan sites show complementary performance asgraph inparticular fects work supported part nsf grant eiaadditionally supported nsf grants aniani- career essand aniitr grants center education research information assurance security cerias santafeinstitute sprint andxerox additionally supported cerias heejo lee address ahnlab v-valley bldg suseo-dong kangnam-kuseoul korea permission make digital hard copies part work personal classroom granted fee provided copies made distributed pro commercial advantage copies bear notice full citation rst page copy republish post servers redistribute lists requires prior speci permission fee sigcomm august san diego california usa copyright acm introduction background denial service dos pressing problem internetasevidencedbyrecentattacksoncommercialservers isps consequent disruption services dos attacks consume resources network elements web servers routers rewalls end hosts impedes cient functioningandprovisioningofservicesinaccordancewiththeir intended purpose impact pronounced network congestion due concentrated targeted nature resource depletion clogging impactsqualityofservice qos butcana ecttheveryavailabilityofservices affectedbymultiplecompromisedhostsontheinternet provisioning system minimum occurrence ofapotentiallyvalidevent servicerequest tcpsyn packet processed ascertain validity single eventmaybe negligible multiplied large factors enabled high bandwidth modern broadbandnetworks itsimpactcanbesigni aswith ane inthe rstplace dos lies identi cation attacker admits assigningcommensuratecosts legaloreconomical tothe perpetrating entity attack instituted compromised hosts intruded attacker physical sourceofdostra ccanbeidenti thenattheveryleast invaded network element isolated shut andinsomeinstances theattacker sidentitycanbefurther traced back state information remnant compromisedsystem goals proactive prevention spoofed ippackets reaching destination reactive source identi cation iptraceback spoofed ows describe novelapproachto proactiveandreactive distributeddos ddos attack prevention route-based distributed packet ltering evaluate cacy internet autonomous system topologies route-based packet filtering ltering dpf usesroutinginformationtodetermineifapacketarrivingatarouter borderrouteratanas scribedsource destinationaddresses giventhereachability asingleascanonlyexertalimitedimpactwithrespecttoiden- ows thisissimilartothe limitationof rewallswhose lteringrulesre ectaccessconstraints local network system guarded extreme autonomous systems routers implement route-based packet ltering spoofed owscanescape butitsultimatee ectisnotmuchdi erent ltering routing route-based packet ltering occurs time scales packet forwarding discard based table look-up fast lter table update slow forwarding discard function performed close line speed subject generic processing overhead core contributions route-based dpf main strength lies fact partial coverage deployment internet topologies synergistic ltering ect achieved whosecollective rst place thebank robbers constrained public transportation systemwhoseroutes inturn cal street network topology routing policy algorithm perfect proactive protection due intrinsic connectivitypropertiesofinternettopology cannotbeachievedwith small coverage ect strong spoofed ows prevented cientlysparseand asaconsequence constantnumberofsites lessthan forinternetastopologies ppm ective iptraceback strictly speaking traceback granularity study graphs achieved serves deterrent addition facilitating reactive recovery approach applied intra-domain routergraphs topologies ourworkisthate ltering depend intimately connectivity structure theunderlyingasgraph inparticular weshowthatpowerlaw internet topology crucial facilitating small coverage strong proactive reactive ltering ect ning relevant performance metrics show route table ltering table updates potential targets dos attack large time scale route table updates lter table updates triggered thesameevents andthepreventativee ectofroute-based dpf respect protecting routers dos attack jointly alleviate control plane protection problem comprehensive study problem subject futurework lterplacement multi-path routing internet arti important feature route-based dpf scalabilitywithrespecttodistributeddosattack inppm attack site localization ciency deteriorates proportionally number attack hosts route-based dpf fractionofas sfromwhichspoofedip owscanreachother sisasmallsubset lessthan whichmakesharnessing attack sites engaging ddos attack cultforanattacker packet arriving target ces trace back origin packet importantly attacker source scanbelocalizedtowithin sites aconstant independent system size internet graphs tested ppm sampling constraints attacker distribute attack targeted common victim owsaredi implementation perspective dpf require expending ipheader bits encode link information ppm generation icmp messages messaging-based version ppm hand computing ltering tables alongside existing inter-domain routing protocols bgp nontrivial problem due destination-based structure internet routing protocols paper main contribution lies advancing scalable architecture ddos attack prevention ective internet topology architecture implementable ipinternetworks source-based routing information made routers intra-domain link-state routing protocol ripuses global topology information speci implementation approaches inter-domain protocols bgp andtheirtrade-o sarechallengingproblems rest paper organized section give summary related works section wede neroute-basedpacket ltering thekeyideas performance metrics discuss issues surroundingperformanceevaluationincludingbenchmarkingwithin- ternet topology lter placement multi-path routing section present performance results based cialnetwork topologies related work types dos attacks identi basic dos attack demanding resources target system network supply resources network bandwidth system space processes network connections host-based dos network-based ipprotocolsuite cultthreat network-based dos attacks default employ spoofingtoforgethesourceaddressofdospackets andthereby hide identity physical source previous works internet topology refer nlanr measurementdata internetasgraph detrimental impact victim nordoesitnecessarilydeterpotentialattackers number recent works studied source identi cation called iptraceback span range inlinktesting edbytracingit tracebackistypically performed manually recursively repeated upstream router originating host reached drawbacks link testing include multiple branch points slow traceback attack communication overhead duetomessageexchange tween network operators audit trail approach facilitatestracingviatra method conducive -line traceback dos attacks principal weakness high storage processing overhead incurred routers exert signi burden behavioral monitoring behavior attacker dos attack monitored identify source attacker resident local server cache duringadosattack pact attack service requests including webandicmpechorequests loggingofsuchevents activities reveal information attacker source packet-based traceback packets marked insomesense aninverse operation source routing similar iprecord route option victim information inscribed packets trace attack back source related method generating information packets separate data packets convey analogous path informationasicmptracebackmessagestothevictim inthese methods overhead form variable-length marking ortra coverheaddueto extra messaging packets incurred probabilistic packet marking bothworlds spacee ing eld processing ciency form minimal router support expense introducing uncertainty due probabilistic sampling path ectivenessofprobabilisticpacketmarkingwasanalyzedwhen eldspoofing shown attacker location localizedtowithin single-source attack improved marking schemes including inspiteofitse ciency properties ppm drawbacks spoofed packetsareallowedtoexerttheirdebilitatingin uenceonserver resources reactively curtailed bits ipheader expended inscribe link information iii uncertainty iptraceback ampli proportionally number hosts partaking distributed dos attack show route-based distributed packet ltering addition matching iptraceback prowess ofppm solvesitsthreeweaknesses packet ltering network mechanism controlling whatdatacan owtoandfromanetworka ectedroutersor rewalls filtering decisions typically made based packet content including source destination addresses andportnumbers dos attacks ingress ltering border gateways proposed limiting ipsource address spoo ingress ltering requires prolonged period broadly deployedontheinternet andeventhen itissubjecttoattacks compliant section ects route-based distributed packet filtering route-based detection discarding spoofed packets interpretedasanasgraph showninfigure toall othernodes solidarrows assumeahostbelongingtoas atthepeeringpointwith cognizant 
route topology recognize destinedtoas enter link implying source address spoofed packets discarded fromthedosattack note speci instance inspect canarriveonlink tify lter spoofed packets forwarding points system routes node attack node node address figure illustration route-based packet ltering executed node node address belonging node attacking node remark description interdomainiproutingperspective isimprecise anedge ingeneral aset peering point connections border lteringtasks ippre xes belonging destination lead erent paths topology incorporated model allowing multi-path routing ignore potentially relevant classi cation asnodesintostub multi-homed andtransitaswhereonly engage routing sense interdomainpacketforwarding whenwespeakofanasnode performingroute-based ltering itmustbeunderstoodthat althoughlogical case attack host residing whenattackingservers inas thegatewayatas ippacket source address spoofed forwarded demonstrates performing route-based ltering single site achieve routebased distributed packet ltering aims achieve synergistic proactive lteringe ofasmallnumberofasnodes thekeyobjectivesofdpf summarized maximize proactive tering spoofed ippackets bogus packets minimize number sites packets facilitates iptraceback achieve objectives minimizing number sites atwhichroute-based lteringiscarriedout intandem withobjective iii ndtheoptimumsiteswhere lteringis tobeperformed maximal semi-maximal filters undirected graph representing internet topology remark framework conclusions carried router topologies anas oflarge andperformance toasubsetr ippacket source ipaddress destination ipaddress routed assume separate network mechanism resolves selection multiple paths performance results multipathroutingarediscussedinsection lter isafunctionde nedforlink interpreted router arriving decides forward packet lter discard thepacket wecall aroute-basedpacket lterwithrespectto slight abuse notation meanthatlink isonsomepathbelongingto aroute-based lterissafe card packets potentially consistent respect judged locally link route-based lter maximal satis exists apathinr withe links maximalroute-based ltercarriesoutallthe lteringofspoofed iptra adversely ecting routingofnon-spoofedippacketsasdeterminedbyr ifaset ofroute-based lterscollectivelywere perfect inthesense tionservice lter represented table straightforward requires ingeneral space whichisanoverwhelming tablelook-up thereare semantic erences router topologies geographical distance nodes graph meaningful considerationwhenadvancinginterpretations asemi-maximal lterisamaximal lterwhichusesonly source ipaddress packet carry ltering projection words isasemimaximal lterwithrespectto braceleftbigg forsomev lteringcapabilityis ingeneral lessthanthatof maximal counterpart weloseinpotential lteringpower itturnsoutbynotmuch shown section semi-maximal lter representedbya domain feasibility practicality techniques speed-up routing table look-up optimizationswillbeneededtoa performance measures dpf filtering effect attacker victim perspectives semi maximal lter distributed executed node denote subset nodes ltering performed call coverage ratio quantify measure thecollective lteringe ectofroute-baseddpf including iptraceback set performance metrics rest paper key performancemetrics theirintuitive meaningsare proactive scalar denotes fraction spoofed ippacket reach target whereever technical reasons accuracy performance metricisdenoted reactive parameterizedby itdenotesthefractionofas true source sites performance metricisdenoted turns performance measures speci instances natural family performance measures complicated notation interpretations relevance reveal partial picture dpf performance families variables whicharethenusedtode nehigh-levelperformancemeasures including forquantifying ddos attack prevention mitigation performance denotes set nodes precisely set ipaddresses belonging node attacker spoofed source ipaddresses reach withoutbeingcut-o temsint byde nition foralla thelarger theset hasinterms forging ipsource address eld bogus address lters whereass ned attacker perspective captures victim perspective denotesthesetofnodesthatcouldhavesentanippacket spoofed source ipaddress destination address ltered nition larger packet respect true origin means ipaddress attacker outsideof tomountaspoofeddos attackaimedat figure ltering curtailing attacker ability engage spoo route-based ltering attacker residing disguise undetectable spoofed ipaddresses belonging whenattackingaserverinas withroute-based ltering atas withdistributed lteringatas andas victim attacker routes victim victim attacker routes victim figure left withroute-based ltering executed node spoofable address range attack site reduced distributed ltering ter spoofable range reduces proactive filtering measures practically useless proactive ltering ect captured ned range denotesthe fraction reached spoofed packets fromanywhere thecloser isto thefewerthenumber exposed dos attack directly meaningful interpretation spite appealingsemantic relevance wewillshowthat isnear internet topologies coverage ratio import performance measure subtle practically relevant proactive performancemeasuredescribedinsection hasthefollowingrigorousde nition sending spoofed ippackets targeted futile ltered nodes attacker wishing engage ddos attack make productive attack hosts residing autonomoussystems thisimposes anupper boundonthe distributedness ddos attack achievable attacker severely limiting closer policywise guard respect tra emanating mounting attackisfeasible aswith directly relevant semantics unlike achieves large values forinternetastopologies tive ltering sharply delineated semantics ned denotes fraction attacker-victim pairs total attacker reach thusanattackerwhose speci interest victim choose thelarger impact random ddos attacks captures reduced attack volume ratio lterable packets inaddition viewedfromthe attacker sperspective spoofable izetheattacksitetowithin locations reactive filtering measure traceback theperformancemeasuresde nedintheprevioussection ectively spoofed ippackets prevented reaching destination rst place lters perfect proactivity captured inherently cult achieve internet topologies due connectivity iscloseto ectively ltered complementing proactive performance measures reactive metric captures iptraceback sourceidenti cation ect represents fraction target autonomous systems attacked arbitrary spoofedippacket possibleattacksites theparameter meaningfulfor valuesgreaterthan iptraceback localization asmall constant spoofed ows prevented penetrating lter net spanned nodes ectively localized respect true attackorigintowithin candidatesites weachieveip traceback analogously ned withc inplaceof performance evaluation issues objectives formally route-based semi maximal distributed lter triple discussion iptraceback localization issues called uncertainty factor probabilistic packetmarking theasgraph subsetofas swhereroute-based ltering performed routing algorithm route-based dpf prime prime prime itcanbecheckedthat prime prime turn implies prime prime similar monotonicity properties hold performance metrics prime prime prime trivial lower bound evaluating ectiveness thesize ofthe lternet itsstructure androuting power-law network topology empirical evidence shows internet topology exhibitspower-lawconnectivity whichmayalsoholdfor router topologies power-law graph structure induces centers comprised stubs non-transit multi-homed andhow topologya ectsproactiveandreactive ltering performance employ internet topologiestakenfromnlanr whichhavebeenusedinother internettopology coveredpower-lawproperty inadditiontomeasuredinternetastopologies weusearti cialinternettopologygenerators benchmarking unintended side ect study reverse evaluation arti cial topology generators above-andbeyondpower-lawrelations inthecontextofdpf filter placement addition uence thesize lter net dpf performance coverage ratio selection nodes key performance variable ect choosing randomly sample uniformly randomly target coverage size isreached thecasewheret formsavertexcover itcanbe checked beingavertexcover isneitherasu cient condition prime prime implies path vertex path belongs expected property conducive enhancing performance dpf tandem thepresenceof centers inpower-lawgraphsleads expect small coverage ratio achievable lem approximation algorithms constant factor guarantee heuristic nding small vcs rst algorithm constant-factor large optimal randomization component approximation scheme runmultipletimes inourevaluations withthesmallest constituting nal output algorithm well-known heuristic rigorously isavertexcover ifeveryedgein isincident onsomenodein behavior practice oftentimes outperforms constant-factor approximation scheme heuristic greedy algorithm iteratively grows picking node covers remaining uncovered edges presence centers power-law graphs makes ndsmallvcswhich isveri weusetheminimum maximal semi-maximal filters lterswhich general powerful maximal lters comparative evaluations show replacing semi-maximal withmaximal ment proactive reactive ltering performance marginal performance erence justi semimaximal lters performing route-based dpf additiontoitsconsiderationofe ciency ingress filtering case nodes perform ingress lteringonly thenforcoverageratio ddos prevention performance ect captured wouldbe evenwhen forthe internetastopologywith iptracebackcapabilityascapturedby incursanuncertaintyof trivial number attack sites investigate thereislittle compelling reason group global internet form trusted security partnerships based mandatory ingress ltering collective performance ect islow ingress ltering erywhere isanine contrast whenas sint implementroute-baseddpf internetastopologies wealsoconsiderthecase trusted belonging reason perform ingress ltering show ect proactive reactive routing set feasible routes uenced topology addition source 
destination note prime implies prime prime forall weconsiderrouting policies separate paths necessarily disjoint nodes evaluate uence paths permitted themore easily packet elude route-based ltering spoofedsourceipaddresses thisisduetotheattacksite spoofable ipaddress space expanded weselect shortestpathsfrom case candidates pathlength wechoosethepathcoming rstinthecanonical lexicographic order give special names extremeformsofr loose andtight loose meansthat routing allowsonlyasingle routingpath anddenotethiscaseas tight performance results set-up built performance evaluation tool called dpf tion dpf cover dpf stats cover handles generation inputspeci andrank ordering dpf isthemain module whichcomputes input speci cation include lter type routingalgorithm stats takestheoutputof dpf andcomputesthevariousperformancemeasuresincluding inet brite generate arti cial proactive filtering effect limitations perfect proactivity measures fraction immune fromdosattack distributed single-source figures left show asafunctionof fordi erentcoverageandroutingcombinationsfor internetastopology figure loose rnd loose rnd loose tight rnd tight rnd tight figure internet topology left loose tight thatis immune dos attack unachievable coverage ratio circumstances plots show tight performance loose thing equal size internet vertex cover ective randomevenwithhighercoveragesrnd andrnd plots depict general trend performance evaluation purposesonly hasdirectrelevance percent nodes tight figure internet topology function maintaining property figure shows limitation achieving perfect sizes eventually positive coverageisabove perfectproactivityascapturedby isintrinsicallydi culttoattain andshould proactive filtering distributed dos measuresthefractionofas sfromwhichddosattackscannotbelaunchedsinceallspoofedpackets target detected discarded lter net ofparticipatingas putsanupperbound figure left show function loose tight aswith doesnothavea concrete relevant meaning shown depict generaltrend loose rnd loose rnd loose tight rnd tight rnd tight figure internet topology left function loose graphfor tight figure relevant plot shows internet topologies achieves years implies autonomous systems sincethenumberofas increased asmeasuredbynlanr theabsolutenumberof attack sites grown commensurately asapercentage figure internetastopology internet topologies figure left shows asafunctionof source-destination pairs tacker perspective spoofed packets emitted attack reach victim attacker enlist attack hosts ddos attack tight tight rnd percent nodes tight tight rnd figure internet topology left function intruding hosts waste ort source-destination chosen randomly proactive ltering erects barriers terms ort cost mountinge ective ddosattackswhich inturn canactas ect figure shows thecoarsestmeasure whichrepresentsthefractionofsource destination andspoofaddress triples whereahostresidingatas isabletosend anippackettotargetas observe coverage fraction forgeable triplets shrinks means addition spoof address randomly generated spoofed ippacket chance ofreachingitstarget collectively theseresultsshowthat theattacker ort resources launch successful ddos attack signi brought aboutbyroute-baseddpf sproactive lteringe ect reactive filtering effect traceback shown previous section eliminatingall spoofable ows unrealistic goal inherent culty respect internet connectivity erent consequence proactive ltering subtle complementary ect spoofed ows prevented penetrating network system localized small number sites ected bydpf lteringsu cientlymany owssothattheremaining spoofable ows form sparse subset turn facilitatessourceidenti cation iptraceback figure shows function loose tight andt rnd rnd thegeneraltrendshows vcandr tight figure left shows internetastopologiesfor weobservethatacross ispreserved loose rnd loose loose rnd tight rnd tight rnd tight figure internetastopology left loose tight attack localized candidate sites andtheonlyperformancedi erenceoccursfor iptraceback achieved instantly based speedy on-line response attacked site respect actions perpetratingattacksite ing route-based dpf proactive respect tracebacksinceasingle spoofedippacketsu cestoreveal attacker location small constant numberoflocations inppm asu cientnumberofdosattack figure left internet topologies shape withdilation factor packets received attack path reconstructed probabilistically inscribed link values ipdatagram figure shows marginal bene increasing number nodes achieving observe increasing size vertex onlyanincrementale ect thisshowsthatmuchoftheip traceback ect attained smaller vertex cover size facilitates economy coverage deployment maximal filters semi-maximal filters bydefault based semi-maximal lters ascertain potential performance loss due employing maximal lters compare figure left shows internetastopology function performing route-based dpf maximal versus semi-maximal lters tight beingvc erencein semi maximal maximal maximal semi-maximal figure internet topology left comparison maximal semi-maximal ters comparison iptraceback capability captured marginal performance erence figure compares maximal semimaximal lters fact equal small performance erence coupled space ciency warrants semi-maximal lters implementing route-baseddpf impact network topology internet topology figure showsthevertexcoversizes expressedasapercentage valuesfor internetastopologies weobservethat aswellas remaininvariantover intherestofthissection focus discuss results performance qualitatively erent size vertex cover plays important role intermediate indicator facilitator ltering performance fact smallerthevc thebetterthe small coverage ratio year figure vertex cover size internet topologies random topology generate p-random graphs connecting nodes link probability internet graph generate random graph setting speci cation values families graphs connectivity pattern year table internet topology link probability figure left shows vertex cover size generated random graphs internet topologies onaverage larger figure shows function erent topologies spite engaging nodes performing ltering performance captured signi cantly internet topology performance erenceampli recallthat internet randomgen internet figure left function comparison withinternet plot theperformancevaluesfor internetastopologies figure left stayedinvariant inet topology generator inet network topology generator generatingarti figure left shows sizes inet generated graphs internetascounterpartsfor weobservethatthe largerthanthecorrespondinginternetasgraphs figure shows asafunctionof forinet internetas andrandomgraphs weobserve asexpected year internet inetgen inetgen randomgen internet figure left sizes inet graphs internet graphs comparison inet graphwithinternet random graphs figure left shows normalized ltering performance tersetisincorporated nomatter measures ltering performance lter node relative accurate metric comparative evaluation figure left showsthatthereissigni cantdi erenceindpf ming part size erence inet topology thefact well-known graph property exhibits nontrivial withsimilarresults theinet graphs resulted marginally smaller size erence graph sizes internetastopologies fga internet inetgen figure left performance erence inetandinternet asgraphsnormalized byvcsize comparison normalized ned structure incorporated family power-law graphs accurately capture internet topological properties figure shows normalized iptraceback performance benchmark set-up incorporates size brite topology generator brite network topology generator additiontocapturingpower-lawconnectivitystructure seeksto inject spatial proximity constructive process brite speci parameters size higher plane size lower plane number nodes number edges added node node placement preferential connectivity incremental growth whenpc withwaxman probability density euclidean distance nodes maximum distance nodes whenpc anewnodeconnectstonode withprobability summationtext whered isthedegreeofnodeiandc istheset withpc theprobability connecting node summationtext thuspc considers spatial proximity focuses powerlaw structure captured node degree distribution isahybrid topology internet brite brite brite table sizes brite graphs test graphs generated options speci cation results size shown table figure left showtheperformancee ectswith respect inadditiontonotbeing power-law hasverysmallvc itsperformancewith brite generator small bug respect optionpc whichwas xed respectto iscloserthanthatofpc ternetastopologyfor issigni beingworsethan inet generator sizes large performance aresigni andinet wehave cations unsuccessful generating topologies resemble internet size ltering performanceperspectives weighting summationtext injectbothspatialanddegreesensitivityinamorecontrolled fashion increases monotonically decreases size approximated internetaswith performance signi cantly smaller whencomparedtointernetas internet fga figure left function plot ingress filtering section showed ingress ltering viable strategy achieving proactive reactive ltering performanceforddosattackprevention sinceas sbelonging represent trusted domains route-based dpf guaranteed executed border routers ingress ltering assumed carried belonging conceivable implement route-based dpf assure ingress ltering seek protect external dos attack ows 
allowing dos attacks occur figure shows proactive reactive ltering performance perform route-based dpf perform ingress ltering figure left shows figure route-based dpf ingress ltering left function internet topologies values internetastopologies weobservethatthere negationslash ontheother hand years iptraceback localize attack site locations worsethan ltering autonomous systems small constant andthusamanageablenumber figure shows values drops signi cantly higher proactive ect achievable ingress ltering interestingly performance gap roughly corresponds coverage ratio internetastopologies multi-path routing source destination easily packets elude route-based figure shows impact multi-path routing tering performance figure left shows traceback capability captured decreases gradually asimilarresult holds shown figure collectively inroutertopologies hasagradede ectonthee ectiveness ofroute-baseddpf tight loose path path path dga figure ect multi-pathrouting internet topology left tight loose discussion implementation issues important implementation concern context ipinternetworks space requirement issues shared routing table look-up computationofsemi-maximal ticipating nodes main culty arises fact iprouting destination-based approach routing table update exchanges convey informationaboutdestinationreachabilitybutnotnecessarily source reachability ospf intra-domain link state routing protocol global topology information broadcast asrequiredby route-based ltering canbecomputed thisisnotthecase forinter-domain routing protocol bgp update message aspath sequence numbers identify destination reachability starting originated ispropagated throughoutthesystem aswithrip sourcereachabilitycannotbededucedfrominformationcarriedbybgp erent rpf unicast reverse path whichcan ect ingress ltering due asymmetry inter-domain routing infer sourcereachability correctly compute source reachability route-based packet ltering context bgp minimum augmentation bgp introduction separate protocol disseminates source reachability information required forexample inthelatter abgp-likeprotocolthat propagates reverseas-path informationcommunicating source reachability destination reachability facilitate route-based lter table construction element number reverse as-path bgp receive packets source pre targeted destination ipaddress semanticsofsemi-maximal lters issues arise increased messaging overhead cost weighed potential bene derived ddos attack prevention safety tobeviolated non-spoofedpackets whichmayfailtohold atleastoccasionally source reachability information cientlysynchronized consistent withdestination ininter-domainpolicyrouting someas reachabilityinformation lems whetheritse ectare tolerable withrespecttodiscarding valid packets non-persistent ect similar areadditional ectiveimplementation cientimplementability question ipinternets bgp dominant inter-domain routing protocol route-baseddpf sachilles heel weviewthecontribution ofthispapertolieinthede damental solutions denial-of-service attack problem additional internet structure injected respect showing ltering performance depends power-law structure properties internet connectivity plement route-based dpf minimize overhead conclusion presented proactive reactive approach ddos attack prevention based route-based distributed packet ltering shown route-based dpf cacy proactively curtailing spoofed ows reachingtheirintendedtargets nospoofedip canpenetrate isintrinsicallydi culttoachieveininternet topologies maintaining sparsecoverage mitigated fact spoofed ows escape lter net localized candidate sites facilitates cient iptraceback haveshownthatthe lteringe ectachievedbyroute-based dpf sensitive underlying internet connectivity structure shown power-law facilitating cient proactive reactive ltering finding efcient implementations computing semi-maximal lters evaluating costs deployment banga druschel andj mogul resource containers serversystems inproc ofthethirdusenix acm symp implementation osdi pages feb bellovin icmptracebackmessages mar internetdraft draft-bellovin-itracetxt expires september burchandb cheswick tracinganonymous thsystems administrationconference lisa pages cert certadvisoryca- jan http cert advisories ca- html cert institute andcerias consensus attacks feb http sans ddos roadmap htm faloutsos faloutsos andc faloutsos proc ofacmsigcomm pages fergusonandd senie networkingress ltering sourceaddressspoo rfc garber computer pages apr gareyandd johnson computersand intractability aguidetothetheoryof np-completeness freemanandcompany govindananda reddy ananalysisofinternet inproc ieeeinfocom howard internet phdthesis aug jin chen ands jamin inet internet topologygenerator technicalreport cse-tr- departmentofeecs universityof michigan meadows inproc ofthe june medinaandi matta brite exiblegeneratorof internettopologies technicalreport bu-cs-tr- bostonuniversity jan morris aweaknessinthe bsdunixtcp software tbelllabs feb routingdata supportedbynfs http moat nlanr net routing rawdata nightaxisandr puppy purgatory learning http packetstorm securify papers contest rfp doc pansiotandd grad intheinternet papadimitriouandk steiglitz combinatorial optimization algorithmsandcomplexity prentice hall parkandh lee onthee ectivenessof denialofserviceattack inproc ieeeinfocom pages postel internetprotocol sept rfc sager owd nov workinggroup savage wetherall karlin andt anderson inproc ofacmsigcomm pages aug schuba krsul kuhn spa ord sundaram andd zamboni analysisofadenialof serviceattackontcp inproc ofthe ieee symp onsecurityandprivacy pages songanda perrig advancedandauthenticated technicalreport ucb csd- universityofcalifornia berkeley toappearin ieeeinfocom spatscheckandl peterson defendingagainst inproc ofthethird usenix acmsymp onoperatingsystemsdesign andimplementation osdi pages feb systems oods usingciscorouters aug http cisco warp public html team denialofservice feb techtips http cert tech tips denial service html ndrevision team intrudertoolsworkshop nov http cert reports dsit workshop pdf waxman ieee journal selected areas communications pages dec zwicky cooper chapman andd reilly associates ndedition 
enabling conferencing applications internet overlay multicast architecture yang-hua chu sanjay rao srinivasan seshan hui zhang carnegie mellon yhchu sanjay srini hzhang cmu abstract cernswithipmulticast werefertosuchan whileendsystem akeyconcern vironmentsarepromising inthispaper uenceendsystemmulticastdesign andvideoconferencing weconductan ourresultsdemonstrate plications theperformancebene tsaresigni ourresultsindicatethat numberf andbynsfundergrantnumberscareerawardncr- aniitraward aniandani- additionalsupportwas providedbyintel pretedasrepresentingtheo cialpolicies eitherexpressed orimplied ofdarpa nsf intelortheu government permission make digital hard copies part work personal classroom granted fee provided copies made distributed pro commercial advantage copies bear notice full citation rst page copy republish post servers redistribute lists requires prior speci permission fee sigcomm august san diego california usa copyright acm introduction overthelastdecade ing multi-partygames contentdistribution andbroadcastingcanbesupportedusingipmulticast ipmulticastisyetto scalability recently therehasbeen functionality whereallmulticastrelatedfunctionality packetreplication werefer inthis architecture distributedprotocol endsystemsattempttooptimizethee advantages approach ceptablylow environments internetenvironments aredynamic heterogeneousandunpredictable inthispaperwefocusonakey anenvironment classofapplications internetbasedconferencingapplicationshavereceivedagreat duringwhichexcellenttoolslike vic vat rat weredeveloped conferencingapplicationshavestringentperformancerequirements andare theynotonlyrequireahighsustainedthroughputbetweenthesourceand receivers weshow wepresenttechniques andyetremainresilientto figure end system multicast ofthesequantities ratingthemintonarada presentedin inaddition webelievethatthey couldbene tionsaswell ourtest-bedcomprisestwentymachinesthataredistributedaroundnorth america asiaandeurope bothfromthe withourscheme sourcetothatreceiver whenourtechniquesareincorporatedintonarada ofover inboththroughput andlatency finally webeginbyprovidinganoverviewofendsystemmulticastand section presents sections andresults finally wediscussourresults presentrelated work andsummarizeinsections end system multicast inendsystemmulticast castgroup organize internet forinstance considerfigure whichdepicts aphysicalnetworkwherer andr arerouters anda anddareendsystems figure showsanoverlaytree rootedatsource whilefigure alsoshowshowthis avors tures intheformer ina anorganization endhostsattachthemselves itrequiresabsolutely andallmulticast byavoidingper-group stateinrouters byipmulticastareavoided deploymentisnot anissue finally featuressuchaserror signi cantlysimpli self-organize overlay network ciently forwardsmulticastpackets multicastinthelastyear theseself-organizing agroup managementcomponent anoverlayoptimization component group management component ensures theoverlayoptimizationcomponentensuresthatthequalityoftheoverlay remainsgoodovertime formance work theoverlaycanbe modi poorlinks oneapproachis membersexplicitly yoid andovercast adoptthisapproach analternate andnarada firstthey theyconstruct reverse mesh whileintheextremecase overlaylinks inagroupconsistingofn members typicallyprotocolstry routinglow giventhatthe nalspanningtreesareconstructedfromamongtheoverlaylinkspresentinthemesh rstplace thereaderisreferredto forfurther discussionofthetreerstandmesh- rstapproaches conferencing applications overlay design sions inthissection webegin conferencingapplications performance requirements quirelowlatencies andneedto sustainhighbandwidth incontrast broadcastingand bandwidth andlatencyisnotaconcern gracefully degradable figure architectural framework supporting conferencing applications inapplicationquality thisisincontrastto letransferapplicationsthatrequirereliabledatadelivery session lengths lastingtensofminutes incontrast applicationslike letransferandsoftwaredownloadingmaybeshort-lived lastingfor thedurationofthetransfer group characteristics groups membershipcanbedynamic thisisincontrasttoapplicationslikebroadcasting source transmission patterns typically conferencingapplicationshaveasourcethattransmitsdataata xedrate thereisusuallya incontrast largescale outasession forexample ics lems forexample gestioncontrolprotocol figure isthe source links a-b c-d mbps ofconferencingapplicationsareonekeyaspectthatexistingendsystemmulti- castsystemscannotsupport inthispaper wefocuson optimizing dual metrics overlaylinksneedtobe ceiver optimizing dynamic metrics internetlatenciesand andtheoverlayneedsto frequent conferencing optimized overlays inthissection whilewebelieveourideas protocols protocol andrunsa ontopofthemesh furtherdetailsofnaradacanbefoundin dealing dual dynamic metrics bandwidthcanbedi cult lingthisproblem bywangandcrowcroft rstchoiceistooptimizethe bandwidthandlatency itisnotclearhowthis asecondapproachisto frontedwithtwocon ictingoptions onewithbetterlatency webelievethatthis prioritizationre bychoosingmultipleroutingmetricsinthedistancevectorprotocolrunning onthemesh-the bandwidth andthe latency theoverlaylink shortest widest pathalgorithmpresentedin membertriestopickthe widest highest bandwidth path toeveryothermember thesamebandwidth lowest latency pathamongallthese ture concernsofinstability scribedbelow latency theadvertised amount bandwidth thingalgorithm toproduceasmoothed estimate insteadofusingthesmoothedestimateasaroutingmetric wede thesmoothedestimateisroundeddowntothenearestbandwidthlevelfor routingpurposes timateof widthof kbps kbpsand kbps whilewemove belowthecurrentlevel matesigni thenextlevel xed sourcerate rate butalsoallowslatency erentlinkshave givenagoodqualitymesh themechanismsdescribed membersprobenon-neighborsatrandom andmayaddanew ceedsathreshold members monitorexisting links threshold theutilitygain andcostarecomputedbased degrades added dropped andthesigni canceoftheimprovement degradation metric estimation inthissection section erent mechanisms collecting forlinksthatarenot odically currentlyevery milliseconds exchangingpacketswiththeirneighborsandestimatingtheroundtriptime andthereisdata owalongameshlink wemaydirectly protocol linkswhenthereisdata owalongthem membersperiodicallyadvertisetheratesatwhichtheyaretransferringdata theneighborcomparesthisadvertisedestimate withanestimateofdatait iftheratesarecomparable bandwidth link whichinvolvestransferringdatausingtheunderlyingtransportpro- tocolfor seconds sourcerate head numberofsuchmeasurements forexample amachinebehindadsl oramodem othermember wepingthe rsthoprouter onthemember spathtotheinternet anddeterminethe inmanysituations memberb members sperformance adeterminesthequalityofb sperformancetoothermembersbyexaminingitsroutingtablewhichitobtainsusing ndthismechanismhelpfulinheterogeneousenvironments whereagood adslconnection orinaccurateduetonoiseinherentinthesemeasurements tokeep amembermayprobe amember thelast veminutes experimental evaluation canendsystemmulticastmeetthebandwidthandlatencyrequirementsofcon- toanswerthesequestions insection oftheseschemes oursistheonlyonethat ornone atall section insection twoimportantfactorsa thesecriticalfactorsare lessdemanding erent speedconstantbitrate cbr sources cbrencodingsare andmakeourevaluationconvenient erentdegreesofheterogeneity primary set andthe extended set theprimary set hosts extended setcontains hosts andhostsinasiaandeurope inadditiontothehostsin primary set intheextended set weeksonawideareatest-bed ourexperimentsmeasure thesourceandthedi erentclients wealsomeasurethe ferentoverlayschemes wevaryboththesource indi erentconditions schemes constructing overlays thenaradaprotocol anddi erfromeachotherbased wecomparethe sequential unicast toanalyzethee ciencyofascheme forconstructingoverlays bestpossibleoverlaytree weapproximatethisbythesequentialunicasttest whichmeasuresthe toeachrecipient independently intheabsenceofotherrecipients poses random dom andaddresses prop-delay-only astaticnetworkmetric inourevaluation latency-only bandwidth-only thesetwoschemes noregardtotheothermetric theyareprimarilyused bandwidth-latency structoverlays manyofourhostsareon mbpsconnections andweuse sourceratesashighas mbps topreventobviouslybad prop-delayonly pre-con gureddegree ourevaluation thathost sconnectiontotheinternet ontheotherhand bandwidth-latency thisenables nearmembers withoutapre-con gureddegreebound experimental methodology uencesthe erenttimes characteristicsmaychangeatanytimeanda ecttheperformanceofvariousexperimentsdi erently ideally weshould thisisnotpossible weinterleaveexperiments erenttimesofthe timescale fashion initially imatelythesametime bandwidthandroundtriptimemeasurementsarecollected eachexperimentlasts minutes exceptsequential unicast asdescribedinsection sequential unicast formationofaunicastpath sequence performance metrics overlaytree bandwidth throughputatthereceiver ofreceivedvideo latency thesourcetothereceivers asseenbytheapplication overlaylinks weideallywishto delaythatisdi culttoquantify wechooseto estimatetheroundtriptime rtt byrtt werefertothe andbacktothesource rttofanoverlaypath s-a-r-a-s andareideallytwicethe end-to-enddelay resource usage thismetricde nedin capturesthe toallreceivers thecostof inourevaluation weassumethecostofaphysicallinktobethepropagationdelay ofthatlink cient forexample infigure thecost delay ofphysical linkr thecostoftheoverlaylinka wede nethenormalized resource usage ofanoverlay withipmulticast isthesumofthecosts delays ofthephysicallinksofthe ceivers inourevaluation ceiver wouldconstruct cal bydoinga traceroute whileresourceusage theobjective laytreethatdi metrics itiseasyto ismuchmoredi erenthostsobserve withafewsimplemetrics meanbandwidthandlatency manceacrossdi erentreceivers dividualreceiversees aparticularschememaycreate erent overlay layout experimental run erentperformanceacrosstheruns overlaysareofanydi erentquality weneed awhole forasetof nreceivers andassigna rank toeachreceiverfrom ton isassignedarankof assignedarankof foreveryrank wegathertheresultsforthereceiverwithrankracrossallexperiments computethemean arankr theresultforrank representstheperformance inanyexperiment rank sons erentruns forexample butmany variabilitymayalsooccurduetochangesininternetconditions suchastimeofdaye ects potentiallynooverlay ourresultsinsection demonstratethatsome schemeconstructs weuseafourthmetric protocol overhead thismetricisde nedasthe cthatentersthe cthatentersthe network crequiredto keeptheoverlayconnected andtheprobetra candactive process implementation issues runningattheuserlevel andby optimizingthecode wehaveusedtfrc astheunderlyingtransportprotocoloneachoverlaylink asdiscussed insection tfrcisrate-controlledudp andachieves tcp-friendlybandwidths itdoesnotsu erdelaysassociatedwithtcpsuchasretransmissiondelays andqueueing delaysatthesenderbu experimental results runinsection section andsection presents results typical run andhowthequalityofthe overlayvarieswithtime aweek-dayafternoon usingthe primary set ofmachines andatasourcerateof mbps thesourcehostisat ucsb figure asafunctionoftime sourceucsb secondsfor theoverlaytoimprove goodbandwidth afterabout seconds andformostof thesessionfromthistimeon themeanbandwidthobserved thisindicates thesession figure averagedacross themeanrttisabout msafterabout seconds andremainslowerthanthis figures showthatinthe rstfewminutesofthe session frequentintervals formation inmostofourruns giventhis wegather ofourexperiments scheme seconds ananalysis alinkintheoverlaytree theoverlayisabletoadapt bandwidth kbps time seconds figure bandwidth averaged receivers function time rtt time seconds figure rtt averaged receivers function time asindicatedbythe andrecoversin seconds varyduringasession figure plotsthecumulativedistributionoftherttestimatestoeveryreceiver foreach receiver eachcurve andeachpointindicates forallreceivers whileover assuming thisindicates msmostofthe time andlessthan msalmostallthetime comparison schemes overlays cumulative percentage rtt figure cumulative distribution rtt curve receiver primary set anda sourcerateof mbps ofhostsinthe primary set cansustainthroughputsof mbps tiallyworkreasonablywell weconsidertheprimary set butatasourcerateof mbps thisenvironmentis fewer creasedsourcerateandthus severalhosts mbpsconnections thehost schemesthatworkwellat mbpspotentiallyworklesswellat mbps finally tostressour scheme bandwidth-latency extended set andassumingasourcerateof mbps webelieveour primary set mbps source rate figure erentschemes scheme averagedacrossallruns theerror-barsshowthe standarddeviation thustheydonotindicatecon dencein themean mayinvolve forexample rank withtherandom scheme receivesabandwidthof alittlelowerthan kbpsonaverage weusethesame make observations sequential unicast getclosetothesourcerate asindicatedbyoneofthetop lineswithadipatrank bothbandwidth-latency andbandwidth-only unicast thecurvesareslightlyo presentation bandwidth kbps rank sequential unicast bandwidth-latency bandwidth-only random figure bandwidth versus rank mbps source rate primary set machines rtt rank sequential unicast bandwidth-latency bandwidth-only random figure rtt versus rank mbps source rate primary set machines chineinanyrunreceives kbpsonaverage interestingly sequential unicast giesininternetrouting random onaverage theworstperformingmachinewiththerandom scheme rank ameanbandwidthofabout kbps theperformanceofrandom largestandarddeviation mancewith random eveninrelativelywellconnectedsettings figure bandwidth kbps rank sequential unicast bandwidth-latency latency-only prop-delay-only figure bandwidth versus rank mbps source rate primary set ofexperiments sequential unicast bandwidth-latency isgoodatoptimizing theoverlayfordelay anrttofabout msonaverage bothrandom bandwidth-only performconsiderablyworse random resultsinanrttofabout msfortheworst machineonaverage bandwidth-only resultsinanrttof bothbandwidth-only andrandom canhave inaddition random particularlyneartheparticipatingendhosts whilebandwidth-only maybene 
delay latencyonly underthissetting ndthattheyperformssimilarlytobandwidth-latency inrtt andslightlyworsein bandwidth eveninverysimplesettings primary set mbps source rate inthissection betweenbandwidth-latency andtwodelay-basedschemes prop-delay-only andlatency-only figures present ferentschemes mbps asindicatedbythe sequential-unicast test bandwidthlatency canoutperformsequential unicast formachineswithlower rank andpropdelay-only performpoorlyinbandwidth formachinesof rank bandwidth-latency canoutperform prop-delayonly latency-only byover kbps propdelay-only andlatency-only canprovidereasonableperformanceatsourceratesof mbps theyareunableto mbpswith thesamesetofmachines rtt rank sequential unicast bandwidth-latency latency-only prop-delay-only figure rtt versus rank mbps source rate primary set fromtheperspectiveofrtt ndthat bandwidthlatency latencyonly schemes achieve performance close sequential unicast surprisingly prop-delay-only achievesrttsatleast msmorethan bandwidth-latency formachinesoflowerrank andthus thisisbecause thisobservationbecomesparticularlyimportantinourenvironment wheremanyhostsarebehind mbpsconnections host gureddegree boundsrecommendedin thisstrategyisnotcapableofdealingwithdynamiccross-tra incontrast dynamicnatureof bandwidth-latency latency-only inthisenvironment bandwidth-latency buttherttresultsareworse finally prop-delay-only whileanalyzingtheperformanceofdelaybasedschemes extended set mbps source rate primary set goodperformancerequiresconsideringbothbandwidthandlatencyas tofurtheremphasizethe count representedbytheextended set figures plotthe ofinterest thesequential unicast ciesfromthesource thesetweconsider bandwidth-latency tothe sequential unicast test apartfromthelesswellconnectedhosts ranks allothermembersgetbandmean bandwidth kbps rank sequential unicast bandwidth-latency bandwidth-only latency-only figure bandwidth versus rank mbps source rate extended set machines rtt rank sequential unicast bandwidth-latency latency-only bandwidth-only figure rtt versus rank mbps source rate extended set machines widthsofatleast mbps andseerttsoflessthan onaverage forranks bandwidth-latency isableto formancethan sequential unicast aparticularlystriking onlyoneofwhich ourruns toachievesigni theothermachineintaiwan weobservethat bandwidth-only resultsinhigh rtt latency-only forexample formachinesofrank bandwidth-latency kbpsmorethanlatencyonly mslowerthan bandwidth-only bandwidth-latency hassmaller standarddeviations widthandlatency finally weobservethat bandwidthlatency inbandwidth andtolatency-only inrttindicatingthat experimentsetup primary primary extended mbps mbps mbps unicast random latency-only bandwidth-only bandwidth-latency min-span table average normalized resource usage schemes summary comparison results cientoverlaysoptimizedforbothbandwidthandlatency asrequired eveninextremelyheterogeneousenvironments bandwidth-latency hasperformance comparabletosequential unicast andsometimesperforms notonlyinbandwidth butalsoinlatencies goodbandwidthperformance especiallyathighersource rates conversely theseresultsindicate theinternet network level metrics table section schemesfordi determinedasexplained insection withavalueof representinganoverlaytreethathasthesameresourceusage asipmulticast weconsiderthe ientsrootedatthesource andschemessuchas random highresourceusage widthalone bandwidth-only makelesse cientuseofnetworkresourcescomparedtoprotocolssuchas bandwidthlatency andlatency-only rics theresourceusagewith bandwidth-latency whichre ectsthecostin finally theresource usagewith bandwidth-latency increaseswithsourcerate experimentsetup primary primary extended mbps mbps mbps averageoverhead bandwidth overhead probes dueto table average overhead bandwidth-latency breakdown overhead intheprimary set members thecompletegraph andastable shows deedmakease cient thanipmulticast aree itisnotclearthat theyaree table section involvedin bandwidth-latency alongwithabreakdownof acrossall settings low morethan oftheoverheadisdueto othersources ofoverheadcontributejust oftheoverhead motemembers thiscon ofbandwidthprobes introducedinsection areabletoreducearound minuteperiod inexperimentswiththe extended set hostsinasiaandeurope ing wepresent adapting network dynamics section overlaysneedtoadaptby inthis section andstudythefactorsthat tostudytheseissues theinternetwherewearti andevaluatehow ourstudy overlayscheme bandwidth kbps time seconds switch umass switch unc inject congestion lower estimate ucsb udel figure demonstrating adaptation network congestion controlled experiment mary set thesource locatedatucsb sendscbrtra mbps werandomly choosea victim fromamongthereceivers andsimulatea wesimulatecongestionbyrandomlydropping ofthepacketsattheparent ingnetworkcongestion ahighlossrate manceofthatlink asaresult thebandwidthreceivedby thevictimdropssharply ifthevictimisnota leafintheoverlaytree allthe descendants ofthevictim willsu ectsofcongestion tobandwidthchangesalone periment figure asafunctionoftime ofinterest inthisexperiment amachineatu delaware udel victim congestion introduced attime andudel width udelstartsobservinggoodperformance secondslater formally weconsiderareceivertohave recovered fromcongestionwhenit ofthestable bandwidth seconds isintroduced wede nerecovery time asthetimeittakes forahosttorecover protocol asfollows detection time eventitshouldadaptto inourscheme weconsidercongescumulative probability time seconds recovery time detection time reaction time repair time figure cumulative distribution recovery time components victim hosts section inthisexperiment thedetectiontimeis seconds reaction time takestomakethe detected inthisexperiment udelswitchestothehost umassin seconds repair time rstparentchange inthisexperiment udelswitchestothehostunc secondsafterswitchingtoumass thereactionandrepairtimeshowevermeasurehowquicklyour controlled experiments experiments andanaverageof descendantsintheother experiments figure weconsider formostofthecases recoverytimeisbetween seconds thelargestcontributory factorisdetectiontime whichisusuallybetween seconds incontrast relativelyshort andtwodi erent mostofthecases themeshasitsnewparent neighbors afewcaseshowever era betterpathtothesource insuchcasesthevictim andthis processcantakelonger finally weobservethattherepair timeiszeroformorethan ofthecases thisindicates adaptationprocess cumulative percentage recovery time seconds victims descendants difference figure cumulative recovery time victims descendants erence asthedi periment apositivedi figure showsthecumulativedistributionoftherecoverytimeofthedescendants andthevictims aswellasthedi erence weobservethat exhibitsimilartrends morethan ofdescendantsrecoveratthesametimeastheirrespectivevictims asshownbythedi erencecurve furtheranalysisindicates thatabout ofparent ingeneral thedetection timesarearound seconds ourdesignchoicehas beenmotivatedbytwocon ictingconcerns iftheoverlay duration thebene iftheoverlay adaptstooslowly theapplicationswouldsu eraperformancepenaltyduringthetransientperiod althoughwe wellinpractice groundedona netcongestion discussion vironments toachievegoodperformance itisimportantthatoverlaysdynamicallyadapttobothbandwidth andlatency inthefuture ferencing timatepathbandwidths becostly forgroupsaslargeas twentymembers intheabsenceofinitialnetworkinformation self-organizingprotocolsmusttakesometimetodiscovernetworkcharacteris- ticsandconvergetoe cientoverlays currentlytheconvergencetimeisabout minutes whilethismaybeacceptableinconferencingapplicationswhichtypicallyhave alongduration applications finally seconds tradeo bilityofoverlaytopology environments environments asmentionedinsection endsystemmulticastoccurs avors peer-to-peerarchitectures thediscussioninthis ratherthanthespeci cway service mationacrossgroups thisallowsproxiestoexploitpasthistoryofnetworkperformance sharingofnetworkinformation overlays athirdadvantageof networkmoreeasily finally proxiesarethenaturalcoordinationpointsformanaging network resourcesamong whencongestionoccurs tages supportmillionsofgroups thisisbecauseeachendhost itactuallyparticipates tectures whereeachrecipientgets potentiallyredundant withafraction ofthedata owingalonganygivenpath thismulti-path inthispaper paths doesnotradicallya recipient datadeliverycanbe rorcorrection concurrently including potentiallypoor linksforwhichno thisinturnminimizestheneedforactivebandwidthmeasurements andcan related work severalstudies toourknowledge thisisthe environment centlyinanoverlaysetting gossamer narada yoid andmostrecently bayeux haveonlyconsidered delaybasedmetrics theyhavenotaddressedimportantissuespertainingtothedynamicnatureofthese metrics overcast asourresultssuggest consideringboth moree cing applicationperformance almi almi minimumspanningtreesaree cientfromthenetworkperspective applicationperspective summary geneousinternetsettings set atsourceratesofboth mbps mosthosts areabletosustainover ofthesourcerateonaverage inextremely extended set themean receiver forexample inexperimentswiththe extended set bandwidthlatency canprovide severalranks metricslikerandom performmuchworse forgroupswith members theyaredesigned toadaptatthetimescaleof seconds adaptation atthistimescalemaybesu cientinlessdynamicenvironments ourtechniques weconsider andmechanismsfor acknowledgements iments wethankjasonflinn jungao jorjetajetchevaandthe presentationofthepaper binomial inproc ieee infocom april chawathe scattercast anarchitecturefor service fall thesis chu rao andh zhang acaseforend systemmulticast inproceedings acm sigmetrics june deering extendedlans inproceedings acm sigcomm august floyd handley padhye andj widmer applications inproceedings acm sigcomm august francis yoid http aciri yoid april hardman sasse handley anda watson inproceedings inet june jacobsonands mccanne visualaudiotool vat http www-nrg lbl gov vat jannotti ord johnson kaashoek andj toolejr overcast reliable inproceedings fourth symposium operating system design implementation osdi october mccanneandv jacobson vic exible frameworkforpacketvideo inacm multimedia november pendarakis shi verma andm waldvogel almi inproceedings usenix symposium internet technologies systems usits march savage collins man snell anderson theend-to-ende ectsofinternetpath selection inproceedings acm sigcomm august zhuang zhao joseph katz kubiatowicz bayeux proceedings nossdav tananda zakhor transportprotocol inieee trans multimedia vol june wangandj crowcroft bandwidth-delaybased routingalgorithms inieee globecom november 
fast scalable layer switching srinivasan varghese suri waldvogel abstract layer switching route resources allocated packet determined destination address header celds packet source address tcp udp port numbers layer switching uni ces crewall processing rsvp style resource reservation clters qos routing normal unicast multicast forwarding single framework framework forwarding database router consists potentially large number clters key header celds packet header matchmultiple clters clter cost packet forwarded cost matching clter paper describe algorithms solving cost matching clter problem high speeds crst algorithm based grid-of-tries construction works optimally processing clters consisting pre celds destination-source clters linear space algorithm cross-producting fast lookup times arbitrary clters potentially requires large storage describe combination scheme combines advantages schemes combination scheme optimized handle pure destination pre clters memory accesses destination-source clters memory accesses worst case clters memory accesses typical case introduction building web sites internet usage expanding rate commonly nuclear reactions internet tra exploding growing number users growing demand bandwidth intensive data multimedia applications instance computer science department washington louis research supported part nsf grant ncry computer science department washington louis research supported part nsf grant ncrand onr young investigator award computer science department washington louis research supported part nsf grant ncrx computer science department eth zurich easily consume megabytes bandwidth tokeep increased tra link speeds internet core increased mbps number vendors providing faster routers traditional router performs major tasks forwarding packet packet destination address router database switching packet incoming link outgoing links recent advances task switching understood vendors fast buses crossbar switches algorithms developed recently address lookup inherent impediment building gigabit routers traditional data forwarding internet increasingly users demanding router vendors providing discriminating form router forwarding quote john mcquillan routing traditionally based solely destination host numbers future based source host source users destination urls universal resource locators speci business policies future path casually browse web cnn headlines routed berentway corporate web site enter monthly sales cgures sites hosted facility location order entry form low latency sections normal service web sites comprised berent servers berent locations future routers switches class service qos determine paths web pages end-users requires layers vision forwarding called layer forwarding routing decisions based headers layer higher osi architecture layer switching bers increased dexibility router capability block tra dangerous external site reserve bandwidth tra company sites give preferential treatment kind tra online database transactions kinds web browsing layer switching referred vendor literature phrase cservice berentiation traditional routers provide service berentiation treat tra internet address layer switching service differentiation router distinguish tra based origin source address application type web tra cle transfer layer switching eculties change higher layer headers require reengineering routers whichiswhy routers traditionally layer headers data encrypted security clear routers access higher layer headers eculties variants layer switching evolved industry routers implement crewalls trust boundaries suchas entry exit points corporate network crewall database consists series packet clters implement security policies typical policy remote login corporation disallow corporation predictable guaranteed service lead proposals reservation protocols rsvp reserve bandwidth source destination cries routing based tra type strident recently instance route web tra site site onsay route tra route figure illustrates examples subnet subnet database router traffictype forwarding directive video forward drop traffic reserve mbps figure clters provide tra sensitive routing crewall rule resource reservation crst clter routes video tra shown default routing clter blocks tra experimental site accidentally leaving site clter reserves mbps tra internal network external network implemented byforwarding tra special outbound queue receives special scheduling guarantees andyare pre cxes users dexibility features provided crewalls tra reservations qos routing hard future routers ignore issues genie appears bottle camel entered tent depending point view hand clear hoc solutions deployed cleaner general techniques cleaner solution tra sensitive routing reservation problem push form ctra classi cer routing header determine application requirements inspecting higher layer headers cnal solutions clear future routers forward tra based combination destination address source address grateful craig partridge john wrocklawski sharing ideas opinions classi cer celds routing layer higher layer layers headers paper neutral stance issue choosing combination celds function issue deciding functions concentrate general problem router forwarding database consists anumber clters conjunction exact range pre matches set packet celds describe family ecient algorithms cnding matching clter packet determines packet route resource allocation access rights concerned cnding algorithms efccient implementable gigabit speeds scalable large numbers clters clters reasonable memory costs firewalls today contribute typically clters backbone routers pre cxes qualify destination precx port numbers qos routing source pre cxes resource reservation sites virtual private network hard imagine hundred thousand clters today crewall processing clters generally slow linear search clter set considered acceptable price pay csecurity problem cnding matching clter clters gigabit speeds importantchallenge rest paper organized formulate matching clter problem precisely section section brie discuss related work section showhow replace range matches pre matches section describe crst scheme gridof-tries scheme cross-producting section discuss lower bounds show culty general clter problem section present ascheme combines features grid-of-tries cross-producting section finally discuss implementation results section conclude section matching filter problem traditionally rules classifying message called clters rules crewall terminology layer switching problem determine lowest cost matching filter incoming message router assume information relevant lookup contained distinct header celds message header celds denoted celd string bits instance relevant celds ipv packet destination address bits source address bits protocol field bits destination port bits source port bits tcp dags bits number relevant tcp dags limited prefer combine protocol tcp dags celd tcp-ack tcp packet ack bit set relevant tcp dags represented similarly udp packets represented udp combination tcp-ack denotes header packet destination source tcp dags important packet cltering crst packet connection ack bit set simple rule block tcp connections initiated allowing responses internally initiated connections protocol tcp destination port source port ack bit set clter database ofalayer router consists nite set clters clter combination values header celd celd clter allowed kinds matches exact match pre match range match exact match header celd packet match clter celd instance protocol dag celds pre match clter celd pre header celd blocking access subnetwork range match header values lie range speci ced clter port number ranges clter directive act speci ces forward 
packet matching clter directive speci ces packet blocked packet forwarded directive speci ces outgoing link packet queue link message belongs dow bandwidth guarantees wesay packet matches clter celd matches celd matchtype implicit speci ccation celd instance destination celd speci ced requires pre match protocol celd udp requires exact match port celd range requires range match instance tcp clter act block packet header tcp matches blocked packet tcp hand doesn match packet matchmultiple clters thedatabase associate cost clter determine unambiguous match clter database non-negativenumber cost goal cnd clter cost matching packet header cost function generalizes implicit precedence rules practice choose multiple matching clters crewall applications instance rules clters database speci linear order clter takes precedence subsequent clter goal cnd crst matching clter bect scheme making cost equal position number database clter database crewall database shown figure screened subnet con cguration assumed so-called bastion host company mediates access external world serves mail gateway external server access network time protocol ntp sources internal company external address secondary server external company addresses machines company network start cidr pre net match pre net packet senttom udp destination port equal packet matches filters allowed crst matching clter filter extend type matches greater dexibility illustrate examples common types port port destination source destination source flags comments inbound mail udp net net tcp ack secondary access incoming telnet ntp time info outgoing packets return acks block everythingl udp dns access figure sample crewall database cfor small company book cheswick bellovin block dags shown cgure crst clters block false clter block true block related work anywork directly related fast clter processing packet clters demultiplexing time instance solve berent problem filters matching rules wildcards address ranges arbitrary celds require return crst matching clter address lookup problem closely related problem lookup problem simpler special case clter problem cross-producting scheme matching pre building block packet cltering unpublished paper bypaul tsuchiya describes data structure called cecilia dealing noncontiguous net masks cecilia generalized call set pruning trees layer switching scheme bers memory explosion makes impractical clter database size large figure shows tsuchiya scheme simple methods exponential memory blowup section describe basic idea set pruning trees existing crewall implementations linear search database track matching clter implementations caching toimprove performance cache full packet headers speed processing future lookups cache hit rate caching full addresses routers cache hit rates muchworse caching full headers incurring linear search cost search clters bottleneckeven occurs packets cost matching clter thoughtofasa special case general multidimensional searching problem general solutions exist problem celd clter thoughtofasakdimensional rectangular box packet header thoughtofasapoint k-dimensional space cost clter matching problem cnd cost box header point general result computational geometry bers data structure requiring logn space search time logn logarithms base instance section worst-case search memory costs data structure infeasible modest values instance worst-case search cost memory cost recent approachtolayer switching wehave unable determine details scheme appears range matching hardware technique generalize binary search quad-tree construction higher dimensions instance instance destinationsource clters correspond two-dimensional search clter mapped quad-tree cell bits long bits long binary searchby crst matching packet clters quad-tree cell maximum bit length destination source pre problem probe outcome fail match eliminates quadrant search space requires recursive calls dimension cnish search leads large search time wayto avoid making recursive calls precompute future matches markers leads infeasible memory explosion wehave shownalower bound hashing schemes show generalize poorly multiple dimensions summary existing methods lead large blowup memory lookup time cost clter problem converting address ranges pre cxes clter celd speci ced range common range port numbers instance crewall clter require source port greater arbitrary range converted union pre ranges pre range expressed pre instance -bit celd pre expresses range suppose wewanttoconvert arbitrary range lies enclosing binary range cne anchoredrange endpoint end enclosing range arbitrary range split anchored ranges lie anchored range split logarithmic number pre ranges constantly halving range stage halving contributes pre range net result represent arbitrary subrange pre ranges -bit port numbers range expressed pre range hand range expressed pre ranges rest paper assume clter celd pre grid-of-tries crst scheme based simplest form trie binary branching tree branch labeled pre node concatenation bits root node figure instance leftmost node dest-trie pre node basic data structure called grid-of-tries designed handle two-dimensional clters destination-source pairs signi ccant algorithm rightbecause large backbone routers mayhave large number destination-source clters handle virtual private networks multicast forwarding grid-of-tries extended albeit loss eciency handle clters celds suchasport numbers section start explaining basic dimensional data structure database destination-source clters shown figure examples destination-source note idea abstracted handle clters anytwo pre celds remaining celds completely wildcarded filter destination source figure dest-source clters set pruning trees motivate grid-of-tries scheme begin describing dimensional set pruning trees build trie destination pre cxes database figure illustrates construction database figure valid pre destination trie dest-trie points trie source pre cxes question source pre cxes store instance clters destination pre store source pre cxes storing clters ecient clters match destination matches fact wildcard destination pre matches matches suppose packet destination header starts source address starts cost clter matching header lowest cost clter suggests store source trie source precxes clters destination pre figure shows complete data structure database figure trie crst match destination header dest-trie yields longest matchonthe destination pre traverse source trie cnd longest source match search source trie wekeep track lowest cost matching clter clters matching destination pre stored source trie searched cnd correct cost clter basic idea set pruning trees simple extension dimensions memory blowup problem problem arises source pre occur multiple figure instance source pre cxes trie worst-case forcing memory created set clters shown figure problem destination pre matches destination header source pre cxes copied times destination pre dest-trie source figure crst idea grid-of-tries require memory clters worst case dest-trie trie destination pre cxes nodes valid destination pre database shown solid shown circles valid destination pre pointer trie source pre cxes belong clters destination celd pre filter destination source figure forcing memory fortwo dimensional set pruning trees similar examples apply number simple schemes show storage dimensional clters avoiding memory blowup order avoid memory blowup simple trie scheme observe clters 
destination pre copied source trie pre instance figure pre clters copied destination celd pre similarly copied destination celd pre avoid copying byhaving destination pre point source trie stores clters destination celd requires modify search strategy searching source trie matching destination pre wemust search source ancestors order search cost clter crst traverse dest-trie cnd longest destination pre matching header search source trie update cost matching clter work back dest-trie search source trie pre points nonempty source trie clter stored memin scheme search source pre cxes destination order changing search time order order motivate cnal scheme dest-trie source figure avoiding memory blowup storing clter trie ory requirement structure whichis signi ccantly improvementover previous scheme lookup cost scheme worse crst scheme worst-case lookup costs maximum number bits speci ced destination source celds bound search cost observation worstcase wemay end searching source cost total improving search time basic grid-of-tries wenow describe key ideas improving search cost two-dimensional keeping memory requirement linear key idea precomputation switch pointers speed search source trie based search earlier source trie figure shows construction switch pointers switch pointers shown dashed lines source distinguish switch pointers dotted lines connect dest-trie nodes source dest-trie source figure improving search cost switch pointers order understand role switch pointers matching packet destination address source address search dest-trie match westart search matching source pre source trie clters search immediately fails crst bit source previous scheme back dest-trie restart searchin source trie parentof scheme switch pointer directly jump node source trie similarly search bit source fails jump node source trie destination pre intuitively switch pointers jump directly lowest point ancestor source trie good source match current node skip clters ancestor source trie source celds shorter current source match turn improves search complexity wenow cne switch pointers precisely destination string ancestor pre wesay lowest ancestor longest pre destination trie denote source trie pointed recall source celds clters destination celd node fails bit corresponds source pre trie string starting lowest ancestor source trie source string starting pre atnodev place switch pointer node pointing node suchnodev exists switch pointer nil switch pointer failure bit cned similarly instance figure node labeled fails bit switch pointer node labeled switch pointers increase length matching source pre restart root ancestor source trie allowus skip clters source trie source celds shorter current source match instance packet header start crst source trie pointed destination trie node match crst source bit clter fail bit follow switch pointer leads node trie labeled clter switch pointers node nil search terminates note wehave missed clter matches packet case higher cost general overlooked clter havelower cost solve problem byhaving node source trie maintain variable storedfilter speci ccally node destination pre source pre stores storedfilter cost clter destination celd pre source celd pre precomputation node labeled figure store information lower cost finally argue search cost cnal scheme time cnd destination pre time spent traversing source step length match source celd increases traversing trie switch pointer ancestral trie maximum length source pre cxes total time spent searching source memory requirementiso eachofn clters stored clter requires space improvements improvements previous scheme notice role played dest-trie determining longest matching destination pre longest matching destination pre tells source trie start searching point dest-trie plays role wemove source switch pointers crst improvement replace desttrie fast scheme determining matching pre destination address scheme proposed requires logw time worst-case cnding longest matching pre combining scheme grid-of-tries leads total lookup time logw destination-source clters -bit source multi-bit multi-bit crst expand destination source pre multiple instance suppose figure destination pre clters expanded source pre cxes expanded k-bit expansion single pre expand pre cxes total memory requirement grows memory blows factor hand depth trie reduces total lookup time logw depending memory optimize time-space tradeo extending grid-of-tries handle protocol ports wenow describe handle general clters protocol type port number celds speci ced grid-of-tries assume port number celd clter single port number wild card partition clters small number classes requires lookup destinationsource combination eliminate protocol celd cost increasing memory factor main protocols tcp udp protocols grouped class cother purpose packet forwarding note port numbers cned tcp udp protocols replicate times clter protocol celd values protocol tcp udp wenowhave remaining port celds build hash tables combination port celds unspeci ced destination source speci ced hash tables indexed combination port celds protocol celd tcp udp figure clter form tcp crst place entry exist dstport hash table key tcp points grid-oftries structure representing destination source precxes clters prot tcp dstport srcport shown figure clter grid-of-tries structure whichkeeps memory linear number clters finally search header search hash tables turn searching hash table actual port numbers protocol celd tofollow pointer grid-of-tries perform searchwe grid-of-tries search wekeep track lowest matching clter simple optimization combine hash port number celds lookup grid-of-tries extended handle port number ranges creating dimensional cplanes loss eciency scheme crewall clters port number ranges cross-producting crst trie node grid-of-tries figure saves hashes hash table hash table hash table hash table dstport srcport dstport srcport tcp grid destination source fields filters protocol tcp destport srcport figure extending basic grid-of-tries deal port number celds cross-producting grid-of-tries scheme excellent performance dimensional pre cxes matches destination-source clters requires linear memory takes time equivalent lookups source destination address extremely important cases virtual private networks general clters applications crewalls gridof-tries extended handle celds replicating grid-of-tries structure section showed port number celds wildcarded fully speci ced ranges grid-oftrie structures expensive worse wehave handle clters port number ranges wenow describe algorithm cross-producting clter matching problem unlike grid-of-tries cross-producting easily handle arbitrary clters including clters range speci ccations high speeds memory search times predictable grid-of-tries cnal scheme combine features grid-of-tries cross-producting proceed describe cross-producting main idea cross-producting start slicing clter database columns ith column storing distinct pre cxes celd packet determine matching pre celds separately combine results matching pre lookups individual celds main problem lies cnding ecient method combining lookup individual celds single compound lookup end start slicing database figure individual pre celds sliced columns refer wildcard character string default recall mail gateway internal ntp agent tiare full addresses lie pre range net sliced database shown figure 
top column wehave number elements column -tuple formed taking column call crossproduct altogether wehave cross-products sample cross-products shown figure destination celd signi ccant dags celd signi ccant pretend values increase column order cross-products smallest largest anynumber system key insight packet ifwedo matching pre operation celd net destination prefixes source prefixes prefixes srcport prefixes prefixes dstport flags default net default udp tcp ack default default default figure database figure csliced columns column set pre cxes celd crossproduct num matching default default default default default udp tcp ack default default udp default tcp ack default default default default default default tcp ack filter filter filter filter filter filter filter filter filter figure sample cross-products obtained cross-producting individual pre tables figure sliced pre database concatenate results form cross-product cost clter matching cost clter matching formalized simple theorem theorem packet associatedcrossproduct matching clter matching clter proof suppose celd pre celd clter matches matches case berent matching clter clter matches implies celd pre pre happen longer contradicts assumption longest matching pre column basic cross-producting algorithm build table cross-products precompute cost clter matching cross-product shown figure packet header determine cost matching clter packet matching pre operations single hash table lookup cross-product table small databases individual pre lookups reside cache result cache accesses asingle memory lookup hardware eachofthek pre lookups parallel matching packet header udp database figure crossproduct obtained performing matching pre cxes individual celds udp default easily check precomputed clter cross-product filter filters match crossproduct filter cost simple cross-producting algorithm bers memory explosion problem worst case crossproduct table entries number clters number celds moderate values table size reach prohibitively large describe simple optimization reduce memory requirement considerably demand cross-producting major idea reduce memory build crossproducts demand building complete crossproduct table start incrementally add entries table pre tables celd built packet arrives perform matching pre cxes individual celds compute cross-product term cross-product table entry clter returned entry cross-product table cnd matching clter possibly linear search database insert entry cross-product table subsequent packets cross-product yield fast lookups figure shows pseudo-code build search on-demand cross-producting build datastucture called clter tok kisnumber packet celds set distinct pre cxes celd filter pre cxtable buildtable pre table celd crosssearch called arrival packet tok pre cxlookup pre cxtable cross-product hashlookup crossproducttable nil table find crst clter matching hashinsert crossproducttable insert clter return return figure pseudo code demand cross producting on-demand cross-producting greatly improve building time data structure storage cost fact treat cross-product table cache remove cross-products recently wehave discovered number optimizations incremental computation cross-product database clters added defer results paper earlier caching bective caching based cross-producting effective database figure imagine series web accesses internal site external network suppose external destinations accessed addresses correspond crossproduct terms net tcp-ack net full-header caching result distinct entries cache cross-producting cache entries examples lead hit rates cross-product cache standard header caches bene cts on-demand cross-producting validated actual packet traces plan resilient overlay future networks david work andersen lower hari bounds balakrishnan wehave frans kaashoek robert grid-of-tries morris scheme mit works laboratory computer two-dimensional science pre ron nms matches lcs mit http destination-source nms pairs lcs mit requires ron multiple abstract planes resilient overlay grid-of-tries network solve ron problem architecture general clters distributed internet applications hand pure detect cross-producting recover fast path outages require periods prohibitive degraded amount performance memory on-demand seconds cross-producting improving appears today ber wide-area good routing caching protocols solution guarantee worst minutes case recover performance set ron pruning trees application-layer overlay fast top require existing prohibitive internet amount routing substrate memory ron general nodes case monitor functioning observations raise quality natural question internet paths schemes handle hundreds information thousands decide arbitrary clters route packets bounded directly memory fast internet worst-case search times ron nodes optimizing fast application-specific scalable routing scheme metrics exists results completely sets arbitrary measurements multi-dimensional working clters ron deployed general sites scattered multidimensional range searching internet demonstrate ranges benefits dimensions requires architecture instance logn -hour worst-case sampling time period memory march limited twelve-node linear ron size significant outages notice lasting lower bound thirty minutes dimensional case measured paths fast ron routing logn mechanism detect recover dimensional case route special fast twenty seconds scalable average solution showing lower bounds methods fault detection hold arithmetic recovery model work computation discovering alternate paths apply schemes internet based hashing ron improve repeated hashing loss scheme rate latency throughput instance perceived bers data transfers logw solution one-dimensional transfers pre doubled matching tcp problem throughput maximum transfers pre loss length probability reduced plausible found general forwarding solutions packets based techniques intermediate ron node pursue sufficient overcome approach faults based improve repeated hashing performance generalized cases clter matching improvements defer detailed area description fault detection results recovery paper demonstrate benefits summarize moving main results control routing paragraph hands wewere end-systems devise introduction hashing internet scheme organized takes independently hashes operating worst-case autonomous systems two-dimensional pre peer matching problem architecture detailed source-destination routing pre information cxes maintained called scheme single rectangle search research importantly sponsored wewere defense show advanced research matching lower projects bound agency darpa hashes space lower naval bound warfare extended systems center show san diego dimension contract schemes based permission techniques make digital hard require copies hashes part cts work nicely personal classroom lower bound granted multidimensional fee range provided matching copies bottom line made distributed profit twodimensional commercial cases advantage special copies bear extensions notice higher dimensions full citation slow page lower bound copy apply republish schemes post based servers redistribute grid-of-tries lists requires prior plausible specific permission schemes based fee acm emulated symp byschemes based operating systems hashing principles suppose sosp trie scheme october banff node canada copyright acm reached constituent networks operated network service provider information shared providers heavily filtered summarized string root trie search pointer location hash based scheme determine pointer hash table indexed complete path rough plausibility argument applies types trie searchschemes make suspect infeasible cnd ecient generalization gridof-tries higher dimensions theoretical arguments imply layer switching implemented real routers high speeds requiring infeasible amounts memory wedo practice clter databases small number completely general clters crewall clters vast majority clters restricted destination pre cxes destinationsource pre cxes clters celds completely speci ced assumption true leverage assumed distribution clters construct ecient combined scheme describe combined scheme weenvisage clter databases future consist large number pure destination pre clters standard forwarding fairly large number fully speci ced clters destination source port celds fully speci ced bandwidth reservations fairly large number destination-source pre clters multicast forwarding virtual private networks smaller number completely arbitrary clters port ranges crewalls dat worst case cgure types clters makes sense haveascheme optimize important special cases pure destination pre clters wehave previous sections grid-of-tries works optimally destination destination-source pre clters hand on-demand cross-producting handle arbitrary clters predictable speed cache misses makes sense combine twoschemes simplest combination divide clters sets crst set clters pure destination destination-source pre cxes handled single grid-oftries set remaining clters handled cross-producting simple scheme disadvantages common case destination destination-source pre cxes requires cross-producting search remaining clters ensure lower cost clter set cross-producting search requires destination source pre lookup grid-of-tries search wasteful combined scheme attempt terminate grid-of search common cases avoid redundant destination source lookups wehave fall back cross-producting akey idea required early termination concept clter overlap wesay clters overlap packet header matches suppose search cnd clter matches packet ifwe ensure clter database overlaps terminate search output cost clter search match progressively complex clters initially packet matches destinationonly clter overlap clter failing destination-source clter fails cross-product search matching pre remaining celds modify slightly grid-of-tries cross-producting algorithm combined scheme divide set clters sets allocate clters port celds crst set whichwe call 
port-free clter set clters allocated call port-full clter set combined scheme project port-full clters port-full clter create projection clter obtained wild-carding port entries order distinguish original portfree clters projected clters add bit port clter set port-free clters projection port-full clters reason adding projections port-full clters clters enhanced group destination source pre cxes database cross-producting avoid redundant computation destination source pre matches wenow build single grid-of-tries structure enhanced group port-free clter port associate additional bit called overlap bit set overlaps clter clter database bit false port-free clter compute storedfilter cost port-free clter destination source celds pre cxes celds packet start grid-of-tries search usual begin cnding matching pre bmp destination celd source trie bmp clter bmp port overlap output cost clter stop perform normal grid-of-tries search starting bmp initialize overlap bit overlap arrive node port-free clter stored update cost clter set overlap maxfoverlap overlapg search group ends overlap temporary variable cost clter non-nil output clter terminate search overlap cost clter variable nil initiate crossproducting search modify normal cross-producting search matching pre source address matching pre clters destination celd pre packet destination hard show modi ccation preserves correctness matching pre bmp destination celd bmp source pre node grid-of-tries search terminated claim bmp matching pre source celd clters destination celd compatible repeat matching pre computation destination source addresses perform pre computation remaining celds protocol type port numbers concatenate matching precx cross-product term hash cross-product table exists output clter stored search algorithm linear search port-full clters search cnishes add entry cross-product table recall fully speci ced clters celds full speci ced commonly reserving voice video bandwidth combination scheme allocate clters port-full set require cross-producting search clters greatly increase number cross-products reduce bectiveness cross-product cache assume destination source celds clters pre cxes port numbers wild cards ranges simple trickisto place clters set handled single hash celds search fall back cross-producting search match terminate match fully speci ced set precompute matching clter net result combined scheme process packets map destination clters havenooverlap clters time equal lookup memory accesses multibit process packets map destination-source clters overlap time equal lookups grid-of-tries memory accesses process packets map fully speci ced clters hash total memory accesses cnish clters port number celd lookups hash cross-product table total memory accesses cross-product cached cross-product table corresponds clters port-full fully speci ced sets hope small number crewall clters good caching performance remaining clters note combination schemes instance hardware scheme implement planes extended grid-of-trie search parallel extended grid-of-tries handle port number ranges clters port number ranges handled small additional content addressable memory cam implementation measurements implementation platform wechose mhz pentium system cost dollars running windows kbytes cache cache line size bytes results similar run comparable platforms alpha tool called vtune access dynamic instruction counts cache performance clock cycles short program segments evaluations gridof-tries scheme cross-producting cnish implementation combined scheme provide estimates performance combined scheme grid-of-tries implementation measurements report worst case time simple gridof-tries implementation process destination-source clters implementation multibit sampling bits time destination trie source started bit trie node bit trie nodes yields worst case memory accesses easily source bits time yield worst case memory accesses increases storage destination-source filters vtune mhz pentium measured worst case path taking nsec memory access time nsec clock tickinterval nsec numbers single lookup reported nsec roughly corresponds lookups destination-source clters appears optimal hard cnd lowest cost matching clter faster individual matching pre source destination addresses memory required clters mbytes time construct entire data structure seconds general filters built plane grid-of-tries handle general clters section fully speci ced port numbers layer databases started publically database pure destination pre cxes entries added entries specialize entries experiment publicly maeeast database pre cxes randomly chose destination pre cxes create clters pre chosen clters added whichwere form tcp tcp tcp source pre cxes chosen randomly set pre cxes destination pre maeeast clters generated number clters form varied clters generated eachchosen destination pre port numbers generated randomly table obtained distribution clters pure destination pre clters specialized made cve clters tcp clters cve tcp clters cve tcp clters original destination pre total adds twenty clters filters memory build time worst case search sec plane sec table planes grid-of-tries implementation measurements mhz pentium worst case time plane grid-of-tries search measured vtune usec plane total usec number plane slightly measured number single grid-of-tries search additional hash port number celds section cross-producting implementation measurements expect cross-producting small clter databases arbitrary port number ranges crewall database test cross-producting crewall clters generated based clter database sample crewall database create larger databases added similar clters base clter database maintaining ratio number distinct longest matching pre cxes celd total number pre cxes celd note longest matching pre source destination celds found byany technique amultibit trie approach port lookups implemented full arrays note cnal cross-product table main memory structures individual celds small database cache cnal cross-product table implemented array hash table simple cross-producting small clter sets case cnal table implemented array looked index concatenation indexes returned individual column lookups databases clters ondemand cross-producting essential on-demand crossproducting reduce memory cnal cross-product table hash table number memory average worst case time cross-product search filters kbytes nsec nsec on-demand on-demand table cross-producting implementation measurements mhz pentium worst case time measurement vtune based clock cycle counts ifl access delay fromthe cache nsec worst case clter lookup time array cross-product table nsec hashing on-demand cross-producting worst case harder evaluate hash function gave collisions weexpect on-demand cache hit rate high cworst case cgure shown hashing on-demand assumes hash collisions cache hit cross-product table crewall databases destination source addresses full addresses pre cxes case destination source column lookups single hash memory accesses needed longest matching pre assuming clock cycle hash function clter resolution special case pre cxes worst case nsec whichistwice fast general case nsec conclusions wehave algorithms packet cltering gigabit speeds grid-of-tries solution scalable linear storage fast worst case time equal twoip lookups nsec pentium destination-source clters clters implement virtual private networks multicast forwarding eciently grid-oftries solution extended handle general clters high lookup border cost gateway sec protocol clters bgprunning allowing border port routers number ranges hand internet scale crossproducting solution millions networks fast lookup wide-area routing times scalability nsec cost small reduced fault-tolerance clters end-to-end communication predictable lookup internet 
times caching cross-products make storage manageable simple combined scheme grid-of-tries handle destination-source pure destination source clters weanticipate handle large majority clters packets matching clters terminate grid-of-tries search packets matching clter pure destination pre clter optimized terminate search destination trie address lookup fully speci ced clters telephony handled single extra hash cve celds finally remaining clters crewall clters handled on-demand crossproducting information initial grid-of-tries search prevent cross-producting step recomputing longest matching pre cxes destination source addresses based measurements individual components pentium estimate nsec lookup times packets map pure destination pre cxes nsec packets map destination-source clters nsec packets map fully speci ced clters nsec assuming hit cross-product cache packets map general clters hardware engines increased opportunities parallelism pipelining average packet size bits aworst case lookup time nsec million packets layer router gigabit link matching pre special case lowest cost matching clter surprising clter searchschemes generalizations pre searchschemes gridof-tries set pruning trees generalize trie schemes pre matching multidimensional range matching schemes generalize pre matching schemes based range matching rectangle search tuple search generalize binary search hash tables crossproducting generalization existing pre matching scheme specialized pre lookups future work wewould create clter lookup algorithms specialized important clter types grid-of-tries specialized dimensional clters benchmark clter databases compare lookup schemes hope trace-driven evaluation bectiveness on-demand cross-producting finally wehave made bort fast clter insertion issues bgp implementation instabilities add destination pre cxes order milliseconds rsvp reservations add clters order seconds importanttohave faster clter insertion algorithms work remains webelieve layer switching feasible high performance routers routers future forward based layer headers based celds routing header case applications qos routing firewalls virtual private networks large scale multicast require dexible form forwarding based multiple celds routing header techniques paper forwarding dexibility high performance acknowledgements observation protocol celd eliminated cases interest due hari adiseshu wewould hari initial discussions led gridof-tries scheme zubin dittta eatherton jon turner valuable discussions bailey pathfinder proceedings osdi bradner generation routers overview proc networld interop chapman zwicky building internet firewalls reilly associates chazelle lower bounds orthogonal range searching reporting case acm chazelle lower bounds orthogonal range searching arithmetic model acm cheswick bellovin firewalls internet security addison-wesley decasper dittia parulkar plattner router plugins software architecture generation routers proc acm sigcomm sep deering hinden internet protocol version ipv speci ccation rfc http fds internic net frfc frfc txt degermark brodnik carlsson pink small forwarding tables fast routing lookups proc acm sigcomm october digital electronics corporation dec alpha http fwww dec engler kaashoek dpf fast flexibible message demultiplexing dynamic code generation proceedings acm sigcomm august intel pentium processor pentium intel vtune performance measurement tool intel fdesign fperftool fvtune labovitz malan jahanian internet routing instability proc acm sigcomm october lakshman stiliadis high speed policy-based packet forwarding ecient multidimensional range matching proc acm sigcomm sept lampson srinivasan varghese lookups multiway multicolumn search proc infocom march mccanne jacobson berkeley path finder proc winter usenix mckeown izzard mekkittikul ellersick horowitz tinytera packet switch core ieee micro jan ffeb mcquillan layer switching data communications october merit ipma statistics nic merit newman minshall huston switching gigabit routers ieee communications magazine january nilsson karlsson fast address look-up internet routers proceedingsof ieee broadbandcommunications april partridge locality route caches nsf workshop internet statistics measurement analysis san diego usa february preparata shamos computational geometry introduction springer-verlag york samet design analysis spatial data structures addison-wesley suri varghese waldvogel srinivasan layer switching rectangle tuple search preparation srinivasan george varghese faster lookups controlled pre expansion proc acm sigmetrics june torrent systems http fwww torrent tsuchiya search algorithm table entries non-contiguous wildcarding unpublishedreport bellcore turner design gigabit atm switch proc hosts cost arises bgp hides topological details interests scalability policy enforcement information traffic conditions damps routing updates potential problems arise prevent large-scale oscillations result bgp fault recovery mechanisms minutes routes converge consistent form times path outages lead significant disruptions communication lasting tens minutes result today internet vulnerable router link faults configuration errors malice week problem affecting connectivity provided internet service providers isps resilient overlay networks rons remedy problems distributed applications layer resilient overlay network underlying internet routing substrate nodes comprising ron reside variety routing domains cooperate forward data behalf pair communicating nodes ron independently administrated configured routing domains rarely share interior links generally fail independently result underlying topology physical path redundancy ron find paths nodes wide-area routing internet protocols bgpcannot main goal ron enable group nodes communicate face problems underlying internet paths connecting ron detects problems aggressively probing monitoring paths connecting nodes underlying internet path path ron node involved forwarding path internet path ron forward packet ron nodes practice found ron route failures intermediate hop ron nodes exchange information quality paths routing protocol build forwarding tables based variety path metrics including latency packet loss rate throughput ron node obtains path metrics combination active probing experiments passive observations on-going data transfers implementation ron explicitly designed limited size fifty nodes facilitate aggressive path maintenance probing excessive bandwidth overhead cci aros utah cmu lulea mit cable cisco cornell nyu cable dsl pdi mazu figure current sixteen-node ron deployment sites universities usa european universities shown broadband home internet hosts connected cable dsl located isp corporations usa ron recover problems underlying internet seconds minutes goal ron integrate routing path selection distributed applications tightly traditionally integration includes ability consult applicationspecific metrics selecting paths ability incorporate application-specific notions network conditions constitute fault result rons variety ways multimedia conferencing program link directly ron library transparently forming overlay participants conference loss rates delay jitter applicationobserved throughput metrics choose paths administrator ron-based router application form overlay network multiple lans overlay vpn idea extended develop overlay isp formed linking ron points presence traditional isps buying bandwidth ron routing machinery overlay isp provide resilient failure-resistant internet service customers goal ron provide framework implementation expressive routing policies govern choice paths network ron facilitates classifying packets categories implement notions acceptable enforce forwarding rate controls paper describes design implementation ron presents experiments evaluate ron good idea conduct evaluation demonstrate benefits ron deployed working sixteen-node ron sites sprinkled internet figure ron client experiment resilient forwarder compare connections pairs nodes running ron running straight internet collected weeks worth experimental results path outages performance failures present detailed analysis separate datasets twelve nodes measured march sixteen nodes measured datasets found ron route significant outages implementation takes seconds average detect route path failure face active denial-of-service attack path found benefits quick fault detection successful recovery realized public internet depend existence non-commercial private networks internet backbone interconnects educational institutions ability determine enabled ron policy routing feature expression implementation sophisticated policies determine paths selected packets found ron successfully routed performance failures loss probability improved samples end-to-end communication latency reduced samples tcp throughput doubled samples addition found cases ron loss latency throughput-optimizing path selection mechanisms chose paths nodes suggesting application-specific path selection techniques practice noteworthy finding experiments analysis cases forwarding packets intermediate ron node sufficient recovering failures improving communication latency related work knowledge ron wide-area network overlay system detect recover path outages periods degraded performance seconds ron builds previous studies quantify end-to-end network reliability performance ip-based routing techniques fault-tolerance overlay-based techniques enhance performance internet performance studies labovitz combination measurement analysis show inter-domain routers internet tens minutes reach consistent view network topology fault primarily routing table oscillations bgp complicated path selection process find period delayed convergence end-to-end communication adversely affected fact outages order minutes active tcp connections connections established state outstanding data terminate tcp receive acknowledgment outstanding data find part convergence delays fixed deployed bgp implementations long delays temporary oscillations fundamental consequence bgp path vector routing protocol paxson probe experiments show routing pathologies prevent selected internet hosts communicating time averaged long time period percentage improved time labovitz find examining routing table logs internet backbones considered routes time routes time find path outages minutes repair heavy-tailed duration recently chandra find active probing detected failures seconds hours minutes failure durations heavy-tailed long seconds repaired findings augur mission-critical services require higher degree end-to-end communication availability detour measurement study made observation paxson data collected times path selection wide-area internet suboptimal standpoint end-to-end latency packet loss rate tcp throughput study showed 
potential longterm benefits detouring packets node comparing long-term average properties detoured paths internetchosen paths network-layer techniques work performance-based faulttolerant routing single routing domain practical mechanisms wide-area internet recovery outages badly performing paths lacking today wide-area bgprouting based largely hop-counts early arpanet routing dynamic responding current delay utilization network arpanet evolved delayand congestionbased distributed shortest path routing algorithm diversity size today decentralized internet necessitated deployment protocols perform aggregation fewer updates result unlike interior routing protocols bgprouting optimizes scalable operation treating vast collections subnetworks single entity global routing purposes bgpis summarize aggregate enormous amounts routing information format scales hundreds millions hosts prevent costly route oscillations bgpexplicitly damps routes aggregation damping provide good scalability interfere rapid detection recovery faults occur ron handles leaving scalable operation underlying internet substrate moving fault detection recovery higher layer overlay capable faster response worry scalability oft-cited solution achieving fault-tolerant network connectivity smallor medium-sized customer multi-home advertising customer network multiple isps idea outage isp leave customer connected solution generally achieve fault detection recovery seconds degree aggregation achieve wide-area routing scalability limit size routing tables isps accept routing announcements fewer contiguous addresses netblock small companies fault-tolerance require large address block effectively multi-home alternative provider-based addressing organization addresses multiple providers requires handling distinct sets addresses hosts unclear on-going connections address set seamlessly switch failure model overlay-based techniques overlay networks idea fact internet developed overlay telephone network internet overlays designed past purposes including providing osi network-layer connectivity easing multicast deployment mbone providing ipv connectivity -bone x-bone recent infrastructure project designed speed deployment ip-based overlay networks management functions mechanisms insert packets overlay support fault-tolerant operation application-controlled path selection overlay networks designed efficient fault detection recovery designed end-to-end performance detour framework motivated potential long-term performance benefits indirect routing in-kernel packet encapsulation routing architecture designed support alternate-hop routing emphasis high performance packet classification routing ip-in-ip encapsulation send packets alternate paths ron shares detour idea routing nodes work differs detour significant ways ron seeks prevent disruptions end-to-end communication face failures ron takes advantage underlying internet path redundancy time-scales seconds reacting responsively path outages performance failures ron designed application-controlled routing overlay ron closely tied application ron readily integrates application-specific path metrics path selection policies present analyze experimental results real-world deployment ron demonstrate fast recovery failure improved latency loss-rates short time-scales alternative design ron generic overlay infrastructure x-bone port standard network routing protocol ospf rip low timer values improve resilience internet communications reasons reliable low-overhead outage detection module required distinguish packet losses caused congestion error-prone links legitimate problems path generic network-level routing protocols utilize application-specific definitions faults content delivery networks cdns overlay techniques caching improve performance content delivery specific applications http streaming video functionality provided ron ease future cdn development providing routing components required services design goals design ron seeks meet main design goals failure detection recovery seconds tighter integration routing path selection application iii expressive policy routing fast failure detection recovery today wide-area internet routing system based bgpdoes handle failures network perspective define kinds failures link failures occur router link connecting routers fails software error hardware problem link disconnection path failures occur variety reasons including denial-of-service attacks bursts traffic high degree packet loss high variable latencies applications perceive failures ways outages performance failures link failures extreme path failures outages average packet loss rate sustained period minutes high higher causing protocols including tcp degrade orders magnitude performance failures extreme throughput latency loss-rates degrade factor bgptakes long time order minutes converge valid route link failure outage contrast ron goal detect recover outages performance failures seconds compounding problem ip-layer protocols bgpcannot detect problems packet floods persistent congestion links paths greatly degrade end-to-end performance long link deemed live bgp session sigcomm october waldvogel varghese turner plattner scalable high speed routing lookups proc sigcomm october zhang rsvp resource reservation protocol ieee networks magazine sept 
alive bgp as-pathbased routing continue route packets faulty path path provide adequate performance application mbps bbnqwest uunet mediaone mbps mbps private peering mbps mbps cable modem private peering mbps arosnet utah mitvbns internet figure internet interconnections complex dotted links private announced globally tighter integration applications failures faults application-specific notions network conditions fatal application acceptable adaptive instance udp-based internet audio application good packet-level error correction work loss rates larger loss rate bulk transfer application tcp continue work tcp adaptation mechanisms albeit lower performance loss rates tcp essentially unusable times packets ron applications independently define react failures addition applications prioritize metrics latency throughput low loss latency path selection construct metrics select paths routing system optimize metrics simultaneously path one-second latency throughput path degree latency unacceptable interactive application ron goal applications influence choice paths single metric plan explore multi-criteria path selection future expressive policy routing policy routing enforcement acceptable policies today approaches primitive cumbersome instance bgpis incapable expressing finegrained policies aimed users hosts lack precision reduces set paths case failure inhibits innovation carefully targeted policies end-to-end per-user rate controls enforcement acceptable policies aups based packet classification rons typically run powerful end-points well-suited providing fine-grained policy routing figure shows as-level network connectivity ron hosts full graph hosts traverses autonomous systems figure hint considerable underlying path redundancy internet reason ron works shows situations bgp blunt policy expression inhibits fail-over aros-uunet connection failed users aros unable reach mit authorized utah network resources impossible announce bgp route users utah-mit link completely private external probes data node node performance database node probes forwarder router probes forwarder router probes forwarder router conduits conduits conduits figure ron system architecture data enters ron ron clients conduit entry node node ron forwarder consults router determine path packet sends node path selection entry node tags packet simplifying forwarding path nodes packet reaches ron exit node forwarder hands output conduit passes data client choose paths ron nodes monitor quality virtual links active probing passive observation ron nodes link-state routing protocol disseminate topology virtual-link quality overlay network design conceptual design ron shown figure simple ron nodes deployed locations internet form application-layer overlay cooperatively route packets ron node monitors quality internet paths nodes information intelligently select paths packets internet path nodes called virtual link discover topology overlay network obtain information virtual links topology ron node participates routing protocol exchange information variety quality metrics ron design supports routing multiple intermediate nodes results section show intermediate ron node sufficient 
time parts design focus finding paths single intermediate ron node software architecture program communicates ron software node ron client overlay network defined single group clients collaborate provide distributed service application group clients service-specific routing metrics deciding forward packets group design accommodates variety ron clients ranging generic packet forwarder improves reliability packet delivery multi-party conferencing application incorporates application-specific metrics route selection ron client interacts ron api called conduit client send receive packets data path node receives packet conduit classifies determine type path low-latency highthroughput node called entry node determines path topology table encapsulates packet ron header tags information simplifies forwarding downstream ron nodes forwards subsequent ron node simply determines forwarding hop based destination address tag final ron node delivers packet ron application called exit node conduits access ron functions send pkt dst ron node forward packet destination ron node ron direct internet path ron delivery udp best-effort unreliable recv pkt ron callback function called packet arrives client program callback invoked ron conduit matches type packet ron header set types preregistered client joins ron ron packet type demultiplexing field incoming packets basic ron functionality provided forwarder object implements functions timer registration callback mechanism perform periodic operations similar service network socket data availability client instantiate forwarder hand modules ron router ron membership manager ron router implements routing protocol ron membership manager implements protocol maintain list members ron default ron ron router membership manager modules clients ron routers membership managers exchange packets ron forwarding service direct paths feature system beneficial messages forwarded underlying paths fail routing path selection routing process building forwarding tables choose paths packets ron entry node control subsequent path selection traditional datagram networks node tags packet ron header identifier identifies flow packet belongs subsequent routers attempt flow path barring significant link tagging ipv flow helps support multi-hop routing speeding forwarding path intermediate nodes helps tie packet flow chosen path making performance predictable basis future support multi-path routing ron tagging entry node application maximum control network considers flow small size ron relative internet maintain information multiple alternate routes select path suits ron client client-specified routing metric default maintains information specific metrics virtual link latency packet loss rate iii throughput obtained bulk-transfer tcp connection end-points virtual link ron clients override defaults metrics ron library constructs forwarding table pick good paths router builds forwarding tables combination policy routing chosen routing metric link-state dissemination default ron router link-state routing protocol disseminate topology information routers turn build forwarding tables node -node ron virtual links node router periodically requests summary information performance metrics nodes local performance database disseminates view information ron forwarding mesh ensure routing information propagated event path outages heavy loss periods ron routing protocol ron client well-defined ron packet type leads attractive property time ron router incomplete information paths ron ron nodes unavailable path evaluation selection ron routers algorithm determine path alive set algorithms evaluate potential paths responsibility metric evaluators provide number quantifying good path metric numbers relative compared numbers evaluator important aspects path evaluation mechanism data links combined single path formula evaluate path ron router implements outage detection determine virtual link node working active probing mechanism detecting loss probe normal low-frequency probing replaced sequence consecutive probes quick succession spaced seconds probes row elicit response path considered dead response subsequent higher-frequency probes canceled paths experiencing outages rated packet loss rate history path outage lose path experiencing outage frequency probing permit trade-off outage detection time bandwidth consumed low-frequency probing process section investigates default ron router implements routing metrics latency-minimizer loss-minimizer tcp throughput-optimizer latency-minimizer forwarding table computed computing exponential weighted moving average ewma round-trip latency samples parameter link latency estimate updated means current latency estimate based recent sample number similar values suggested tcp round-trip time estimator ron path latency sum individual virtual link latencies estimate loss rates ron average probe samples current average floyd found estimator ewma retains memory samples obtained distant past improve estimator unequally weighting samples loss metrics multiplicative path assume losses independent probability success entire path roughly equal probability surviving hops individually ron attempt find optimal throughput paths strives avoid paths low throughput good alternatives time-varying unpredictable nature bandwidth internet paths goal standpoint improving reliability path selection face performance failures avoiding bad paths important optimizing eliminate small throughput differences paths characterization utility received programs bandwidths determine good path selection threshold bandwidth reduction reduce utility programs threshold falls typical variation observed path time-scales tens minutes concentrate avoiding throughput faults order magnitude throughput-intensive applications typically tcp tcplike congestion control throughput optimizer focuses type traffic performance bulk tcp transfer function round-trip latency packet loss rate observes throughput optimization combines latency loss metrics simplified version tcp throughput equation upper-bound tcp throughput granularity loss rate detection throughput equation sensitive lower loss rates set minimum packet loss rate prevent infinite bandwidth prevent large route oscillations single packet losses formula one-way end-to-end packet loss probability end-to-end round-trip time estimated hop-by-hop samples non-linear combination loss round-trip time makes scoring difficult optimize standard shortest-path algorithms instance tcp throughput nodes node smaller tcp throughputs complicated search algorithms employed handle ron routing takes advantage resulting simplicity single-intermediate paths considered obtain throughput-optimized paths probe samples give two-way packet loss probability estimate one-way loss probability unrealistically paths assuming symmetric loss rates solving resulting quadratic equation assuming losses independent paths maximum absolute error one-way loss rate estimate occurs loss direction resulting error equal assuming minimum loss rate ensures choosing high-quality links loss rate estimate true large loss rates highly asymmetric loss patterns method disregard potentially good path reverse direction path high loss rate benefits avoiding high loss rate path outweigh cost missing good link intend remedy problem explicitly estimating one-way loss rates method throughput comparison equation faults instance slow unused bottleneck link path observe packet losses probes lost equation predict unreasonably high bandwidth estimate tackling send pairs probe packets estimate upper-bound link bandwidth noninvasive probes predict throughput oscillating rapidly multiple paths harmful applications sensitive packet reordering delay jitter evaluation metrics applies smoothing avoid flapping equal routes ron routers employ hysteresis based analysis snapshots ron node link-state table chose apply simple hysteresis bonus good route metrics simple method appears 
provide reasonable trade-off responsiveness underlying paths unnecessary route flapping performance database pdb callback metrics app metrics throughput loss latency performance database samples request callback client client probers pdb update pdb request system figure ron performance database make good routing decisions ron detailed performance information impractical send large performance histories participants ron reliable performance repository handle participants crash reboot rejoin ron measurement data noisy clients ways data instance outage detector packets successfully seconds throughput improver interested longer-term packet loss average system flexible summarization mechanism support requirements ron node local group nodes separate performance database store samples figure database generalization spand supporting data types summarization mechanisms sources information clients agree class data meaning values inserted database probes insert data database calling pdb update class src dst type src dst fields addresses sampled data policy routing ron users administrators define types traffic allowed network links traditional internet policy routing type typically defined packet source destination addresses ron generalizes notion include information packet ron separates policy routing components classification routing table formation packet enters ron classified policy tag tag perform lookups set routing tables ron router separate set routing tables constructed policy re-running routing computation removing links disallowed policy routing computation computes shortest path ron node nodes metric construction applies multi-hop single-hop indirection standard shortest-paths algorithm work metrics specifically tcp throughput implementation section specific single-hop indirection result running table construction multi-level routing tables shown figure construction routing tables production packet tags facilitated policy classifier component policy classifier produces permits function determines policy allowed virtual link conduit-specific data classifier module helps ron node decide policy incoming packet packets commercial site allowed internet educational backbone received packet site mit ron node data classifier hop dst policy demux routing lookup routing pref demux router forwarder hop netfrom net figure forwarding control data paths forwarder passes packet header routing table checkes valid flow cache entry exists performs levels lookups level based policy type based routing preference hash lookup hops indexed destination flow version hop limit routing flags ron source address ron destination address source port dest port packet type policy tag figure ron packet header routing flags flow set input conduit packet type demultiplexing key indicating conduit protocol receiver module determine policy set tag packet subsequent ron nodes examine policy tag reclassifying packet designed policy mechanisms exclusive cliques general policies exclusive clique data originating destined members clique traverse interclique links mimics instance educational policy internet backbone policy classifier takes list networks subnet masks match general policy component powerful accepts bpf-like packet matcher list links denied policy returns policy matches packet fields stored bpf-based information address policy composition users create composed versions policies general policy component section discuss abuse aups network transit policies data forwarding forwarder ron node examines incoming packet determine destined local client remote destination requires delivery forwarder passes ron packet header routing table shown figure ron packet header shown figure inspired design ipv ron support simply ip-in-ip encapsulation ron header ron fragment packets inform applications exceed maximum transmission unit mtu ipv applications perform end-to-end path mtu discovery ron policy tag interpreted forwarders decide network routing policies apply packet packet destined local node forwarder packet type field demultiplex packet ron client packet flow valid flow cache entry forwarder short-cuts routing process entry routing table lookup occurs stages stage examines policy tag locates proper routing preference table routing preference table policy tag policy adherence supersedes routing preferences lookup procedure examines routing preference flags find compatible route selection metric packet flags examined flag understood router directs packet table ron routers understand basic system metrics latency loss throughput shared ron environment support users client-defined metrics provide good default metrics lookup routing preference table leads hash table next-hops based destination ron node entry next-hop table returned forwarder places packet network destined hop bootstrap membership management addition allowing clients define membership mechanisms ron system membership managers simple static membership mechanism loads peers file dynamic announcement-based soft-state membership protocol bootstrap dynamic membership protocol node identity peer ron node neighbor broadcast existence flooder special ron client implements generalpurpose resilient flooding mechanism ron forwarder main challenge dynamic membership protocol avoid confusing path outage node left ron node builds periodically minutes average implementation floods nodes list peer ron nodes node heard peer sixty minutes assumes peer longer participating ron observe mechanism nodes ron non-functioning direct internet path long periods time long path ron nodes left overhead broadcasting minuscule compared traffic caused active probing routing updates limited size ron resulting robustness high node receives copies peer list node redundancy node deleted node view ron node genuinely partitioned hour node ron ron node re-bootstrap well-known peer long partition implementation ron system implemented user-level flexible set libraries user-level ron clients link client pick choose components suits provide specific client ron library describe implementation resilient forwarder forwarder improves packet delivery modification transport protocols applications running end-nodes architecture resilient forwarder shown figure ron udp forward data tcp reliable byte-stream mismatched ron clients ip-based encapsulation divert socket routing pref demux latency loss hop dst udp type demux local data protocols conduits recv send policy demux vbns defaultrouter route lookup flags policy conduit fragment classify encapsulate local forwarder raw socket icmp emit outbound freebsd networking ron nodes fromlocal site figure resilient forwarder packets enter system freebsd divert sockets handed ron forwarder hop packet arrives destination conduit writes packet local raw socket re-enters processing restrict application-specific forwarding capabilities ron core services run special kernel support elevated privileges conduit entry node client gateway ron classifies packet classification clientspecific labels packet information decides routing metric route packet ron forwarder conduit label dns http traffic latency-sensitive ftp traffic throughput-intensive downstream ron forwarders routing metric packet type non-entry ron nodes route packet based attached label destination packet design ensures clientand application-specific routing functions occur entry exit conduits forwarding inside ron independent client-specific logic addition reducing per-packet overhead intermediate nodes localizes client-specific computation required packet means ron node implementing forwarder participate overlay conferencing application improve reliability data delivery conference conference node conduits implement application-specific methods label packets forwarder routing metrics conference packets forwarder implemented resilient forwarder freebsd divert sockets 
automatically send traffic ron emit end resilient forwarder classification encapsulation decapsulation packets special conduit called conduit top figure routers ron routers implement router virtual interface single function call lookup pkt mypkt ron library trivial static router dynamic router routes based metric optimizations dynamic router extensible linking set metric descriptions metric descriptions provide evaluation function returns score link list metrics routing table generate propagate implementation routing table creation specific single-hop indirection eliminates flow cache algorithm fills multi-level routing table bottom figure makeroutingtable policies metrics peers foreach policies foreach metrics foreach peers foreach peers permitsa permitsa evala table implemented clique classifier discussed section implementing general policy classifier provide classifiers resilient forwarder monitoring virtual links record success rtt node node binitial ping response response time time time time record success rtt figure active prober probing mechanism packets participants rtt sample requiring synchronized clocks ron node -node ron monitors virtual links randomized periodic probes active prober component maintains copy peers table probe time field peer field expires prober sends small udp probe packet remote peer probe packet random -bit process prober shown figure node receives initial probe request peer sends response peer resets probe timer peer originating node sees response sends response back peer sides reachability rtt information packets probing protocol implemented ron client communicates performance database implemented standalone application running berkeley backend simple udp-based protocol ron successfully detect recover complete outages periods sustained high loss rates ron takes seconds average route failure face flooding attack ron successfully routed bad throughput failures doubling tcp throughput samples samples ron reduced loss probability single-hop route indirection captured majority benefits ron deployment outage recovery latency optimization table major results measurements ron testbed evaluation goal ron system overcome path outages performance failures introducing excessive overhead failure modes section present evaluation ron meets goals evaluate performance resilient forwarder ron outage detection loss latency throughput optimization evaluation main parts study ron ability detect outages recover quickly investigate performance failures ron ability improve loss rate latency throughput badly performing paths finally investigate important aspects ron routing showing effectiveness one-intermediate-hop strategy compared general alternatives stability rongenerated routes table summarizes key findings methodology results experiments wide-area ron deployed internet sites paths hosts -site ron deployment table shows location sites experiments analyze distinct datasets nodes distinct paths nodes distinct paths traceroute data shows traversed distinct inter-as links inter-as links traversed scaling path diversity suggests small numbers confederating hosts expose large number internet paths examination claim experiments results typical representative deployment present analyze demonstrate kinds gains realize rons host sites internet -connected educational sites found high-speed experimental network presents opportunities path improvement public internet demonstrate policy routing module works make measurements closer internet hosts general observe measurements reported policy prohibited sending traffic commercial sites internet instance packet travel utah cornell nyu arostoutahto nyu consistent aup internet precludes commercial traffic result measurements path improvements involving commercial site description aros isp salt lake city cci salt lake city cisco-ma waltham cmu pittsburgh cornell ithaca lulea lulea sweden ma-cable mediaone cable cambridge mit cambridge ca-t foster city nyu york utah salt lake city vu-nl vrije univ amsterdam netherlands additional hosts dataset or-dsl dsl corvallis nc-cable mediaone cable durham pdi palo alto mazu boston table hosts sixteen-node ron deployment study detail determine effectiveness ron practice asterisks universities internet backbone european universities lulea vu-nl classified non-internet commercial links reliable internet links raw measurement data paper consists probe packets throughput samples traceroute results probe ron node independently repeated steps pick random node pick probe-type round-robin selection send probe node delay random time interval seconds characterizes paths analyze million packet departure arrival times collected hours march march produces million individual rtt one-way loss jitter data samples calculated time-averaged samples averaged -minute duration throughput samples mbyte bulk transfers seconds whichever sooner recording time power worth data duration transfer data collected hours consists million packet arrival departure times space constraints present path outage analysis performance failure results similar ron hosts intel celeron -based machines running freebsd ram disk space processing capability host bottleneck wide-area experiments measurement data http nms lcs mit ron overcoming path outages precisely measuring path outage harder possibility define outage length time packets path yardstick ranges time tcp implementations time shut connection vary seconds hosts study number samples averages large expect hosts continually present details documentation accompanying data solaris versions seconds bsds metric characterizes batch applications fail experience users running interactive applications lower threshold declaring internet connectivity dead problem small time-scale definition robustly measuring differentiating high packet loss rate true disconnections hard distributed applications suffer case assert operationally define path outage length time packet lossrate larger threshold define observed packet loss rate averaged interval larger path values order minutes measured larger degrades tcp performance orders magnitude forcing tcp frequent timeout-based retransmissions minute avg internet loss rate minute avg ron loss rate samples overlapping points internet loss line ron loss line figure packet loss rate averaged -minute intervals direct internet paths ron paths dataset points horizontal line points abovea including overlapping points contrast ron loss optimizing router avoided failures experienced -minute loss-rate larger ron route situations figure shows scatterplot improvement loss-rate averaged achieved ron measurements identify outages points line parallel horizontal axis signifies condition bad kill applications points line parallel vertical axis scatterplot conceals data lowerleft corner revisit data form cdf figure section precise number times equal shown table statistics obtained calculating -minute loss-rate averages -hour subset packet trace involving communication paths count ron win time-averaged loss rate internet loss rate ron change ron loss analogously defined find number complete communication outages dataset means instances sampled paths loss rate numbers table number link routing failures observed internet sampled paths number failures lower multiple -minute averaged samples loss rate result problem higher time-averaged loss rate resulted multiple link outages minutes emphasize internet paths improve non-internet connection performance fact vast majority problems corrected ron involved commercial internet connections shown brackets number outages remove internet paths consideration loss rate ron win change ron loss table outage data ron win means loss rate direct internet path ron loss rate numbers brackets show contribution total outage number 
eliminating typically reliable internet paths reflects public internet numbers percentage outages table noticeably higher showing variability path reliability internet today -minute samples samples loss rate ron win change ron loss table outage data results show ron offers substantial improvements large fraction outages infallible picking path lower outage rates ron outage detection path selection machinery successfully route outage situations revealing suggests outages edge links connecting site internet path diversity allowed ron provide connectivity outage situations overcome remaining due individual sites unreachable site ron situation ron made things worse loss direct direct outage ron packet success rate packet success rate minute avgs time cisco world cisco mit worst ron loss figure lower figure shows outage ciscoma places internet notch represents -minute loss rate sample notches horizontal axis bottom show -minute outage ron route outage cisco-ma packet loss rate mit unaffected time view data observe total path hours represented path-hours complete outage loss rate hours tcp-perceived outage loss rate ron routed situations similarly represents path-hours path-hours complete outage hours tcpperceived outage ron route path-hours complete outage ath-hours tcp-perceived outage amounting complete outages tcpperceived outages encountered numerous outages shorter duration typically minutes consistent bgp detection recovery time scales recover faster outage recovery figure shows -minute interval packets made cisco-ma internet notice notches horizontal axis lower figure ron sites site connectivity time mit ron detect successfully route packets cisco-ma commercial ron sites combination internet policy consideration single-hop indirection meant ron provide connectivity cisco-ma non-mit educational institutions paths cisco-maa mita cmu precluded policy valid paths cisco-maa mita nc-cablea cmu considered long overhead outage detection time implementation resilient forwarder adds rate direct path almost-partitioned site loss rate fraction samples difference ron non-ron loss rate latency loss tradeoffs improve loss rate loss optimized latency optimized figure cumulative distribution function cdf improvement loss rate achieved ron samples detect unidirectional loss averaged intervals microseconds latency packet delivery increases memory bandwidth required forward data overhead primarily due divert sockets obtain data envision untuned prototype high-speed links capable forwarding mbps frequency routing probing updates leads tradeoff overhead responsiveness path failure protocol shown figure ron probes node seconds random jitter toa extra seconds average time probes seconds probe returned seconds lost ron node sends routing update ron node seconds average implementation values seconds seconds seconds probe loss occurs probe packet immediately maximum quick probes consecutive probe losses path process detects outage minimum seconds scheduled probe outage occurs maximum seconds average outage detection time seconds sending packets node introduces potential failure coupling communicating nodes indirect node present ordinary internet communications avoid inducing outages nodes crashing offline ron responsive detecting failed peer recovering remote virtual-link failure indirect host destination requires indirect host detect virtual link failure send routing update assuming small transmission delays single remote virtual-link failure takes average additional amount time seconds average total seconds high packet loss rates internet paths hosts multiple virtual-link failures increase duration time detect failed path suggests passive monitoring in-use links improve single-virtual-link failure recovery case considerably traffic flowing virtual link treated probes ron probe packets bytes long probe traffic figure received node -node ron abouta bytes sec ron routing traffic bytes header information bytes information describe path peer node sees bytes sec routing traffic bandwidth consumed traffic ron sizes default timer intervals shown nodes nodes nodes nodes nodes kbps kbps kbps kbps kbps ron nodes kbps active probing overhead recovery seconds combining probing routing traffic delaying updates consolidate routing announcements sending updates virtual link properties change past threshhold reduce amount overhead traffic growth total traffic caused guarantee virtual links ron monitored overhead reasonable classes applications require recovery failures seconds kbps typically bandwidth today broadband internet links cost achieving benefits fault recovery ron developing techniques preserve recovery times consuming bandwidth handling packet floods measure recovery time controlled conditions evaluate effectiveness ron routing flood-induced outage conducted tests utah network emulation testbed intel piii mhz machines quiescent mbps switched ethernet intel etherexpress pro interfaces network topology emulated hosts connected triangle kbps latency links pair indirect routing node latencies made preferable direct path figure shows receiver-side tcp sequence traces bulk transfers leftmost trace uninterrupted tcp transfer finishes seconds middle trace shows transfer running ron flooding attack beginning seconds ron recovers quickly taking seconds reroute connection node connection proceeds consistent expectation recovery seconds rightmost trace horizontal dots shows non-ron tcp connection flooding attack tcp traffic slow rate bgp marked link analysis stability bgp congested networks suggests bgp recovery times order magnitude larger ron bgp route change simply end carrying flooding traffic links opinion overhead necessarily excessive packets today internet tcp acknowledgments typically tcp data segment overhead packets reliability congestion control similarly ron active probes viewed overhead achieve rapid recovery failures tcp sequence time successful tcp packet tcp flood tcp ron flood tcp figure receiver-side tcp sequence trace connection rerouted ron flooding attack primary link ron recovers seconds ron connection unable packets crawl link technically working flooding direction direction forward data traffic ron routed returning ack traffic flooded link bgp declared link dead eliminated perfectly usable reverse link experiment shows advantage independent client-specific nature ron dealing friendly traffic ron route avoid re-routing flooding traffic general bgp route change overcoming performance failures section analyze detail improvements loss-rate latency throughput provided ron mention higher-order improvements observed loss rate figure summarizes observed loss rate results previously shown scatterplot figure cdf ron improved loss rate time improvement loss rate absolute terms substantial applications tcp closer analysis found outage detection component ron routing instrumental detecting bad situations promptly triggering path figure shows ron improve performance tiny noticeable portion cdf left region showing ron make loss rates worse reasons ron longer-term average packet loss rate determine low-loss routes mispredict period link loss rates change importantly ron router bi-directional information optimize uni-directional loss rates instance found path mit cci highly asymmetric loss rate led significant improvements due ron mita cci path infrequent occurrences loss rate ccia mit path made worse ron modify loss-rate estimator explicitly monitor uni-directional loss rates samples experienced improvement loss rate latency fraction samples latency rondirect ron overhead increases latency fast paths ron improves latency tens hundreds slower 
paths figure -minute average latencies direct internet path ron shown cdf -min avg internet latency -min avg ron latency samples figure data figure dots line signify cases ron latency lower direct internet latency clustering banding samples shows latency improvements shown figure host-host pairs figure shows cdf five-minute-averaged roundtrip latency samples collected communicating paths bold ron line generally dotted internet line showing ron reduces communication latency cases additional hop user-level encapsulation ron improves latency tens hundreds milliseconds slower paths averaged samples improvements figure shows data scatterplot internet round-trip latencies direct internet paths points scatterplot clustered bands showing improvements achieved node pairs times shows improvements figure small number paths averaged samples improvements long outages ron find paths direct path non-existent eliminated samples tcp throughput ron improves tcp throughput communicating nodes cases ron throughput-optimizing router attempt detect change routes obtain small throughput underlying internet throughput stable paths seeks obtain improvement throughput ron path compare throughput-optimized ron path direct internet path repeatedly sequential throughput samples ron paths compared ratio average throughput achieved ron average throughput achieved directly internet figure shows distribution ratios paired quartets throughput samples received direct-path throughput ron samples doubled throughput fact samples increased throughput factor samples improved factor periods intermittent internet connectivity failures fraction samples ratio ron throughput direct throughput logscale increase ron samples decrease ron samples samples figure cdf ratio throughput achieved ron achieved directly internet shown samples ron markedly improved throughput near-outage conditions ron routing behavior instrumented ron node output link-state routing table seconds average random jitter avoid periodic effects analyzed -hour time-series trace individual snapshots table pairwise routes ron path lengths outage results show ron single-hop indirection worked avoiding problematic paths problem direct internet path nodes link highly congested working long ron node internet path internet path ron single-hop indirection suffice paths ron nodes traverse paths ron node traverse ron overcome outage intersection set nodes ron reachable traversing set nodes ron reached traversing null single-hop indirection overcome failure found underlying internet topology connecting deployed ron nodes redundancy faults occur solitary edge link connecting site internet intersection sets non-null noted section policy routing make links unusable consideration longer paths provide recovery single-hop indirection suffices latency-optimizing ron found comparing single-hop indirection general shortest-paths algorithm link-state trace direct internet path provided average latency time addition remaining time ron overlay routing involved shortest path involved intermediate node essentially time simple idealized model explanation source node destination node ron nodes denote probability lowest-latency path node node ron direct internet path similarly denote bya probability lowest-latency path node ron direct link connecting show small values probabilities independence assumptions justufiable ron nodes lead intermediate hop providing lowest-latency paths time probability single-intermediate ron path optimal latency direct path optimal happen nodes direct-internet shortest path implies probability direct path single-hop intermediate path optimal path case making probability close fact small values happen optimal path direct path intermediate ron hop probability made arbitrarily close suitable ron route stability dynamic measurement-based routing system ron creates potential instability route flapping simulated ron path selection algorithms link-state trace investigate route stability column table shows number path occurred function hysteresis triggering path change columns show persistence ron route obtained calculating number consecutive samples route remained unchanged average time samples seconds median run-length hysteresis seconds sampling frequency link-state information preclude undetected interim longer run-lengths reasonable stability good probability hysteresis values provide good trade-off stability responsiveness random process row shows expected number route routes flapping random application-specific path selection analyze effects no-internet policy considered latency optimization outage avoidance hysteresis avg med max random process table number path run-lengths routing persistence hysteresis values situations ron latencyloss- throughput-optimizing routers pick paths ron find lower-latency path cci ma-cable times loss rate cci ma-cable mit cisco-ma direct loss loss lat-opt loss loss loss-opt loss contrast mit cisco-ma ron latency optimizer made latency worse outage detector triggered frequently loss-optimizing router reduced loss rate significantly cost five-fold increase latency existence trade-offs frequently occur global internet lack single obvious optimal path reinforces belief flexible application-informed routing system benefit applications discussion section discusses common criticisms rons relating routing policy scalability operation network address translators nats firewalls ron creates possibility misuse violation aups bgp transit policies ron flexible policy mechanism users implement network policies permitted bgp rons deployed small groups cooperating entities find backdoors networks permission authorized user network users violate network policy today dealt human level remain unchanged ron deployment positive side overlay isp buys bandwidth traditional isps routes data ron express enforce sophisticated policy routes preventing misuse established ron requires cryptographic authentication access controls implemented participating ron implies trust participants forward data correctly abuse forwarding rons small consequences forming ron malicious entity resolved administrative technological level widespread deployment rons require mechanisms detect misbehaving ron peers design present scales nodes assert important distributed applications benefit corporation tens sites world greatly improve reachability sites ron-based vpn expensive dedicated links multi-person collaborations smaller hundred participants ron-based conferencing application provide availability performance participants potential criticism ron work limited settings start widely popular shown paper ron design trades scalability improved reliability enables aggressive maintenance exploration alternate paths facilitating prompt outage detection recovery rons popular expect fundamental trade-off change expect rons co-existing competing internet paths understanding interactions investigating routing stability internet rons area future work nats problems ron problem relates naming host nat globally reachable address dns solve problem cache reply address port pair host nat ron node receives packet address globally visible ron address globally visible address porta receiving node creates entry reach ron node send port ron probe traffic suffice nat port-mapping entry alive problem posed nats hosts nats communicate directly ron perceive outage attempt route establish connectivity hosts result sub-optimal routing conclusion paper showed resilient overlay network ron greatly improve reliability internet packet delivery detecting recovering outages path failures quickly current inter-domain routing protocols ron works deploying nodes internet routing domains cooperatively route packets ron applicationlayer overlay network nodes ron monitor quality underlying internet information route packets application-specified routing metrics direct internet path ron nodes studied benefits ron evaluating datasets collected sixteen-node wide-area deployment found ron overcome hundred significant observed outages implementation takes seconds 
average detect recover fault significantly minutes bgprons overcome performance failures substantially improving loss rate latency tcp throughput badly performing internet paths noteworthy finding experiments forwarding packets intermediate ron node sufficient fault recovery latency improvements results suggest ron good platform variety resilient distributed internet applications developed addition ron platform researchers developing routing protocols test evaluate schemes real-world conditions acknowledgments grateful people institutions hosted ron sites biesele bot chang cutler finley jung larzon mazieres miller north pohlabel van renesse sanders shira sit jay lepreau group utah network emulation testbed david karger discussions ron john jannotti david tennenhouse shepherd sosp reviewers provided comments improved paper andersen resilient overlay networks master thesis massachusetts institute technology balakrishnan seshan stemm katz analyzing stability wide-area network performance proc acm sigmetrics seattle june chandra dahlin gao nayate end-to-end wan service availability proc usits san francisco clark policy routing internet protocols internet engineering task force rfc collins detour framework packet rerouting master thesis washington oct eriksson mbone multicast backbone communications acm floyd handley padhye widmer equation-based congestion control unicast applications proc acm sigcomm stockholm sweden sept goyal guerin rajan predicting tcp throughput non-invasive data unpublished http seas upenn guerin tcp model pdf guardini fasano girardi ipv operational experience bone proc internet society inet conf yokohama japan july http isoc inet cdproceedings htm hagens hall rose internet subnetwork experimentation osi network layer internet engineering task force feb rfc khanna zinky revised arpanet routing metric proc acm sigcomm austin sept labovitz ahuja bose jahanian delayed internet routing convergence proc acm sigcomm stockholm sweden september labovitz malan jahanian internet routing instability ieee acm transactions networking mccanne jacobson bsd packet filter architecture user-level packet capture proc winter usenix conference san diego jan north american network operators group mailing list archive http cctec maillists nanog padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation proc acm sigcomm vancouver canada september partridge flow label field ipv internet engineering task force rfc paxson end-to-end routing behavior internet proc acm sigcomm stanford aug paxson end-to-end internet packet dynamics proc acm sigcomm cannes france sept postel transmission control protocol internet engineering task force september rfc rekhter border gateway protocol bgpinternet engineering task force rfc savage anderson detour case informed internet routing transport ieee micro jan savage collins hoffman snell anderson end-to-end effects internet path selection proc acm sigcomm boston seshan stemm katz spand shared passive network performance discovery proc usits monterey december shaikh kalampoukas varma dube routing stability congested networks experimentation analysis proc acm sigcomm stockholm sweden touch hotz x-bone proc global internet mini-conference sydney australia nov 
